{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 160
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(2)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(4)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27464
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(5)"
	}
}, {
	"": "typename.size(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27992
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(6)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 184
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 352
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 520
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 688
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 856
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 1024
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1192
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1360
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1528
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1696
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42336
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43192
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(26)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44264
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(27)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44800
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(28)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45336
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(29)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45872
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(30)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46408
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(31)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1864
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 47256
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(32)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48104
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(33)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 2032
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48640
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49176
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49712
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(36)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50248
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(37)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50784
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(38)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 51480
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(39)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 52016
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(40)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 52712
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(41)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 2200
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53768
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 54296
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(44)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(44)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 54824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(45)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(45)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 55352
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(46)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(46)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 56040
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(47)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(47)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 56568
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(48)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(48)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 57256
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(49)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(49)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2368
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35264
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(13)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: uint8, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36128
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(14)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36992
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(15)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37848
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(16)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2536
	, "static": true
	, "const": true
}, {
	"": "variant.as(var: variant, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "variant"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "var"
		, "kind": "variable"
		, "cast": "var"
		, "name": "var"
		, "type": "variant"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 24984
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(1)"
	}
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2704
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2880
	, "static": true
	, "const": true
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3552
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3720
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x32 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x32 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4728
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 4896
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x32 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x32 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x64 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x64 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x128 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x128 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 5568
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 7080
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8048
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8552
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9040
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9528
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10016
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10504
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 11312
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 12472
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 13600
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 14728
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 16176
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 17624
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 18752
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 19880
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21008
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 22136
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 22624
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "emit.swz"
	, "kind": "typename"
	, "cast": "void"
	, "name": "swz"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 23112
	, "static": true
	, "const": true
}, {
	"": "emit.swz.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.swz"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "swz.p4x zwxy(4e)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "swz.p4x zwxy(4e)"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 24280
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 32176
	, "static": true
	, "const": true
	, "doc": "Report messages or raise errors."
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(11)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-2"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "13"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "13"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "14"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "14"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "15"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "15"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34560
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(12)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "typename"
	, "size": 0
	, "offs": 37896
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38560
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(17)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39104
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(18)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39480
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(19)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(20)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(21)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40768
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(22)"
	}
}, {
	"": "System.rand.max"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "max"
	, "owner": "System.rand(): int32"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41304
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(23)"
	}
}, {
	"": "System.clock.perSec"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "perSec"
	, "owner": "System.clock(): int32"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "val"
	, "name": "true"
	, "type": "bool"
	, "file": "cmplStd/stdlib.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "true"
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "val"
	, "name": "false"
	, "type": "bool"
	, "file": "cmplStd/stdlib.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "false"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 8
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 9
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 10
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 10
		, "value": "float64"
	}
}, {
	"": "signed(value: uint8): int8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 13
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int8(value)"
		, "kind": "()"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/stdlib.ci"
			, "line": 13
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint16): int16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "size": 2
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int16(value)"
		, "kind": "()"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/stdlib.ci"
			, "line": 16
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int32(value)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 19
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int64(value)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/stdlib.ci"
			, "line": 22
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int8): uint8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint8(value)"
		, "kind": "()"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/stdlib.ci"
			, "line": 25
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int16): uint16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "size": 2
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint16(value)"
		, "kind": "()"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/stdlib.ci"
			, "line": 28
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint32(value)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 31
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint64(value)"
		, "kind": "()"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/stdlib.ci"
			, "line": 34
			, "value": "value"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the size of the given type"
	, "ast": {
		"": "typename.size(type)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "args": [{
			"": "type"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/stdlib.ci"
			, "line": 37
			, "value": "type"
		}]
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 41
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 41
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 43
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 43
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 43
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 45
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 45
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 45
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 45
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "NotEquals"
	, "kind": "typename"
	, "cast": "val"
	, "name": "NotEquals"
	, "type": "typename"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 48
	, "size": 24
	, "offs": 76128
	, "static": true
	, "const": true
	, "doc": "@public"
}, {
	"": "NotEquals.expected"
	, "kind": "variable"
	, "cast": "var"
	, "name": "expected"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 50
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "Value of the expected result"
}, {
	"": "NotEquals.returned"
	, "kind": "variable"
	, "cast": "var"
	, "name": "returned"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 53
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "Value of the actual result"
}, {
	"": "NotEquals.extras"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "extras"
	, "owner": "NotEquals"
	, "type": "variant[]"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 56
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": true
	, "doc": "Extra argument to identify what happened"
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 56
		, "value": "null"
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 103
	, "offs": 396752
	, "static": true
	, "const": false
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 62
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 62
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 62
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 62
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 62
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 63
				}]
			}
		}, {
			"": "extras"
			, "kind": ".variable"
			, "type": "variant[1]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 65
			, "value": "extras"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "NotEquals"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 66
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 71
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396752
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396754
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 396756
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396757
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396761
		, "size": 1
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396762
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396766
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396771
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 396773
		, "size": 2
	}, {
		"instruction": "inc.sp(+24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396775
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396779
		, "size": 5
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396784
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 396788
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396790
		, "size": 5
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396795
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 396799
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396801
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396806
		, "size": 4
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 396810
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396812
		, "size": 5
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396817
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396822
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 396827
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396832
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396837
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396842
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 396846
		, "size": 4
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396850
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396854
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 74
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "null"
		}]
	}
}, {
	"": "Math"
	, "kind": "typename"
	, "cast": "void"
	, "name": "Math"
	, "type": "typename"
	, "file": "cmplStd/lib/math.ci"
	, "line": 2
	, "size": 0
	, "offs": 80952
	, "static": true
	, "const": true
	, "doc": "Mathematical utility functions and constants"
}, {
	"": "Math.pi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "pi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 6
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "pi"
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 6
		, "value": "3.141593"
	}
}, {
	"": "Math.e"
	, "kind": "inline"
	, "cast": "val"
	, "name": "e"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "e"
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 7
		, "value": "2.718282"
	}
}, {
	"": "Math.ln2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln2"
	, "ast": {
		"": "0.693147"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 8
		, "value": "0.693147"
	}
}, {
	"": "Math.log2E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log2E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log2E"
	, "ast": {
		"": "1.442695"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "1.442695"
	}
}, {
	"": "Math.ln10"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln10"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 10
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln10"
	, "ast": {
		"": "2.302585"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 10
		, "value": "2.302585"
	}
}, {
	"": "Math.log10E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log10E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 11
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log10E"
	, "ast": {
		"": "0.434294"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "0.434294"
	}
}, {
	"": "Math.phi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "phi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 12
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "phi"
	, "ast": {
		"": "1.618034"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 12
		, "value": "1.618034"
	}
}, {
	"": "Math.sqrt2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrt2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 13
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrt2"
	, "ast": {
		"": "1.414214"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 13
		, "value": "1.414214"
	}
}, {
	"": "Math.sqrtE"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtE"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 14
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtE"
	, "ast": {
		"": "1.648721"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 14
		, "value": "1.648721"
	}
}, {
	"": "Math.sqrtPi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 15
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPi"
	, "ast": {
		"": "1.772454"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 15
		, "value": "1.772454"
	}
}, {
	"": "Math.sqrtPhi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPhi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 16
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPhi"
	, "ast": {
		"": "1.272020"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 16
		, "value": "1.272020"
	}
}, {
	"": "Math.nan"
	, "kind": "inline"
	, "cast": "val"
	, "name": "nan"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 17
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "nan"
	, "ast": {
		"": "-nan"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "-nan"
	}
}, {
	"": "Math.inf"
	, "kind": "inline"
	, "cast": "val"
	, "name": "inf"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 18
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "inf"
	, "ast": {
		"": "inf"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "inf"
	}
}, {
	"": "Math.modf(x: float64, intPart: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "modf"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "intPart"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "intPart"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 86
	, "offs": 396856
	, "static": true
	, "const": false
	, "doc": "Decompose a value into integer and fractional parts"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "stmt": [{
			"": "if (x < (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 23
			, "test": {
				"": "x < (1)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 23
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 23
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 23
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 23
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 23
				, "stmt": [{
					"": "if (x < (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 24
					, "test": {
						"": "x < (0)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 24
						, "left": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 24
							, "value": "x"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 24
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 24
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 24
						, "stmt": [{
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 25
							, "value": "result"
						}, {
							"": "intPart := -intPart;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 26
						}, {
							"": "return .result := result;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 27
							, "stmt": {
								"": ".result := result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "result"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 27
									, "value": "result"
								}
							}
						}]
					}
				}, {
					"": "intPart := (0);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 29
				}, {
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 30
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 30
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 32
			, "value": "result"
		}, {
			"": "intPart := x - result;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 33
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 34
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 34
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396856
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 396858
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 396867
		, "size": 1
	}, {
		"instruction": "jz +51"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396868
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396872
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 396874
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 396875
		, "size": 1
	}, {
		"instruction": "jz +35"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396876
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 396880
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396881
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 396883
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396884
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396886
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 396891
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396892
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 396896
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396897
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 396899
		, "size": 1
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 396900
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396901
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 396903
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 396904
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396906
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396907
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 396911
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396912
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 396914
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 396915
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396918
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396919
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 396921
		, "size": 9
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 396930
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396931
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396933
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 396935
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396936
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 396938
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 396939
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396941
		, "size": 1
	}]
}, {
	"": "Math.floor(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "floor"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 396944
	, "static": true
	, "const": false
	, "doc": "Computes the largest integer value not greater than the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 48
			, "value": "result"
		}, {
			"": "modf(x, &result);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 49
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 50
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 50
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 396944
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 396945
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 396947
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 396951
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 396956
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396957
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 396961
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 396965
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396967
		, "size": 1
	}]
}, {
	"": "Math.ceil(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceil"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the smallest integer not less than the input"
	, "ast": {
		"": "-floor(-x)"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "right": {
			"": "floor(-x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 54
			, "args": [{
				"": "-x"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 54
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 54
					, "value": "x"
				}
			}]
		}
	}
}, {
	"": "Math.round(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "round"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the nearest integer to the input"
	, "ast": {
		"": "floor(x + 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "args": [{
			"": "x + 0.500000"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 57
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 57
				, "value": "x"
			}
			, "right": {
				"": "0.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 57
				, "value": "0.500000"
			}
		}]
	}
}, {
	"": "Math.sign(x: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > 0) - int32(x < 0)"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "left": {
			"": "int32(x > 0)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 64
			, "args": [{
				"": "x > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "0"
				}
			}]
		}
		, "right": {
			"": "int32(x < 0)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 64
			, "args": [{
				"": "x < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "0"
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: int64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "x"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 67
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 67
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: uint32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 70
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "x"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `1` if positive)"
	, "ast": {
		"": "int32(x > (0))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "args": [{
			"": "x > (0)"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 70
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 70
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 70
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 70
					, "value": "0"
				}]
			}
		}]
	}
}, {
	"": "Math.sign(x: uint64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "x"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `1` if positive)"
	, "ast": {
		"": "int32(x > (0))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "args": [{
			"": "x > (0)"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 73
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 73
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 73
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 73
					, "value": "0"
				}]
			}
		}]
	}
}, {
	"": "Math.sign(x: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 76
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 76
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 76
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 76
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 76
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 76
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: float64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 79
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 79
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 79
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 79
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 79
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 79
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 79
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.absMod(val: float32, mod: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "mod"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 396968
	, "static": true
	, "const": false
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 83
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 83
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 83
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 83
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 83
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 83
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 83
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 83
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 83
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 83
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 83
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 84
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 84
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 84
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 84
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 86
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 86
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396968
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396970
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 396972
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396973
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396975
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 396977
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 396978
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 396979
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396983
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 396985
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 396987
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 396988
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396990
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 396991
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 396994
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float64, mod: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "val"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "mod"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 397000
	, "static": true
	, "const": false
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 91
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 91
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 91
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 91
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 91
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 91
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 91
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 91
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 91
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 91
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 91
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 92
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 92
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 92
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 92
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 94
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 94
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397000
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397002
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 397004
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397005
		, "size": 2
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397007
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397009
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397010
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397011
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397015
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397017
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397019
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397020
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397022
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 397023
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397026
		, "size": 1
	}]
}, {
	"": "Math.abs(x: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 98
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < 0 ? -x : x"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "test": {
			"": "x < 0"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "x"
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "0"
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "x"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 101
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 104
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "x"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "value": "x"
	}
}, {
	"": "Math.abs(x: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "x"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "value": "x"
	}
}, {
	"": "Math.abs(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 110
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 110
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 113
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 113
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "value": "x"
		}
	}
}, {
	"": "Math.min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 116
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 116
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 116
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: int64, b: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 119
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "a"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "b"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 119
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 119
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: uint32, b: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 122
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "a"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "b"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 122
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 122
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: uint64, b: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 125
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "a"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "b"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 125
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 125
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 128
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 128
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 128
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 131
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 131
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 131
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 134
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 134
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 134
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: int64, b: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 137
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "a"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "b"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 137
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 137
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: uint32, b: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 140
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "a"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "b"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 140
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 140
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: uint64, b: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 143
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "a"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "b"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 143
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 143
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 146
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 146
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 149
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 149
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 149
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "value": "b"
		}
	}
}, {
	"": "Math.clamp(t: int32, a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 152
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "t"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "t < a ? a : t > b ? b : t"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "test": {
			"": "t < a"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "value": "t"
			}
			, "right": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "value": "a"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "value": "a"
		}
		, "right": {
			"": "t > b ? b : t"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 152
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 152
					, "value": "b"
				}
			}
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "value": "b"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "value": "t"
			}
		}
	}
}, {
	"": "Math.clamp(t: int64, a: int64, b: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 155
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "t"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "a"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "b"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "t < a ? a : t > b ? b : t"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "test": {
			"": "t < a"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 155
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "value": "t"
			}
			, "right": {
				"": "a"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "value": "a"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 155
			, "value": "a"
		}
		, "right": {
			"": "t > b ? b : t"
			, "kind": "?:"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 155
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 155
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 155
					, "value": "b"
				}
			}
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "value": "b"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "value": "t"
			}
		}
	}
}, {
	"": "Math.clamp(t: uint32, a: uint32, b: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 158
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "t"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "a"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "b"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "t < a ? a : t > b ? b : t"
		, "kind": "?:"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "test": {
			"": "t < a"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 158
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "value": "t"
			}
			, "right": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "value": "a"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 158
			, "value": "a"
		}
		, "right": {
			"": "t > b ? b : t"
			, "kind": "?:"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 158
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 158
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 158
					, "value": "b"
				}
			}
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "value": "b"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "value": "t"
			}
		}
	}
}, {
	"": "Math.clamp(t: uint64, a: uint64, b: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 161
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "t"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "a"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "b"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "t < a ? a : t > b ? b : t"
		, "kind": "?:"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "test": {
			"": "t < a"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 161
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "value": "t"
			}
			, "right": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "value": "a"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 161
			, "value": "a"
		}
		, "right": {
			"": "t > b ? b : t"
			, "kind": "?:"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 161
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 161
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 161
					, "value": "b"
				}
			}
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "value": "b"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "value": "t"
			}
		}
	}
}, {
	"": "Math.clamp(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 164
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 397032
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 165
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 165
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 165
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 165
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 165
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 166
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 166
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 168
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 168
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 168
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 168
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 168
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 169
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 169
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 171
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 171
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397032
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397034
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 397036
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397037
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 397041
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397044
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397045
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397047
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 397049
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397050
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 397054
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397057
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(4, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 397058
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397061
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 175
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 397064
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 176
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 176
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 176
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 176
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 176
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 177
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 177
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 179
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 179
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 179
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 179
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 179
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 180
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 180
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 182
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 182
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397064
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397066
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397068
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397069
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 397073
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397076
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397077
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397079
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 397081
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397082
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 397086
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397089
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(7, 5)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 397090
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397093
		, "size": 1
	}]
}, {
	"": "Math.lerp(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 191
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 191
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 191
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 191
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.lerp(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 194
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 194
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 194
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 194
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 194
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 194
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 194
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 194
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.smooth(t: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 196
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 196
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 196
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 196
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 196
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 196
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 196
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 196
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 196
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 196
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 196
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 196
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 196
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 196
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 196
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 197
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 197
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 197
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 197
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 197
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 197
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 197
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 197
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 197
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 197
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 197
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 197
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 197
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 197
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 197
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 200
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), 0.000000, 1.000000))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "args": [{
			"": "clamp((t - a) / (b - a), 0.000000, 1.000000)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 200
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 200
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 200
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 200
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 200
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 200
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "a"
						}
					}]
				}
			}, {
				"": "0.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 200
				, "value": "0.000000"
			}, {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 200
				, "value": "1.000000"
			}]
		}]
	}
}, {
	"": "Math.smooth(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 203
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), 0.000000, 1.000000))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "args": [{
			"": "clamp((t - a) / (b - a), 0.000000, 1.000000)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 203
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 203
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 203
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 203
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 203
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 203
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "a"
						}
					}]
				}
			}, {
				"": "0.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 203
				, "value": "0.000000"
			}, {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 203
				, "value": "1.000000"
			}]
		}]
	}
}, {
	"": "Math.min(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 206
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 206
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 206
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 397096
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 206
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 207
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 207
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 207
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "cmplStd/lib/math.ci"
						, "line": 207
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 207
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 207
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 207
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 207
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 208
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 208
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 210
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 211
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 211
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 211
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 211
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 211
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 211
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 211
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 211
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 211
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 211
				, "stmt": [{
					"": "if (result > data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 212
					, "test": {
						"": "result > data[i]"
						, "kind": ">"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 212
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 212
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 212
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 212
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 212
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 212
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 213
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 216
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 216
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397096
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397098
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 397099
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397100
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397104
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397113
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397115
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397116
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 397118
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397119
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397124
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397128
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397130
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397132
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 397134
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 397138
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 397139
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397140
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397144
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397146
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 397148
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 397152
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397153
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397155
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397159
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397161
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 397163
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 397164
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397168
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397172
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397174
		, "size": 1
	}]
}, {
	"": "Math.max(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 220
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 220
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 220
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 397176
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 220
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 221
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 221
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 221
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "cmplStd/lib/math.ci"
						, "line": 221
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 221
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 221
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 221
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 221
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 222
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 222
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 224
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 225
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 225
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 225
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 225
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 225
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 225
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 225
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 225
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 225
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 225
				, "stmt": [{
					"": "if (result < data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 226
					, "test": {
						"": "result < data[i]"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 226
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 226
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 226
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 226
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 226
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 226
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 227
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 230
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 230
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397176
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397178
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 397179
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397180
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397184
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397193
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397195
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397196
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 397198
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397199
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397204
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397208
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397210
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397212
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 397214
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 397218
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397219
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397220
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397224
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397226
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 397228
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 397232
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397233
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397235
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397239
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397241
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 397243
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 397244
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397248
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397252
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397254
		, "size": 1
	}]
}, {
	"": "Math.sum(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sum"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 234
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 234
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 234
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 397256
	, "static": true
	, "const": false
	, "doc": "Returns the sum of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 234
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 235
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 236
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 236
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 236
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 236
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 236
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 236
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 236
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 236
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 236
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 236
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 236
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 236
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 236
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 236
				, "stmt": [{
					"": "result := result + data[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 237
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 239
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 239
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 397256
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 397257
		, "size": 1
	}, {
		"instruction": "jmp +22"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397258
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397262
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397264
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397266
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 397268
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 397272
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397273
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397274
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397276
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397280
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397282
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 397284
		, "size": 1
	}, {
		"instruction": "jnz -23"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 397285
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397289
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397293
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397295
		, "size": 1
	}]
}, {
	"": "Math.mean(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mean"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 243
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 20
	, "offs": 397296
	, "static": true
	, "const": false
	, "doc": "Returns the mean of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "stmt": [{
			"": "return .result := sum(...data) / (signed(data.length));"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 244
			, "stmt": {
				"": ".result := sum(...data) / (signed(data.length))"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "sum(...data) / (signed(data.length))"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 244
					, "left": {
						"": "sum(...data)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 244
						, "args": [{
							"": "...data"
							, "kind": "..."
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 244
							, "right": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 244
								, "value": "data"
							}
						}]
					}
					, "right": {
						"": "(signed(data.length))"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 244
						, "args": [{
							"": "signed(data.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 244
							, "args": [{
								"": "data.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 244
								, "left": {
									"": "data"
									, "kind": ".variable"
									, "type": "float64[]"
									, "file": "cmplStd/lib/math.ci"
									, "line": 244
									, "value": "data"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 244
									, "value": "length"
								}
							}]
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397296
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397297
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397299
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397304
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397305
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397309
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 397311
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 397312
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397313
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397315
		, "size": 1
	}]
}, {
	"": "Math.eval(x: float64, a0: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 248
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "args": [{
			"": "a0"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 248
			, "value": "a0"
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 251
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * a1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "args": [{
			"": "a0 + x * a1"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 251
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 251
				, "value": "a0"
			}
			, "right": {
				"": "x * a1"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 251
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 251
					, "value": "x"
				}
				, "right": {
					"": "a1"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 251
					, "value": "a1"
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 254
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "args": [{
			"": "a0 + x * eval(x, a1, a2)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 254
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 254
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 254
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 254
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 254
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 254
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 254
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 254
						, "value": "a2"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 257
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "a3"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a3"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 40
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2, a3))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "args": [{
			"": "a0 + x * eval(x, a1, a2, a3)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 257
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 257
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2, a3)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 257
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 257
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2, a3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 257
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "a2"
					}, {
						"": "a3"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "a3"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, polynomial: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 260
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "polynomial"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "polynomial"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 47
	, "offs": 397320
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 261
			, "value": "result"
		}, {
			"": "for (i; i >= 0; i := i - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 262
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 262
				, "value": "i"
			}
			, "test": {
				"": "i >= 0"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 262
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 262
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 262
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 262
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 262
					, "value": "i"
				}
				, "right": {
					"": "i - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 262
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 262
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 262
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 262
				, "stmt": [{
					"": "result := result * x + polynomial[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 263
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 265
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 265
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397320
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397321
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397323
		, "size": 4
	}, {
		"instruction": "jmp +25"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397327
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397331
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397333
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397335
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397336
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397338
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 397340
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 397344
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397345
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397346
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397348
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397352
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397354
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 397355
		, "size": 1
	}, {
		"instruction": "jz -25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397356
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397360
		, "size": 4
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397364
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397366
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 269
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "eps"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 397368
	, "static": true
	, "const": false
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 270
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 270
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 270
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 270
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 270
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 271
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 271
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 271
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 271
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 271
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 271
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 271
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 271
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 272
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 272
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 272
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 275
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 276
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 276
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 276
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 276
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 276
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 276
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 276
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 276
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 277
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 277
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 277
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 280
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 280
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397368
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397370
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 397372
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397373
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397377
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397379
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397381
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 397383
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 397384
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397385
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397389
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397394
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397396
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397397
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397401
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397403
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397405
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 397407
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 397408
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397409
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397413
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397418
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397420
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397421
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397422
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397424
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 284
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "eps"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 397432
	, "static": true
	, "const": false
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 285
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 285
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 285
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 285
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 285
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 286
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 286
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 286
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 286
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 286
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 286
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 286
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 286
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 287
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 287
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 287
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 290
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 291
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 291
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 291
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 291
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 291
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 291
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 291
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 291
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 292
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 292
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 292
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 295
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 295
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397432
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397434
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397436
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397437
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397441
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397443
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397445
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 397447
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397448
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397449
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397453
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397458
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397460
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397461
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397465
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397467
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397469
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 397471
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397472
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397473
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397477
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397482
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397484
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397485
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397486
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397488
		, "size": 1
	}]
}, {
	"": "Math.sinCos(arg: float64, quad: int32): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinCos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 299
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "quad"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "quad"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 335
	, "offs": 397496
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "stmt": [{
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 313
			, "value": "x"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 314
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 314
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 314
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 314
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 314
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 314
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 315
				}, {
					"": "quad := quad + 2;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 316
				}]
			}
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 319
			, "value": "y"
		}, {
			"": "x := x * (1) / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 320
		}, {
			"": "if (x > (32764))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 321
			, "test": {
				"": "x > (32764)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 321
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 321
					, "value": "x"
				}
				, "right": {
					"": "(32764)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 321
					, "args": [{
						"": "32764"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 321
						, "value": "32764"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 321
				, "stmt": [{
					"": "e"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 322
					, "value": "e"
				}, {
					"": "y := modf(x, &e);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 323
				}, {
					"": "e := e + (quad);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 324
				}, {
					"": "f"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 326
					, "value": "f"
				}, {
					"": "modf(0.250000 * e, &f);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 327
				}, {
					"": "quad := (e - (4) * f);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 328
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 330
				, "stmt": [{
					"": "k"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 331
					, "value": "k"
				}, {
					"": "y := x - (k);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 332
				}, {
					"": "quad := quad + k;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 333
				}, {
					"": "quad := quad & 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 334
				}]
			}
		}, {
			"": "if (quad & 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 336
			, "test": {
				"": "quad & 1"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 336
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 336
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 336
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 336
				, "stmt": [{
					"": "y := (1) - y;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 337
				}]
			}
		}, {
			"": "if (quad > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 339
			, "test": {
				"": "quad > 1"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 339
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 339
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 339
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 339
				, "stmt": [{
					"": "y := -y;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 340
				}]
			}
		}, {
			"": "ysq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 343
			, "value": "ysq"
		}, {
			"": "temp1"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 344
			, "value": "temp1"
		}, {
			"": "temp2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 345
			, "value": "temp2"
		}, {
			"": "return .result := temp1 / temp2;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 346
			, "stmt": {
				"": ".result := temp1 / temp2"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "temp1 / temp2"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 346
					, "left": {
						"": "temp1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 346
						, "value": "temp1"
					}
					, "right": {
						"": "temp2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 346
						, "value": "temp2"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397496
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397498
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397500
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397501
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397502
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 397506
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397507
		, "size": 2
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 397509
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397513
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397515
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397516
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397518
		, "size": 9
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397527
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 397536
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397537
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397538
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397540
		, "size": 2
	}, {
		"instruction": "load.f64 32764.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397542
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 397551
		, "size": 1
	}, {
		"instruction": "jz +84"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397552
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 397556
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397557
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397559
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397563
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397568
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397569
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397573
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397575
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 397577
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397578
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 397579
		, "size": 1
	}, {
		"instruction": "load.f64 0.250000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397580
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397589
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397591
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397592
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397596
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397601
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397602
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397606
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397610
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397612
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397621
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397623
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 397624
		, "size": 1
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 397625
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397626
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397628
		, "size": 4
	}, {
		"instruction": "jmp +32"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397632
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397636
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 397638
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397639
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397641
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 397643
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 397644
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397645
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397647
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397649
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 397651
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397652
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397654
		, "size": 2
	}, {
		"instruction": "b32.and 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 397656
		, "size": 2
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 397658
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397660
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397664
		, "size": 2
	}, {
		"instruction": "b32.and 0x01"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 397666
		, "size": 2
	}, {
		"instruction": "jz +18"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397668
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397672
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397681
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 397683
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397684
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397686
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397688
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 397693
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397694
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 397698
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397699
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397701
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397703
		, "size": 1
	}, {
		"instruction": "load.f64 145.968841"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397704
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397713
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397715
		, "size": 1
	}, {
		"instruction": "load.f64 -13847.272500"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397716
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397725
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397726
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397728
		, "size": 1
	}, {
		"instruction": "load.f64 440103.053538"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397729
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397738
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397739
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397741
		, "size": 1
	}, {
		"instruction": "load.f64 -4942908.100903"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397742
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397751
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397752
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397754
		, "size": 1
	}, {
		"instruction": "load.f64 13578840.978774"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397755
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397764
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397765
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397767
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397768
		, "size": 2
	}, {
		"instruction": "load.f64 132.653491"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397770
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397779
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397780
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397782
		, "size": 1
	}, {
		"instruction": "load.f64 9463.096102"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397783
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397792
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397793
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397795
		, "size": 1
	}, {
		"instruction": "load.f64 408179.225234"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397796
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397805
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397806
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397808
		, "size": 1
	}, {
		"instruction": "load.f64 8644558.652923"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397809
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 397818
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397819
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397821
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 397823
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397824
		, "size": 2
	}, {
		"instruction": "inc.sp(-40)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397826
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 397830
		, "size": 1
	}]
}, {
	"": "Math.sin(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 350
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 350
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 350
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the sine of the input"
	, "ast": {
		"": "sinCos(arg, 0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 350
		, "args": [{
		}, {
			"": "arg"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 350
			, "value": "arg"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 350
			, "value": "0"
		}]
	}
}, {
	"": "Math.cos(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 353
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 353
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 353
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the cosine of the input"
	, "ast": {
		"": "sinCos(abs(arg), 1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 353
		, "args": [{
		}, {
			"": "abs(arg)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 353
			, "args": [{
				"": "arg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 353
				, "value": "arg"
			}]
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 353
			, "value": "1"
		}]
	}
}, {
	"": "Math.tan(arg: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 356
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 356
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 356
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 378
	, "offs": 397832
	, "static": true
	, "const": false
	, "doc": "Returns the tangent of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 356
		, "stmt": [{
			"": "complement"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 369
			, "value": "complement"
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 370
			, "value": "negate"
		}, {
			"": "if (arg < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 372
			, "test": {
				"": "arg < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 372
				, "left": {
					"": "arg"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 372
					, "value": "arg"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 372
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 372
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 372
				, "stmt": [{
					"": "arg := -arg;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 373
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 374
				}]
			}
		}, {
			"": "arg := (2) * arg / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 376
		}, {
			"": "e"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 378
			, "value": "e"
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 379
			, "value": "x"
		}, {
			"": "i"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 380
			, "value": "i"
		}, {
			"": "if (i == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 382
			, "test": {
				"": "i == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 382
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 382
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 382
					, "value": "0"
				}
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 383
				, "stmt": [{
					"": "if (i == 1)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 383
					, "test": {
						"": "i == 1"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 383
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 383
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 383
							, "value": "1"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 383
						, "stmt": [{
							"": "x := (1) - x;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 384
						}, {
							"": "complement := true;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 385
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 387
						, "stmt": [{
							"": "if (i == 2)"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 387
							, "test": {
								"": "i == 2"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/lib/math.ci"
								, "line": 387
								, "left": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 387
									, "value": "i"
								}
								, "right": {
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 387
									, "value": "2"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/math.ci"
								, "line": 387
								, "stmt": [{
									"": "negate := !negate;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 388
								}, {
									"": "complement := true;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 389
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/math.ci"
								, "line": 391
								, "stmt": [{
									"": "if (i == 3)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 391
									, "test": {
										"": "i == 3"
										, "kind": "=="
										, "type": "bool"
										, "file": "cmplStd/lib/math.ci"
										, "line": 391
										, "left": {
											"": "i"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/math.ci"
											, "line": 391
											, "value": "i"
										}
										, "right": {
											"": "3"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "cmplStd/lib/math.ci"
											, "line": 391
											, "value": "3"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/lib/math.ci"
										, "line": 391
										, "stmt": [{
											"": "x := (1) - x;"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/math.ci"
											, "line": 392
										}, {
											"": "negate := !negate;"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/math.ci"
											, "line": 393
										}]
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "xsq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 396
			, "value": "xsq"
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 397
			, "value": "result"
		}, {
			"": "result := result / (((xsq + q2) * xsq + q1) * xsq + q0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 398
		}, {
			"": "if (complement)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 400
			, "test": {
				"": "complement"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 400
				, "value": "complement"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 400
				, "stmt": [{
					"": "if (result == (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 401
					, "test": {
						"": "result == (0)"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 401
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 401
							, "value": "result"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 401
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 401
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 401
						, "stmt": [{
							"": "return .result := nan;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 402
							, "stmt": {
								"": ".result := nan"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "nan"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 402
									, "value": "nan"
								}
							}
						}]
					}
				}, {
					"": "result := (1) / result;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 404
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 406
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 406
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 406
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 407
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 407
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 407
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 409
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 409
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397832
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397833
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397834
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 397836
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 397837
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397838
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397842
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 397844
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397845
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397847
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397852
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397856
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397857
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397866
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 397868
		, "size": 1
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397869
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 397878
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397879
		, "size": 2
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 397881
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397882
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397884
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 397888
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 397893
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 397894
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397898
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 397900
		, "size": 1
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397901
		, "size": 5
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 397906
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397907
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 397909
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 397910
		, "size": 1
	}, {
		"instruction": "jnz +118"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 397911
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397915
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397917
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 397922
		, "size": 1
	}, {
		"instruction": "jz +32"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397923
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 397927
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 397936
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 397938
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 397939
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397941
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397946
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397950
		, "size": 1
	}, {
		"instruction": "jmp +78"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397951
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397955
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397957
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 397962
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 397963
		, "size": 4
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397967
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 397971
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 397972
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397973
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397977
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397978
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 397983
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 397987
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 397988
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 397992
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 397994
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 397999
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398000
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398004
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398013
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 398015
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398016
		, "size": 2
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398018
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 398022
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 398023
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398024
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 398028
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398029
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398031
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398033
		, "size": 1
	}, {
		"instruction": "load.f64 0.000034"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398034
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398043
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398045
		, "size": 1
	}, {
		"instruction": "load.f64 0.034226"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398046
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398055
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398056
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398058
		, "size": 1
	}, {
		"instruction": "load.f64 -15.506857"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398059
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398068
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398069
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398071
		, "size": 1
	}, {
		"instruction": "load.f64 1055.970902"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398072
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398081
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398082
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398084
		, "size": 1
	}, {
		"instruction": "load.f64 -13068.202648"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398085
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398094
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398095
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398097
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398098
		, "size": 2
	}, {
		"instruction": "load.f64 -155.503316"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398100
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398109
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398110
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398112
		, "size": 1
	}, {
		"instruction": "load.f64 4765.751363"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398113
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398122
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398123
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398125
		, "size": 1
	}, {
		"instruction": "load.f64 -16638.952389"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398126
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398135
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398136
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398137
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 398141
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398142
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398146
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398148
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 398149
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398150
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398154
		, "size": 9
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398163
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398165
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398169
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398170
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398179
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398181
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398182
		, "size": 2
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398184
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 398188
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398189
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398193
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398195
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398196
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398198
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398202
		, "size": 1
	}, {
		"instruction": "set.x64 sp(14)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398203
		, "size": 2
	}, {
		"instruction": "inc.sp(-36)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398205
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398209
		, "size": 1
	}]
}, {
	"": "Math.sinh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinh"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 413
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 413
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 413
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 241
	, "offs": 398216
	, "static": true
	, "const": false
	, "doc": "Returns the hyperbolic sine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 413
		, "stmt": [{
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 425
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 426
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 426
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 426
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 426
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 426
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 426
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 427
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 428
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 431
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 431
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 431
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 431
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 431
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 431
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 432
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 432
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 432
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 432
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 432
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 432
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 435
			, "value": "result"
		}, {
			"": "if (x > 0.500000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 436
			, "test": {
				"": "x > 0.500000"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 436
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 436
					, "value": "x"
				}
				, "right": {
					"": "0.500000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 436
					, "value": "0.500000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 436
				, "stmt": [{
					"": "result := (float64.exp(x) - float64.exp(-x)) / (2);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 437
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 439
				, "stmt": [{
					"": "sq"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 440
					, "value": "sq"
				}, {
					"": "result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 441
				}, {
					"": "result := result / (((sq + Q2) * sq + Q1) * sq + Q0);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 442
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 445
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 445
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 445
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 446
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 446
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 446
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 448
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 448
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 398216
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398217
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398219
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 398220
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398221
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398225
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398227
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398228
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 398230
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398235
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 398239
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398240
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398242
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 398251
		, "size": 1
	}, {
		"instruction": "jz +27"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398252
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398256
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398258
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398262
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398271
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398272
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398274
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398278
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398279
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398280
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398282
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 398291
		, "size": 1
	}, {
		"instruction": "jz +34"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398292
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398296
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398298
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398302
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398304
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398305
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 398309
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398310
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398319
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398320
		, "size": 2
	}, {
		"instruction": "jmp +109"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 398322
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398326
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398328
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398330
		, "size": 1
	}, {
		"instruction": "load.f64 -26.305632"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398331
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398340
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398342
		, "size": 1
	}, {
		"instruction": "load.f64 -2894.211356"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398343
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398352
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398353
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398355
		, "size": 1
	}, {
		"instruction": "load.f64 -89912.720220"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398356
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398365
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398366
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398368
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398369
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398378
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398379
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398381
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398382
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398384
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398386
		, "size": 2
	}, {
		"instruction": "load.f64 -173.678954"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398388
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398397
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398398
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398400
		, "size": 1
	}, {
		"instruction": "load.f64 15215.173788"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398401
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398410
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398411
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398413
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398414
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398423
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398424
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398425
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398427
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398431
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 398435
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398436
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398440
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398442
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398443
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398445
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398449
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398450
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398452
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398456
		, "size": 1
	}]
}, {
	"": "Math.cosh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cosh"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 452
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 452
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 452
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 75
	, "offs": 398464
	, "static": true
	, "const": false
	, "doc": "Returns the hyperbolic cosine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 452
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 453
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 453
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 453
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 453
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 453
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 453
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 454
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 456
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 456
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 456
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 456
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 456
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 456
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 457
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 457
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 457
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 457
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 457
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 457
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := (float64.exp(x) + float64.exp(-x)) / (2);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 459
			, "stmt": {
				"": ".result := (float64.exp(x) + float64.exp(-x)) / (2)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "(float64.exp(x) + float64.exp(-x)) / (2)"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 459
					, "left": {
						"": "(float64.exp(x) + float64.exp(-x))"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 459
						, "args": [{
							"": "float64.exp(x) + float64.exp(-x)"
							, "kind": "+"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 459
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 459
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 459
									, "value": "x"
								}]
							}
							, "right": {
								"": "float64.exp(-x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 459
								, "args": [{
									"": "-x"
									, "kind": "-"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 459
									, "right": {
										"": "x"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "cmplStd/lib/math.ci"
										, "line": 459
										, "value": "x"
									}
								}]
							}
						}]
					}
					, "right": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 459
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 459
							, "value": "2"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398464
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398466
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 398467
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398468
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398472
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398474
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398475
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398477
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398479
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 398488
		, "size": 1
	}, {
		"instruction": "jz +23"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398489
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398493
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398495
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398499
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398508
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398509
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398511
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398512
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398514
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398518
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398520
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398521
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398525
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398526
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398535
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398536
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398538
		, "size": 1
	}]
}, {
	"": "Math.asin(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "asin"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 467
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 467
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 467
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 173
	, "offs": 398544
	, "static": true
	, "const": false
	, "doc": "Returns the arc sine of the input\n Special cases are:\n   Asin(±0) = ±0\n   Asin(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 467
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 468
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 468
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 468
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 468
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 468
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 468
				, "stmt": [{
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 470
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 470
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 473
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 474
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 474
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 474
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 474
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 474
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 474
				, "stmt": [{
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 475
				}, {
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 476
				}]
			}
		}, {
			"": "if (x > (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 479
			, "test": {
				"": "x > (1)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 479
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 479
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 479
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 479
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 479
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 481
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 481
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 484
			, "value": "result"
		}, {
			"": "if (x > 0.700000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 485
			, "test": {
				"": "x > 0.700000"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 485
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 485
					, "value": "x"
				}
				, "right": {
					"": "0.700000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 485
					, "value": "0.700000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 485
				, "stmt": [{
					"": "result := pi / (2) - float64.atan2(result, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 486
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 488
				, "stmt": [{
					"": "result := float64.atan2(x, result);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 489
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 492
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 492
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 492
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 493
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 493
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 493
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 495
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 495
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398544
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398546
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 398547
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398548
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 398552
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398555
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 398556
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398557
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398559
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 398560
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398561
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 398565
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398570
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 398574
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398575
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398577
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398578
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398580
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398582
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 398591
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398592
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398596
		, "size": 9
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398605
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398607
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398611
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398612
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398621
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398623
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398625
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 398626
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398627
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398631
		, "size": 2
	}, {
		"instruction": "load.f64 0.700000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398633
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 398642
		, "size": 1
	}, {
		"instruction": "jz +38"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398643
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398647
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 398656
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398665
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398666
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398668
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398670
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 398674
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398675
		, "size": 2
	}, {
		"instruction": "jmp +14"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 398677
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398681
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398683
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398685
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398689
		, "size": 2
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 398691
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 398695
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398696
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398700
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398702
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398703
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398705
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398709
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398710
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398712
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398716
		, "size": 1
	}]
}, {
	"": "Math.acos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "acos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 502
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 502
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 502
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the arc cosine of the input\n Special case is:\n   Acos(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "(pi / (2) - asin(x))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 502
		, "args": [{
			"": "pi / (2) - asin(x)"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 502
			, "left": {
				"": "pi / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 502
				, "left": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 502
					, "value": "pi"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 502
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 502
						, "value": "2"
					}]
				}
			}
			, "right": {
				"": "asin(x)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 502
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 502
					, "value": "x"
				}]
			}
		}]
	}
}, {
	"": "Math.radians(degrees: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "radians"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 526
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 526
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "degrees"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "degrees"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 526
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to radians from degrees."
	, "ast": {
		"": "float64(degrees * pi / (180))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 526
		, "args": [{
			"": "degrees * pi / (180)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 526
			, "left": {
				"": "degrees * pi"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 526
				, "left": {
					"": "degrees"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 526
					, "value": "degrees"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 526
					, "value": "pi"
				}
			}
			, "right": {
				"": "(180)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 526
				, "args": [{
					"": "180"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 526
					, "value": "180"
				}]
			}
		}]
	}
}, {
	"": "Math.degrees(radians: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "degrees"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 529
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 529
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "radians"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "radians"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 529
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to degrees from radians."
	, "ast": {
		"": "float64(radians * (180) / pi)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 529
		, "args": [{
			"": "radians * (180) / pi"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 529
			, "left": {
				"": "radians * (180)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 529
				, "left": {
					"": "radians"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 529
					, "value": "radians"
				}
				, "right": {
					"": "(180)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 529
					, "args": [{
						"": "180"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 529
						, "value": "180"
					}]
				}
			}
			, "right": {
				"": "pi"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 529
				, "value": "pi"
			}
		}]
	}
}, {
	"": "Complex"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Complex"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 2
	, "size": 16
	, "offs": 131960
	, "static": true
	, "const": true
	, "doc": "Complex number"
}, {
	"": "Complex.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 5
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "The real component of a complex number."
}, {
	"": "Complex.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 8
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "The imaginary component of a complex number."
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 8
		, "value": "0"
	}
}, {
	"": "Complex(re: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 398720
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 25
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 26
					}, {
						"": ".result.im := (0);"
						, "kind": ";"
						, "type": "void"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 398720
		, "size": 3
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398723
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398724
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398726
		, "size": 1
	}]
}, {
	"": "Complex(re: float64, im: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "im"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "im"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 398728
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 32
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 33
					}, {
						"": ".result.im := im;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 34
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 398728
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 398731
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398734
		, "size": 1
	}]
}, {
	"": "neg(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(-a.re, -a.im);"
	, "ast": {
		"": "Complex(emit(struct(a), neg.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "args": [{
			"": "emit(struct(a), neg.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 59
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "a"
				}]
			}, {
				"": "neg.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "neg"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re + b.re, a.im + b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 62
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re + b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "args": [{
		}, {
			"": "a.re + b"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 64
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 64
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "im"
			}
		}]
	}
}, {
	"": "add(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a + b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 66
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 66
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re - b.re, a.im - b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re - b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "a.re - b"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 71
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 71
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a - b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "args": [{
		}, {
			"": "a - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 73
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 73
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "im"
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "args": [{
			"": "emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 76
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "b"
				}]
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "x2"
				}
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "p2d"
				}
			}, {
				"": "add.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "add"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "f64"
				}
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "p2d"
				}
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "x2"
				}
			}, {
				"": "sub.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "sub"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "f64"
				}
			}]
		}]
	}
}, {
	"": "mul(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 81
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re * b, a.im * b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "a.re * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}, {
			"": "a.im * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "im"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}]
	}
}, {
	"": "mul(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 83
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a * b.re, a * b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "args": [{
		}, {
			"": "a * b.re"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "re"
				}
			}
		}, {
			"": "a * b.im"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "div(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 86
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 139
	, "offs": 398736
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "stmt": [{
			"": "if (Math.abs(b.re) >= Math.abs(b.im))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 90
			, "test": {
				"": "Math.abs(b.re) >= Math.abs(b.im)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 90
				, "left": {
					"": "Math.abs(b.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "re"
						}
					}]
				}
				, "right": {
					"": "Math.abs(b.im)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.im"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "im"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "im"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 90
				, "stmt": [{
					"": "r"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 91
					, "value": "r"
				}, {
					"": "den"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 92
					, "value": "den"
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 93
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "Complex"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.re := (a.re + r * a.im) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Complex.ci"
								, "line": 94
							}, {
								"": ".result.im := (a.im - r * a.re) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Complex.ci"
								, "line": 95
							}]
						}
					}
				}]
			}
		}, {
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 98
			, "value": "r"
		}, {
			"": "den"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 99
			, "value": "den"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 100
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := (a.re * r + a.im) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 101
					}, {
						"": ".result.im := (a.im * r - a.re) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 102
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398736
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398738
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398740
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 398741
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398742
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398746
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398748
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 398749
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398753
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398755
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398757
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398759
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 398761
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 398762
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 398763
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398767
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398769
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 398770
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398774
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398776
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 398778
		, "size": 1
	}, {
		"instruction": "jnz +52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 398779
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398783
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398785
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398787
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398788
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398790
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398792
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398794
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398795
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398796
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398798
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(15)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398800
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398802
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398803
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398804
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398806
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398807
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398809
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398811
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398813
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398815
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 398816
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398817
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398819
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398820
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398822
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398826
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398827
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398831
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398833
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398835
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398836
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398838
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398840
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398842
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398843
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398844
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398846
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398848
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398849
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398851
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398852
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398854
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398855
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398857
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398859
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398861
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398862
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 398864
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398865
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398867
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398868
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398870
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398874
		, "size": 1
	}]
}, {
	"": "div(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 107
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 107
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 107
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 109
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(Complex(a), b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "args": [{
		}, {
			"": "Complex(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 109
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 109
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 109
			, "value": "b"
		}]
	}
}, {
	"": "abs(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.sqrt(a.re * a.re + a.im * a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "args": [{
			"": "a.re * a.re + a.im * a.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 112
			, "left": {
				"": "a.re * a.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
				, "right": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * a.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
				, "right": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
			}
		}]
	}
}, {
	"": "arg(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "arg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 114
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.atan2(a.re, a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "re"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "im"
			}
		}]
	}
}, {
	"": "inv(a: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "inv"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 117
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 31
	, "offs": 398880
	, "static": true
	, "const": false
	, "doc": "Reciprocal of a complex number (1 / a)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "stmt": [{
			"": "d"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 118
			, "value": "d"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 119
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := +a.re / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 120
					}, {
						"": ".result.im := -a.im / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 121
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398880
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398882
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398884
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398885
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398887
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398889
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398890
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398891
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398893
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398895
		, "size": 1
	}, {
		"instruction": "set.x64 sp(9)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398896
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398898
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398900
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398901
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 398903
		, "size": 1
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398904
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398906
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 398910
		, "size": 1
	}]
}, {
	"": "conj(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "conj"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 126
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "re"
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 126
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 126
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 126
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "exp(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 129
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "args": [{
		}, {
			"": "float64.exp(a.re) * float64.cos(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.cos(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}, {
			"": "float64.exp(a.re) * float64.sin(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.sin(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "log(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 132
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.log(abs(a)), arg(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "args": [{
		}, {
			"": "float64.log(abs(a))"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "abs(a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 132
					, "value": "a"
				}]
			}]
		}, {
			"": "arg(a)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "value": "a"
			}]
		}]
	}
}, {
	"": "pow(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 135
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 100
	, "offs": 398912
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "stmt": [{
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 136
			, "value": "r"
		}, {
			"": "t"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 137
			, "value": "t"
		}, {
			"": "u"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 138
			, "value": "u"
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 139
			, "value": "v"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 140
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := v * float64.cos(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 141
					}, {
						"": ".result.im := v * float64.sin(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 142
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x128 sp(5)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 398912
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398914
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398916
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398918
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398919
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398921
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398923
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398924
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398925
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398929
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398931
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(7)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 398935
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398937
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398939
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398941
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398945
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 398947
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398951
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398953
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398955
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398956
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398958
		, "size": 2
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398960
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398964
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 398965
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398966
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398968
		, "size": 2
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398970
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398974
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 398976
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398977
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398979
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398980
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398984
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398985
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398987
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 398989
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 398993
		, "size": 1
	}, {
		"instruction": "set.x64 sp(19)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 398994
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398996
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 398998
		, "size": 2
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399000
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 399004
		, "size": 1
	}, {
		"instruction": "set.x64 sp(21)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 399005
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399007
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399011
		, "size": 1
	}]
}, {
	"": "pow(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "pow(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 146
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 146
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 146
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sin(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 149
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "args": [{
		}, {
			"": "float64.sin(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "float64.sin(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}, {
			"": "+float64.cos(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "+float64.cos(a.re)"
				, "kind": "+"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "right": {
					"": "float64.cos(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 149
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 149
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "cos(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 151
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "args": [{
		}, {
			"": "float64.cos(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "float64.cos(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}, {
			"": "-float64.sin(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "-float64.sin(a.re)"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "right": {
					"": "float64.sin(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 151
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 151
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "tan(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 164
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sin(a), cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "args": [{
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}]
	}
}, {
	"": "cot(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cot"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 166
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(cos(a), sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "args": [{
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sinh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sinh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 169
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "args": [{
		}, {
			"": "sub(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 169
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 169
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 169
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 169
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 169
			, "value": "2"
		}]
	}
}, {
	"": "cosh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cosh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 171
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "args": [{
		}, {
			"": "add(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 171
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 171
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 171
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 171
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 171
			, "value": "2"
		}]
	}
}, {
	"": "tanh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tanh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "args": [{
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}]
	}
}, {
	"": "coth(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "coth"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 175
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "args": [{
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}]
	}
}, {
	"": "sec(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sec"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 178
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "args": [{
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 178
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 178
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csc(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csc"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 180
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "args": [{
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 180
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 180
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sech(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sech"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 182
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cosh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "args": [{
			"": "cosh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 182
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 182
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csch(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csch"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 184
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sinh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "args": [{
			"": "sinh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 184
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 184
				, "value": "a"
			}]
		}]
	}
}, {
	"": "toCartesian(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toCartesian"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 187
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "args": [{
		}, {
			"": "x.re * float64.cos(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.cos(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}, {
			"": "x.re * float64.sin(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.sin(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "toPolar(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toPolar"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 189
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(abs(x), arg(x))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "args": [{
		}, {
			"": "abs(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}, {
			"": "arg(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}]
	}
}, {
	"": "vec4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec4f"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 2
	, "size": 16
	, "offs": 155328
	, "static": true
	, "const": true
	, "doc": "A 4d vector (4x float32)"
}, {
	"": "vec4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec4f"
	, "type": "vec4f.<?>"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 141
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec4f.<?>.x"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "x"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 5
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec4f.<?>.y"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "y"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 7
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec4f.<?>.z"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "z"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 9
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
}, {
	"": "vec4f.<?>.w"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "w"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 11
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
}, {
	"": "vec4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 5
		, "value": "x"
	}
}, {
	"": "vec4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 7
		, "value": "y"
	}
}, {
	"": "vec4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 9
		, "value": "z"
	}
}, {
	"": "vec4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 11
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 11
		, "value": "w"
	}
}, {
	"": "vec4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec4f"
	, "type": "float32[4]"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 14
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with given x, y, z, w components"
	, "ast": {
		"": "vec4f(emit(struct(w), struct(z), struct(y), struct(x)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "args": [{
			"": "emit(struct(w), struct(z), struct(y), struct(x))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 26
			, "args": [{
			}, {
				"": "struct(w)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "w"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "w"
				}]
			}, {
				"": "struct(z)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "z"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "z"
				}]
			}, {
				"": "struct(y)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "y"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "y"
				}]
			}, {
				"": "struct(x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "x"
				}]
			}]
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32, z: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with  (x: x, y: y, z: z, w: 1)"
	, "ast": {
		"": "vec4f(x, y, z, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "z"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with (x: x, y: y, z: 0, w: 1)"
	, "ast": {
		"": "vec4f(x, y, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "y"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(xyz: vec4f, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 35
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "xyz"
		, "kind": "variable"
		, "cast": "val"
		, "name": "xyz"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z components using the components form the given vector, and w with the given value"
	, "ast": {
		"": "vec4f(xyz.x, xyz.y, xyz.z, w)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "xyz.x"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "x"
			}
		}, {
			"": "xyz.y"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "y"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "y"
			}
		}, {
			"": "xyz.z"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "z"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "z"
			}
		}, {
			"": "w"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "value": "w"
		}]
	}
}, {
	"": "vec4f(val: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z, w components with the given scalar value"
	, "ast": {
		"": "vec4f(val, val, val, val)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}]
	}
}, {
	"": "neg(rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns a negated copy of the vector."
	, "ast": {
		"": "vec4f(emit(struct(rhs), neg.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(rhs), neg.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "rhs"
				}]
			}, {
				"": "neg.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "neg"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), add.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), add.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 71
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "rhs"
				}]
			}, {
				"": "add.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "add"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), sub.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), sub.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "rhs"
				}]
			}, {
				"": "sub.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "sub"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), mul.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), mul.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 75
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "rhs"
				}]
			}, {
				"": "mul.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "mul"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "div(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 77
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), div.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), div.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 77
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "rhs"
				}]
			}, {
				"": "div.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "div"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add vector and scalar."
	, "ast": {
		"": "add(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 80
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 80
			, "value": "b"
		}]
	}
}, {
	"": "add(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add vector and scalar."
	, "ast": {
		"": "add(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 82
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 82
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sub(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 85
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract vector and scalar."
	, "ast": {
		"": "sub(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 85
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 85
			, "value": "b"
		}]
	}
}, {
	"": "sub(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract vector and scalar."
	, "ast": {
		"": "sub(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 87
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 87
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 87
				, "value": "b"
			}]
		}]
	}
}, {
	"": "mul(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply vector and scalar."
	, "ast": {
		"": "mul(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 90
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 90
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 90
			, "value": "b"
		}]
	}
}, {
	"": "mul(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 92
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply vector and scalar."
	, "ast": {
		"": "mul(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 92
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 92
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 95
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide vector and scalar."
	, "ast": {
		"": "div(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 95
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 95
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 95
			, "value": "b"
		}]
	}
}, {
	"": "div(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 97
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide vector and scalar."
	, "ast": {
		"": "div(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 97
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 97
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 97
				, "value": "b"
			}]
		}]
	}
}, {
	"": "min(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 100
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise minimum of the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), min.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), min.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 100
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "rhs"
				}]
			}, {
				"": "min.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "min"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "max(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 102
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise maximum of the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), max.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), max.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 102
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "rhs"
				}]
			}, {
				"": "max.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "max"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "vec"
		, "kind": "inline"
		, "cast": "val"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "min"
		, "kind": "inline"
		, "cast": "val"
		, "name": "min"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "max"
		, "kind": "inline"
		, "cast": "val"
		, "name": "max"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Clamp the vector component wise to the range [min ... max]"
	, "ast": {
		"": "min(max(vec, min), max)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "args": [{
		}, {
			"": "max(vec, min)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 105
			, "args": [{
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "vec"
			}, {
				"": "min"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "min"
			}]
		}, {
			"": "max"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 105
			, "value": "max"
		}]
	}
}, {
	"": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 108
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "vec"
		, "kind": "inline"
		, "cast": "val"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "min"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "min"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "max"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "max"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Clamp each component of the vector to the range [min ... max]"
	, "ast": {
		"": "clamp(vec, vec4f(min), vec4f(max))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "args": [{
		}, {
			"": "vec"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "value": "vec"
		}, {
			"": "vec4f(min)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "args": [{
				"": "min"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "min"
			}]
		}, {
			"": "vec4f(max)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "args": [{
				"": "max"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "max"
			}]
		}]
	}
}, {
	"": "dp3(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of the first 3 elements"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp3))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp3)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 112
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp3"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "p4x"
				}
				, "right": {
					"": "dp3"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "dp3"
				}
			}]
		}]
	}
}, {
	"": "dph(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 116
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Homogeneous dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dph))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dph)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 116
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dph"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "p4x"
				}
				, "right": {
					"": "dph"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "dph"
				}
			}]
		}]
	}
}, {
	"": "dp4(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 120
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp4)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 120
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp4"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "p4x"
				}
				, "right": {
					"": "dp4"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "dp4"
				}
			}]
		}]
	}
}, {
	"": "cross(a: vec4f, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cross"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 123
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Cross product of the first 3 elements"
	, "ast": {
		"": "vec4f(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "args": [{
		}, {
			"": "a.y * b.z - a.z * b.y"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.y * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
			}
			, "right": {
				"": "a.z * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
			}
		}, {
			"": "a.z * b.x - a.x * b.z"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.z * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
			}
			, "right": {
				"": "a.x * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
			}
		}, {
			"": "a.x * b.y - a.y * b.x"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.x * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
			}
			, "right": {
				"": "a.y * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
			}
		}]
	}
}, {
	"": "length(v: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "val"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Length of the vector(xyz)"
	, "ast": {
		"": "float32.sqrt(dp3(v, v))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "args": [{
			"": "dp3(v, v)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 126
			, "args": [{
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "v"
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "v"
			}]
		}]
	}
}, {
	"": "normalize(v: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "normalize"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 128
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Normalize the vector(xyz)"
	, "ast": {
		"": "div(v, vec4f(length(v)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "args": [{
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 128
			, "value": "v"
		}, {
			"": "vec4f(length(v))"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 128
			, "args": [{
				"": "length(v)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 128
				, "args": [{
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 128
					, "value": "v"
				}]
			}]
		}]
	}
}, {
	"": "eval(v: vec4f, x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 131
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Evaluate as a polynomial in point x"
	, "ast": {
		"": "float32((((v.w * x + v.z) * x + v.y) * x) + v.x)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "args": [{
			"": "(((v.w * x + v.z) * x + v.y) * x) + v.x"
			, "kind": "+"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 131
			, "left": {
				"": "(((v.w * x + v.z) * x + v.y) * x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "args": [{
					"": "((v.w * x + v.z) * x + v.y) * x"
					, "kind": "*"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "left": {
						"": "((v.w * x + v.z) * x + v.y)"
						, "kind": "()"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 131
						, "args": [{
							"": "(v.w * x + v.z) * x + v.y"
							, "kind": "+"
							, "type": "float32"
							, "file": "cmplStd/lib/math/Vector4f.ci"
							, "line": 131
							, "left": {
								"": "(v.w * x + v.z) * x"
								, "kind": "*"
								, "type": "float32"
								, "file": "cmplStd/lib/math/Vector4f.ci"
								, "line": 131
								, "left": {
									"": "(v.w * x + v.z)"
									, "kind": "()"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "args": [{
										"": "v.w * x + v.z"
										, "kind": "+"
										, "type": "float32"
										, "file": "cmplStd/lib/math/Vector4f.ci"
										, "line": 131
										, "left": {
											"": "v.w * x"
											, "kind": "*"
											, "type": "float32"
											, "file": "cmplStd/lib/math/Vector4f.ci"
											, "line": 131
											, "left": {
												"": "v.w"
												, "kind": "."
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "left": {
													"": "v"
													, "kind": ".variable"
													, "type": "vec4f"
													, "file": "cmplStd/lib/math/Vector4f.ci"
													, "line": 131
													, "value": "v"
												}
												, "right": {
													"": "w"
													, "kind": ".variable"
													, "type": "float32"
													, "file": "cmplStd/lib/math/Vector4f.ci"
													, "line": 131
													, "value": "w"
												}
											}
											, "right": {
												"": "x"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "x"
											}
										}
										, "right": {
											"": "v.z"
											, "kind": "."
											, "type": "float32"
											, "file": "cmplStd/lib/math/Vector4f.ci"
											, "line": 131
											, "left": {
												"": "v"
												, "kind": ".variable"
												, "type": "vec4f"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "v"
											}
											, "right": {
												"": "z"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "z"
											}
										}
									}]
								}
								, "right": {
									"": "x"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "x"
								}
							}
							, "right": {
								"": "v.y"
								, "kind": "."
								, "type": "float32"
								, "file": "cmplStd/lib/math/Vector4f.ci"
								, "line": 131
								, "left": {
									"": "v"
									, "kind": ".variable"
									, "type": "vec4f"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "v"
								}
								, "right": {
									"": "y"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "y"
								}
							}
						}]
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 131
						, "value": "x"
					}
				}]
			}
			, "right": {
				"": "v.x"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "left": {
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "value": "v"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "value": "x"
				}
			}
		}]
	}
}, {
	"": "mat4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "mat4f"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 2
	, "size": 64
	, "offs": 176984
	, "static": true
	, "const": true
	, "doc": "A 4x4 matrix"
}, {
	"": "mat4f.m"
	, "kind": "variable"
	, "cast": "val"
	, "name": "m"
	, "owner": "mat4f"
	, "type": "float32[4][4]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 4
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array: m[1][0]"
}, {
	"": "mat4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "mat4f"
	, "type": "float32[16]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 7
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as a flatten array: data[4] => m[1][0]"
}, {
	"": "mat4f.v"
	, "kind": "variable"
	, "cast": "val"
	, "name": "v"
	, "owner": "mat4f"
	, "type": "vec4f[4]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 10
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array of vectors: v[1].x => m[1][0]"
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 182
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.x"
	, "kind": "variable"
	, "cast": "val"
	, "name": "x"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 14
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.y"
	, "kind": "variable"
	, "cast": "val"
	, "name": "y"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 16
	, "size": 16
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.z"
	, "kind": "variable"
	, "cast": "val"
	, "name": "z"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 18
	, "size": 16
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.w"
	, "kind": "variable"
	, "cast": "val"
	, "name": "w"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 20
	, "size": 16
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 14
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 14
		, "value": "x"
	}
}, {
	"": "mat4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 16
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 16
		, "value": "y"
	}
}, {
	"": "mat4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 18
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 18
		, "value": "z"
	}
}, {
	"": "mat4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 20
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 20
		, "value": "w"
	}
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 182
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.xx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 24
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 26
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 28
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 30
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 33
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 35
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 37
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 39
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 42
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 44
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 46
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 48
	, "size": 4
	, "offs": 44
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 51
	, "size": 4
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 53
	, "size": 4
	, "offs": 52
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 55
	, "size": 4
	, "offs": 56
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.ww"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "ww"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 57
	, "size": 4
	, "offs": 60
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.xx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 24
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 24
		, "value": "xx"
	}
}, {
	"": "mat4f.xy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 26
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 26
		, "value": "xy"
	}
}, {
	"": "mat4f.xz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 28
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 28
		, "value": "xz"
	}
}, {
	"": "mat4f.xw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 30
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 30
		, "value": "xw"
	}
}, {
	"": "mat4f.yx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 33
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 33
		, "value": "yx"
	}
}, {
	"": "mat4f.yy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 35
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 35
		, "value": "yy"
	}
}, {
	"": "mat4f.yz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 37
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 37
		, "value": "yz"
	}
}, {
	"": "mat4f.yw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 39
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 39
		, "value": "yw"
	}
}, {
	"": "mat4f.zx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 42
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 42
		, "value": "zx"
	}
}, {
	"": "mat4f.zy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 44
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 44
		, "value": "zy"
	}
}, {
	"": "mat4f.zz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 46
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 46
		, "value": "zz"
	}
}, {
	"": "mat4f.zw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 48
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 48
		, "value": "zw"
	}
}, {
	"": "mat4f.wx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 51
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 51
		, "value": "wx"
	}
}, {
	"": "mat4f.wy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 53
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 53
		, "value": "wy"
	}
}, {
	"": "mat4f.wz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 55
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 55
		, "value": "wz"
	}
}, {
	"": "mat4f.ww"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ww"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 57
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "ww"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 57
		, "value": "ww"
	}
}, {
	"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "xx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": false
	}, {
		"": "xy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}, {
		"": "xz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}, {
		"": "xw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": false
	}, {
		"": "yx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 84
		, "static": false
		, "const": false
	}, {
		"": "yy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 88
		, "static": false
		, "const": false
	}, {
		"": "yz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 92
		, "static": false
		, "const": false
	}, {
		"": "yw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 96
		, "static": false
		, "const": false
	}, {
		"": "zx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 100
		, "static": false
		, "const": false
	}, {
		"": "zy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 104
		, "static": false
		, "const": false
	}, {
		"": "zz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 108
		, "static": false
		, "const": false
	}, {
		"": "zw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 112
		, "static": false
		, "const": false
	}, {
		"": "wx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 116
		, "static": false
		, "const": false
	}, {
		"": "wy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 120
		, "static": false
		, "const": false
	}, {
		"": "wz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 124
		, "static": false
		, "const": false
	}, {
		"": "ww"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "ww"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 128
		, "static": false
		, "const": false
	}]
	, "size": 49
	, "offs": 399016
	, "static": true
	, "const": false
	, "doc": "Initialize all elements with the given values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 66
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xy := xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xz := xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xw := xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.yx := yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yy := yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yz := yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yw := yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.zx := zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zy := zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zz := zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zw := zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.wx := wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.wy := wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.wz := wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.ww := ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399016
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399019
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399022
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399025
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399028
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399031
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399034
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399037
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399040
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399043
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399046
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399049
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399052
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399055
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399058
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399061
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399064
		, "size": 1
	}]
}, {
	"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "x"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "y"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "z"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "z"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": true
	}, {
		"": "w"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "w"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": true
	}]
	, "size": 21
	, "offs": 399072
	, "static": true
	, "const": false
	, "doc": "Initialize matrix with row vectors"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 76
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.z := z;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.w := w;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399072
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399074
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399075
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399077
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399079
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399080
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399082
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399084
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399085
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399087
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399089
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399090
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399092
		, "size": 1
	}]
}, {
	"": "dp3(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product of the first 3 elements"
	, "ast": {
		"": "vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "dp3(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "value": "1.000000"
		}]
	}
}, {
	"": "dph(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: homogeneous dot product"
	, "ast": {
		"": "vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "dph(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "dp4(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product"
	, "ast": {
		"": "vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "dp4(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "transpose(mat: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "transpose"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "val"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 128
		, "static": false
		, "const": true
	}]
	, "size": 49
	, "offs": 399096
	, "static": true
	, "const": false
	, "doc": "Transpose the matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 88
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := mat.xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xy := mat.yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xz := mat.zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xw := mat.wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.yx := mat.xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yy := mat.yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yz := mat.zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yw := mat.wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.zx := mat.xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zy := mat.yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zz := mat.zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zw := mat.wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.wx := mat.xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wy := mat.yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wz := mat.zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.ww := mat.ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399096
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399099
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399102
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399105
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399108
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399111
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399114
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399117
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399120
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399123
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399126
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399129
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399132
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399135
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399138
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 399141
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399144
		, "size": 1
	}]
}, {
	"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 97
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "lhs"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "rhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "rhs"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}]
	, "size": 245
	, "offs": 399152
	, "static": true
	, "const": false
	, "doc": "Multiply two matrices (rows * cols)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "stmt": [{
			"": "transposed"
			, "kind": ".variable"
			, "type": "mat4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 98
			, "value": "transposed"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 99
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := dp4(transposed, lhs.x);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 100
					}, {
						"": ".result.y := dp4(transposed, lhs.y);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 101
					}, {
						"": ".result.z := dp4(transposed, lhs.z);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 102
					}, {
						"": ".result.w := dp4(transposed, lhs.w);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 103
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399152
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399156
		, "size": 2
	}, {
		"instruction": "load.sp(-60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399158
		, "size": 4
	}, {
		"instruction": "copy.mem -64"
		, "name": "copy.mem"
		, "code": "0x1e"
		, "offs": 399162
		, "size": 4
	}, {
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399166
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399170
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 399175
		, "size": 1
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399176
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399180
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399184
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399186
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399188
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399192
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399193
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399195
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399196
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399197
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399199
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399203
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399204
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399206
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399207
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399208
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399210
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399214
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399215
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399217
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399218
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399219
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399221
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399222
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399224
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399225
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399226
		, "size": 2
	}, {
		"instruction": "set.x128 sp(23)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399228
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399230
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399234
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399236
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399240
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399242
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399246
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399247
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399249
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399250
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399251
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399253
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399257
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399258
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399260
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399261
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399262
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399264
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399268
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399269
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399271
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399272
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399273
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399275
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399276
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399278
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399279
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399280
		, "size": 2
	}, {
		"instruction": "set.x128 sp(27)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399282
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399284
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399288
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399290
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399294
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399296
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399300
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399301
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399303
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399304
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399305
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399307
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399311
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399312
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399314
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399315
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399316
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399318
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399322
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399323
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399325
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399326
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399327
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399329
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399330
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399332
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399333
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399334
		, "size": 2
	}, {
		"instruction": "set.x128 sp(31)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399336
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 399338
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399342
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399344
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399348
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399350
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399354
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399355
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399357
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399358
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399359
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399361
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399365
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399366
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399368
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399369
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399370
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399372
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399376
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399377
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399379
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399380
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399381
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399383
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399384
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399386
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 399387
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399388
		, "size": 2
	}, {
		"instruction": "set.x128 sp(35)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399390
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399392
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399396
		, "size": 1
	}]
}, {
	"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 111
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "center"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "center"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}]
	, "size": 454
	, "offs": 399400
	, "static": true
	, "const": false
	, "doc": "Build a rotation matrix\nadapted from: https://sites.google.com/site/glennmurray/Home/rotation-matrices-and-formulas"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "stmt": [{
			"": "len"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 112
			, "value": "len"
		}, {
			"": "if ((len) < 0.000000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 113
			, "test": {
				"": "(len) < 0.000000"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 113
				, "left": {
					"": "(len)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 113
					, "args": [{
						"": "len"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 113
						, "value": "len"
					}]
				}
				, "right": {
					"": "0.000000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 113
					, "value": "0.000000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 113
				, "stmt": [{
					"": "trace(\"invalid direction of rotation\", direction);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 114
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 115
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "mat4f"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.x := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 116
							}, {
								"": ".result.y := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 117
							}, {
								"": ".result.z := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 118
							}, {
								"": ".result.w := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 119
							}]
						}
					}
				}]
			}
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 122
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 123
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 124
			, "value": "z"
		}, {
			"": "cx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 125
			, "value": "cx"
		}, {
			"": "cy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 126
			, "value": "cy"
		}, {
			"": "cz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 127
			, "value": "cz"
		}, {
			"": "xx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 128
			, "value": "xx"
		}, {
			"": "xy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 129
			, "value": "xy"
		}, {
			"": "xz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 130
			, "value": "xz"
		}, {
			"": "yy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 131
			, "value": "yy"
		}, {
			"": "yz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 132
			, "value": "yz"
		}, {
			"": "zz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 133
			, "value": "zz"
		}, {
			"": "s"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 135
			, "value": "s"
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 136
			, "value": "c"
		}, {
			"": "k"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 137
			, "value": "k"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 139
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx + (yy + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 140
					}, {
						"": ".result.xy := xy * k - z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 141
					}, {
						"": ".result.xz := xz * k + y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 142
					}, {
						"": ".result.xw := (cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 143
					}, {
						"": ".result.yx := xy * k + z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 145
					}, {
						"": ".result.yy := yy + (xx + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 146
					}, {
						"": ".result.yz := yz * k - x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 147
					}, {
						"": ".result.yw := (cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 148
					}, {
						"": ".result.zx := xz * k - y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 150
					}, {
						"": ".result.zy := yz * k + x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 151
					}, {
						"": ".result.zz := zz + (xx + yy) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 152
					}, {
						"": ".result.zw := (cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 153
					}, {
						"": ".result.w := vec4f(0, 0, 0, 1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 155
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399400
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 399402
		, "size": 1
	}, {
		"instruction": "dup.x128 sp(0)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 399403
		, "size": 2
	}, {
		"instruction": "dup.x128 sp(4)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 399405
		, "size": 2
	}, {
		"instruction": "dp3.v4f"
		, "name": "dp3.v4f"
		, "code": "0x9a"
		, "offs": 399407
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399408
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399412
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399414
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399418
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 399420
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 399421
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 399430
		, "size": 1
	}, {
		"instruction": "jz +69"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 399431
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399435
		, "size": 5
	}, {
		"instruction": "load.c32 114"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399440
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399445
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 399450
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399455
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 399460
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399465
		, "size": 2
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399467
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399471
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399472
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399473
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399474
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399475
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399477
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399478
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399479
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399480
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399481
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399483
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399484
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399485
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399486
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399487
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399489
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399490
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399491
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399492
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399493
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399495
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399499
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399500
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399502
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399503
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 399505
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399506
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399508
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399512
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399513
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 399515
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399516
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399518
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399522
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399523
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 399525
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399526
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399528
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399529
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399531
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399535
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399536
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399538
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399542
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399543
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399545
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399547
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399548
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399550
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399552
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399553
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399555
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399557
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399558
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399560
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399562
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399563
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399565
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399567
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399568
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399570
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399572
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399573
		, "size": 2
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399575
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399579
		, "size": 2
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 399581
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 399585
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399590
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399592
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399593
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399595
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399597
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399599
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399600
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399602
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399603
		, "size": 1
	}, {
		"instruction": "set.x32 sp(21)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399604
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399606
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399608
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399610
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399611
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399613
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399615
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399616
		, "size": 1
	}, {
		"instruction": "set.x32 sp(22)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399617
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399619
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399621
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399623
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399624
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399626
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399628
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399629
		, "size": 1
	}, {
		"instruction": "set.x32 sp(23)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399630
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399632
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399634
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399636
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399638
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399639
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399640
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399642
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399644
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399646
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399647
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399649
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399651
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399652
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399653
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399654
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399655
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399657
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399658
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399660
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399662
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399663
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399665
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399667
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399668
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399669
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399671
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399672
		, "size": 1
	}, {
		"instruction": "set.x32 sp(24)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399673
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399675
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399677
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399679
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399680
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399682
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399684
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399685
		, "size": 1
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399686
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399688
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399690
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399692
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399694
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399695
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399697
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399698
		, "size": 1
	}, {
		"instruction": "set.x32 sp(26)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399699
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399701
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399703
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399705
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399706
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399708
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399710
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399711
		, "size": 1
	}, {
		"instruction": "set.x32 sp(27)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399712
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399714
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399716
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399718
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399720
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399721
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399722
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399724
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399726
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399728
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399729
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399731
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399733
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399734
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399735
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399736
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399737
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399739
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399740
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399742
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399744
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399745
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399747
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399749
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399750
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399751
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399753
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399754
		, "size": 1
	}, {
		"instruction": "set.x32 sp(28)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399755
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399757
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399759
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399761
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399762
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399764
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399766
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399767
		, "size": 1
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399768
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399770
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399772
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399774
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399775
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399777
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399779
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399780
		, "size": 1
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399781
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399783
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399785
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399787
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399789
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399790
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399792
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399793
		, "size": 1
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399794
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399796
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399798
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399800
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399802
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399803
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399804
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399806
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399808
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399810
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399811
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399813
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399815
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399816
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399817
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399818
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399819
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399821
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399822
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399824
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399826
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399827
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399829
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399831
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 399832
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399833
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399835
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 399836
		, "size": 1
	}, {
		"instruction": "set.x32 sp(32)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399837
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 399839
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399844
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399845
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399846
		, "size": 1
	}, {
		"instruction": "set.x128 sp(36)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 399847
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 399849
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399853
		, "size": 1
	}]
}, {
	"": "rotation(direction: vec4f, angle: float32): mat4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 160
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 64
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Build a rotation matrix"
	, "ast": {
		"": "rotation(vec4f(0), direction, angle)"
		, "kind": "()"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "args": [{
		}, {
			"": "vec4f(0)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "args": [{
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 160
				, "value": "0"
			}]
		}, {
			"": "direction"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "value": "direction"
		}, {
			"": "angle"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 160
			, "value": "angle"
		}]
	}
}, {
	"": "translation(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "translation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 163
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 88
	, "offs": 399856
	, "static": true
	, "const": false
	, "doc": "Build a translation matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 163
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 164
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.xw := direction.x * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 165
					}, {
						"": ".result.yx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yy := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.yw := direction.y * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 166
					}, {
						"": ".result.zx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zz := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.zw := direction.z * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 167
					}, {
						"": ".result.wx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.wy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.wz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}, {
						"": ".result.ww := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 168
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 399856
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399861
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399863
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399864
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399866
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399867
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399869
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399871
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399872
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399874
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399875
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399877
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399878
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 399880
		, "size": 5
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399885
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399887
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399888
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399890
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399892
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399896
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399897
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399899
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399900
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399902
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399903
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399905
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399906
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 399908
		, "size": 5
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399913
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399915
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 399917
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399921
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399922
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399924
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399925
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399927
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399928
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399930
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399931
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399933
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399934
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 399936
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399941
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 399943
		, "size": 1
	}]
}, {
	"": "scale(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "scale"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 217
	, "offs": 399944
	, "static": true
	, "const": false
	, "doc": "Build a scaling matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 173
		, "stmt": [{
			"": "rcp(val: float32): float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 174
			, "value": "rcp(val: float32): float32"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 175
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := rcp(direction.x * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.xw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.yx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yy := rcp(direction.y * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.yw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 177
					}, {
						"": ".result.zx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zz := rcp(direction.z * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.zw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.wx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.wy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.wz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.ww := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399944
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 399946
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399947
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 399949
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399950
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399952
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 399953
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 399954
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399958
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 399960
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 399961
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399965
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 399967
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 399968
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 399977
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 399978
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399982
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 399983
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 399987
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 399992
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 399994
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399995
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 399997
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 399999
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400000
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400002
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400003
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400005
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400006
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400008
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400009
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400011
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400013
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 400017
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400018
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 400020
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400021
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400023
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 400024
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400025
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400029
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 400031
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400032
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400036
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 400038
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400039
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400048
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400049
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400053
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400054
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 400058
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400063
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 400065
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400066
		, "size": 2
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400068
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400070
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400071
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400073
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400074
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400076
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400077
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400079
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400080
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400082
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400084
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 400088
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400089
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 400091
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400092
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400094
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 400095
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400096
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400100
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 400102
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400103
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400107
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 400109
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400110
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400119
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400120
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400124
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400125
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 400129
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400134
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 400136
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400137
		, "size": 2
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400139
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400141
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400142
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400144
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400145
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400147
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400148
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400150
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400151
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 400153
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400158
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400160
		, "size": 1
	}]
}, {
	"": "vec2d"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec2d"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 2
	, "size": 16
	, "offs": 198712
	, "static": true
	, "const": true
	, "doc": "A 2d vector (2x float64)"
}, {
	"": "vec2d.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec2d"
	, "type": "vec2d.<?>"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 44
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec2d.<?>.x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "x"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 5
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec2d.<?>.y"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "y"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 7
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec2d.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 5
		, "value": "x"
	}
}, {
	"": "vec2d.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 7
		, "value": "y"
	}
}, {
	"": "vec2d.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec2d"
	, "type": "float64[2]"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 10
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec2d(x: float64, y: float64): vec2d"
	, "kind": "function"
	, "cast": "inline"
	, "name": "vec2d"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 400168
	, "static": true
	, "const": false
	, "doc": "Initialize with given x, y components"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 15
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "vec2d"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Vector2d.ci"
						, "line": 16
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Vector2d.ci"
						, "line": 17
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 400168
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 400171
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400174
		, "size": 1
	}]
}, {
	"": "add(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 22
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "mul(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), mul.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "args": [{
			"": "emit(struct(a), struct(b), mul.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 28
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "div(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), div.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "args": [{
			"": "emit(struct(a), struct(b), div.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "b"
				}]
			}, {
				"": "div.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "div"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "min(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the minimum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), min.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "args": [{
			"": "emit(struct(a), struct(b), min.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 34
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "b"
				}]
			}, {
				"": "min.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "min"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "max(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the maximum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), max.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "args": [{
			"": "emit(struct(a), struct(b), max.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "b"
				}]
			}, {
				"": "max.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "max"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "ceq(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceq"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Compare the two vectors for equality."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), ceq.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "args": [{
			"": "emit(struct(a), struct(b), ceq.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "ceq.p2d"
				, "kind": "."
				, "type": "bool"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "left": {
					"": "ceq"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "ceq"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "dot(a: vec2d, b: vec2d): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dot"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of thw two vectors"
	, "ast": {
		"": "a.x * b.x + a.y * b.y"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "left": {
			"": "a.x * b.x"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.x"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
			, "right": {
				"": "b.x"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
		}
		, "right": {
			"": "a.y * b.y"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.y"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
			, "right": {
				"": "b.y"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
		}
	}
}, {
	"": "length(str: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 38
	, "offs": 400176
	, "static": true
	, "const": false
	, "doc": "Computes the length of the string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 4
		, "stmt": [{
			"": "if ((str) == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 5
			, "test": {
				"": "(str) == null"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 5
				, "left": {
					"": "(str)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 5
					, "args": [{
						"": "str"
						, "kind": ".variable"
						, "type": "char[*]"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 5
						, "value": "str"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 5
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 5
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 6
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 6
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 8
			, "value": "result"
		}, {
			"": "for ( ; str[result]; result := result + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 9
			, "test": {
				"": "str[result]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 9
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 9
					, "value": "str"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 9
					, "value": "result"
				}
			}
			, "step": {
				"": "result := result + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 9
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 9
					, "value": "result"
				}
				, "right": {
					"": "result + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 9
					, "left": {
						"": "result"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 9
						, "value": "result"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 9
						, "value": "1"
					}
				}
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 11
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 11
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400176
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400178
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400183
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400184
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400188
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400189
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400191
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400192
		, "size": 1
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400193
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400197
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400201
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400203
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400205
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400206
		, "size": 1
	}, {
		"instruction": "jnz -10"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400207
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400211
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400213
		, "size": 1
	}]
}, {
	"": "indexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "indexOf"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 400216
	, "static": true
	, "const": false
	, "doc": "Returns the index of the first occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 15
		, "stmt": [{
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 16
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 16
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 16
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 16
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 16
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 16
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 16
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 16
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 16
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 16
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 16
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 17
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 17
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 17
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 17
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 17
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 17
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 17
						, "stmt": [{
							"": "return .result := i;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 18
							, "stmt": {
								"": ".result := i"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 18
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := -1;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 21
			, "stmt": {
				"": ".result := -1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "-1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 21
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 21
						, "value": "1"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400216
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400217
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400221
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400223
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400225
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400226
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400227
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400231
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400232
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400233
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400237
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400239
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400240
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400244
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400246
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400248
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400249
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400250
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400254
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400258
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400263
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400265
		, "size": 1
	}]
}, {
	"": "lastIndexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lastIndexOf"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 400272
	, "static": true
	, "const": false
	, "doc": "Returns the index of the last occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 25
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 26
			, "value": "result"
		}, {
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 27
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 27
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 27
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 27
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 27
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 27
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 27
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 27
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 27
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 27
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 27
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 28
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 28
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 28
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 28
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 28
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 28
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 28
						, "stmt": [{
							"": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 29
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 32
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 32
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400272
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400277
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400278
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400282
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400284
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400286
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400287
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400288
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400292
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400293
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400294
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(1, 0)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 400298
		, "size": 3
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400301
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400305
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400307
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400309
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400310
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400311
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400315
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400319
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400321
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 73
	, "offs": 400328
	, "static": true
	, "const": false
	, "doc": "Check if a string begins with a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "stmt": [{
			"": "for (i; (with[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 37
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 37
				, "value": "i"
			}
			, "test": {
				"": "(with[i]) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 37
				, "left": {
					"": "(with[i])"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 37
					, "args": [{
						"": "with[i]"
						, "kind": "[]"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 37
						, "left": {
							"": "with"
							, "kind": ".variable"
							, "type": "char[*]"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 37
							, "value": "with"
						}
						, "right": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 37
							, "value": "i"
						}
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 37
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 37
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 37
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 37
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 37
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 37
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 37
				, "stmt": [{
					"": "if (cmp(str[i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 38
					, "test": {
						"": "cmp(str[i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 38
						, "left": {
							"": "cmp(str[i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 38
							, "args": [{
							}, {
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 38
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 38
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 38
									, "value": "i"
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 38
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 38
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 38
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 38
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 38
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 39
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 39
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 42
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 42
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400328
		, "size": 1
	}, {
		"instruction": "jmp +45"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400329
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400333
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400334
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400336
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400338
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400339
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400340
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400342
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400344
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400345
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400346
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400348
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400349
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400353
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400354
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400355
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400359
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400360
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 400364
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400365
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400369
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400370
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400374
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400376
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400378
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400379
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400380
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400381
		, "size": 1
	}, {
		"instruction": "jz -49"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400382
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400386
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400390
		, "size": 5
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400395
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 400399
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400400
		, "size": 1
	}]
}, {
	"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 46
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 126
	, "offs": 400408
	, "static": true
	, "const": false
	, "doc": "Check if a string ends in a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "stmt": [{
			"": "withLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 47
			, "value": "withLen"
		}, {
			"": "strLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 48
			, "value": "strLen"
		}, {
			"": "if (strLen < withLen)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 49
			, "test": {
				"": "strLen < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 49
				, "left": {
					"": "strLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 49
					, "value": "strLen"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 49
					, "value": "withLen"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 49
				, "stmt": [{
					"": "return .result := false;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 50
					, "stmt": {
						"": ".result := false"
						, "kind": ":="
						, "type": "bool"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "bool"
							, "value": ".result"
						}
						, "right": {
							"": "false"
							, "kind": ".variable"
							, "type": "bool"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 50
							, "value": "false"
						}
					}
				}]
			}
		}, {
			"": "for (i; i < withLen; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 52
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 52
				, "value": "i"
			}
			, "test": {
				"": "i < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 52
					, "value": "withLen"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 52
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 52
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 52
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 52
				, "stmt": [{
					"": "if (cmp(str[strLen - withLen + i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 53
					, "test": {
						"": "cmp(str[strLen - withLen + i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 53
						, "left": {
							"": "cmp(str[strLen - withLen + i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 53
							, "args": [{
							}, {
								"": "str[strLen - withLen + i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 53
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 53
									, "value": "str"
								}
								, "right": {
									"": "strLen - withLen + i"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 53
									, "left": {
										"": "strLen - withLen"
										, "kind": "-"
										, "type": "int32"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 53
										, "left": {
											"": "strLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 53
											, "value": "strLen"
										}
										, "right": {
											"": "withLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 53
											, "value": "withLen"
										}
									}
									, "right": {
										"": "i"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 53
										, "value": "i"
									}
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 53
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 53
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 53
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 53
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 53
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 54
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 54
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 57
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 57
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400408
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400409
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400411
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400416
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400417
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400421
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400422
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400424
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400429
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400430
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400434
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400436
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400438
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400439
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400443
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400444
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 400448
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400449
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400453
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400454
		, "size": 1
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400455
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400459
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400460
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400462
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400464
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 400466
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400467
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400469
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400470
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400471
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400472
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400474
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400476
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400477
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400478
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400480
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400481
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400485
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400486
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400487
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400491
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400492
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 400496
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400497
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400501
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400502
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400506
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400508
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400510
		, "size": 1
	}, {
		"instruction": "jnz -52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400511
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400515
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400519
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400524
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 400528
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400529
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400533
		, "size": 1
	}]
}, {
	"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 400536
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, less or greater, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 62
			, "value": "result"
		}, {
			"": "for (i; result == 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 63
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 63
				, "value": "i"
			}
			, "test": {
				"": "result == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 63
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 63
					, "value": "result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 63
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 63
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 63
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 63
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 63
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 63
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 63
				, "stmt": [{
					"": "result := cmp(str[i], with[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 64
				}, {
					"": "if ((str[i]) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 65
					, "test": {
						"": "(str[i]) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 65
						, "left": {
							"": "(str[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 65
							, "args": [{
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 65
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 65
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 65
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 65
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 65
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 66
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 69
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 69
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400536
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400537
		, "size": 1
	}, {
		"instruction": "jmp +46"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400538
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400542
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400543
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400545
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400547
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400548
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400549
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400551
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400553
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400554
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400555
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400557
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400558
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400562
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400564
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400566
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400568
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400569
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400570
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400571
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400572
		, "size": 4
	}, {
		"instruction": "jmp +16"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400576
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400580
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400584
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400586
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400587
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400588
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400592
		, "size": 4
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400596
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400598
		, "size": 1
	}]
}, {
	"": "ignCaseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "ignCaseCmp"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 400672
	, "static": true
	, "const": false
	, "doc": "ignore case character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 73
		, "stmt": [{
			"": "ignCase(chr: char): char"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 74
			, "value": "ignCase(chr: char): char"
		}, {
			"": "return .result := ignCase(chr) - ignCase(with);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 84
			, "stmt": {
				"": ".result := ignCase(chr) - ignCase(with)"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "ignCase(chr) - ignCase(with)"
					, "kind": "-"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 84
					, "left": {
						"": "ignCase(chr)"
						, "kind": "()"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 84
						, "args": [{
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 84
							, "value": "chr"
						}]
					}
					, "right": {
						"": "ignCase(with)"
						, "kind": "()"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 84
						, "args": [{
							"": "with"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 84
							, "value": "with"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400672
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400673
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400677
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400678
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400683
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400684
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400688
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400689
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400693
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400694
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400699
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400700
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 400704
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400705
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400707
		, "size": 1
	}]
}, {
	"": "caseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "caseCmp"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 400712
	, "static": true
	, "const": false
	, "doc": "default character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 88
		, "stmt": [{
			"": "return .result := chr - with;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 89
			, "stmt": {
				"": ".result := chr - with"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "chr - with"
					, "kind": "-"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 89
					, "left": {
						"": "chr"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 89
						, "value": "chr"
					}
					, "right": {
						"": "with"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 89
						, "value": "with"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400712
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400716
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400717
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400721
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 400722
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400723
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400725
		, "size": 1
	}]
}, {
	"": "toHex(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toHex"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert lower part (4 bits) of the input value to the corresponding lower case hexadecimal character"
	, "ast": {
		"": "int32(\"0123456789abcdef\"[value & 15])"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 93
		, "args": [{
			"": "\"0123456789abcdef\"[value & 15]"
			, "kind": "[]"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 93
			, "left": {
				"": "\"0123456789abcdef\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 93
				, "value": "\"0123456789abcdef\""
			}
			, "right": {
				"": "value & 15"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 93
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 93
					, "value": "value"
				}
				, "right": {
					"": "15"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 93
					, "value": "15"
				}
			}
		}]
	}
}, {
	"": "startsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 96
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 96
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 96
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 96
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string begins with a specified string, using case-sensitive comparison"
	, "ast": {
		"": "startsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 96
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 96
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 96
			, "value": "caseCmp"
		}]
	}
}, {
	"": "endsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 98
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 98
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string ends in a specified string, using case-sensitive comparison"
	, "ast": {
		"": "endsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 98
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 98
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 98
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 98
			, "value": "caseCmp"
		}]
	}
}, {
	"": "compare(str: char[*], with: char[*]): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 100
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, less or greater, using case-sensitive comparison"
	, "ast": {
		"": "compare(str, with, caseCmp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 100
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 100
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 100
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 100
			, "value": "caseCmp"
		}]
	}
}, {
	"": "equals(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "equals"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 102
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 102
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 102
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 102
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, using case-sensitive comparison"
	, "ast": {
		"": "compare(str, with, caseCmp) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 102
		, "left": {
			"": "compare(str, with, caseCmp)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 102
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 102
				, "value": "str"
			}, {
				"": "with"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 102
				, "value": "with"
			}, {
				"": "caseCmp"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 102
				, "value": "caseCmp"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 102
			, "value": "0"
		}
	}
}, {
	"": "contains(str: char[*], chr: char): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "contains"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 105
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 105
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 105
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string contains the given character"
	, "ast": {
		"": "indexOf(str, chr) >= 0"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 105
		, "left": {
			"": "indexOf(str, chr)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 105
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 105
				, "value": "str"
			}, {
				"": "chr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 105
				, "value": "chr"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 105
			, "value": "0"
		}
	}
}, {
	"": "FormatFlags"
	, "kind": "typename"
	, "cast": "val"
	, "name": "FormatFlags"
	, "type": "typename"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 119
	, "size": 16
	, "offs": 223008
	, "static": true
	, "const": true
	, "doc": "Flags to convert numbers to string"
}, {
	"": "FormatFlags.showSign"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "showSign"
	, "owner": "FormatFlags"
	, "type": "bool"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 121
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "forced show sign"
	, "ast": {
		"": "false"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 121
		, "value": "false"
	}
}, {
	"": "FormatFlags.precision"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "precision"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 124
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
	, "doc": "precision or radix"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 124
		, "value": "0"
	}
}, {
	"": "FormatFlags.padChr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padChr"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 127
	, "size": 1
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "padding character"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 127
		, "value": "0"
	}
}, {
	"": "FormatFlags.padLen"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padLen"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 130
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "doc": "padding length"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 130
		, "value": "0"
	}
}, {
	"": "append(output: char[], pos: int32, value: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 134
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "value"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 84
	, "offs": 400728
	, "static": true
	, "const": false
	, "doc": "Append a string to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "stmt": [{
			"": "for (i; value[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 135
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 135
				, "value": "i"
			}
			, "test": {
				"": "value[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 135
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 135
					, "value": "value"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 135
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 135
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 135
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 135
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 135
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 135
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 135
				, "stmt": [{
					"": "if (pos >= (output.length))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 136
					, "test": {
						"": "pos >= (output.length)"
						, "kind": ">="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 136
						, "left": {
							"": "pos"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 136
							, "value": "pos"
						}
						, "right": {
							"": "(output.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 136
							, "args": [{
								"": "output.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 136
								, "left": {
									"": "output"
									, "kind": ".variable"
									, "type": "char[]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 136
									, "value": "output"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 136
									, "value": "length"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 136
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 137
						}]
					}
				}, {
					"": "output[pos] := value[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 139
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 140
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 143
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 143
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 143
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 143
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 143
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 143
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 143
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 143
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 144
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 146
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 147
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 147
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400728
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400729
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400733
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400735
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400737
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400738
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400742
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400746
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400748
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400750
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400751
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400752
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400754
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400756
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 400757
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400758
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400760
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400764
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400766
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400770
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400772
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400774
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400775
		, "size": 1
	}, {
		"instruction": "jnz -43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400776
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400780
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400784
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400786
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400788
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400789
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400793
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400795
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400799
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400801
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400802
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400804
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 400806
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 400807
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(5, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 400808
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400811
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 151
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 151
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 151
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 151
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "sign"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "sign"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 151
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 151
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 151
		, "size": 4
		, "offs": 32
		, "static": false
		, "const": true
	}]
	, "size": 707
	, "offs": 400832
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 151
		, "stmt": [{
			"": "whiteSpace"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 152
			, "value": "whiteSpace"
		}, {
			"": "radixDigits"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 153
			, "value": "radixDigits"
		}, {
			"": "len"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 155
			, "value": "len"
		}, {
			"": "digits"
			, "kind": ".variable"
			, "type": "char[80]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 156
			, "value": "digits"
		}, {
			"": "if (format.showSign)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 158
			, "test": {
				"": "format.showSign"
				, "kind": "."
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 158
				, "left": {
					"": "format"
					, "kind": ".variable"
					, "type": "FormatFlags"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 158
					, "value": "format"
				}
				, "right": {
					"": "showSign"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 158
					, "value": "showSign"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 158
				, "stmt": [{
					"": "if ((sign) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 159
					, "test": {
						"": "(sign) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 159
						, "left": {
							"": "(sign)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 159
							, "args": [{
								"": "sign"
								, "kind": ".variable"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 159
								, "value": "sign"
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 159
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 159
						, "stmt": [{
							"": "sign := '+';"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 160
						}]
					}
				}]
			}
		}, {
			"": "radix"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 164
			, "value": "radix"
		}, {
			"": "if (radix == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 165
			, "test": {
				"": "radix == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 165
				, "left": {
					"": "radix"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 165
					, "value": "radix"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 165
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 165
				, "stmt": [{
					"": "radix := 10;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 166
				}]
			}
		}, {
			"": "assert(radix > 1, \"radix is too small\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 168
		}, {
			"": "assert(radix < (radixDigits.length), \"radix is too big\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 169
		}, {
			"": "for ( ; value > (0); value := value / (radix))"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 172
			, "test": {
				"": "value > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 172
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 172
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 172
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 172
						, "value": "0"
					}]
				}
			}
			, "step": {
				"": "value := value / (radix)"
				, "kind": ":="
				, "type": "uint64"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 172
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 172
					, "value": "value"
				}
				, "right": {
					"": "value / (radix)"
					, "kind": "/"
					, "type": "uint64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 172
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "uint64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 172
						, "value": "value"
					}
					, "right": {
						"": "(radix)"
						, "kind": "()"
						, "type": "uint64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 172
						, "args": [{
							"": "radix"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 172
							, "value": "radix"
						}]
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 172
				, "stmt": [{
					"": "digits[len := len + 1] := radixDigits[value % (radix)];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 173
				}]
			}
		}, {
			"": "if (len == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 175
			, "test": {
				"": "len == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 175
				, "left": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 175
					, "value": "len"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 175
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 175
				, "stmt": [{
					"": "digits[len := len + 1] := '0';"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 176
				}]
			}
		}, {
			"": "maxLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 179
			, "value": "maxLen"
		}, {
			"": "padChr"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 181
			, "value": "padChr"
		}, {
			"": "if (padChr == '')"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 182
			, "test": {
				"": "padChr == ''"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 182
				, "left": {
					"": "padChr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 182
					, "value": "padChr"
				}
				, "right": {
					"": "''"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 182
					, "value": "''"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 182
				, "stmt": [{
					"": "padChr := ' ';"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 183
				}]
			}
		}, {
			"": "if ((sign) != 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 187
			, "test": {
				"": "(sign) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 187
				, "left": {
					"": "(sign)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 187
					, "args": [{
						"": "sign"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 187
						, "value": "sign"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 187
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 187
				, "stmt": [{
					"": "maxLen := maxLen - 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 188
				}, {
					"": "if (contains(whiteSpace, padChr))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 189
					, "test": {
						"": "contains(whiteSpace, padChr)"
						, "kind": "()"
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 189
						, "args": [{
						}, {
							"": "whiteSpace"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 189
							, "value": "whiteSpace"
						}, {
							"": "padChr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 189
							, "value": "padChr"
						}]
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 189
						, "stmt": [{
							"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
							, "kind": "for"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 191
							, "test": {
								"": "maxLen > 0"
								, "kind": ">"
								, "type": "bool"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 191
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 191
									, "value": "maxLen"
								}
								, "right": {
									"": "0"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 191
									, "value": "0"
								}
							}
							, "step": {
								"": "maxLen := maxLen - 1"
								, "kind": ":="
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 191
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 191
									, "value": "maxLen"
								}
								, "right": {
									"": "maxLen - 1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 191
									, "left": {
										"": "maxLen"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 191
										, "value": "maxLen"
									}
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 191
										, "value": "1"
									}
								}
							}
							, "stmt": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 191
								, "stmt": [{
									"": "assert(pos < (output.length));"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 192
								}, {
									"": "output[pos] := padChr;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 193
								}, {
									"": "pos := pos + 1;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 194
								}]
							}
						}]
					}
				}, {
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 197
				}, {
					"": "output[pos] := sign;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 198
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 199
				}]
			}
		}, {
			"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 203
			, "test": {
				"": "maxLen > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 203
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 203
					, "value": "maxLen"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 203
					, "value": "0"
				}
			}
			, "step": {
				"": "maxLen := maxLen - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 203
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 203
					, "value": "maxLen"
				}
				, "right": {
					"": "maxLen - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 203
					, "left": {
						"": "maxLen"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 203
						, "value": "maxLen"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 203
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 203
				, "stmt": [{
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 204
				}, {
					"": "output[pos] := padChr;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 205
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 206
				}]
			}
		}, {
			"": "for (i; i < len; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 210
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 210
				, "value": "i"
			}
			, "test": {
				"": "i < len"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 210
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 210
					, "value": "i"
				}
				, "right": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 210
					, "value": "len"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 210
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 210
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 210
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 210
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 210
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 210
				, "stmt": [{
					"": "assert(i < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 211
				}, {
					"": "output[pos] := digits[len - i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 212
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 213
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 216
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 216
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 216
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 216
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 216
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 216
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 216
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 216
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 217
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 219
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 220
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 220
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400832
		, "size": 1
	}, {
		"instruction": "inc.sp(+80)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400833
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400837
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400839
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400840
		, "size": 4
	}, {
		"instruction": "load.sp(+100)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400844
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 400848
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400849
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400850
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400851
		, "size": 4
	}, {
		"instruction": "load.c32 43"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400855
		, "size": 5
	}, {
		"instruction": "load.sp(+104)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400860
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 400864
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400865
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400867
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 400871
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400872
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400874
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400875
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400876
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400880
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400885
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400887
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400889
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 400894
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400895
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400899
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400903
		, "size": 5
	}, {
		"instruction": "load.c32 168"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400908
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400913
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400918
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400923
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400928
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400933
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 400937
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400941
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 400943
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400947
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400948
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400952
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400956
		, "size": 5
	}, {
		"instruction": "load.c32 169"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400961
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400966
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400971
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400976
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400981
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400986
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 400990
		, "size": 4
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400994
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 400998
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(25)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401002
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401004
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 401006
		, "size": 1
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 401007
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 401008
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401009
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401010
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401011
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401015
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401017
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401021
		, "size": 2
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401023
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401025
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401026
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401027
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401029
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 401031
		, "size": 1
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 401032
		, "size": 1
	}, {
		"instruction": "set.x64 sp(26)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401033
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401035
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401037
		, "size": 1
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 401038
		, "size": 1
	}, {
		"instruction": "jnz -41"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401039
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(21)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401043
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401045
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 401046
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401047
		, "size": 4
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401051
		, "size": 5
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401056
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401060
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401062
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401066
		, "size": 2
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401068
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401070
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401071
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401072
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401074
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 401078
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401079
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 401081
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(24)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401082
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401084
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401088
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401089
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401093
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401094
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 401095
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401096
		, "size": 4
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401100
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401105
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401109
		, "size": 1
	}, {
		"instruction": "load.sp(+112)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401110
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401114
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401115
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 401116
		, "size": 1
	}, {
		"instruction": "jnz +200"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401117
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401121
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401123
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401127
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401129
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 401130
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401134
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401138
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401139
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 401144
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401145
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401149
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401150
		, "size": 1
	}, {
		"instruction": "jnz +95"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401151
		, "size": 4
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401155
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401159
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401161
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401163
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401164
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401168
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401172
		, "size": 5
	}, {
		"instruction": "load.c32 192"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401177
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401182
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401187
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401192
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401197
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401202
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401207
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401211
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401215
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401216
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401218
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401220
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401221
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401222
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401224
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401228
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401230
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401232
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401236
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401238
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401240
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 401241
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401242
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401246
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401248
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401250
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401251
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401255
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401259
		, "size": 5
	}, {
		"instruction": "load.c32 197"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401264
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401269
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401274
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401279
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401284
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401289
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401294
		, "size": 4
	}, {
		"instruction": "load.sp(+112)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401298
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401302
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401303
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401305
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401307
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401308
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401309
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401311
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401315
		, "size": 2
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401317
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401321
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401323
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401325
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401326
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401330
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401334
		, "size": 5
	}, {
		"instruction": "load.c32 204"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401339
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401344
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401349
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401354
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401359
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401364
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401369
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401373
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401377
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401378
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401380
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401382
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401383
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401384
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401386
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401390
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401392
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401394
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401398
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401400
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401402
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 401403
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401404
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401408
		, "size": 1
	}, {
		"instruction": "jmp +85"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401409
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401413
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(33)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401415
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401417
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401418
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401422
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401426
		, "size": 5
	}, {
		"instruction": "load.c32 211"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401431
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401436
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401441
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401446
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401451
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401456
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401461
		, "size": 4
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401465
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401469
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401471
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 401473
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401474
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401475
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401476
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401478
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401480
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401481
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401482
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401484
		, "size": 4
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401488
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401490
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401494
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401496
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401498
		, "size": 1
	}, {
		"instruction": "jnz -86"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401499
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401503
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401507
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401509
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401511
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401512
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401516
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401518
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401522
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401524
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401525
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401527
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401529
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401530
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(32, 29)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 401531
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401534
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401538
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 224
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 224
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 224
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 224
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 224
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 224
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 224
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 224
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 224
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 224
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 224
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 224
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 224
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 226
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 226
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 228
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 228
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 228
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 228
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 228
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 228
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 228
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 228
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 228
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 228
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 228
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 228
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 228
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 230
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 230
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 230
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 230
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 230
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 230
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 0, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 230
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 230
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 230
			, "value": "pos"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 230
			, "value": "0"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 230
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 230
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 230
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 232
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 232
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 232
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 232
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 232
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 232
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, value < (0) ? ('-') : 0, uint64(value < (0) ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 232
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 232
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 232
			, "value": "pos"
		}, {
			"": "value < (0) ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 232
			, "test": {
				"": "value < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 232
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 232
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 232
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 232
						, "value": "0"
					}]
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 232
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 232
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 232
				, "value": "0"
			}
		}, {
			"": "uint64(value < (0) ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 232
			, "args": [{
				"": "value < (0) ? -value : value"
				, "kind": "?:"
				, "type": "int64"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 232
				, "test": {
					"": "value < (0)"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 232
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 232
						, "value": "value"
					}
					, "right": {
						"": "(0)"
						, "kind": "()"
						, "type": "int64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 232
						, "args": [{
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 232
							, "value": "0"
						}]
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 232
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 232
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 232
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 232
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 234
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 234
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 234
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, value < 0 ? ('-') : 0, uint64(value < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 234
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 234
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 234
			, "value": "pos"
		}, {
			"": "value < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 234
			, "test": {
				"": "value < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 234
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 234
					, "value": "value"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 234
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 234
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 234
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 234
				, "value": "0"
			}
		}, {
			"": "uint64(value < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 234
			, "args": [{
				"": "value < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 234
				, "test": {
					"": "value < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 234
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 234
						, "value": "value"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 234
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 234
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 234
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 234
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 234
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 236
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 236
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 236
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 236
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 236
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 236
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, (value) < 0 ? ('-') : 0, uint64((value) < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 236
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 236
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 236
			, "value": "pos"
		}, {
			"": "(value) < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 236
			, "test": {
				"": "(value) < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 236
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 236
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "int16"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 236
						, "value": "value"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 236
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 236
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 236
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 236
				, "value": "0"
			}
		}, {
			"": "uint64((value) < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 236
			, "args": [{
				"": "(value) < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int16"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 236
				, "test": {
					"": "(value) < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 236
					, "left": {
						"": "(value)"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 236
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int16"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 236
							, "value": "value"
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 236
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int16"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 236
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int16"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 236
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int16"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 236
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 236
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 238
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 238
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 238
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 238
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 238
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 238
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, (value) < 0 ? ('-') : 0, uint64((value) < 0 ? -value : value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 238
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 238
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 238
			, "value": "pos"
		}, {
			"": "(value) < 0 ? ('-') : 0"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 238
			, "test": {
				"": "(value) < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 238
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 238
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "int8"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 238
						, "value": "value"
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 238
					, "value": "0"
				}
			}
			, "left": {
				"": "('-')"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 238
				, "args": [{
					"": "'-'"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 238
					, "value": "'-'"
				}]
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 238
				, "value": "0"
			}
		}, {
			"": "uint64((value) < 0 ? -value : value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 238
			, "args": [{
				"": "(value) < 0 ? -value : value"
				, "kind": "?:"
				, "type": "int8"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 238
				, "test": {
					"": "(value) < 0"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 238
					, "left": {
						"": "(value)"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 238
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int8"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 238
							, "value": "value"
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 238
						, "value": "0"
					}
				}
				, "left": {
					"": "-value"
					, "kind": "-"
					, "type": "int8"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 238
					, "right": {
						"": "value"
						, "kind": ".variable"
						, "type": "int8"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 238
						, "value": "value"
					}
				}
				, "right": {
					"": "value"
					, "kind": ".variable"
					, "type": "int8"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 238
					, "value": "value"
				}
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 238
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 241
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 241
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 241
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 241
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 241
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 241
		, "size": 4
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 236
	, "offs": 401544
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 241
		, "stmt": [{
			"": "formatInt"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 242
			, "value": "formatInt"
		}, {
			"": "formatDec"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 248
			, "value": "formatDec"
		}, {
			"": "sign"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 255
			, "value": "sign"
		}, {
			"": "fract"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 256
			, "value": "fract"
		}, {
			"": "pos := append(output, pos, sign, uint64(int64(value)), formatInt);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 257
		}, {
			"": "pos := append(output, pos, \".\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 259
		}, {
			"": "fract := fract * float64.pow(10, format.precision);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 260
		}, {
			"": "pos := append(output, pos, 0, uint64(int64(fract)), formatDec);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 261
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 262
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 262
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401544
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401548
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401550
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401551
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401555
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401556
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401557
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401559
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401561
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401565
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401566
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401570
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401571
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401573
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 401577
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401578
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401580
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 401584
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 401585
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401586
		, "size": 2
	}, {
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401588
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401592
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401593
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401597
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401598
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401599
		, "size": 2
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401601
		, "size": 5
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401606
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401610
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401611
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401613
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 401617
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401618
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(10)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401620
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401622
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 401623
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401624
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401628
		, "size": 5
	}, {
		"instruction": "jmp +5"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401633
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401637
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401638
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401639
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401641
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401643
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 401644
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401645
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401649
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401651
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401652
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401656
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401658
		, "size": 2
	}, {
		"instruction": "load.sp(+60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401660
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401664
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 401669
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401670
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401674
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401675
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401677
		, "size": 2
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401679
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401683
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(18)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401684
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 401686
		, "size": 1
	}, {
		"instruction": "load.sp(+56)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401687
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401691
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 401696
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401697
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401701
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401703
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401704
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401706
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401708
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401713
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 401718
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401719
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401723
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401725
		, "size": 9
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401734
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401736
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 401740
		, "size": 1
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 401741
		, "size": 1
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401742
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401746
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401747
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(17)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401748
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(18)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401750
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401752
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401753
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 401755
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401756
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401760
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 401765
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401766
		, "size": 4
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401770
		, "size": 2
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 401772
		, "size": 3
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401775
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401779
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 266
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 266
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 266
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 266
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 266
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 266
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, float64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 266
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 266
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 266
			, "value": "pos"
		}, {
			"": "float64(value)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 266
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 266
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 266
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 269
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 269
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 269
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 269
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 269
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 401800
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 269
		, "stmt": [{
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 270
			, "value": "format"
		}, {
			"": "return .result := append(output, pos, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 271
			, "stmt": {
				"": ".result := append(output, pos, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 271
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 271
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 271
						, "value": "pos"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 271
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 271
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401800
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401802
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401803
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401805
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401807
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401809
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401810
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401811
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401815
		, "size": 5
	}, {
		"instruction": "jmp +5"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401820
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401824
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401825
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401827
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401828
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401829
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401833
		, "size": 2
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 401835
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401836
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401840
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 401842
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401843
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401848
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 401853
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401854
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401858
		, "size": 2
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401860
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401862
		, "size": 1
	}]
}, {
	"": "float64(value: char[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "float64"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 275
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 275
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "value"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 275
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 239
	, "offs": 401864
	, "static": true
	, "const": false
	, "doc": "Convert a string to a 64 bit floating point value"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 275
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 276
			, "value": "result"
		}, {
			"": "decimal"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 277
			, "value": "decimal"
		}, {
			"": "for (i; i < (value.length) && (value[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 280
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 280
				, "value": "i"
			}
			, "test": {
				"": "i < (value.length) && (value[i]) != 0"
				, "kind": "&&"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 280
				, "left": {
					"": "i < (value.length)"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 280
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 280
						, "value": "i"
					}
					, "right": {
						"": "(value.length)"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 280
						, "args": [{
							"": "value.length"
							, "kind": "."
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 280
							, "left": {
								"": "value"
								, "kind": ".variable"
								, "type": "char[]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 280
								, "value": "value"
							}
							, "right": {
								"": "length"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 280
								, "value": "length"
							}
						}]
					}
				}
				, "right": {
					"": "(value[i]) != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 280
					, "left": {
						"": "(value[i])"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 280
						, "args": [{
							"": "value[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 280
							, "left": {
								"": "value"
								, "kind": ".variable"
								, "type": "char[]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 280
								, "value": "value"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 280
								, "value": "i"
							}
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 280
						, "value": "0"
					}
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 280
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 280
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 280
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 280
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 280
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 280
				, "stmt": [{
					"": "chr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 281
					, "value": "chr"
				}, {
					"": "if (chr >= '0' && chr <= '9')"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 282
					, "test": {
						"": "chr >= '0' && chr <= '9'"
						, "kind": "&&"
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 282
						, "left": {
							"": "chr >= '0'"
							, "kind": ">="
							, "type": "bool"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 282
							, "left": {
								"": "chr"
								, "kind": ".variable"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 282
								, "value": "chr"
							}
							, "right": {
								"": "'0'"
								, "kind": ".literal"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 282
								, "value": "'0'"
							}
						}
						, "right": {
							"": "chr <= '9'"
							, "kind": "<="
							, "type": "bool"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 282
							, "left": {
								"": "chr"
								, "kind": ".variable"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 282
								, "value": "chr"
							}
							, "right": {
								"": "'9'"
								, "kind": ".literal"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 282
								, "value": "'9'"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 282
						, "stmt": [{
							"": "result := result * (10) + ((chr - '0'));"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 283
						}, {
							"": "decimal := decimal * (10);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 284
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 286
						, "stmt": [{
							"": "if (chr == '.')"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 286
							, "test": {
								"": "chr == '.'"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 286
								, "left": {
									"": "chr"
									, "kind": ".variable"
									, "type": "char"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 286
									, "value": "chr"
								}
								, "right": {
									"": "'.'"
									, "kind": ".literal"
									, "type": "char"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 286
									, "value": "'.'"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 286
								, "stmt": [{
									"": "if (decimal != (0))"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 287
									, "test": {
										"": "decimal != (0)"
										, "kind": "!="
										, "type": "bool"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 287
										, "left": {
											"": "decimal"
											, "kind": ".variable"
											, "type": "float64"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 287
											, "value": "decimal"
										}
										, "right": {
											"": "(0)"
											, "kind": "()"
											, "type": "float64"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 287
											, "args": [{
												"": "0"
												, "kind": ".literal"
												, "type": "int32"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 287
												, "value": "0"
											}]
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 287
										, "stmt": [{
											"": "return .result := Math.nan;"
											, "kind": "return"
											, "type": "void"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 289
											, "stmt": {
												"": ".result := Math.nan"
												, "kind": ":="
												, "type": "float64"
												, "left": {
													"": ".result"
													, "kind": ".variable"
													, "type": "float64"
													, "value": ".result"
												}
												, "right": {
													"": "Math.nan"
													, "kind": "."
													, "type": "float64"
													, "file": "cmplStd/lib/text/string.ci"
													, "line": 289
													, "left": {
														"": "Math"
														, "kind": ".variable"
														, "type": "typename"
														, "file": "cmplStd/lib/text/string.ci"
														, "line": 289
														, "value": "Math"
													}
													, "right": {
														"": "nan"
														, "kind": ".variable"
														, "type": "float64"
														, "file": "cmplStd/lib/text/string.ci"
														, "line": 289
														, "value": "nan"
													}
												}
											}
										}]
									}
								}, {
									"": "decimal := (1);"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 291
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 293
								, "stmt": [{
									"": "return .result := Math.nan;"
									, "kind": "return"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 295
									, "stmt": {
										"": ".result := Math.nan"
										, "kind": ":="
										, "type": "float64"
										, "left": {
											"": ".result"
											, "kind": ".variable"
											, "type": "float64"
											, "value": ".result"
										}
										, "right": {
											"": "Math.nan"
											, "kind": "."
											, "type": "float64"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 295
											, "left": {
												"": "Math"
												, "kind": ".variable"
												, "type": "typename"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 295
												, "value": "Math"
											}
											, "right": {
												"": "nan"
												, "kind": ".variable"
												, "type": "float64"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 295
												, "value": "nan"
											}
										}
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "if (decimal == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 299
			, "test": {
				"": "decimal == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 299
				, "left": {
					"": "decimal"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 299
					, "value": "decimal"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 299
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 299
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 299
				, "stmt": [{
					"": "if (value.length > (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 300
					, "test": {
						"": "value.length > (0)"
						, "kind": ">"
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 300
						, "left": {
							"": "value.length"
							, "kind": "."
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 300
							, "left": {
								"": "value"
								, "kind": ".variable"
								, "type": "char[]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 300
								, "value": "value"
							}
							, "right": {
								"": "length"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 300
								, "value": "length"
							}
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 300
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 300
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 300
						, "stmt": [{
							"": "return .result := result;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 301
							, "stmt": {
								"": ".result := result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "result"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 301
									, "value": "result"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := result / decimal;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 304
			, "stmt": {
				"": ".result := result / decimal"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result / decimal"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 304
					, "left": {
						"": "result"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 304
						, "value": "result"
					}
					, "right": {
						"": "decimal"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 304
						, "value": "decimal"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 401864
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401865
		, "size": 1
	}, {
		"instruction": "jmp +169"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401866
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401870
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401872
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401874
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401875
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401876
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401880
		, "size": 1
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401881
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 401886
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 401887
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401888
		, "size": 2
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401890
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401894
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401898
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401902
		, "size": 1
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401903
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 401908
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 401909
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401910
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401914
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401916
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401925
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401926
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401930
		, "size": 1
	}, {
		"instruction": "inc.i32(-48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 401931
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 401935
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401936
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401937
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401939
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401941
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401950
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401951
		, "size": 2
	}, {
		"instruction": "jmp +74"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401953
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401957
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401961
		, "size": 1
	}, {
		"instruction": "load.c32 46"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401962
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 401967
		, "size": 1
	}, {
		"instruction": "jz +43"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401968
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401972
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401974
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 401975
		, "size": 1
	}, {
		"instruction": "jnz +20"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401976
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401980
		, "size": 9
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401989
		, "size": 2
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401991
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401995
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401996
		, "size": 9
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402005
		, "size": 2
	}, {
		"instruction": "jmp +20"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 402007
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402011
		, "size": 9
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402020
		, "size": 2
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402022
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402026
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402027
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402031
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402035
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402037
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 402039
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402040
		, "size": 2
	}, {
		"instruction": "jz +17"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402042
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402046
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402050
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402052
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 402054
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 402055
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402056
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 402057
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 402058
		, "size": 1
	}, {
		"instruction": "jnz -189"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 402059
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402063
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402067
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 402069
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 402070
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402071
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402075
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402077
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 402078
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402079
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 402083
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402086
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402090
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402091
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402093
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402095
		, "size": 1
	}, {
		"instruction": "set.x64 sp(9)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402096
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402098
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402102
		, "size": 1
	}]
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "cmplStd/test/test.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/test.ci"
		, "line": 5
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 3
	, "size": 4
	, "offs": 402104
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 4
	, "size": 8
	, "offs": 402112
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 6
	, "size": 4
	, "offs": 402120
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 7
	, "size": 4
	, "offs": 402128
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 10
	, "size": 4
	, "offs": 402136
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `emitA + emitB`"
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 13
	, "size": 4
	, "offs": 402144
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `10 / 5`"
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitNfcF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "emitNfcF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 16
	, "size": 4
	, "offs": 402152
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `float32.sin(3.14f / 2)`"
	, "ast": {
		"": "emit(float32(3.140000), float32(2), div.f32, float32.sin)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "float32(3.140000)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "args": [{
				"": "3.140000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "3.140000"
			}]
		}, {
			"": "float32(2)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "args": [{
				"": "2"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "2"
			}]
		}, {
			"": "div.f32"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "div"
			}
			, "right": {
				"": "f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "f32"
			}
		}, {
			"": "float32.sin"
			, "kind": "."
			, "type": "function"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "left": {
				"": "float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "float32"
			}
			, "right": {
				"": "sin"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "sin"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "interpret a 32 bit floating point number as an 32 bit integer"
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 19
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 19
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/lang/emit.ci"
					, "line": 19
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "interpret a 64 bit floating point number as an 64 bit integer"
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/emit.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 23
	, "size": 4
	, "offs": 402160
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 23
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 23
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 24
	, "size": 8
	, "offs": 402168
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 24
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 24
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 25
	, "size": 4
	, "offs": 402176
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 25
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 25
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 26
	, "size": 8
	, "offs": 402184
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 26
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 26
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 29
	, "size": 8
	, "offs": 402192
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 29
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 29
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "b"
		}
	}
}, {
	"": "i3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i3"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 10
	, "size": 4
	, "offs": 402200
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 10
		, "value": "3"
	}
}, {
	"": "i6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i6"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 11
	, "size": 4
	, "offs": 402208
	, "static": true
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 11
		, "value": "6"
	}
}, {
	"": "i2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 12
	, "size": 4
	, "offs": 402216
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 12
		, "value": "2"
	}
}, {
	"": "i8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 402224
	, "static": true
	, "const": false
	, "ast": {
		"": "8"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 13
		, "value": "8"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 402232
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "6"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 16
	, "size": 4
	, "offs": 402240
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i6"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 402248
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3 + 1, i6 + 1)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "i3 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i3"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}, {
			"": "i6 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i6"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 402256
	, "static": true
	, "const": false
	, "ast": {
		"": "last(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "6"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 20
	, "size": 4
	, "offs": 402264
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i6"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 402272
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 21
		, "left": {
			"": "last(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 21
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 21
			, "value": "1"
		}
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 402280
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 24
	, "size": 4
	, "offs": 402288
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i6"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 402296
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3 + 1, i6 + 1) - 2"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 25
		, "left": {
			"": "sum(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 25
			, "value": "2"
		}
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 402304
	, "static": true
	, "const": false
	, "ast": {
		"": "any(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "6"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 28
	, "size": 4
	, "offs": 402312
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 28
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i6"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 402320
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 29
		, "left": {
			"": "any(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 29
			, "value": "1"
		}
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 402328
	, "static": true
	, "const": false
	, "ast": {
		"": "min(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "6"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 32
	, "size": 4
	, "offs": 402336
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i6"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 402344
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 33
		, "left": {
			"": "min(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 33
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 33
			, "value": "1"
		}
	}
}, {
	"": "max2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 402352
	, "static": true
	, "const": false
	, "ast": {
		"": "max(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "6"
		}]
	}
}, {
	"": "max2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 36
	, "size": 4
	, "offs": 402360
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i6"
		}]
	}
}, {
	"": "max2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 402368
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 37
		, "left": {
			"": "max(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 37
			, "value": "1"
		}
	}
}, {
	"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 39
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(a, sum(b, sum(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 39
			, "value": "a"
		}, {
			"": "sum(b, sum(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 39
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "b"
			}, {
				"": "sum(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(sum(sum(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "args": [{
		}, {
			"": "sum(sum(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "sum(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 40
			, "value": "d"
		}]
	}
}, {
	"": "sumRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 402376
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "8"
		}]
	}
}, {
	"": "sumLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 402384
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "8"
		}]
	}
}, {
	"": "sumRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 402392
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i8"
		}]
	}
}, {
	"": "sumLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 44
	, "size": 4
	, "offs": 402400
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i8"
		}]
	}
}, {
	"": "sumRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 402408
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 45
		, "left": {
			"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 45
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 45
			, "value": "4"
		}
	}
}, {
	"": "sumLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 402416
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 46
		, "left": {
			"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 46
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 46
			, "value": "4"
		}
	}
}, {
	"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(a, any(b, any(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 48
			, "value": "a"
		}, {
			"": "any(b, any(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 48
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "b"
			}, {
				"": "any(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 49
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(any(any(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "any(any(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 49
			, "args": [{
			}, {
				"": "any(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 49
			, "value": "d"
		}]
	}
}, {
	"": "anyRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 50
	, "size": 4
	, "offs": 402424
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "8"
		}]
	}
}, {
	"": "anyLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 51
	, "size": 4
	, "offs": 402432
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "8"
		}]
	}
}, {
	"": "anyRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 52
	, "size": 4
	, "offs": 402440
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i8"
		}]
	}
}, {
	"": "anyLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 53
	, "size": 4
	, "offs": 402448
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i8"
		}]
	}
}, {
	"": "anyRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 54
	, "size": 4
	, "offs": 402456
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 54
		, "left": {
			"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 54
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 54
			, "value": "1"
		}
	}
}, {
	"": "anyLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 55
	, "size": 4
	, "offs": 402464
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 55
		, "left": {
			"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 55
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 55
			, "value": "1"
		}
	}
}, {
	"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(a, min(b, min(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 57
			, "value": "a"
		}, {
			"": "min(b, min(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 57
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "b"
			}, {
				"": "min(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(min(min(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "args": [{
		}, {
			"": "min(min(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 58
			, "args": [{
			}, {
				"": "min(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 58
			, "value": "d"
		}]
	}
}, {
	"": "minRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 59
	, "size": 4
	, "offs": 402472
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 59
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "8"
		}]
	}
}, {
	"": "minLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 60
	, "size": 4
	, "offs": 402480
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 60
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "8"
		}]
	}
}, {
	"": "minRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 61
	, "size": 4
	, "offs": 402488
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 61
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i8"
		}]
	}
}, {
	"": "minLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 62
	, "size": 4
	, "offs": 402496
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i8"
		}]
	}
}, {
	"": "minRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 63
	, "size": 4
	, "offs": 402504
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 63
		, "left": {
			"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 63
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 63
			, "value": "1"
		}
	}
}, {
	"": "minLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 64
	, "size": 4
	, "offs": 402512
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 64
		, "left": {
			"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 64
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 64
			, "value": "1"
		}
	}
}, {
	"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(a, max(b, max(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 66
			, "value": "a"
		}, {
			"": "max(b, max(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 66
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "b"
			}, {
				"": "max(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(max(max(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "args": [{
		}, {
			"": "max(max(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "max(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 67
			, "value": "d"
		}]
	}
}, {
	"": "maxRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 68
	, "size": 4
	, "offs": 402520
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 68
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "8"
		}]
	}
}, {
	"": "maxLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 69
	, "size": 4
	, "offs": 402528
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 69
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "8"
		}]
	}
}, {
	"": "maxRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 70
	, "size": 4
	, "offs": 402536
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i8"
		}]
	}
}, {
	"": "maxLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 71
	, "size": 4
	, "offs": 402544
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i8"
		}]
	}
}, {
	"": "maxRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 72
	, "size": 4
	, "offs": 402552
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 72
		, "left": {
			"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 72
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 72
			, "value": "1"
		}
	}
}, {
	"": "maxLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 73
	, "size": 4
	, "offs": 402560
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 73
		, "left": {
			"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 73
			, "value": "1"
		}
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 9
	, "size": 4
	, "offs": 402568
	, "static": true
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 10
	, "size": 4
	, "offs": 402576
	, "static": true
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 11
	, "size": 4
	, "offs": 402584
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 12
	, "size": 4
	, "offs": 402592
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 13
	, "size": 4
	, "offs": 402600
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 268896
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 269216
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 28
	, "size": 8
	, "offs": 402608
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 29
	, "size": 8
	, "offs": 402616
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 3
	, "size": 8
	, "offs": 402624
	, "static": true
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 4
	, "size": 8
	, "offs": 402632
	, "static": true
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 6
	, "size": 4
	, "offs": 402640
	, "static": true
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 7
	, "size": 4
	, "offs": 402648
	, "static": true
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R8G8B8 color format"
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R5G6B5 color format"
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 14
	, "size": 4
	, "offs": 402656
	, "static": true
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 15
	, "size": 4
	, "offs": 402664
	, "static": true
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 16
	, "size": 4
	, "offs": 402672
	, "static": true
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 18
	, "size": 4
	, "offs": 402680
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 19
	, "size": 4
	, "offs": 402688
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 21
	, "size": 4
	, "offs": 402696
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 22
	, "size": 4
	, "offs": 402704
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 23
	, "size": 4
	, "offs": 402712
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 25
	, "size": 4
	, "offs": 402720
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 26
	, "size": 4
	, "offs": 402728
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 27
	, "size": 4
	, "offs": 402736
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 29
	, "size": 4
	, "offs": 402744
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 30
	, "size": 4
	, "offs": 402752
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 31
	, "size": 4
	, "offs": 402760
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 33
	, "size": 4
	, "offs": 402768
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 34
	, "size": 4
	, "offs": 402776
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 35
	, "size": 4
	, "offs": 402784
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "testSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 37
	, "size": 8
	, "offs": 402792
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testCos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 38
	, "size": 8
	, "offs": 402800
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testTan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 39
	, "size": 8
	, "offs": 402808
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testLog_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 40
	, "size": 8
	, "offs": 402816
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "testExp_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testExp_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 41
	, "size": 8
	, "offs": 402824
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testPow_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 42
	, "size": 8
	, "offs": 402832
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSqrt_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 43
	, "size": 8
	, "offs": 402840
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "testAtan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testAtan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 44
	, "size": 8
	, "offs": 402848
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "testSin_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSin_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 46
	, "size": 4
	, "offs": 402856
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testCos_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 47
	, "size": 4
	, "offs": 402864
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testTan_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 48
	, "size": 4
	, "offs": 402872
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testLog_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 49
	, "size": 4
	, "offs": 402880
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "testExp_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testExp_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 50
	, "size": 4
	, "offs": 402888
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testPow_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 51
	, "size": 4
	, "offs": 402896
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSqrt_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 52
	, "size": 4
	, "offs": 402904
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "testAtan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testAtan_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 53
	, "size": 4
	, "offs": 402912
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPopulation_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testPopulation_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 55
	, "size": 4
	, "offs": 402920
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.pop(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 55
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 55
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testSwapBits_u32"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "testSwapBits_u32"
	, "type": "uint32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 56
	, "size": 4
	, "offs": 402928
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.swap(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 56
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 56
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanReverse_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanReverse_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 57
	, "size": 4
	, "offs": 402936
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsr(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 57
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 57
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanForward_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanForward_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 58
	, "size": 4
	, "offs": 402944
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsf(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 58
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 58
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testHighBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testHighBit_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 59
	, "size": 4
	, "offs": 402952
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.hib(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 59
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 59
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testLowBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testLowBit_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 60
	, "size": 4
	, "offs": 402960
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.lob(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 60
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 60
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testZeroExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 62
	, "size": 4
	, "offs": 402968
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 63
	, "size": 4
	, "offs": 402976
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 63
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "5"
		}]
	}
}, {
	"": "testZeroExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u64"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 65
	, "size": 4
	, "offs": 402984
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 65
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u64"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 66
	, "size": 4
	, "offs": 402992
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "5"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 403000
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 403008
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 403016
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 403024
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 403032
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 403040
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 403048
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403048
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 403056
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[8192]"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 16
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 17
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403056
		, "size": 4
	}, {
		"instruction": "load.sp(+8196)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 403060
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403064
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 403065
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 403070
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403071
		, "size": 4
	}, {
		"instruction": "inc.sp(-8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403075
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403079
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 403080
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 21
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403080
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403085
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 403086
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403087
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403091
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 68
	, "offs": 403096
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 25
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 30
			, "value": "details"
		}, {
			"": "abort(\"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 35
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403096
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 403100
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403105
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403107
		, "size": 5
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403112
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403114
		, "size": 5
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403119
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 403121
		, "size": 5
	}, {
		"instruction": "load.c32 35"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403126
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403131
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403136
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 403141
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 403146
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 403151
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 403155
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403159
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403163
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 403168
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 39
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 40
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 403168
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403173
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403175
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403176
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403180
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 403184
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 44
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403184
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403185
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 47
	, "size": 4
	, "offs": 403192
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 47
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 48
	, "size": 4
	, "offs": 403200
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 49
	, "size": 4
	, "offs": 403208
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 49
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 50
	, "size": 4
	, "offs": 403216
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 50
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 51
	, "size": 4
	, "offs": 403224
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 51
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 52
	, "size": 4
	, "offs": 403232
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 52
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 53
	, "size": 4
	, "offs": 403240
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 53
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 53
			, "value": "abortExecution"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 7
	, "size": 8
	, "offs": 403248
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 8
	, "size": 4
	, "offs": 403256
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 9
	, "size": 4
	, "offs": 403264
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 10
	, "size": 8
	, "offs": 403272
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 12
	, "size": 8
	, "offs": 403280
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 13
	, "size": 4
	, "offs": 403288
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 14
	, "size": 4
	, "offs": 403296
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 16
	, "size": 4
	, "offs": 403304
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 17
	, "size": 4
	, "offs": 403312
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 18
	, "size": 8
	, "offs": 403320
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 19
	, "size": 4
	, "offs": 403328
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 20
	, "size": 4
	, "offs": 403336
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 21
	, "size": 4
	, "offs": 403344
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 23
	, "size": 4
	, "offs": 403352
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 24
	, "size": 8
	, "offs": 403360
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 25
	, "size": 4
	, "offs": 403368
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 27
	, "size": 8
	, "offs": 403376
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 28
	, "size": 8
	, "offs": 403384
	, "static": true
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 29
	, "size": 4
	, "offs": 403392
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 30
	, "size": 4
	, "offs": 403400
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 31
	, "size": 8
	, "offs": 403408
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 32
	, "size": 4
	, "offs": 403416
	, "static": true
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 35
	, "size": 4
	, "offs": 403424
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 36
	, "size": 4
	, "offs": 403432
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 37
	, "size": 4
	, "offs": 403440
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 38
	, "size": 4
	, "offs": 403448
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 39
	, "size": 4
	, "offs": 403456
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 40
	, "size": 4
	, "offs": 403464
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 41
	, "size": 4
	, "offs": 403472
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 42
	, "size": 4
	, "offs": 403480
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 43
	, "size": 4
	, "offs": 403488
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 44
	, "size": 4
	, "offs": 403496
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 45
	, "size": 4
	, "offs": 403504
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 46
	, "size": 4
	, "offs": 403512
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 47
	, "size": 4
	, "offs": 403520
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 48
	, "size": 4
	, "offs": 403528
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 49
	, "size": 4
	, "offs": 403536
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 50
	, "size": 4
	, "offs": 403544
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 51
	, "size": 4
	, "offs": 403552
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 52
	, "size": 4
	, "offs": 403560
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 55
	, "size": 8
	, "offs": 403568
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 56
	, "size": 8
	, "offs": 403576
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 57
	, "size": 8
	, "offs": 403584
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 58
	, "size": 8
	, "offs": 403592
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 59
	, "size": 8
	, "offs": 403600
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 60
	, "size": 8
	, "offs": 403608
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 61
	, "size": 8
	, "offs": 403616
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 62
	, "size": 8
	, "offs": 403624
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 63
	, "size": 8
	, "offs": 403632
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 64
	, "size": 8
	, "offs": 403640
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 65
	, "size": 8
	, "offs": 403648
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 66
	, "size": 8
	, "offs": 403656
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 67
	, "size": 8
	, "offs": 403664
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 68
	, "size": 8
	, "offs": 403672
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 69
	, "size": 8
	, "offs": 403680
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 70
	, "size": 8
	, "offs": 403688
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 71
	, "size": 8
	, "offs": 403696
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 72
	, "size": 8
	, "offs": 403704
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 75
	, "size": 4
	, "offs": 403712
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 76
	, "size": 4
	, "offs": 403720
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 77
	, "size": 4
	, "offs": 403728
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 78
	, "size": 4
	, "offs": 403736
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 79
	, "size": 4
	, "offs": 403744
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 80
	, "size": 4
	, "offs": 403752
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 81
	, "size": 4
	, "offs": 403760
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 82
	, "size": 4
	, "offs": 403768
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 83
	, "size": 4
	, "offs": 403776
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 84
	, "size": 4
	, "offs": 403784
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 85
	, "size": 4
	, "offs": 403792
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 86
	, "size": 4
	, "offs": 403800
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 87
	, "size": 4
	, "offs": 403808
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 88
	, "size": 4
	, "offs": 403816
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 89
	, "size": 4
	, "offs": 403824
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 90
	, "size": 4
	, "offs": 403832
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 91
	, "size": 4
	, "offs": 403840
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 92
	, "size": 4
	, "offs": 403848
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 95
	, "size": 4
	, "offs": 403856
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 96
	, "size": 8
	, "offs": 403864
	, "static": true
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 97
	, "size": 4
	, "offs": 403872
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 99
	, "size": 4
	, "offs": 403880
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 105
	, "size": 8
	, "offs": 403888
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 108
	, "size": 4
	, "offs": 403896
	, "static": true
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "variable"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "variable"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 3
	, "size": 4
	, "offs": 403904
	, "static": true
	, "const": false
	, "doc": "Uninitialized variables will be initialized with default type initializer: 0"
}, {
	"": "constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 7
	, "size": 4
	, "offs": 403912
	, "static": true
	, "const": true
	, "doc": "Constant variables must be explicitly initialized"
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "ComplexVal"
	, "kind": "typename"
	, "cast": "val"
	, "name": "ComplexVal"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 9
	, "size": 16
	, "offs": 305584
	, "static": true
	, "const": true
}, {
	"": "ComplexVal.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "ComplexVal"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 10
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "ComplexVal.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "ComplexVal"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 11
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 11
		, "value": "0"
	}
}, {
	"": "ComplexObj"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "ComplexObj"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 13
	, "size": 20
	, "offs": 306064
	, "static": true
	, "const": true
}, {
	"": "ComplexObj.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "ComplexObj"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 14
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "ComplexObj.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "ComplexObj"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 15
	, "size": 8
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 15
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "valInitImplicit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "valInitImplicit"
	, "type": "ComplexVal"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 24
	, "size": 16
	, "offs": 403920
	, "static": true
	, "const": false
	, "doc": "Value types must be explicitly initialized\nthe initializer will be extended with implicit field initializers\n{re: 8} => {\nvalInitImplicit.re := 8;\nvalInitImplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "ComplexVal"
		, "stmt": [{
			"": "valInitImplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 24
		}, {
			"": "valInitImplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "objInitImplicit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "objInitImplicit"
	, "type": "ComplexObj"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 33
	, "size": 4
	, "offs": 403936
	, "static": true
	, "const": false
	, "doc": "Reference types must be explicitly initialized\nthe initializer will be extended with instance creation\n{re: 8} => {\nobjInitImplicit := Object.create(ComplexObj);\nobjInitImplicit.re := 8;\nobjInitImplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "ComplexObj"
		, "stmt": [{
			"": "objInitImplicit := create(ComplexObj);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 33
		}, {
			"": "objInitImplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 33
		}, {
			"": "objInitImplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "objInitExplicit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "objInitExplicit"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 41
	, "size": 4
	, "offs": 403944
	, "static": true
	, "const": false
	, "doc": "variable type can be base type of the explicit initializer type\nComplexObj {re: 8} => {\nobjInitExplicit := Object.create(ComplexObj);\nobjInitExplicit.re := 8;\nobjInitExplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "object"
		, "stmt": [{
			"": "objInitExplicit := create(ComplexObj);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 41
		}, {
			"": "objInitExplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 41
		}, {
			"": "objInitExplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 403952
	, "static": true
	, "const": false
	, "doc": "function with empty implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403952
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 403960
	, "static": true
	, "const": false
	, "doc": "function with implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 8
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 8
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 8
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 8
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403960
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403962
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403964
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403965
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403967
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 12
	, "size": 4
	, "offs": 403968
	, "static": true
	, "const": false
	, "doc": "function invocation"
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 12
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 12
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 403976
	, "static": true
	, "const": false
	, "doc": "initialized function reference"
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 18
	, "size": 4
	, "offs": 403984
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 18
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 18
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 403992
	, "static": true
	, "const": false
	, "doc": "forward function reference (must be implemented somewhere)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 24
	, "size": 4
	, "offs": 404000
	, "static": true
	, "const": false
	, "doc": "forward function invocation"
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 24
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 24
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 404008
	, "static": true
	, "const": false
	, "doc": "initialized function reference (copy address)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 30
	, "size": 4
	, "offs": 404016
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 30
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 30
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 33
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 404024
	, "static": true
	, "const": false
	, "doc": "forward function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 34
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 34
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 34
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 34
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404024
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404026
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 404028
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404029
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404031
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 54
	, "offs": 404032
	, "static": true
	, "const": false
	, "doc": "recursive function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 39
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 39
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 39
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 39
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 39
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 39
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 40
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 40
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 42
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 42
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/function.ci"
									, "line": 42
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/function.ci"
									, "line": 42
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404032
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404034
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 404039
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404040
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(2, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 404044
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404047
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404048
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404049
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404051
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404055
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404060
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404061
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404065
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404066
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404068
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404072
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404077
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404078
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404082
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404083
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404085
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 46
	, "size": 4
	, "offs": 404088
	, "static": true
	, "const": false
	, "doc": "recursive function invocation"
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 46
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 46
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 3
	, "size": 4
	, "offs": 404096
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 4
	, "size": 4
	, "offs": 404104
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 5
	, "size": 4
	, "offs": 404112
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 6
	, "size": 4
	, "offs": 404120
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 7
	, "size": 4
	, "offs": 404128
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 8
	, "size": 4
	, "offs": 404136
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 9
	, "size": 4
	, "offs": 404144
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 10
	, "size": 4
	, "offs": 404152
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 11
	, "size": 4
	, "offs": 404160
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 12
	, "size": 4
	, "offs": 404168
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 13
	, "size": 4
	, "offs": 404176
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 14
	, "size": 4
	, "offs": 404184
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 15
	, "size": 4
	, "offs": 404192
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 16
	, "size": 4
	, "offs": 404200
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 17
	, "size": 4
	, "offs": 404208
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 18
	, "size": 4
	, "offs": 404216
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 19
	, "size": 4
	, "offs": 404224
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 20
	, "size": 4
	, "offs": 404232
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 22
	, "size": 12
	, "offs": 315744
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 26
	, "size": 16
	, "offs": 316064
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 30
	, "size": 4
	, "offs": 404240
	, "static": true
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 31
	, "size": 4
	, "offs": 404248
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 32
	, "size": 4
	, "offs": 404256
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 33
	, "size": 4
	, "offs": 404264
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofRecord.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 33
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 33
			, "value": "typeofRecord"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 33
			, "value": "size"
		}
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 34
	, "size": 4
	, "offs": 404272
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 35
	, "size": 4
	, "offs": 404280
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 37
	, "size": 4
	, "offs": 404288
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 38
	, "size": 4
	, "offs": 404296
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 39
	, "size": 4
	, "offs": 404304
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 40
	, "size": 4
	, "offs": 404312
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 40
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 40
			, "value": "typeofBase"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 40
			, "value": "size"
		}
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 41
	, "size": 4
	, "offs": 404320
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 42
	, "size": 4
	, "offs": 404328
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 44
	, "size": 4
	, "offs": 404336
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 45
	, "size": 4
	, "offs": 404344
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 46
	, "size": 4
	, "offs": 404352
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 48
	, "size": 4
	, "offs": 404360
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 49
	, "size": 4
	, "offs": 404368
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 50
	, "size": 4
	, "offs": 404376
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "RecordMemberTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMemberTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 2
	, "size": 32
	, "offs": 320160
	, "static": true
	, "const": true
	, "doc": "test and documentation of member initializations"
}, {
	"": "RecordMemberTest.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "RecordMemberTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 4
	, "size": 8
	, "offs": 320320
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 5
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 6
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 10
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 13
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 16
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 16
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 19
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 19
		, "value": "3"
	}
}, {
	"": "RecordMemberTest.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 22
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 25
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 34
	, "size": 4
	, "offs": 404384
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 37
	, "size": 4
	, "offs": 404392
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 37
		, "value": "1"
	}
}, {
	"": "RecordMemberTest.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 40
	, "size": 4
	, "offs": 404400
	, "static": true
	, "const": true
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 40
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 43
	, "size": 8
	, "offs": 404408
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRec.constant := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 43
		}, {
			"": "globalRec.member := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "RecordMemberTest.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 46
	, "size": 8
	, "offs": 404416
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 46
		}, {
			"": "globalRecInit.constant := 5;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 46
		}]
	}
}, {
	"": "RecordMemberTest.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 49
	, "size": 8
	, "offs": 404424
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 49
		}, {
			"": "globalConstantRec.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 49
		}]
	}
}, {
	"": "recordMemberTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMemberTest"
	, "type": "RecordMemberTest"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 52
	, "size": 32
	, "offs": 404432
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest"
		, "stmt": [{
			"": "recordMemberTest.member := 10;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 53
		}, {
			"": "recordMemberTest.constant := 11;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 54
		}, {
			"": "recordMemberTest.memberInit := 12;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 55
		}, {
			"": "recordMemberTest.constantInit := 13;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 56
		}, {
			"": "recordMemberTest.memberRec.member := 14;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 59
		}, {
			"": "recordMemberTest.memberRec.constant := 15;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 60
		}, {
			"": "recordMemberTest.constantRec.member := 16;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 64
		}, {
			"": "recordMemberTest.constantRec.constant := 17;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 65
		}]
	}
}, {
	"": "RecordMethodTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMethodTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 4
	, "size": 16
	, "offs": 324024
	, "static": true
	, "const": true
	, "doc": "static, virtual and abstract methods"
}, {
	"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 404464
	, "static": true
	, "const": false
	, "doc": "static method is like a `global function` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "stmt": [{
			"": "trace(\"staticMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 11
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404464
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404469
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404474
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404479
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404484
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404489
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404494
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404498
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404502
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 404504
	, "static": true
	, "const": false
	, "doc": "static forward method is like a `forward function reference` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.abstractMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "abstract methods must be overridden when inheriting or instantiating\nthe compiler sees it as a `constant function reference` without `default type initializer`\n@see lang/member.ci"
}, {
	"": "RecordMethodTest.delegateMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "delegateMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "virtual method (use to delegate)\nthe compiler sees it as a `constant function reference` with `default field initializer`\n@see lang/member.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 404512
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "stmt": [{
			"": "trace(\"virtualMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 41
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404512
		, "size": 5
	}, {
		"instruction": "load.c32 41"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404517
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404522
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404527
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404532
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404537
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404542
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404546
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404550
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "virtual methods can be overridden when inheriting or instantiating\nthe compiler will generate a static function and an instance member initialized with the static method\n  * static void virtualMethod(...) { ... }\n  * void virtualMethod(...) = [static] virtualMethod;"
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 404552
	, "static": true
	, "const": false
	, "doc": "static forward method implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "stmt": [{
			"": "trace(\"forwardMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 48
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404552
		, "size": 5
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404557
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404562
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404567
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404572
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404577
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404582
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404586
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404590
		, "size": 1
	}]
}, {
	"": "globalFunction(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "globalFunction"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 404592
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "stmt": [{
			"": "trace(\"globalFunction\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 58
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404592
		, "size": 5
	}, {
		"instruction": "load.c32 58"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404597
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404602
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404607
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404612
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404617
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404622
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404626
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404630
		, "size": 1
	}]
}, {
	"": "recordMethodTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTest"
	, "type": "RecordMethodTest"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 62
	, "size": 16
	, "offs": 404632
	, "static": true
	, "const": false
	, "doc": "create an instance of the type "
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTest.abstractMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 64
		}, {
			"": "recordMethodTest.delegateMethod := forwardMethod;"
			, "kind": ";"
			, "type": "void"
		}, {
			"": "recordMethodTest.virtualMethod := virtualMethod;"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 66
	, "offs": 404648
	, "static": true
	, "const": false
	, "doc": "extension function is defined, it has the highest priority."
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "stmt": [{
			"": "debug(\"extension.staticMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 85
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 86
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 86
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 86
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "cmplStd/test/lang/init.method.ci"
						, "line": 86
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 86
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 86
				, "stmt": [{
					"": "RecordMethodTest.staticMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 87
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404648
		, "size": 5
	}, {
		"instruction": "load.c32 85"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404653
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404658
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404663
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404664
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404669
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404674
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404679
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404683
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404687
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404692
		, "size": 1
	}, {
		"instruction": "jnz +20"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404693
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 404697
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404699
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404701
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404703
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404708
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404709
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404713
		, "size": 1
	}]
}, {
	"": "virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 404720
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "stmt": [{
			"": "debug(\"extension.virtualMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 91
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 92
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 92
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 92
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "cmplStd/test/lang/init.method.ci"
						, "line": 92
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 92
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 92
				, "stmt": [{
					"": "this.virtualMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 93
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404720
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404725
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404730
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404735
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404736
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404741
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404746
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404751
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404755
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404759
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404764
		, "size": 1
	}, {
		"instruction": "jnz +17"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404765
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 404769
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404771
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404773
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404775
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404777
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404778
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404782
		, "size": 1
	}]
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 2
	, "size": 16
	, "offs": 330360
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 9
	, "size": 3
	, "offs": 331000
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 16
	, "size": 4
	, "offs": 331640
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 22
	, "size": 20
	, "offs": 332120
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 26
	, "size": 3
	, "offs": 404784
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 27
	, "size": 3
	, "offs": 404792
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 28
	, "size": 3
	, "offs": 404800
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 30
	, "size": 4
	, "offs": 404808
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 31
	, "size": 4
	, "offs": 404816
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 333368
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 334488
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 335608
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 336728
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 337848
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 338968
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 404824
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 404832
	, "static": true
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 404840
	, "static": true
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 404848
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 404856
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 404864
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 404872
	, "static": true
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 404880
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 404888
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 404896
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 404904
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 404912
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 404920
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 404928
	, "static": true
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 404936
	, "static": true
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 404944
	, "static": true
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 404952
	, "static": true
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 404960
	, "static": true
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 404968
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 404976
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 404984
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 404992
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 405000
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 405008
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 405016
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 405024
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 405032
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 405040
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 405048
	, "static": true
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 405056
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 405064
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 405072
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 405080
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 405088
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 405096
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 405104
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 405112
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 405120
	, "static": true
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 405128
	, "static": true
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 405136
	, "static": true
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 405144
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 405152
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 405160
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 405168
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 405176
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 405184
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 405192
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 405200
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 405208
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 405216
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 405224
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 405232
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 405240
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 405248
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 405256
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 405264
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 405272
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 405280
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 405288
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 405296
	, "static": true
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 405304
	, "static": true
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 405312
	, "static": true
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 405320
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 405328
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 405336
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 405344
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 405352
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 405360
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 405368
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 405376
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 405384
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 405392
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 405400
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 405408
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 405416
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 405424
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 405432
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 405440
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 405448
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 405456
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 405464
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 405472
	, "static": true
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 405480
	, "static": true
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 405488
	, "static": true
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 405496
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 405504
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 405512
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 405520
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 405528
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 405536
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 405544
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 405552
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 405560
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 405568
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 405576
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 405584
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 405592
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 405600
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 405608
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 405616
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 405624
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 405632
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 405640
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 405648
	, "static": true
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 405656
	, "static": true
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 405664
	, "static": true
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 405672
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 405680
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 405688
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 405696
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 405704
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 405712
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 405720
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 405728
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 405736
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 405744
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 405752
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 405760
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 405768
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 405776
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 405784
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 405792
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 405800
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 405808
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 405816
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 405824
	, "static": true
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 405832
	, "static": true
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 405840
	, "static": true
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 405848
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 405856
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 405864
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 405872
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 405880
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 405888
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 405896
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 405904
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 405912
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 405920
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 405928
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 405936
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 405944
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 405952
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 405960
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 405968
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 405976
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 405984
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 405992
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 406000
	, "static": true
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 406008
	, "static": true
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 406016
	, "static": true
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 406024
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 406032
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 406040
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 406048
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 406056
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 406064
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 406072
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 406080
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 406088
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 406096
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 406104
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 406112
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 406120
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 406128
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 406136
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 406144
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 406152
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 406160
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 406168
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 406176
	, "static": true
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 406184
	, "static": true
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 406192
	, "static": true
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 406200
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 406208
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 406216
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 406224
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 406232
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 406240
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 406248
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 406256
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 406264
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 406272
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 406280
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 406288
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 406296
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 406304
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 406312
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 406320
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 406328
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 406336
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 406344
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 406352
	, "static": true
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 406360
	, "static": true
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 406368
	, "static": true
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 406376
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 406384
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 406392
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 406400
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 406408
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 406416
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 406424
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 406432
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 406440
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 406448
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 406456
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 406464
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 406472
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 406480
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 406488
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 406496
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 406504
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 406512
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 406520
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 406528
	, "static": true
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 406536
	, "static": true
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 406544
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 406552
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 406560
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 406568
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 406576
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 406584
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 406592
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 406600
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 406608
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 406616
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 406624
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 406632
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 406640
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 406648
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 406656
	, "static": true
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 406664
	, "static": true
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 406672
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 406680
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 406688
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 406696
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 406704
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 406712
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 406720
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 406728
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 406736
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 406744
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 406752
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 406760
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 406768
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 406776
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 406784
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 406792
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "cmplStd/test/lang/stmt.if.ci"
	, "line": 26
	, "size": 4
	, "offs": 406800
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/stmt.if.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "cmplStd/test/lang/stmt.for.ci"
	, "line": 12
	, "size": 4
	, "offs": 406808
	, "static": true
	, "const": false
}, {
	"": "testMathFloor_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 3
	, "size": 8
	, "offs": 406816
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 3
		, "args": [{
			"": "3.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 3
			, "value": "3.200000"
		}]
	}
}, {
	"": "testMathFloor_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_2"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 4
	, "size": 8
	, "offs": 406824
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 4
		, "args": [{
			"": "3.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 4
			, "value": "3.500000"
		}]
	}
}, {
	"": "testMathFloor_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 5
	, "size": 8
	, "offs": 406832
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 5
		, "args": [{
			"": "3.600000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 5
			, "value": "3.600000"
		}]
	}
}, {
	"": "testMathFloor_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_4"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 6
	, "size": 8
	, "offs": 406840
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 6
		, "args": [{
			"": "-3.200000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 6
			, "right": {
				"": "3.200000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 6
				, "value": "3.200000"
			}
		}]
	}
}, {
	"": "testMathFloor_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_5"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 7
	, "size": 8
	, "offs": 406848
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 7
		, "args": [{
			"": "-3.500000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 7
			, "right": {
				"": "3.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 7
				, "value": "3.500000"
			}
		}]
	}
}, {
	"": "testMathFloor_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_6"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 8
	, "size": 8
	, "offs": 406856
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 8
		, "args": [{
			"": "-3.600000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 8
			, "right": {
				"": "3.600000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 8
				, "value": "3.600000"
			}
		}]
	}
}, {
	"": "testMathSign_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 10
	, "size": 8
	, "offs": 406864
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 10
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 10
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 11
	, "size": 8
	, "offs": 406872
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 11
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 11
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 12
	, "size": 8
	, "offs": 406880
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 12
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 12
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 12
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathSign_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 13
	, "size": 8
	, "offs": 406888
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 13
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 13
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 14
	, "size": 8
	, "offs": 406896
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 14
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 14
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 15
	, "size": 8
	, "offs": 406904
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 15
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 15
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 15
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 17
	, "size": 8
	, "offs": 406912
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 17
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 17
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 18
	, "size": 8
	, "offs": 406920
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 18
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 18
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 19
	, "size": 8
	, "offs": 406928
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 19
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 19
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 19
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 20
	, "size": 8
	, "offs": 406936
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 20
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 20
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 21
	, "size": 8
	, "offs": 406944
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 21
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 21
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 22
	, "size": 8
	, "offs": 406952
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 22
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 22
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 22
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathMin_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 24
	, "size": 8
	, "offs": 406960
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 24
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 24
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 25
	, "size": 8
	, "offs": 406968
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 25
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 25
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMin_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 26
	, "size": 8
	, "offs": 406976
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 26
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 26
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 27
	, "size": 8
	, "offs": 406984
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 27
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 27
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathClamp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 29
	, "size": 8
	, "offs": 406992
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathClamp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 30
	, "size": 8
	, "offs": 407000
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathLerp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 32
	, "size": 8
	, "offs": 407008
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathLerp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 33
	, "size": 8
	, "offs": 407016
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathSmooth_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 35
	, "size": 8
	, "offs": 407024
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSmooth_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 36
	, "size": 8
	, "offs": 407032
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathMin_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_nan"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 38
	, "size": 8
	, "offs": 407040
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 38
		, "args": [{
		}]
	}
}, {
	"": "testMathMin_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 39
	, "size": 8
	, "offs": 407048
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}]
	}
}, {
	"": "testMathMax_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_nan"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 40
	, "size": 8
	, "offs": 407056
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 40
		, "args": [{
		}]
	}
}, {
	"": "testMathMax_9"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_9"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 41
	, "size": 8
	, "offs": 407064
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "testMathSum_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_0"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 43
	, "size": 8
	, "offs": 407072
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 43
		, "args": [{
		}]
	}
}, {
	"": "testMathSum_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 44
	, "size": 8
	, "offs": 407080
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 44
		, "args": [{
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 44
			, "value": "1"
		}]
	}
}, {
	"": "testMathSum_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 45
	, "size": 8
	, "offs": 407088
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 45
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 45
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 45
			, "value": "2"
		}]
	}
}, {
	"": "testMathSum_55"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_55"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 46
	, "size": 8
	, "offs": 407096
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "3"
		}, {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "4"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "6"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "7"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "8"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "9"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "10"
		}]
	}
}, {
	"": "testMathEval_x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_x"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 48
	, "size": 8
	, "offs": 407104
	, "static": true
	, "const": false
	, "ast": {
		"": "10"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 48
		, "value": "10"
	}
}, {
	"": "testMathEval_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_0"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 49
	, "size": 8
	, "offs": 407112
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 49
		, "args": [{
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 49
			, "value": "testMathEval_x"
		}]
	}
}, {
	"": "testMathEval_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 50
	, "size": 8
	, "offs": 407120
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 50
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_2"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 51
	, "size": 8
	, "offs": 407128
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 52
	, "size": 8
	, "offs": 407136
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_4"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 53
	, "size": 8
	, "offs": 407144
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_5"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 54
	, "size": 8
	, "offs": 407152
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 54
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_6"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 55
	, "size": 8
	, "offs": 407160
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 55
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 57
	, "size": 8
	, "offs": 407168
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sin(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 57
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 57
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 58
	, "size": 8
	, "offs": 407176
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cos(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 58
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 58
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathTan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 59
	, "size": 8
	, "offs": 407184
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.tan(Math.pi / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 59
		, "args": [{
			"": "Math.pi / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 59
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "pi"
				}
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testMathSinh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSinh_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 60
	, "size": 8
	, "offs": 407192
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sinh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 60
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 60
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCosh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCosh_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 61
	, "size": 8
	, "offs": 407200
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cosh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 61
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 61
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathAsin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAsin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 63
	, "size": 8
	, "offs": 407208
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.asin(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 63
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 63
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAcos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAcos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 64
	, "size": 8
	, "offs": 407216
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.acos(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 64
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 64
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathCmp_f32"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f32"
	, "type": "bool"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 67
	, "size": 1
	, "offs": 407224
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 67
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 67
			, "value": "0"
		}
	}
}, {
	"": "testMathCmp_f64"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f64"
	, "type": "bool"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 68
	, "size": 1
	, "offs": 407232
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 68
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 68
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 68
			, "value": "0"
		}
	}
}, {
	"": "testMathAbsMod_f64_0a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 70
	, "size": 8
	, "offs": 407240
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 71
	, "size": 8
	, "offs": 407248
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 71
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 71
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 72
	, "size": 8
	, "offs": 407256
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 72
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 72
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 72
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 72
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 74
	, "size": 8
	, "offs": 407264
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 74
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 74
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 75
	, "size": 8
	, "offs": 407272
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 75
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 75
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 75
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 76
	, "size": 8
	, "offs": 407280
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 76
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 76
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 76
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 76
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9d"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 77
	, "size": 8
	, "offs": 407288
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 77
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 77
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 77
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 77
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 79
	, "size": 8
	, "offs": 407296
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 79
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 79
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 79
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 80
	, "size": 8
	, "offs": 407304
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 80
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 80
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 81
	, "size": 8
	, "offs": 407312
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 81
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 81
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 81
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8d"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 82
	, "size": 8
	, "offs": 407320
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 82
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 82
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 82
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 84
	, "size": 4
	, "offs": 407328
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 85
	, "size": 4
	, "offs": 407336
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 85
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 85
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 86
	, "size": 4
	, "offs": 407344
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 86
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 86
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 86
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 88
	, "size": 4
	, "offs": 407352
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 88
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 88
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 89
	, "size": 4
	, "offs": 407360
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 89
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 89
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 89
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 90
	, "size": 4
	, "offs": 407368
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 90
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 90
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 90
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9d"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 91
	, "size": 4
	, "offs": 407376
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 91
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 91
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 91
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 91
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 93
	, "size": 4
	, "offs": 407384
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 93
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 93
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 93
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 94
	, "size": 4
	, "offs": 407392
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 94
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 94
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 94
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 95
	, "size": 4
	, "offs": 407400
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 95
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 95
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 95
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8d"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 96
	, "size": 4
	, "offs": 407408
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 96
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 96
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 96
			, "value": "10.000000"
		}]
	}
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 13382
	, "offs": 407412
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "cmplStd/stdlib.ci"
			, "line": 8
			, "stmt": [{
				"": "byte"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 8
				, "value": "byte"
			}, {
				"": "float"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 9
				, "value": "float"
			}, {
				"": "double"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 10
				, "value": "double"
			}, {
				"": "signed(value: uint8): int8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 13
				, "value": "signed(value: uint8): int8"
			}, {
				"": "signed(value: uint16): int16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 16
				, "value": "signed(value: uint16): int16"
			}, {
				"": "signed(value: uint32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 19
				, "value": "signed(value: uint32): int32"
			}, {
				"": "signed(value: uint64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 22
				, "value": "signed(value: uint64): int64"
			}, {
				"": "unsigned(value: int8): uint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 25
				, "value": "unsigned(value: int8): uint8"
			}, {
				"": "unsigned(value: int16): uint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 28
				, "value": "unsigned(value: int16): uint16"
			}, {
				"": "unsigned(value: int32): uint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 31
				, "value": "unsigned(value: int32): uint32"
			}, {
				"": "unsigned(value: int64): uint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 34
				, "value": "unsigned(value: int64): uint64"
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 37
				, "value": "sizeof(type: typename): int32"
			}, {
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/stdlib.ci"
				, "line": 39
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/stdlib.ci"
					, "line": 39
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "cmplStd/stdlib.ci"
						, "line": 39
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "function"
							, "file": "cmplStd/stdlib.ci"
							, "line": 39
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/stdlib.ci"
						, "line": 39
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/stdlib.ci"
					, "line": 39
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 4
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 9
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 11
						, "value": "debug(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 14
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 16
						, "value": "trace(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 19
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 21
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 24
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 26
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 29
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 31
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 34
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 36
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 38
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 41
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 43
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 45
						, "value": "assert(condition: bool): void"
					}, {
						"": "NotEquals"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 48
						, "value": "NotEquals"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 61
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 74
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "Math"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math.ci"
				, "line": 2
				, "value": "Math"
			}, {
				"": "Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 2
				, "value": "Complex"
			}, {
				"": "Complex(re: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 24
				, "value": "Complex(re: float64): Complex"
			}, {
				"": "Complex(re: float64, im: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 31
				, "value": "Complex(re: float64, im: float64): Complex"
			}, {
				"": "neg(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "value": "neg(a: Complex): Complex"
			}, {
				"": "add(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "value": "add(a: Complex, b: Complex): Complex"
			}, {
				"": "add(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "add(a: Complex, b: float64): Complex"
			}, {
				"": "add(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "add(a: float64, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "value": "sub(a: Complex, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "sub(a: Complex, b: float64): Complex"
			}, {
				"": "sub(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "sub(a: float64, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 76
				, "value": "mul(a: Complex, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "mul(a: Complex, b: float64): Complex"
			}, {
				"": "mul(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "mul(a: float64, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 86
				, "value": "div(a: Complex, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 107
				, "value": "div(a: Complex, b: float64): Complex"
			}, {
				"": "div(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 109
				, "value": "div(a: float64, b: Complex): Complex"
			}, {
				"": "abs(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "value": "abs(a: Complex): float64"
			}, {
				"": "arg(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "arg(a: Complex): float64"
			}, {
				"": "inv(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 117
				, "value": "inv(a: Complex): Complex"
			}, {
				"": "conj(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "conj(a: Complex): Complex"
			}, {
				"": "exp(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "value": "exp(a: Complex): Complex"
			}, {
				"": "log(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "value": "log(a: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 135
				, "value": "pow(a: Complex, b: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 146
				, "value": "pow(a: Complex, b: float64): Complex"
			}, {
				"": "sin(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "value": "sin(a: Complex): Complex"
			}, {
				"": "cos(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "value": "cos(a: Complex): Complex"
			}, {
				"": "tan(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "tan(a: Complex): Complex"
			}, {
				"": "cot(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "cot(a: Complex): Complex"
			}, {
				"": "sinh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "value": "sinh(a: Complex): Complex"
			}, {
				"": "cosh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "value": "cosh(a: Complex): Complex"
			}, {
				"": "tanh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "tanh(a: Complex): Complex"
			}, {
				"": "coth(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "coth(a: Complex): Complex"
			}, {
				"": "sec(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 178
				, "value": "sec(a: Complex): Complex"
			}, {
				"": "csc(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 180
				, "value": "csc(a: Complex): Complex"
			}, {
				"": "sech(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 182
				, "value": "sech(a: Complex): Complex"
			}, {
				"": "csch(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 184
				, "value": "csch(a: Complex): Complex"
			}, {
				"": "toCartesian(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "value": "toCartesian(x: Complex): Complex"
			}, {
				"": "toPolar(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "toPolar(x: Complex): Complex"
			}, {
				"": "vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 2
				, "value": "vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "value": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 29
				, "value": "vec4f(x: float32, y: float32, z: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 32
				, "value": "vec4f(x: float32, y: float32): vec4f"
			}, {
				"": "vec4f(xyz: vec4f, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "vec4f(xyz: vec4f, w: float32): vec4f"
			}, {
				"": "vec4f(val: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 38
				, "value": "vec4f(val: float32): vec4f"
			}, {
				"": "neg(rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "value": "neg(rhs: vec4f): vec4f"
			}, {
				"": "add(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "value": "add(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "value": "sub(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "value": "mul(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "div(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "value": "div(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "add(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "value": "add(a: float32, b: vec4f): vec4f"
			}, {
				"": "add(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "value": "add(a: vec4f, b: float32): vec4f"
			}, {
				"": "sub(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "sub(a: float32, b: vec4f): vec4f"
			}, {
				"": "sub(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 87
				, "value": "sub(a: vec4f, b: float32): vec4f"
			}, {
				"": "mul(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 90
				, "value": "mul(a: float32, b: vec4f): vec4f"
			}, {
				"": "mul(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "value": "mul(a: vec4f, b: float32): vec4f"
			}, {
				"": "div(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 95
				, "value": "div(a: float32, b: vec4f): vec4f"
			}, {
				"": "div(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 97
				, "value": "div(a: vec4f, b: float32): vec4f"
			}, {
				"": "min(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "value": "min(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "max(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "value": "max(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
			}, {
				"": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
			}, {
				"": "dp3(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "value": "dp3(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dph(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "value": "dph(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dp4(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "value": "dp4(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "cross(a: vec4f, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "value": "cross(a: vec4f, b: vec4f): vec4f"
			}, {
				"": "length(v: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "length(v: vec4f): float32"
			}, {
				"": "normalize(v: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 128
				, "value": "normalize(v: vec4f): vec4f"
			}, {
				"": "eval(v: vec4f, x: float32): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "value": "eval(v: vec4f, x: float32): float32"
			}, {
				"": "mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 2
				, "value": "mat4f"
			}, {
				"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 62
				, "value": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
			}, {
				"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 75
				, "value": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
			}, {
				"": "dp3(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "dp3(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dph(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "dph(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dp4(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "dp4(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "transpose(mat: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 87
				, "value": "transpose(mat: mat4f): mat4f"
			}, {
				"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 97
				, "value": "mul(lhs: mat4f, rhs: mat4f): mat4f"
			}, {
				"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 111
				, "value": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
			}, {
				"": "rotation(direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 160
				, "value": "rotation(direction: vec4f, angle: float32): mat4f"
			}, {
				"": "translation(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 163
				, "value": "translation(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "scale(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 173
				, "value": "scale(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 2
				, "value": "vec2d"
			}, {
				"": "vec2d(x: float64, y: float64): vec2d"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 14
				, "value": "vec2d(x: float64, y: float64): vec2d"
			}, {
				"": "add(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "value": "add(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "sub(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "value": "sub(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "mul(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "value": "mul(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "div(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "value": "div(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "min(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "value": "min(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "max(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "value": "max(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "ceq(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "value": "ceq(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "dot(a: vec2d, b: vec2d): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "value": "dot(a: vec2d, b: vec2d): float64"
			}, {
				"": "length(str: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 4
				, "value": "length(str: char[*]): int32"
			}, {
				"": "indexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 15
				, "value": "indexOf(str: char[*], chr: char): int32"
			}, {
				"": "lastIndexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 25
				, "value": "lastIndexOf(str: char[*], chr: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 36
				, "value": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 46
				, "value": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 61
				, "value": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
			}, {
				"": "ignCaseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 73
				, "value": "ignCaseCmp(chr: char, with: char): int32"
			}, {
				"": "caseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 88
				, "value": "caseCmp(chr: char, with: char): int32"
			}, {
				"": "toHex(value: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 93
				, "value": "toHex(value: int32): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 96
				, "value": "startsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 98
				, "value": "endsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "compare(str: char[*], with: char[*]): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 100
				, "value": "compare(str: char[*], with: char[*]): int32"
			}, {
				"": "equals(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 102
				, "value": "equals(str: char[*], with: char[*]): bool"
			}, {
				"": "contains(str: char[*], chr: char): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 105
				, "value": "contains(str: char[*], chr: char): bool"
			}, {
				"": "FormatFlags"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 119
				, "value": "FormatFlags"
			}, {
				"": "append(output: char[], pos: int32, value: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 134
				, "value": "append(output: char[], pos: int32, value: char[*]): int32"
			}, {
				"": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 151
				, "value": "append(output: char[], pos: int32, sign: char, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 224
				, "value": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 226
				, "value": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 228
				, "value": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 230
				, "value": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 232
				, "value": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 234
				, "value": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 236
				, "value": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 238
				, "value": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 241
				, "value": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 266
				, "value": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 269
				, "value": "append(output: char[], pos: int32, value: int32): int32"
			}, {
				"": "float64(value: char[]): float64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 275
				, "value": "float64(value: char[]): float64"
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "cmplStd/test/test.ci"
			, "line": 5
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/test.ci"
				, "line": 5
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "emitDivI32"
			}, {
				"": "emitNfcF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "emitNfcF32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 19
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 21
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 23
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 24
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 25
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 26
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "max(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "max(a: int32, b: int32): int32"
			}, {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 10
				, "value": "i3"
			}, {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 11
				, "value": "i6"
			}, {
				"": "i2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 12
				, "value": "i2"
			}, {
				"": "i8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 13
				, "value": "i8"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 15
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 16
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 19
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 20
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 23
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 24
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 27
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 28
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 31
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 32
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "value": "min2Xpr"
			}, {
				"": "max2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 35
				, "value": "max2Val"
			}, {
				"": "max2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 36
				, "value": "max2Var"
			}, {
				"": "max2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "value": "max2Xpr"
			}, {
				"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 41
				, "value": "sumRlVal"
			}, {
				"": "sumLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 42
				, "value": "sumLrVal"
			}, {
				"": "sumRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 43
				, "value": "sumRlVar"
			}, {
				"": "sumLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 44
				, "value": "sumLrVar"
			}, {
				"": "sumRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "value": "sumRlXpr"
			}, {
				"": "sumLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "value": "sumLrXpr"
			}, {
				"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 50
				, "value": "anyRlVal"
			}, {
				"": "anyLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 51
				, "value": "anyLrVal"
			}, {
				"": "anyRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 52
				, "value": "anyRlVar"
			}, {
				"": "anyLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 53
				, "value": "anyLrVar"
			}, {
				"": "anyRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "value": "anyRlXpr"
			}, {
				"": "anyLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "value": "anyLrXpr"
			}, {
				"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 59
				, "value": "minRlVal"
			}, {
				"": "minLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 60
				, "value": "minLrVal"
			}, {
				"": "minRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 61
				, "value": "minRlVar"
			}, {
				"": "minLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 62
				, "value": "minLrVar"
			}, {
				"": "minRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "value": "minRlXpr"
			}, {
				"": "minLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "value": "minLrXpr"
			}, {
				"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 68
				, "value": "maxRlVal"
			}, {
				"": "maxLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 69
				, "value": "maxLrVal"
			}, {
				"": "maxRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 70
				, "value": "maxRlVar"
			}, {
				"": "maxLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 71
				, "value": "maxLrVar"
			}, {
				"": "maxRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "value": "maxRlXpr"
			}, {
				"": "maxLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "value": "maxLrXpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "testSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "value": "testSin_f64"
			}, {
				"": "testCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "value": "testCos_f64"
			}, {
				"": "testTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "value": "testTan_f64"
			}, {
				"": "testLog_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "value": "testLog_f64"
			}, {
				"": "testExp_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 41
				, "value": "testExp_f64"
			}, {
				"": "testPow_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "testPow_f64"
			}, {
				"": "testSqrt_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "testSqrt_f64"
			}, {
				"": "testAtan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 44
				, "value": "testAtan_f64"
			}, {
				"": "testSin_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "value": "testSin_f32"
			}, {
				"": "testCos_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "value": "testCos_f32"
			}, {
				"": "testTan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "value": "testTan_f32"
			}, {
				"": "testLog_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "value": "testLog_f32"
			}, {
				"": "testExp_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 50
				, "value": "testExp_f32"
			}, {
				"": "testPow_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "testPow_f32"
			}, {
				"": "testSqrt_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "testSqrt_f32"
			}, {
				"": "testAtan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 53
				, "value": "testAtan_f32"
			}, {
				"": "testPopulation_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 55
				, "value": "testPopulation_u32"
			}, {
				"": "testSwapBits_u32"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 56
				, "value": "testSwapBits_u32"
			}, {
				"": "testBitScanReverse_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 57
				, "value": "testBitScanReverse_u32"
			}, {
				"": "testBitScanForward_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 58
				, "value": "testBitScanForward_u32"
			}, {
				"": "testHighBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 59
				, "value": "testHighBit_u32"
			}, {
				"": "testLowBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 60
				, "value": "testLowBit_u32"
			}, {
				"": "testZeroExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 62
				, "value": "testZeroExtend_u32"
			}, {
				"": "testSignExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 63
				, "value": "testSignExtend_u32"
			}, {
				"": "testZeroExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 65
				, "value": "testZeroExtend_u64"
			}, {
				"": "testSignExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 66
				, "value": "testSignExtend_u64"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 20
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 24
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 38
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 43
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 47
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 48
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 49
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 50
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 51
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 52
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 53
				, "value": "tryExecErr6"
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 3
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/init.reference.ci"
					, "line": 3
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 3
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/init.reference.ci"
							, "line": 3
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/init.reference.ci"
								, "line": 3
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.reference.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "variable"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 3
				, "value": "variable"
			}, {
				"": "constant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 7
				, "value": "constant"
			}, {
				"": "ComplexVal"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 9
				, "value": "ComplexVal"
			}, {
				"": "ComplexObj"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 13
				, "value": "ComplexObj"
			}, {
				"": "valInitImplicit"
				, "kind": ".variable"
				, "type": "ComplexVal"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 24
				, "value": "valInitImplicit"
			}, {
				"": "objInitImplicit"
				, "kind": ".variable"
				, "type": "ComplexObj"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 33
				, "value": "objInitImplicit"
			}, {
				"": "objInitExplicit"
				, "kind": ".variable"
				, "type": "object"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 41
				, "value": "objInitExplicit"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 4
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 7
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 12
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 15
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 18
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 21
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 24
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 27
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 30
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 33
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 38
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 46
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "RecordMemberTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.member.ci"
				, "line": 2
				, "value": "RecordMemberTest"
			}, {
				"": "recordMemberTest"
				, "kind": ".variable"
				, "type": "RecordMemberTest"
				, "file": "cmplStd/test/lang/init.member.ci"
				, "line": 52
				, "value": "recordMemberTest"
			}, {
				"": "RecordMethodTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 4
				, "value": "RecordMethodTest"
			}, {
				"": "globalFunction(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 57
				, "value": "globalFunction(this: RecordMethodTest, x: int32): void"
			}, {
				"": "recordMethodTest"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 62
				, "value": "recordMethodTest"
			}, {
				"": "RecordMethodTest.staticMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 78
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 79
			}, {
				"": "staticMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 84
				, "value": "staticMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "virtualMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 90
				, "value": "virtualMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "staticMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 97
			}, {
				"": "virtualMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 98
			}, {
				"": "RecordMethodTest.staticMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 101
			}, {
				"": "RecordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 102
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 103
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 73
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 73
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 73
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 73
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 73
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 28
					}]
				}
			}, {
				"": "testMathFloor_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 3
				, "value": "testMathFloor_1"
			}, {
				"": "testMathFloor_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 4
				, "value": "testMathFloor_2"
			}, {
				"": "testMathFloor_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 5
				, "value": "testMathFloor_3"
			}, {
				"": "testMathFloor_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 6
				, "value": "testMathFloor_4"
			}, {
				"": "testMathFloor_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 7
				, "value": "testMathFloor_5"
			}, {
				"": "testMathFloor_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 8
				, "value": "testMathFloor_6"
			}, {
				"": "testMathSign_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 10
				, "value": "testMathSign_1F"
			}, {
				"": "testMathSign_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 11
				, "value": "testMathSign_2F"
			}, {
				"": "testMathSign_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 12
				, "value": "testMathSign_3F"
			}, {
				"": "testMathSign_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 13
				, "value": "testMathSign_1f"
			}, {
				"": "testMathSign_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 14
				, "value": "testMathSign_2f"
			}, {
				"": "testMathSign_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 15
				, "value": "testMathSign_3f"
			}, {
				"": "testMathAbs_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 17
				, "value": "testMathAbs_1F"
			}, {
				"": "testMathAbs_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 18
				, "value": "testMathAbs_2F"
			}, {
				"": "testMathAbs_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 19
				, "value": "testMathAbs_3F"
			}, {
				"": "testMathAbs_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 20
				, "value": "testMathAbs_1f"
			}, {
				"": "testMathAbs_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 21
				, "value": "testMathAbs_2f"
			}, {
				"": "testMathAbs_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 22
				, "value": "testMathAbs_3f"
			}, {
				"": "testMathMin_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 24
				, "value": "testMathMin_1f"
			}, {
				"": "testMathMax_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 25
				, "value": "testMathMax_2f"
			}, {
				"": "testMathMin_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 26
				, "value": "testMathMin_1F"
			}, {
				"": "testMathMax_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 27
				, "value": "testMathMax_2F"
			}, {
				"": "testMathClamp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 29
				, "value": "testMathClamp_1f"
			}, {
				"": "testMathClamp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 30
				, "value": "testMathClamp_1F"
			}, {
				"": "testMathLerp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 32
				, "value": "testMathLerp_1f"
			}, {
				"": "testMathLerp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 33
				, "value": "testMathLerp_1F"
			}, {
				"": "testMathSmooth_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 35
				, "value": "testMathSmooth_1f"
			}, {
				"": "testMathSmooth_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 36
				, "value": "testMathSmooth_1F"
			}, {
				"": "testMathMin_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 38
				, "value": "testMathMin_nan"
			}, {
				"": "testMathMin_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 39
				, "value": "testMathMin_1"
			}, {
				"": "testMathMax_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 40
				, "value": "testMathMax_nan"
			}, {
				"": "testMathMax_9"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 41
				, "value": "testMathMax_9"
			}, {
				"": "testMathSum_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 43
				, "value": "testMathSum_0"
			}, {
				"": "testMathSum_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 44
				, "value": "testMathSum_1"
			}, {
				"": "testMathSum_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 45
				, "value": "testMathSum_3"
			}, {
				"": "testMathSum_55"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 46
				, "value": "testMathSum_55"
			}, {
				"": "testMathEval_x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 48
				, "value": "testMathEval_x"
			}, {
				"": "testMathEval_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 49
				, "value": "testMathEval_0"
			}, {
				"": "testMathEval_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 50
				, "value": "testMathEval_1"
			}, {
				"": "testMathEval_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 51
				, "value": "testMathEval_2"
			}, {
				"": "testMathEval_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 52
				, "value": "testMathEval_3"
			}, {
				"": "testMathEval_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 53
				, "value": "testMathEval_4"
			}, {
				"": "testMathEval_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 54
				, "value": "testMathEval_5"
			}, {
				"": "testMathEval_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 55
				, "value": "testMathEval_6"
			}, {
				"": "testMathSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "value": "testMathSin_f64"
			}, {
				"": "testMathCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "value": "testMathCos_f64"
			}, {
				"": "testMathTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "value": "testMathTan_f64"
			}, {
				"": "testMathSinh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "value": "testMathSinh_f64"
			}, {
				"": "testMathCosh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "value": "testMathCosh_f64"
			}, {
				"": "testMathAsin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 63
				, "value": "testMathAsin_f64"
			}, {
				"": "testMathAcos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 64
				, "value": "testMathAcos_f64"
			}, {
				"": "testMathCmp_f32"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "testMathCmp_f32"
			}, {
				"": "testMathCmp_f64"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "testMathCmp_f64"
			}, {
				"": "testMathAbsMod_f64_0a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 70
				, "value": "testMathAbsMod_f64_0a"
			}, {
				"": "testMathAbsMod_f64_0b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 71
				, "value": "testMathAbsMod_f64_0b"
			}, {
				"": "testMathAbsMod_f64_0c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 72
				, "value": "testMathAbsMod_f64_0c"
			}, {
				"": "testMathAbsMod_f64_9a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 74
				, "value": "testMathAbsMod_f64_9a"
			}, {
				"": "testMathAbsMod_f64_9b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 75
				, "value": "testMathAbsMod_f64_9b"
			}, {
				"": "testMathAbsMod_f64_9c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 76
				, "value": "testMathAbsMod_f64_9c"
			}, {
				"": "testMathAbsMod_f64_9d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 77
				, "value": "testMathAbsMod_f64_9d"
			}, {
				"": "testMathAbsMod_f64_8a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 79
				, "value": "testMathAbsMod_f64_8a"
			}, {
				"": "testMathAbsMod_f64_8b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 80
				, "value": "testMathAbsMod_f64_8b"
			}, {
				"": "testMathAbsMod_f64_8c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 81
				, "value": "testMathAbsMod_f64_8c"
			}, {
				"": "testMathAbsMod_f64_8d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 82
				, "value": "testMathAbsMod_f64_8d"
			}, {
				"": "testMathAbsMod_f32_0a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 84
				, "value": "testMathAbsMod_f32_0a"
			}, {
				"": "testMathAbsMod_f32_0b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 85
				, "value": "testMathAbsMod_f32_0b"
			}, {
				"": "testMathAbsMod_f32_0c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 86
				, "value": "testMathAbsMod_f32_0c"
			}, {
				"": "testMathAbsMod_f32_9a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 88
				, "value": "testMathAbsMod_f32_9a"
			}, {
				"": "testMathAbsMod_f32_9b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 89
				, "value": "testMathAbsMod_f32_9b"
			}, {
				"": "testMathAbsMod_f32_9c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 90
				, "value": "testMathAbsMod_f32_9c"
			}, {
				"": "testMathAbsMod_f32_9d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 91
				, "value": "testMathAbsMod_f32_9d"
			}, {
				"": "testMathAbsMod_f32_8a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 93
				, "value": "testMathAbsMod_f32_8a"
			}, {
				"": "testMathAbsMod_f32_8b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 94
				, "value": "testMathAbsMod_f32_8b"
			}, {
				"": "testMathAbsMod_f32_8c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 95
				, "value": "testMathAbsMod_f32_8c"
			}, {
				"": "testMathAbsMod_f32_8d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 96
				, "value": "testMathAbsMod_f32_8d"
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407412
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407417
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407422
		, "size": 4
	}, {
		"instruction": "load.c32 36"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407426
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407431
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407436
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407440
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407441
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 407446
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407447
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407448
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407452
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407453
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 407458
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407459
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407460
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407464
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407465
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 407469
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407470
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407474
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407479
		, "size": 4
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407483
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407488
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407492
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407496
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 407500
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407501
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407505
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407510
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 407515
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407516
		, "size": 4
	}, {
		"instruction": "load.f32 3.140000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 407520
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 407525
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 407530
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407531
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407535
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 407539
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407544
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 407548
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 407553
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407554
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 407558
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 407567
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407568
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 407572
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407581
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407585
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407590
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 407595
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407599
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407604
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407608
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407613
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407617
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407622
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407626
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407631
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407635
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407636
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407640
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407641
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407645
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407646
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407650
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407655
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407659
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407663
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407667
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407671
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407675
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407679
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407683
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407688
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407692
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407696
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407700
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 407704
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407705
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407709
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407713
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407717
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407721
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 407725
		, "size": 1
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407726
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407730
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407734
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407739
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 407741
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407745
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 407747
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407751
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407756
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407758
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407762
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407766
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 407768
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407772
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 407774
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407778
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407782
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407784
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407788
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407792
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407796
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 407798
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407802
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 407804
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407808
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407812
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407816
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407818
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407822
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407826
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407831
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407836
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407838
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 407840
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 407841
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407845
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 407847
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407851
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407853
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407855
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407859
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407863
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407867
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407871
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407873
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 407875
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 407876
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407880
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 407882
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407886
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407888
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407890
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407894
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407898
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407902
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407906
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407910
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407914
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407916
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 407918
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 407919
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407923
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 407925
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407929
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407931
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407933
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 407937
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407941
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407945
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407950
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407955
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407957
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 407959
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 407960
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407964
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 407966
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407970
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407972
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407974
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 407978
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407982
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 407986
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407990
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407992
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 407994
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 407995
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407999
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408001
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408005
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408007
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408009
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408013
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408017
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408021
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408025
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408029
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408033
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408035
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 408037
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408038
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408042
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408044
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408048
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408050
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408052
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408056
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408060
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408064
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408069
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408074
		, "size": 5
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408079
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408083
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408084
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408085
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408089
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408094
		, "size": 4
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408098
		, "size": 4
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408102
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408106
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408110
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408114
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408118
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408122
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408126
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408127
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408128
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408129
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408133
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408137
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408141
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408142
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408146
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408147
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408151
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408152
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408156
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408160
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408164
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408168
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408172
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408176
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408180
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408184
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408188
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408189
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408190
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408191
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408195
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408199
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408203
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408207
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408211
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408215
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408216
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408220
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408224
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408225
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408229
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408233
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408234
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408238
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408242
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408247
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408249
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408253
		, "size": 2
	}, {
		"instruction": "jmp +47"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408255
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408259
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408264
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408266
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408270
		, "size": 2
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408272
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408276
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408281
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408283
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408287
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408289
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408293
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408298
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408300
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408302
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408304
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408308
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408313
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408315
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408319
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408321
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408325
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408330
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408332
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408334
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408338
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408340
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408344
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408349
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408351
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408353
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408357
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408359
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408363
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408368
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408370
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408374
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408378
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408380
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408384
		, "size": 2
	}, {
		"instruction": "jmp +44"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408386
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408390
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408394
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408396
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408400
		, "size": 2
	}, {
		"instruction": "jmp +26"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408402
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408406
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408410
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408412
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408416
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408418
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408422
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408426
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408428
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408430
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408432
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408436
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408440
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408442
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408446
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408448
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408452
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408456
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408458
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408460
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408464
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408466
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408470
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408474
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408476
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408478
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408482
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408484
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408488
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408492
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408494
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408498
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408502
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408506
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408508
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408512
		, "size": 2
	}, {
		"instruction": "jmp +56"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408514
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408518
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408522
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408526
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408528
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408532
		, "size": 2
	}, {
		"instruction": "jmp +34"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408534
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408538
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408542
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408546
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408548
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408552
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408554
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408558
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408562
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408566
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408568
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408570
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408572
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408576
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408580
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408584
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408588
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408590
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408594
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408596
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408600
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408604
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408608
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408610
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408612
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408616
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408618
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408622
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408626
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408630
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408632
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408634
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408638
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408640
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408644
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408648
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408652
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408654
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408658
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408662
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408667
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408672
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408677
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408682
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408684
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408686
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408687
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408691
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408693
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408697
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408699
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408701
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408705
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408707
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408709
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408710
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408714
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408716
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408720
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408722
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408724
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408728
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408730
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408732
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408733
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408737
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408739
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408743
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408745
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408747
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408751
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408755
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408760
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408765
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408767
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408769
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408770
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408774
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408776
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408780
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408782
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408784
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408788
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408793
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408795
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408797
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408798
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408802
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408804
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408808
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408810
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408812
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408816
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408821
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408823
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408825
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408826
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408830
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408832
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408836
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408838
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408840
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408844
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408848
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408852
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408856
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408860
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408864
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408866
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408868
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408869
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408873
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408875
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408879
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408881
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408883
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408887
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408889
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408891
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408892
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408896
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408898
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408902
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408904
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408906
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408910
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408912
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408914
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408915
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408919
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408921
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408925
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408927
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408929
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 408933
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408937
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408941
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408945
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408947
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408949
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408950
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408954
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408956
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408960
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408962
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408964
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408968
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408972
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408974
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 408976
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 408977
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408981
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 408983
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408987
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408989
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408991
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 408995
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408999
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409001
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409003
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409004
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409008
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409010
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409014
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409016
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409018
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409022
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409026
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409030
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409034
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409038
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409042
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409046
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409050
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409054
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409058
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409060
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409062
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409063
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409067
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409069
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409073
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409075
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409077
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409081
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409083
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409085
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409086
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409090
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409092
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409096
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409098
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409100
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409104
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409106
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409108
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409109
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409113
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409115
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409119
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409121
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409123
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409127
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409131
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409135
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409139
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409143
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409147
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409151
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409153
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409155
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409156
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409160
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409162
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409166
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409168
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409170
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409174
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409178
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409182
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409184
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409186
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409187
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409191
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409193
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409197
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409199
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409201
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409205
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409209
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409213
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409215
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 409217
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409218
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409222
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409224
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409228
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409230
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409232
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409236
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409240
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409244
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409249
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409254
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409259
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409264
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409266
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409268
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409269
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409273
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409275
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409279
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409281
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409283
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409287
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409289
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409291
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409292
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409296
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409298
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409302
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409304
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409306
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409310
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409312
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409314
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409315
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409319
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409321
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409325
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409327
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409329
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409333
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409337
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409342
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409347
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409349
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409351
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409352
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409356
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409358
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409362
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409364
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409366
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409370
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409375
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409377
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409379
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409380
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409384
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409386
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409390
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409392
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409394
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409398
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409403
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409405
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409407
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409408
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409412
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409414
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409418
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409420
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409422
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409426
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409430
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409434
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409438
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409442
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409446
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409448
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409450
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409451
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409455
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409457
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409461
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409463
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409465
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409469
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409471
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409473
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409474
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409478
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409480
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409484
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409486
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409488
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409492
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409494
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409496
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409497
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409501
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409503
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409507
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409509
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409511
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409515
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409519
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409523
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409527
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409529
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409531
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409532
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409536
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409538
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409542
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409544
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409546
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409550
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409554
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409556
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409558
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409559
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409563
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409565
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409569
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409571
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409573
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409577
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409581
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409583
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409585
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409586
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409590
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409592
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409596
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409598
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409600
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409604
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409608
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409612
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409616
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409620
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409624
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409628
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409632
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409636
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409640
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409642
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409644
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409645
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409649
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409651
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409655
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409657
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409659
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409663
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409665
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409667
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409668
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409672
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409674
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409678
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409680
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409682
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409686
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409688
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409690
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409691
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409695
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409697
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409701
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409703
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409705
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409709
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409713
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409717
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409721
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409725
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409729
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409733
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409735
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409737
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409738
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409742
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409744
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409748
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409750
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409752
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409756
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409760
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409764
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409766
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409768
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409769
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409773
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409775
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409779
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409781
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409783
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409787
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409791
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409795
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409797
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 409799
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 409800
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409804
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 409806
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 409810
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 409812
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 409814
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 409818
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409822
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 409826
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409831
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 409835
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409840
		, "size": 4
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 409844
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409849
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 409853
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409858
		, "size": 4
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 409862
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409867
		, "size": 4
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 409871
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 409880
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 409884
		, "size": 4
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 409888
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 409897
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 409898
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 409907
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 409908
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 409912
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 409921
		, "size": 4
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 409925
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 409934
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 409938
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 409942
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409943
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 409947
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 409951
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409952
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409956
		, "size": 5
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 409961
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409963
		, "size": 4
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409967
		, "size": 5
	}, {
		"instruction": "b32.shl 0x02"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 409972
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409974
		, "size": 4
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409978
		, "size": 5
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 409983
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 409985
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 409989
		, "size": 4
	}, {
		"instruction": "b32.shl 0x08"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 409993
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 409995
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 410000
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410001
		, "size": 4
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 410005
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410007
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 410012
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 410013
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410014
		, "size": 4
	}, {
		"instruction": "b32.sar 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 410018
		, "size": 2
	}, {
		"instruction": "b32.and 0x1f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 410020
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 410022
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410023
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410027
		, "size": 4
	}, {
		"instruction": "b32.shl 0x10"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 410031
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410033
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 410038
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410039
		, "size": 4
	}, {
		"instruction": "b32.shl 0x08"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 410043
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410045
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 410050
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 410051
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410052
		, "size": 4
	}, {
		"instruction": "b32.and 0xff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 410056
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 410058
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410059
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410063
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410067
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410072
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410077
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410081
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410085
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410089
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410094
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410099
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410103
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410107
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 410111
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410112
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410117
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410121
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410125
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410129
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410134
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410139
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410143
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410147
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410151
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410156
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410161
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410165
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410169
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 410173
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410174
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410179
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410183
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410187
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410191
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410196
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410201
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410205
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410209
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410213
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410218
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410223
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410227
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410231
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 410235
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410236
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410241
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410245
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410249
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410253
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410258
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410263
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410267
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410271
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410275
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410280
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410285
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410289
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410293
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 410297
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410298
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410303
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410307
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410311
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 410315
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 410324
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410325
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410329
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410333
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 410337
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 410346
		, "size": 1
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410347
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410351
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410355
		, "size": 4
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 410359
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 410368
		, "size": 1
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410369
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410373
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410377
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410381
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 410385
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410386
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 410390
		, "size": 1
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410391
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410395
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 410399
		, "size": 9
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410408
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410412
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410416
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410420
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 410424
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 410425
		, "size": 9
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410434
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410438
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410442
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410446
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 410450
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410451
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410455
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 410459
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 410463
		, "size": 9
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410472
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410476
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410480
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 410484
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 410489
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410490
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410494
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410498
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 410502
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 410507
		, "size": 1
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410508
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410512
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410516
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 410520
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 410525
		, "size": 1
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410526
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410530
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410534
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410538
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 410542
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410543
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 410547
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410548
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410552
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 410556
		, "size": 5
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410561
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410565
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410569
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410573
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 410577
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 410578
		, "size": 5
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410583
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410587
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410591
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410595
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 410599
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410600
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410604
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410608
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 410612
		, "size": 5
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410617
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410621
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410625
		, "size": 4
	}, {
		"instruction": "nfc(26)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410629
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410633
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410637
		, "size": 4
	}, {
		"instruction": "nfc(27)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410641
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410645
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410649
		, "size": 4
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410653
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410657
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410661
		, "size": 4
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410665
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410669
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410673
		, "size": 4
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410677
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410681
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410685
		, "size": 4
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410689
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410693
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410697
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 410701
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410702
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410707
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410711
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410715
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 410719
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410720
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410725
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410729
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410733
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 410737
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 410738
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410739
		, "size": 5
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410744
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 410748
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410749
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 410753
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 410757
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 410758
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410759
		, "size": 5
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410764
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 410768
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410769
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410773
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410778
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410783
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410787
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410791
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410796
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410801
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410805
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410809
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410814
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410819
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410823
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410827
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 410832
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410837
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410841
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 410845
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410854
		, "size": 4
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 410858
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 410867
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410871
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410876
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410881
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410885
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410889
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410894
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410899
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410903
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410907
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410912
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410917
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410921
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410925
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410930
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410935
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410939
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410943
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410948
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410953
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410957
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410961
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410966
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410971
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410975
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410979
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 410984
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 410989
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 410993
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 410997
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411006
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411010
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411015
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411019
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411024
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411028
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411033
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411038
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411042
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 411046
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411047
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411051
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411055
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411059
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411063
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411067
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411072
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411076
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411081
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411085
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411090
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411095
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411099
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411104
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411108
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411113
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411117
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411122
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411126
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411131
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411135
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411140
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411145
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411149
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411154
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411158
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411162
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411166
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411170
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411174
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411178
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411182
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411186
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 411190
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411194
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411198
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411202
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411206
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411211
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411215
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411220
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411224
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411229
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411233
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411238
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411242
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411247
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411251
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411256
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411260
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411265
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411269
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411274
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411278
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411283
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411287
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411292
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411296
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411301
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411305
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411310
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411314
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411319
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411323
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411328
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411332
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411337
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411341
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411346
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411350
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411355
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411359
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411364
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411368
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411373
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411378
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411382
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411387
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411392
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411396
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411401
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411406
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411410
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411415
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411420
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411424
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411429
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411434
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411438
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411443
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411448
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411452
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411457
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411462
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411466
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411471
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411476
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411480
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411485
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411490
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411494
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411499
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411504
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411508
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411513
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411518
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411522
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411527
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411532
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411536
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411541
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411546
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411550
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411555
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411560
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411564
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411569
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411574
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411578
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411583
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411588
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411592
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411597
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411602
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411606
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411611
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411616
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411620
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411625
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411629
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411634
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411638
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411643
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411647
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411652
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411656
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411661
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411665
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411670
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411674
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411679
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411683
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411688
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411692
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411697
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411701
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411706
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411710
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411715
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411719
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411724
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411728
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411733
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411737
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411742
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411746
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411751
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411755
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411760
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411764
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411769
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411773
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411778
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411782
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411787
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411791
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411796
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411801
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411805
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411810
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411814
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411819
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411823
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411828
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411832
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411836
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411840
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411844
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411845
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411849
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411854
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411858
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411867
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411871
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411872
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411876
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 411881
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411885
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411889
		, "size": 9
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411898
		, "size": 4
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411902
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 411906
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411907
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411908
		, "size": 4
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411912
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 411916
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411917
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 411922
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411926
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411930
		, "size": 9
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411939
		, "size": 4
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411943
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 411947
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411948
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411949
		, "size": 4
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411953
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 411957
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411958
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411959
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411964
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411969
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 411974
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411975
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411979
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411983
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411988
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411992
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411993
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411998
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412003
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412007
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412008
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412012
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412016
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412021
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412025
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412026
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412031
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412036
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412040
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412041
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412045
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412049
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412053
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412057
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412058
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412063
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412068
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412072
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412073
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412077
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412081
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412082
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412087
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 412092
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412093
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412097
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412101
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412106
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412110
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412114
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412119
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412123
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412127
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412132
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412136
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412140
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412145
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412149
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412153
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412158
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412162
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412166
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412171
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412175
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412179
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412184
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412188
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412192
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412197
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412201
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412205
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412210
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412214
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412218
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412223
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412227
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412231
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412236
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412240
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412244
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412249
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412253
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412257
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412262
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412266
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412270
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412275
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412279
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412283
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412288
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412292
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412296
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412301
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412305
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412309
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412314
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412318
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412322
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412327
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412331
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412335
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412340
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412344
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412348
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412352
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412356
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412360
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 412364
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412365
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412369
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412373
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 412377
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412378
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412382
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412386
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412390
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412394
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412398
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412402
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412406
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412410
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412414
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412418
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412422
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412426
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412430
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412434
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 412438
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412439
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412443
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412447
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 412451
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412452
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412456
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412460
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412464
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412468
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412472
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412476
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412480
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412484
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412488
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412492
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412496
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 412500
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412501
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412505
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412509
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 412513
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412514
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412518
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 412522
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412526
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412530
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412534
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 412538
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412539
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412543
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412547
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 412551
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412552
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412556
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412557
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412561
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412566
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412570
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412575
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412579
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412584
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412588
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412589
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412593
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412598
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412602
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412607
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412611
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412616
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412620
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412625
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412629
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412634
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412638
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412643
		, "size": 4
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412647
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412652
		, "size": 4
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412656
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412661
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412665
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412670
		, "size": 4
	}, {
		"instruction": "load.c32 15"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412674
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412679
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412683
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412688
		, "size": 4
	}, {
		"instruction": "load.c32 17"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412692
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412697
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412701
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412706
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412710
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412715
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412719
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412723
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412727
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412732
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412736
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412737
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412742
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412743
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412744
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412749
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412750
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412751
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412756
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412757
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412758
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412763
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412764
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412769
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412774
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412775
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412776
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412781
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412782
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412787
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412792
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412793
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412798
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412803
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412804
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412809
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412814
		, "size": 1
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412815
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412820
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412824
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412825
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412830
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 412831
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412832
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412837
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412838
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412843
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412848
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412849
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412854
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412858
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412863
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412868
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412869
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412874
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412879
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412880
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412885
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412886
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412891
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 412892
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412893
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412898
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412899
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412904
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412905
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412910
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 412911
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412912
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412917
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412918
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412923
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412924
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412929
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 412930
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412931
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412936
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412937
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412942
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 412943
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412944
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412949
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412950
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412955
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412956
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412961
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 412962
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412963
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412968
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412969
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412974
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412975
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412980
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 412981
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 412982
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412983
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 412988
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412989
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 412994
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 412995
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413000
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413001
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413002
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413007
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413008
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413013
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413014
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413019
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413020
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413021
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413022
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413027
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413028
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413033
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413034
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413039
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413040
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413041
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413046
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413047
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413052
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413053
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413058
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413059
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413060
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413061
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413066
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413067
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413072
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413077
		, "size": 1
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413078
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413083
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413088
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413089
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413094
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413095
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413100
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413101
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413106
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 413107
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413108
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413113
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413114
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413119
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 413120
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413121
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413126
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413127
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413132
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413133
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413138
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 413139
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413140
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413145
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413146
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413151
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413152
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413157
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 413158
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413159
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413164
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413165
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413170
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413171
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413176
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 413177
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413178
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413183
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413184
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413189
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413190
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413195
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 413196
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413197
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413202
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413203
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413208
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413209
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413214
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 413215
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413216
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413221
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413222
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413227
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413228
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413233
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 413234
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413235
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413240
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413241
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413246
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413247
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413252
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 413253
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413254
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413259
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413260
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413265
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413266
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413271
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 413272
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413273
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413278
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413279
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413284
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413285
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 413289
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413290
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413295
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413296
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413301
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413302
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 413306
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413307
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413312
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413313
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413318
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 413319
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413320
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413321
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413326
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413327
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413332
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413333
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413338
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 413339
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413340
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413345
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413346
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413351
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413352
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413357
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 413358
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413359
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413360
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413365
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413366
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413371
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413372
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413377
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413378
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413379
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413384
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413385
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413390
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413391
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413396
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413397
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413398
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413399
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413404
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413405
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413410
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413411
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413416
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413417
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413418
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413423
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413424
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413429
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413430
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413435
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413436
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413437
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413438
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413443
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413444
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413449
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413454
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413455
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413460
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413465
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413466
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413471
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413472
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413477
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413478
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413483
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 413484
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413485
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413490
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413491
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413496
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 413497
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413498
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413503
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413504
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413509
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413510
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413515
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 413516
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413517
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413522
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413523
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413528
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413529
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413534
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 413535
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413536
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413541
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413542
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413547
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413548
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413553
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 413554
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413555
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413560
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413561
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413566
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413567
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413572
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 413573
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413574
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413579
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413580
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413585
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413586
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413591
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 413592
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413593
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413598
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413599
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413604
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413605
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413610
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 413611
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413612
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413617
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413618
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413623
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413624
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413629
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 413630
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413631
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413636
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413637
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413642
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413643
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413648
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 413649
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413650
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413655
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413656
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413661
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413662
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 413666
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413667
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413672
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413673
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413678
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413679
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 413683
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413684
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413689
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413690
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413695
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 413696
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413697
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413698
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413703
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413704
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413709
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413710
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413715
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 413716
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413717
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413722
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413723
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413728
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413729
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413734
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 413735
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413736
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413737
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413742
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413743
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413748
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413749
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413754
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413755
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413756
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413761
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413762
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413767
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413768
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413773
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413774
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413775
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413776
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413781
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413782
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413787
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413788
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413793
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413794
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413795
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413800
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413801
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413806
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413807
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413812
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413813
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 413814
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413815
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413820
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413821
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413826
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413831
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413832
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413837
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413842
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413843
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413848
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413849
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413854
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413855
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413860
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 413861
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413862
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413867
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413868
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413873
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 413874
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413875
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413880
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413881
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413886
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413887
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413892
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 413893
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413894
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413899
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413900
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413905
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413906
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413911
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 413912
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413913
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413918
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413919
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413924
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413925
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413930
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 413931
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413932
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413937
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413938
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413943
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413944
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413949
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 413950
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413951
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413956
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413957
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413962
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413963
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413968
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 413969
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413970
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413975
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413976
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413981
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413982
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 413987
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 413988
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413989
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 413994
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 413995
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414000
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414001
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414006
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 414007
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414008
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414013
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414014
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414019
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414020
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414025
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 414026
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414027
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414032
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414033
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414038
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414039
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 414043
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414044
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414049
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414050
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414055
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414056
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 414060
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414061
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414066
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414067
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414072
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 414073
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414074
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414075
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414080
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414081
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414086
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414087
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414092
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 414093
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414094
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414099
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414100
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414105
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414106
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414111
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 414112
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414113
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414114
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414119
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414120
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414125
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414126
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414131
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 414132
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414133
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414138
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414139
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414144
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414145
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414150
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 414151
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414152
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414153
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414158
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414159
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414164
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414165
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414170
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 414171
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414172
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414177
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414178
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414183
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414184
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 414189
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 414190
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414191
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414192
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414197
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414198
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414203
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414208
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414209
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414214
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414219
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414220
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414225
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414226
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414231
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414232
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414237
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 414238
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414239
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414244
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414245
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414250
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 414251
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414252
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414257
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414258
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414263
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414264
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414269
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 414270
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414271
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414276
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414277
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414282
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414283
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414288
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 414289
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414290
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414295
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414296
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414301
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414302
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414307
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 414308
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414309
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414314
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414315
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414320
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414321
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414326
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 414327
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414328
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414333
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414334
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414339
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414340
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414345
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 414346
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414347
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414352
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414353
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414358
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414359
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414364
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 414365
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414366
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414371
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414372
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414377
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414378
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414383
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 414384
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414385
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414390
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414391
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414396
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414397
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414402
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 414403
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414404
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414409
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414410
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414415
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414416
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 414420
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414421
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414426
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414427
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414432
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414433
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 414437
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414438
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414443
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414444
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414449
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 414450
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414451
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414452
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414457
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414458
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414463
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414464
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414469
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 414470
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414471
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414476
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414477
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414482
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414483
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414488
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 414489
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414490
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414491
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414496
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414497
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414502
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414503
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414508
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 414509
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414510
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414515
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414516
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414521
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414522
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414527
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 414528
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414529
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414530
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414535
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414536
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414541
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414542
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414547
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 414548
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414549
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414554
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414555
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414560
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414561
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414566
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 414567
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414568
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414569
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414574
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414575
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414580
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414585
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414586
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414591
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414596
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414597
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414602
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414603
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414608
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414609
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414614
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 414615
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414616
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414621
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414622
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414627
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 414628
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414629
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414634
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414635
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414640
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414641
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414646
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 414647
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414648
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414653
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414654
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414659
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414660
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414665
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 414666
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414667
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414672
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414673
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414678
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414679
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414684
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 414685
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414686
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414691
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414692
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414697
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414698
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414703
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 414704
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414705
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414710
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414711
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414716
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414717
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414722
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 414723
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414724
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414729
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414730
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414735
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414736
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414741
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 414742
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414743
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414748
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414749
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414754
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414755
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414760
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 414761
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414762
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414767
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414768
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414773
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414774
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414779
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 414780
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414781
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414786
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414787
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414792
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414793
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 414797
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414798
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414803
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414804
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414809
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414810
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 414814
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414815
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 414820
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414821
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414826
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 414827
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414828
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414829
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414834
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414835
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414840
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414841
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414846
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 414847
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414848
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414853
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414854
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414859
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414860
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414865
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 414866
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414867
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414868
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414873
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414874
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414879
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414880
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414885
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 414886
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414887
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414892
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414893
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414898
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414899
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414904
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 414905
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414906
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414907
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414912
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414913
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414918
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414919
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414924
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 414925
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414926
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414931
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414932
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414937
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414938
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 414943
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 414944
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 414945
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414946
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 414951
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414952
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414957
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414961
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414966
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414970
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414974
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414978
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 414982
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414983
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414987
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 414991
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414992
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414996
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415000
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 415004
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415005
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415009
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415013
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 415017
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415018
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415022
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415026
		, "size": 4
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 415030
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415031
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415035
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415039
		, "size": 4
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 415043
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415044
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415048
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415052
		, "size": 4
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 415056
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415057
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415061
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415065
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 415069
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415070
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415074
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415078
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 415082
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415083
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415087
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415091
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 415095
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415096
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415100
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415104
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 415108
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415109
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415113
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415117
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 415121
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415122
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415126
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 415130
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415131
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415132
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415137
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415138
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415142
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415146
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415147
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415152
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415153
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415157
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415161
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415162
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415163
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415168
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415169
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415173
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 415177
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415178
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415183
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415184
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415188
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 415192
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415193
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415194
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415199
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415200
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415204
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 415208
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415209
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415214
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415215
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415219
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 415223
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415224
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415225
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415230
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415231
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415236
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415240
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415245
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415249
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415253
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415257
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 415261
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415262
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415266
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 415270
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415271
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415275
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415279
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 415283
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415284
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415288
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415292
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 415296
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415297
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415301
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415305
		, "size": 4
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 415309
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415310
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415314
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415318
		, "size": 4
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 415322
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415323
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415327
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415331
		, "size": 4
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 415335
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415336
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415340
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415344
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 415348
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415349
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415353
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415357
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 415361
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415362
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415366
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415370
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 415374
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415375
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415379
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415383
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 415387
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415388
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415392
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415396
		, "size": 4
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 415400
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415401
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415405
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 415409
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415410
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415411
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415416
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415417
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415421
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415425
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415426
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415431
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415432
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415436
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 415440
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415441
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415442
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415447
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415448
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415452
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 415456
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415457
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415462
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415463
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415467
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 415471
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415472
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415473
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415478
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415479
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415483
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 415487
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415488
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415493
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415494
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415498
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 415502
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415503
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415504
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415509
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 415510
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415519
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 415523
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415532
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415536
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415540
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415544
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 415548
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415549
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415553
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 415557
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415558
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415562
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415566
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 415570
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415571
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415575
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415579
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 415583
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415584
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415588
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415592
		, "size": 4
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 415596
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415597
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415601
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415605
		, "size": 4
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 415609
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415610
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415614
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415618
		, "size": 4
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 415622
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415623
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415627
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415631
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 415635
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415636
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415640
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415644
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 415648
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415649
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415653
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415657
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 415661
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415662
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415666
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415670
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 415674
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415675
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415679
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415683
		, "size": 4
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 415687
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415688
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415692
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 415696
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415697
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415698
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415703
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415704
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415708
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 415712
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415713
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415718
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415719
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415723
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 415727
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415728
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415729
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415734
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415735
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415739
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 415743
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415744
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415749
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415750
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415754
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 415758
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415759
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415760
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415765
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415766
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415770
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 415774
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415775
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415780
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415781
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415785
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 415789
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415790
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415791
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415796
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 415797
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415806
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 415810
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415819
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415823
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415827
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415831
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 415835
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415836
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415840
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 415844
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415845
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415849
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415853
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 415857
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415858
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415862
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415866
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 415870
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415871
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415875
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415879
		, "size": 4
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 415883
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415884
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415888
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415892
		, "size": 4
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 415896
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415897
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415901
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415905
		, "size": 4
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 415909
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415910
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415914
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415918
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 415922
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415923
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415927
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415931
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 415935
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415936
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415940
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415944
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 415948
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415949
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415953
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415957
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 415961
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415962
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415966
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415970
		, "size": 4
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 415974
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415975
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415979
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 415983
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 415984
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415985
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 415990
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415991
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415995
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 415999
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416000
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416005
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416006
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416010
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 416014
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416015
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416016
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416021
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416022
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416026
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 416030
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416031
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416036
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416037
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416041
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 416045
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416046
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416047
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416052
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416053
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416057
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 416061
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416062
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416067
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416068
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416072
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 416076
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416077
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416078
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416083
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 416084
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416089
		, "size": 4
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 416093
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416098
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416102
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416106
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416110
		, "size": 4
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 416114
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416115
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416119
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416123
		, "size": 4
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 416127
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416128
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416132
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416136
		, "size": 4
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 416140
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416141
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416145
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416149
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 416153
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416154
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416158
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416162
		, "size": 4
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 416166
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416167
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416171
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416175
		, "size": 4
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 416179
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416180
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416184
		, "size": 4
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7c"
		, "offs": 416188
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416189
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416190
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416195
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416196
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416200
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 416204
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416205
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416210
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416211
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416215
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 416219
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416220
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416221
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416226
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416227
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416231
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 416235
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416236
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416241
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416242
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416246
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 416250
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416251
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416252
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416257
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416258
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416262
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 416266
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416267
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416272
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416273
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416277
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 416281
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416282
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416283
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416288
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416289
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416298
		, "size": 4
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416302
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416311
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416315
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416319
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416323
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 416327
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416328
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416332
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416336
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 416340
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416341
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416345
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416349
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 416353
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416354
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416358
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416362
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 416366
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416367
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416371
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416375
		, "size": 4
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 416379
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416380
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416384
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416388
		, "size": 4
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 416392
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416393
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416397
		, "size": 4
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 416401
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416402
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416403
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416408
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416409
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416413
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 416417
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416418
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416423
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416424
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416428
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 416432
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416433
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416434
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416439
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416440
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416444
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 416448
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416449
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416454
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416455
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416459
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 416463
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416464
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416465
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416470
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416471
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416475
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 416479
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416480
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416485
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416486
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 416490
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 416494
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416495
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416496
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416501
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416502
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416507
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416511
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416516
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416520
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416524
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 416528
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416529
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416534
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416535
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416539
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 416543
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416544
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416545
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416550
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416551
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416552
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416556
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416557
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416561
		, "size": 1
	}, {
		"instruction": "load.f64 3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416562
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416571
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416576
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416577
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416581
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416585
		, "size": 1
	}, {
		"instruction": "load.f64 3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416586
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416595
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416600
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416601
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416605
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416609
		, "size": 1
	}, {
		"instruction": "load.f64 3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416610
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416619
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416624
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416625
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416629
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416633
		, "size": 1
	}, {
		"instruction": "load.f64 -3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416634
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416643
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416648
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416649
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416653
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416657
		, "size": 1
	}, {
		"instruction": "load.f64 -3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416658
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416667
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416672
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416673
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416677
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416681
		, "size": 1
	}, {
		"instruction": "load.f64 -3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416682
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416691
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416696
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416697
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416701
		, "size": 4
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416705
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416714
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416716
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 416717
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416718
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416720
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 416721
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 416722
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 416723
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416725
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 416729
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416730
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416734
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416735
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416737
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 416738
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416739
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416741
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 416742
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 416743
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 416744
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416746
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 416750
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416751
		, "size": 4
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416755
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416764
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416766
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 416767
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416768
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416770
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 416771
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 416772
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 416773
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416775
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 416779
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416780
		, "size": 4
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 416784
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416789
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416791
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 416792
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416793
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416795
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 416796
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 416797
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 416798
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 416800
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416801
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416805
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416806
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416808
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 416809
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416810
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416812
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 416813
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 416814
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 416815
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 416817
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416818
		, "size": 4
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 416822
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416827
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416829
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 416830
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416831
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416833
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 416834
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 416835
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 416836
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 416838
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416839
		, "size": 4
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416843
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416852
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416854
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 416855
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 416856
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416860
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 416862
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 416863
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416867
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 416869
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416871
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416875
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416876
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416878
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 416879
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 416880
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416884
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 416886
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 416887
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416891
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 416893
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416895
		, "size": 4
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 416899
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416908
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 416910
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 416911
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 416912
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416916
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 416918
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 416919
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 416923
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 416925
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416927
		, "size": 4
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 416931
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416936
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416938
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 416939
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 416940
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416944
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 416946
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 416947
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416951
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 416953
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 416955
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416956
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416960
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416961
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416963
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 416964
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 416965
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416969
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 416971
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 416972
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416976
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 416978
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 416980
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 416981
		, "size": 4
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 416985
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416990
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416992
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 416993
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 416994
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 416998
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 417000
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 417001
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417005
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 417007
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 417009
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417010
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417014
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417019
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417024
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417026
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 417028
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 417029
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417033
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 417035
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417039
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 417041
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417043
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 417047
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417048
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417052
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417057
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417062
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417064
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 417066
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 417067
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417071
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 417073
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417077
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 417079
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417081
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 417085
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417086
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417090
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417099
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417108
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417110
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 417112
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 417113
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417117
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 417119
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417123
		, "size": 2
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 417125
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417127
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417131
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417135
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417144
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417153
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417155
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 417157
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 417158
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417162
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 417164
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417168
		, "size": 2
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 417170
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417172
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417176
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417180
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417181
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417186
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417187
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417192
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417197
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417198
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 417202
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417203
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417207
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417208
		, "size": 9
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417217
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417218
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417227
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417232
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417233
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417237
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417241
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417242
		, "size": 2
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417244
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417249
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417254
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 417256
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 417257
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 417258
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 417259
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 417261
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417262
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417266
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417267
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417269
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417278
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417287
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 417289
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 417290
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 417291
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 417292
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417294
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417298
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417299
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417300
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417305
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 417307
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417308
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417313
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 417315
		, "size": 1
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 417316
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417317
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417318
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417323
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417328
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417329
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417333
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417335
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 417337
		, "size": 1
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417338
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 417343
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 417348
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 417350
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 417351
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 417352
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 417353
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 417355
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 417357
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417358
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 417362
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417363
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417372
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 417374
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417375
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417384
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 417386
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 417387
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417388
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417389
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417398
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417403
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417404
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417408
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417410
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 417412
		, "size": 1
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417413
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417422
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417431
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 417433
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 417434
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 417435
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 417436
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 417438
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417440
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417444
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417445
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417449
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417450
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417452
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417457
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417458
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417461
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417465
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417469
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417478
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417487
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417496
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417505
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417514
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417523
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417532
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417541
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417550
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417555
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417559
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417560
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417562
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417567
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417568
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417571
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417575
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417579
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417580
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417584
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417585
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417587
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417592
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417593
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417596
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417600
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417604
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417613
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417622
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417631
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417640
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417649
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417658
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417667
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417676
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417685
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417690
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417694
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417695
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417697
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417702
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417703
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417706
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417710
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417714
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417715
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417719
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417720
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417722
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417727
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417728
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417731
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417735
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417739
		, "size": 9
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417748
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417753
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417757
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417758
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417760
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417765
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417766
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417769
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417773
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417777
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417786
		, "size": 9
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417795
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417800
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417804
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417805
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417807
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417812
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(8, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417813
		, "size": 3
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417816
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417820
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417824
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417833
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417842
		, "size": 9
	}, {
		"instruction": "load.f64 7.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417851
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417860
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417869
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417878
		, "size": 9
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417887
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417896
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417905
		, "size": 9
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417914
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417919
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417923
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417924
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417926
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417931
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(24, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417932
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417935
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417939
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417943
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417952
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 417956
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 417957
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 417961
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 417962
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 417966
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417968
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 417973
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 417974
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 417977
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417981
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417985
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 417994
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 417998
		, "size": 9
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 418007
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418011
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 418020
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 418021
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418022
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 418026
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418030
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418039
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418041
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418050
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418052
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 418061
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 418062
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 418063
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 418064
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 418065
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418067
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 418071
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418075
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418084
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418086
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418088
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418097
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418099
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418108
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418110
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 418119
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 418120
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 418121
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 418122
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 418123
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 418125
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 418126
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 418127
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418129
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418133
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418142
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418151
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418160
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418169
		, "size": 9
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418178
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 418183
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418187
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 418188
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418192
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418194
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418199
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(16, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 418200
		, "size": 3
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418203
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418207
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418211
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418220
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418229
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418238
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418247
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418256
		, "size": 9
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418265
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 418270
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418274
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 418275
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418279
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418281
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418286
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(18, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 418287
		, "size": 3
	}, {
		"instruction": "inc.sp(-72)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418290
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418294
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418298
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418299
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418308
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 418317
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 418318
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418319
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418324
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418325
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418329
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418333
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418334
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418343
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 418352
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418353
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418355
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 418356
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 418357
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418361
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 418363
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 418364
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 418368
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 418370
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418372
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418377
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418382
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418383
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418387
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418391
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418392
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418401
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 418410
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418411
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418416
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418417
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418421
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418425
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418426
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418435
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 418444
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418445
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418450
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418451
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418455
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418459
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418460
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418469
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 418478
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418479
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418484
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418485
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418489
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418493
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418494
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418503
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418508
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418509
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418513
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418517
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418526
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 418535
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418536
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418537
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418546
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418551
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418552
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 418556
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418557
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 418561
		, "size": 1
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 418562
		, "size": 5
	}, {
		"instruction": "load.f32 0.000012"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 418567
		, "size": 5
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 418572
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418577
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418582
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418583
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 418587
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 418588
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418589
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418594
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 418595
		, "size": 1
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418596
		, "size": 9
	}, {
		"instruction": "load.f64 0.000012"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418605
		, "size": 9
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418614
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418623
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418628
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418629
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 418633
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 418634
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418635
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418640
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418641
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418642
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418651
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418660
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418665
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418666
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418670
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 418674
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418675
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418684
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418689
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418690
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418694
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418698
		, "size": 1
	}, {
		"instruction": "load.f64 -10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418699
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418708
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418717
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418722
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418723
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418727
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418731
		, "size": 1
	}, {
		"instruction": "load.f64 19.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418732
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418741
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418750
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418755
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418756
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418760
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418764
		, "size": 1
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418765
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418774
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418783
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418788
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418789
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418793
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418797
		, "size": 1
	}, {
		"instruction": "load.f64 -1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418798
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418807
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418816
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418821
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418822
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418826
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418830
		, "size": 1
	}, {
		"instruction": "load.f64 -11.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418831
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418840
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418849
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418854
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418855
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418859
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418863
		, "size": 1
	}, {
		"instruction": "load.f64 18.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418864
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418873
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418882
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418887
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418888
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418892
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418896
		, "size": 1
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418897
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418906
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418915
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418920
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418921
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418925
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418929
		, "size": 1
	}, {
		"instruction": "load.f64 -2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418930
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418939
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418948
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418953
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418954
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418958
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 418962
		, "size": 1
	}, {
		"instruction": "load.f64 -12.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418963
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 418972
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418981
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 418986
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 418987
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 418991
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 418995
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 418996
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419001
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419006
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419011
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419012
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419016
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419020
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419021
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419022
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419027
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419032
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419033
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419037
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419041
		, "size": 1
	}, {
		"instruction": "load.f32 -10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419042
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419047
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419052
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419057
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419058
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419062
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419066
		, "size": 1
	}, {
		"instruction": "load.f32 19.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419067
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419072
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419077
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419082
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419083
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419087
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419091
		, "size": 1
	}, {
		"instruction": "load.f32 9.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419092
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419097
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419102
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419107
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419108
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419112
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419116
		, "size": 1
	}, {
		"instruction": "load.f32 -1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419117
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419122
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419127
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419132
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419133
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419137
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419141
		, "size": 1
	}, {
		"instruction": "load.f32 -11.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419142
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419147
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419152
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419157
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419158
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419162
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419166
		, "size": 1
	}, {
		"instruction": "load.f32 18.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419167
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419172
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419177
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419182
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419183
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419187
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419191
		, "size": 1
	}, {
		"instruction": "load.f32 8.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419192
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419197
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419202
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419207
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419208
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419212
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419216
		, "size": 1
	}, {
		"instruction": "load.f32 -2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419217
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419222
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419227
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419232
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419233
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419237
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419241
		, "size": 1
	}, {
		"instruction": "load.f32 -12.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419242
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 419247
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419252
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419257
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419258
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419262
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419266
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419270
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419271
		, "size": 5
	}, {
		"instruction": "nfc(14)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419276
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419280
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419284
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419288
		, "size": 4
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419292
		, "size": 5
	}, {
		"instruction": "nfc(15)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419297
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419301
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419305
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419309
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419310
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419314
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419318
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419322
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419323
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419327
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419331
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419335
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419336
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419340
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419344
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419348
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419349
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419353
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419357
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419362
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419367
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419372
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419373
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419378
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419383
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419388
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419392
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419397
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419402
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419407
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419408
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419413
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419418
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419423
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419427
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419432
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419437
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419442
		, "size": 4
	}, {
		"instruction": "nfc(16)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419446
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419450
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419454
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419459
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419460
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419465
		, "size": 4
	}, {
		"instruction": "nfc(14)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419469
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419473
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419477
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419482
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419487
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419492
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419493
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419498
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419503
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419508
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419512
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419517
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419522
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419527
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419528
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419533
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419538
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419543
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 419547
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419551
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 419556
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419558
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419563
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419564
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 419568
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419572
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 419577
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419579
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419583
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419584
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 419588
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419592
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419597
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419602
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419603
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 419607
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419611
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419616
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419621
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419622
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 419626
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419630
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 419635
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419637
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419642
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419643
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 419647
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419651
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 419656
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419658
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419663
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419664
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 419668
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419672
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 419677
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419679
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 419683
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 419684
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419688
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419693
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419698
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419703
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419708
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419713
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419718
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419723
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419727
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419732
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419737
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419742
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419747
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419752
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419757
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419762
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419766
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419771
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419776
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419781
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419786
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419791
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419796
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419801
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419805
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419809
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 419810
		, "size": 1
	}, {
		"instruction": "jz +43"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 419811
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419815
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419820
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419825
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419830
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419835
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419840
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419845
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419850
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419854
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419858
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 419859
		, "size": 1
	}, {
		"instruction": "jnz +43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 419860
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419864
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419869
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419874
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419879
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419884
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419889
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419894
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419899
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419903
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419907
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 419908
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 419909
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419913
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419918
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419923
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419928
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419933
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419938
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419943
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419948
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 419952
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419956
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419961
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419966
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419971
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419976
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419981
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419986
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 419991
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419995
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 419999
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420000
		, "size": 1
	}, {
		"instruction": "jnz +47"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 420001
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420005
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420010
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420015
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420020
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420025
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420030
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420035
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420040
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420044
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420048
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420053
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420058
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420063
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420068
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420073
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420078
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420083
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420087
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420091
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420092
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420093
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420097
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420102
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420107
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420112
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420117
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420122
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420127
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420132
		, "size": 4
	}, {
		"instruction": "jmp +328"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420136
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420140
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420144
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420149
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420150
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420154
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420159
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420164
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420169
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420174
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420179
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420184
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420189
		, "size": 4
	}, {
		"instruction": "jmp +271"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420193
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420197
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420201
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420206
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420207
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420211
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420216
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420221
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420226
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420231
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420236
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420241
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420246
		, "size": 4
	}, {
		"instruction": "jmp +214"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420250
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420254
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420258
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420263
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420264
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420268
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420273
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420278
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420283
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420288
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420293
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420298
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420303
		, "size": 4
	}, {
		"instruction": "jmp +157"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420307
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420311
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420315
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420320
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420321
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420325
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420330
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420335
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420340
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420345
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420350
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420355
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420360
		, "size": 4
	}, {
		"instruction": "jmp +100"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420364
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420368
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420372
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420377
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420378
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420382
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420387
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420392
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420397
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420402
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420407
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420412
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420417
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420421
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420425
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420430
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420435
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420440
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420445
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420450
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420455
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420460
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420464
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420468
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420473
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420478
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420483
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420484
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420489
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420494
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420499
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420503
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420507
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420511
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420512
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420516
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420521
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420526
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420531
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420532
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420537
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 420542
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420546
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 420550
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420554
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420556
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 420561
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 420562
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420566
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420570
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420571
		, "size": 4
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420575
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420579
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420584
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420589
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420594
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420595
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420600
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420605
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420610
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420614
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 420618
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420622
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420626
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420630
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 420635
		, "size": 1
	}, {
		"instruction": "jnz -57"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 420636
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420640
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420641
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420645
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420647
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 420652
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420653
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420657
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420661
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420666
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420671
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420676
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420677
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420682
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 420687
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420691
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 420695
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420699
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420701
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 420706
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 420707
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420711
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420715
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420716
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420720
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420722
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 420727
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420728
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420732
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420736
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420741
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420746
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420751
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420752
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420757
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 420762
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420766
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 420770
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420774
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 420776
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 420781
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 420782
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420786
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 420790
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
202838,0,407412,
 202854,0,48640,
 202894,0,-1,
 202919,0,42336,
 202923,0,-1,
 202926,0,42336,
 202930,0,-1,
 202933,0,42336,
 202935,0,-1,
 202938,0,43192,
 202942,0,-1,
 202945,0,43192,
 202949,0,-1,
 202951,0,43192,
 202954,0,-1,
 202957,0,42336,
 202961,0,-1,
 202963,0,42336,
 202967,0,-1,
 202969,0,42336,
 202973,0,-1,
 202976,0,43192,
 202979,0,-1,
 202982,0,43192,
 202986,0,-1,
 202990,0,43192,
 202993,0,-1,
 202997,0,53240,
 203037,0,-1,
 203042,0,53768,
 203049,0,-1,
 203053,0,54296,
 203065,0,-1,
 203069,0,54824,
 203075,0,-1,
 203080,0,55352,
 203085,0,-1,
 203090,0,56040,
 203095,0,-1,
 203099,0,56568,
 203103,0,-1,
 203106,0,57256,
 203122,0,-1,
 203126,0,48640,
 203129,0,-1,
 203133,0,49176,
 203138,0,-1,
 203142,0,49712,
 203148,0,-1,
 203151,0,50248,
 203155,0,-1,
 203158,0,50784,
 203163,0,-1,
 203168,0,51480,
 203172,0,-1,
 203176,0,52016,
 203179,0,-1,
 203182,0,52712,
 203190,0,-1,
 203193,0,43728,
 203197,0,-1,
 203200,0,44264,
 203205,0,-1,
 203209,0,44800,
 203214,0,-1,
 203219,0,45336,
 203222,0,-1,
 203226,0,45872,
 203230,0,-1,
 203234,0,46408,
 203239,0,-1,
 203243,0,42336,
 203246,0,-1,
 203250,0,43192,
 203253,0,-1,
 203257,0,47256,
 203261,0,-1,
 203265,0,48104,
 203268,0,-1,
 203274,0,35264,
 203296,1024,-1,
 203302,1024,35264,
 203305,1104,-1,
 203309,1104,35264,
 203313,1264,-1,
 203316,1264,35264,
 203319,2096,-1,
 203323,2096,34560,
  203470,2096,403048,
  203475,2096,-1,
  203479,2096,24280,
  203484,2096,-1,
 203486,2096,-1,
 203490,2096,34560,
 203777,2096,-1,
 203782,2096,34560,
  203794,2096,403056,
   203797,2096,403056,
    203800,2096,403056,
     203804,2096,403056,
      203807,2096,403056,
       203810,2096,403056,
        203813,2096,403056,
         203818,2096,403056,
          203821,2096,403056,
           203824,2096,403056,
            203827,2096,403056,
             203830,2096,403056,
              203834,2096,403056,
               203838,2096,403056,
                203842,2096,403056,
                 203845,2096,403056,
                  203849,2096,403056,
                   203852,2096,403056,
                    203855,2096,403056,
                     203859,2096,403056,
                      203862,2096,403056,
                       203865,2096,403056,
                        203868,2096,403056,
                         203872,2096,403056,
                          203875,2096,403056,
                           203879,2096,403056,
                            203883,2096,403056,
                             203887,2096,403056,
                              203890,2096,403056,
                               203894,2096,403056,
                                203897,2096,403056,
                                 203901,2096,403056,
                                  203904,2096,403056,
                                   203918,2096,403056,
                                    203922,2096,403056,
                                     203926,2096,403056,
                                      203929,2096,403056,
                                       203933,2096,403056,
                                        203936,2096,403056,
                                         203940,2096,403056,
                                          203943,2096,403056,
                                           203946,2096,403056,
                                            203950,2096,403056,
                                             203953,2096,403056,
                                              203957,2096,403056,
                                               203961,2096,403056,
                                                203964,2096,403056,
                                                 203968,2096,403056,
                                                  203970,2096,403056,
                                                   203973,2096,403056,
                                                    203977,2096,403056,
                                                     203980,2096,403056,
                                                      203984,2096,403056,
                                                       203987,2096,403056,
                                                        203990,2096,403056,
                                                         203994,2096,403056,
                                                          203999,2096,403056,
                                                           204002,2096,403056,
                                                            204007,2096,403056,
                                                             204011,2096,403056,
                                                              204014,2096,403056,
                                                               204019,2096,403056,
                                                                204023,2096,403056,
                                                                 204026,2096,403056,
                                                                  204029,2096,403056,
                                                                   204033,2096,403056,
                                                                    204037,2096,403056,
                                                                     204041,2096,403056,
                                                                      204045,2096,403056,
                                                                       204048,2096,403056,
                                                                        204052,2096,403056,
                                                                         204057,2096,403056,
                                                                          204061,2096,403056,
                                                                           204064,2096,403056,
                                                                            204068,2096,403056,
                                                                             204072,2096,403056,
                                                                              204075,2096,403056,
                                                                               204079,2096,403056,
                                                                                204082,2096,403056,
                                                                                 204084,2096,403056,
                                                                                  204088,2096,403056,
                                                                                   204091,2096,403056,
                                                                                    204095,2096,403056,
                                                                                     204100,2096,403056,
                                                                                      204108,2096,403056,
                                                                                       204112,2096,403056,
                                                                                        204116,2096,403056,
                                                                                         204121,2096,403056,
                                                                                          204124,2096,403056,
                                                                                           204128,2096,403056,
                                                                                            204131,2096,403056,
                                                                                             204135,2096,403056,
                                                                                              204138,2096,403056,
                                                                                               204142,2096,403056,
                                                                                                204146,2096,403056,
                                                                                                 204151,2096,403056,
                                                                                                  204155,2096,403056,
                                                                                                   204158,2096,403056,
                                                                                                    204162,2096,403056,
                                                                                                     204166,2096,403056,
                                                                                                      204170,2096,403056,
                                                                                                       204173,2096,403056,
                                                                                                        204176,2096,403056,
                                                                                                         204181,2096,403056,
                                                                                                          204184,2096,403056,
                                                                                                           204188,2096,403056,
                                                                                                            204191,2096,403056,
                                                                                                             204195,2096,403056,
                                                                                                              204199,2096,403056,
                                                                                                               204202,2096,403056,
                                                                                                                204206,2096,403056,
                                                                                                                 204210,2096,403056,
                                                                                                                  204214,2096,403056,
                                                                                                                   204217,2096,403056,
                                                                                                                    204222,2096,403056,
                                                                                                                     204225,2096,403056,
                                                                                                                      204228,2096,403056,
                                                                                                                       204232,2096,403056,
                                                                                                                        204241,2096,403056,
                                                                                                                         204245,2096,403056,
                                                                                                                          204248,2096,403056,
                                                                                                                           204252,2096,403056,
                                                                                                                            204256,2096,403056,
                                                                                                                             204259,2096,403056,
                                                                                                                              204263,2096,403056,
                                                                                                                               204266,2096,403056,
                                                                                                                                204271,2096,403056,
                                                                                                                                 204274,2096,403056,
                                                                                                                                 204279,2096,-1,
                                                                                                                                204282,2096,-1,
                                                                                                                               204285,2096,-1,
                                                                                                                              204289,2096,-1,
                                                                                                                             204292,2096,-1,
                                                                                                                            204295,2096,-1,
                                                                                                                           204298,2096,-1,
                                                                                                                          204302,2096,-1,
                                                                                                                         204305,2096,-1,
                                                                                                                        204308,2096,-1,
                                                                                                                       204311,2096,-1,
                                                                                                                      204315,2096,-1,
                                                                                                                     204317,2096,-1,
                                                                                                                    204321,2096,-1,
                                                                                                                   204325,2096,-1,
                                                                                                                  204329,2096,-1,
                                                                                                                 204333,2096,-1,
                                                                                                                204337,2096,-1,
                                                                                                               204340,2096,-1,
                                                                                                              204350,2096,-1,
                                                                                                             204354,2096,-1,
                                                                                                            204357,2096,-1,
                                                                                                           204361,2096,-1,
                                                                                                          204364,2096,-1,
                                                                                                         204368,2096,-1,
                                                                                                        204371,2096,-1,
                                                                                                       204375,2096,-1,
                                                                                                      204379,2096,-1,
                                                                                                     204384,2096,-1,
                                                                                                    204387,2096,-1,
                                                                                                   204391,2096,-1,
                                                                                                  204396,2096,-1,
                                                                                                 204399,2096,-1,
                                                                                                204403,2096,-1,
                                                                                               204406,2096,-1,
                                                                                              204410,2096,-1,
                                                                                             204413,2096,-1,
                                                                                            204417,2096,-1,
                                                                                           204421,2096,-1,
                                                                                          204424,2096,-1,
                                                                                         204426,2096,-1,
                                                                                        204429,2096,-1,
                                                                                       204432,2096,-1,
                                                                                      204436,2096,-1,
                                                                                     204439,2096,-1,
                                                                                    204442,2096,-1,
                                                                                   204445,2096,-1,
                                                                                  204448,2096,-1,
                                                                                 204453,2096,-1,
                                                                                204456,2096,-1,
                                                                               204460,2096,-1,
                                                                              204465,2096,-1,
                                                                             204469,2096,-1,
                                                                            204472,2096,-1,
                                                                           204476,2096,-1,
                                                                          204479,2096,-1,
                                                                         204482,2096,-1,
                                                                        204492,2096,-1,
                                                                       204495,2096,-1,
                                                                      204498,2096,-1,
                                                                     204502,2096,-1,
                                                                    204507,2096,-1,
                                                                   204510,2096,-1,
                                                                  204513,2096,-1,
                                                                 204517,2096,-1,
                                                                204522,2096,-1,
                                                               204525,2096,-1,
                                                              204529,2096,-1,
                                                             204533,2096,-1,
                                                            204536,2096,-1,
                                                           204540,2096,-1,
                                                          204543,2096,-1,
                                                         204547,2096,-1,
                                                        204550,2096,-1,
                                                       204553,2096,-1,
                                                      204558,2096,-1,
                                                     204561,2096,-1,
                                                    204564,2096,-1,
                                                   204568,2096,-1,
                                                  204572,2096,-1,
                                                 204576,2096,-1,
                                                204580,2096,-1,
                                               204584,2096,-1,
                                              204588,2096,-1,
                                             204592,2096,-1,
                                            204595,2096,-1,
                                           204598,2096,-1,
                                          204602,2096,-1,
                                         204605,2096,-1,
                                        204609,2096,-1,
                                       204613,2096,-1,
                                      204617,2096,-1,
                                     204620,2096,-1,
                                    204623,2096,-1,
                                   204626,2096,-1,
                                  204628,2096,-1,
                                 204633,2096,-1,
                                204636,2096,-1,
                               204640,2096,-1,
                              204643,2096,-1,
                             204646,2096,-1,
                            204648,2096,-1,
                           204652,2096,-1,
                          204654,2096,-1,
                         204657,2096,-1,
                        204660,2096,-1,
                       204664,2096,-1,
                      204668,2096,-1,
                     204671,2096,-1,
                    204675,2096,-1,
                   204678,2096,-1,
                  204682,2096,-1,
                 204685,2096,-1,
                204688,2096,-1,
               204691,2096,-1,
              204695,2096,-1,
             204697,2096,-1,
            204699,2096,-1,
           204704,2096,-1,
          204707,2096,-1,
         204710,2096,-1,
        204713,2096,-1,
       204717,2096,-1,
      204720,2096,-1,
     204723,2096,-1,
    204726,2096,-1,
   204729,2096,-1,
  204733,2096,-1,
 204736,2096,-1,
 204739,2096,34560,
  204762,2096,403080,
  204765,2096,-1,
 204768,2096,-1,
 204771,2096,34560,
  204787,2096,403184,
  204791,2096,-1,
 204795,2096,-1,
 204799,2096,34560,
  204811,2096,403168,
  204815,2096,-1,
 204818,2096,-1,
 204820,2096,34560,
  204830,2096,403096,
   204835,2096,32176,
   205212,2096,-1,
  205217,2096,-1,
 205220,2096,-1,
 205229,2096,28696,
 205251,2128,-1,
 205255,2128,28696,
 205268,2160,-1,
 205272,2160,403960,
 205275,2160,-1,
 205278,2160,403960,
 205282,2160,-1,
 205285,2160,404024,
 205288,2160,-1,
 205291,2160,404024,
 205293,2160,-1,
 205296,2160,404032,
  205301,2160,404032,
   205304,2160,404032,
    205307,2160,404032,
     205310,2160,404032,
      205313,2160,404032,
       205316,2160,404032,
        205320,2160,404032,
         205323,2160,404032,
          205325,2160,404032,
           205329,2160,404032,
            205332,2160,404032,
             205334,2160,404032,
             205338,2160,-1,
             205341,2160,404032,
             205345,2160,-1,
            205349,2160,-1,
            205353,2160,404032,
            205356,2160,-1,
           205359,2160,-1,
           205361,2160,404032,
            205365,2160,404032,
            205368,2160,-1,
            205372,2160,404032,
            205375,2160,-1,
           205378,2160,-1,
          205381,2160,-1,
          205386,2160,404032,
           205389,2160,404032,
            205392,2160,404032,
            205395,2160,-1,
            205398,2160,404032,
            205401,2160,-1,
           205405,2160,-1,
           205408,2160,404032,
           205411,2160,-1,
          205416,2160,-1,
         205420,2160,-1,
         205422,2160,404032,
          205425,2160,404032,
           205428,2160,404032,
            205432,2160,404032,
            205435,2160,-1,
            205440,2160,404032,
            205443,2160,-1,
           205446,2160,-1,
           205449,2160,404032,
           205453,2160,-1,
          205455,2160,-1,
          205458,2160,404032,
           205461,2160,404032,
           205464,2160,-1,
           205468,2160,404032,
           205471,2160,-1,
          205475,2160,-1,
         205477,2160,-1,
        205481,2160,-1,
        205484,2160,404032,
         205488,2160,404032,
          205491,2160,404032,
           205494,2160,404032,
            205497,2160,404032,
            205500,2160,-1,
            205504,2160,404032,
            205508,2160,-1,
           205512,2160,-1,
           205515,2160,404032,
           205519,2160,-1,
          205521,2160,-1,
          205524,2160,404032,
           205527,2160,404032,
           205530,2160,-1,
           205532,2160,404032,
           205536,2160,-1,
          205540,2160,-1,
         205545,2160,-1,
         205548,2160,404032,
          205552,2160,404032,
           205555,2160,404032,
           205558,2160,-1,
           205562,2160,404032,
           205565,2160,-1,
          205568,2160,-1,
          205571,2160,404032,
          205574,2160,-1,
         205577,2160,-1,
        205580,2160,-1,
       205583,2160,-1,
       205586,2160,404032,
        205590,2160,404032,
         205593,2160,404032,
          205597,2160,404032,
           205600,2160,404032,
            205603,2160,404032,
            205605,2160,-1,
            205608,2160,404032,
            205610,2160,-1,
           205613,2160,-1,
           205616,2160,404032,
           205619,2160,-1,
          205622,2160,-1,
          205626,2160,404032,
           205630,2160,404032,
           205633,2160,-1,
           205636,2160,404032,
           205639,2160,-1,
          205642,2160,-1,
         205645,2160,-1,
         205648,2160,404032,
          205651,2160,404032,
           205653,2160,404032,
           205657,2160,-1,
           205662,2160,404032,
           205664,2160,-1,
          205669,2160,-1,
          205672,2160,404032,
          205676,2160,-1,
         205679,2160,-1,
        205683,2160,-1,
        205687,2160,404032,
         205690,2160,404032,
          205693,2160,404032,
           205695,2160,404032,
           205699,2160,-1,
           205703,2160,404032,
           205707,2160,-1,
          205710,2160,-1,
          205713,2160,404032,
          205718,2160,-1,
         205722,2160,-1,
         205726,2160,404032,
          205729,2160,404032,
          205732,2160,-1,
          205736,2160,404032,
          205740,2160,-1,
         205751,2160,-1,
        205754,2160,-1,
       205757,2160,-1,
      205760,2160,-1,
      205764,2160,404032,
       205767,2160,404032,
        205770,2160,404032,
         205773,2160,404032,
          205776,2160,404032,
           205778,2160,404032,
            205781,2160,404032,
            205785,2160,-1,
            205788,2160,404032,
            205791,2160,-1,
           205795,2160,-1,
           205798,2160,404032,
           205802,2160,-1,
          205806,2160,-1,
          205808,2160,404032,
           205812,2160,404032,
           205814,2160,-1,
           205818,2160,404032,
           205820,2160,-1,
          205823,2160,-1,
         205825,2160,-1,
         205829,2160,404032,
          205832,2160,404032,
           205835,2160,404032,
           205839,2160,-1,
           205841,2160,404032,
           205845,2160,-1,
          205848,2160,-1,
          205851,2160,404032,
          205855,2160,-1,
         205858,2160,-1,
        205861,2160,-1,
        205865,2160,404032,
         205868,2160,404032,
          205871,2160,404032,
           205874,2160,404032,
           205877,2160,-1,
           205880,2160,404032,
           205883,2160,-1,
          205887,2160,-1,
          205891,2160,404032,
          205894,2160,-1,
         205896,2160,-1,
         205900,2160,404032,
          205903,2160,404032,
          205906,2160,-1,
          205909,2160,404032,
          205912,2160,-1,
         205914,2160,-1,
        205918,2160,-1,
       205921,2160,-1,
       205923,2160,404032,
        205927,2160,404032,
         205931,2160,404032,
          205935,2160,404032,
           205938,2160,404032,
           205941,2160,-1,
           205944,2160,404032,
           205949,2160,-1,
          205952,2160,-1,
          205955,2160,404032,
          205957,2160,-1,
         205960,2160,-1,
         205963,2160,404032,
          205966,2160,404032,
          205968,2160,-1,
          205971,2160,404032,
          205973,2160,-1,
         205976,2160,-1,
        205979,2160,-1,
        205981,2160,404032,
         205984,2160,404032,
          205987,2160,404032,
          205990,2160,-1,
          205993,2160,404032,
          205997,2160,-1,
         206000,2160,-1,
         206002,2160,404032,
         206005,2160,-1,
        206009,2160,-1,
       206013,2160,-1,
      206016,2160,-1,
     206019,2160,-1,
     206024,2160,404032,
      206028,2160,404032,
       206032,2160,404032,
        206034,2160,404032,
         206037,2160,404032,
          206040,2160,404032,
           206043,2160,404032,
            206047,2160,404032,
            206051,2160,-1,
            206053,2160,404032,
            206056,2160,-1,
           206059,2160,-1,
           206061,2160,404032,
           206066,2160,-1,
          206068,2160,-1,
          206071,2160,404032,
           206074,2160,404032,
           206077,2160,-1,
           206081,2160,404032,
           206084,2160,-1,
          206087,2160,-1,
         206090,2160,-1,
         206093,2160,404032,
          206096,2160,404032,
           206098,2160,404032,
           206102,2160,-1,
           206106,2160,404032,
           206110,2160,-1,
          206114,2160,-1,
          206118,2160,404032,
          206121,2160,-1,
         206124,2160,-1,
        206128,2160,-1,
        206131,2160,404032,
         206136,2160,404032,
          206138,2160,404032,
           206141,2160,404032,
           206144,2160,-1,
           206146,2160,404032,
           206150,2160,-1,
          206153,2160,-1,
          206157,2160,404032,
          206160,2160,-1,
         206163,2160,-1,
         206167,2160,404032,
          206169,2160,404032,
          206172,2160,-1,
          206176,2160,404032,
          206180,2160,-1,
         206184,2160,-1,
        206188,2160,-1,
       206190,2160,-1,
       206193,2160,404032,
        206196,2160,404032,
         206200,2160,404032,
          206202,2160,404032,
           206205,2160,404032,
           206209,2160,-1,
           206213,2160,404032,
           206217,2160,-1,
          206220,2160,-1,
          206229,2160,404032,
          206233,2160,-1,
         206236,2160,-1,
         206239,2160,404032,
          206242,2160,404032,
          206245,2160,-1,
          206248,2160,404032,
          206251,2160,-1,
         206255,2160,-1,
        206257,2160,-1,
        206260,2160,404032,
         206264,2160,404032,
          206267,2160,404032,
          206271,2160,-1,
          206273,2160,404032,
          206276,2160,-1,
         206280,2160,-1,
         206283,2160,404032,
         206286,2160,-1,
        206290,2160,-1,
       206293,2160,-1,
      206296,2160,-1,
      206299,2160,404032,
       206302,2160,404032,
        206304,2160,404032,
         206307,2160,404032,
          206311,2160,404032,
           206313,2160,404032,
           206317,2160,-1,
           206320,2160,404032,
           206322,2160,-1,
          206325,2160,-1,
          206327,2160,404032,
          206330,2160,-1,
         206333,2160,-1,
         206337,2160,404032,
          206341,2160,404032,
          206343,2160,-1,
          206346,2160,404032,
          206348,2160,-1,
         206350,2160,-1,
        206352,2160,-1,
        206354,2160,404032,
         206356,2160,404032,
          206358,2160,404032,
          206360,2160,-1,
          206362,2160,404032,
          206365,2160,-1,
         206368,2160,-1,
         206370,2160,404032,
         206372,2160,-1,
        206374,2160,-1,
       206377,2160,-1,
       206379,2160,404032,
        206381,2160,404032,
         206383,2160,404032,
          206385,2160,404032,
          206387,2160,-1,
          206391,2160,404032,
          206394,2160,-1,
         206396,2160,-1,
         206399,2160,404032,
         206401,2160,-1,
        206403,2160,-1,
        206405,2160,404032,
         206407,2160,404032,
         206409,2160,-1,
         206411,2160,404032,
         206413,2160,-1,
        206416,2160,-1,
       206418,2160,-1,
      206421,2160,-1,
     206423,2160,-1,
    206426,2160,-1,
    206429,2160,404032,
     206431,2160,404032,
      206434,2160,404032,
       206436,2160,404032,
        206439,2160,404032,
         206442,2160,404032,
          206445,2160,404032,
           206447,2160,404032,
            206450,2160,404032,
            206453,2160,-1,
            206455,2160,404032,
            206458,2160,-1,
           206460,2160,-1,
           206463,2160,404032,
           206466,2160,-1,
          206468,2160,-1,
          206471,2160,404032,
           206473,2160,404032,
           206477,2160,-1,
           206480,2160,404032,
           206482,2160,-1,
          206485,2160,-1,
         206487,2160,-1,
         206489,2160,404032,
          206491,2160,404032,
           206493,2160,404032,
           206495,2160,-1,
           206497,2160,404032,
           206500,2160,-1,
          206502,2160,-1,
          206504,2160,404032,
          206508,2160,-1,
         206511,2160,-1,
        206513,2160,-1,
        206515,2160,404032,
         206517,2160,404032,
          206519,2160,404032,
           206522,2160,404032,
           206524,2160,-1,
           206526,2160,404032,
           206528,2160,-1,
          206531,2160,-1,
          206534,2160,404032,
          206536,2160,-1,
         206538,2160,-1,
         206540,2160,404032,
          206542,2160,404032,
          206544,2160,-1,
          206547,2160,404032,
          206549,2160,-1,
         206551,2160,-1,
        206553,2160,-1,
       206555,2160,-1,
       206558,2160,404032,
        206561,2160,404032,
         206563,2160,404032,
          206566,2160,404032,
           206568,2160,404032,
           206571,2160,-1,
           206573,2160,404032,
           206576,2160,-1,
          206578,2160,-1,
          206581,2160,404032,
          206584,2160,-1,
         206586,2160,-1,
         206589,2160,404032,
          206592,2160,404032,
          206594,2160,-1,
          206597,2160,404032,
          206599,2160,-1,
         206603,2160,-1,
        206605,2160,-1,
        206608,2160,404032,
         206610,2160,404032,
          206613,2160,404032,
          206616,2160,-1,
          206631,2160,404032,
          206633,2160,-1,
         206635,2160,-1,
         206637,2160,404032,
         206639,2160,-1,
        206641,2160,-1,
       206644,2160,-1,
      206646,2160,-1,
      206648,2160,404032,
       206651,2160,404032,
        206654,2160,404032,
         206657,2160,404032,
          206661,2160,404032,
           206663,2160,404032,
           206672,2160,-1,
           206675,2160,404032,
           206677,2160,-1,
          206679,2160,-1,
          206681,2160,404032,
          206683,2160,-1,
         206685,2160,-1,
         206687,2160,404032,
          206691,2160,404032,
          206693,2160,-1,
          206695,2160,404032,
          206697,2160,-1,
         206699,2160,-1,
        206701,2160,-1,
        206703,2160,404032,
         206706,2160,404032,
          206708,2160,404032,
          206711,2160,-1,
          206713,2160,404032,
          206715,2160,-1,
         206718,2160,-1,
         206720,2160,404032,
         206723,2160,-1,
        206725,2160,-1,
       206728,2160,-1,
       206731,2160,404032,
        206734,2160,404032,
         206736,2160,404032,
          206739,2160,404032,
          206742,2160,-1,
          206744,2160,404032,
          206746,2160,-1,
         206749,2160,-1,
         206752,2160,404032,
         206755,2160,-1,
        206757,2160,-1,
        206760,2160,404032,
         206763,2160,404032,
         206765,2160,-1,
         206769,2160,404032,
         206773,2160,-1,
        206776,2160,-1,
       206778,2160,-1,
      206780,2160,-1,
     206783,2160,-1,
     206785,2160,404032,
      206787,2160,404032,
       206789,2160,404032,
        206791,2160,404032,
         206794,2160,404032,
          206796,2160,404032,
           206798,2160,404032,
           206800,2160,-1,
           206802,2160,404032,
           206805,2160,-1,
          206807,2160,-1,
          206809,2160,404032,
          206811,2160,-1,
         206815,2160,-1,
         206818,2160,404032,
          206821,2160,404032,
          206823,2160,-1,
          206825,2160,404032,
          206827,2160,-1,
         206829,2160,-1,
        206832,2160,-1,
        206834,2160,404032,
         206836,2160,404032,
          206838,2160,404032,
          206840,2160,-1,
          206842,2160,404032,
          206845,2160,-1,
         206847,2160,-1,
         206850,2160,404032,
         206852,2160,-1,
        206855,2160,-1,
       206857,2160,-1,
       206860,2160,404032,
        206862,2160,404032,
         206865,2160,404032,
          206867,2160,404032,
          206870,2160,-1,
          206873,2160,404032,
          206875,2160,-1,
         206878,2160,-1,
         206880,2160,404032,
         206883,2160,-1,
        206886,2160,-1,
        206888,2160,404032,
         206890,2160,404032,
         206892,2160,-1,
         206895,2160,404032,
         206897,2160,-1,
        206899,2160,-1,
       206902,2160,-1,
      206904,2160,-1,
      206907,2160,404032,
       206909,2160,404032,
        206911,2160,404032,
         206914,2160,404032,
          206916,2160,404032,
          206919,2160,-1,
          206921,2160,404032,
          206923,2160,-1,
         206925,2160,-1,
         206929,2160,404032,
         206930,2160,-1,
        206932,2160,-1,
        206934,2160,404032,
         206935,2160,404032,
         206937,2160,-1,
         206939,2160,404032,
         206940,2160,-1,
        206942,2160,-1,
       206943,2160,-1,
       206945,2160,404032,
        206947,2160,404032,
         206948,2160,404032,
         206950,2160,-1,
         206951,2160,404032,
         206953,2160,-1,
        206955,2160,-1,
        206956,2160,404032,
        206958,2160,-1,
       206959,2160,-1,
      206961,2160,-1,
     206963,2160,-1,
    206964,2160,-1,
   206966,2160,-1,
   206968,2160,404032,
    206969,2160,404032,
     206971,2160,404032,
      206972,2160,404032,
       206974,2160,404032,
        206975,2160,404032,
         206977,2160,404032,
          206978,2160,404032,
           206980,2160,404032,
            206981,2160,404032,
            206983,2160,-1,
            206987,2160,404032,
            206989,2160,-1,
           206990,2160,-1,
           206992,2160,404032,
           206994,2160,-1,
          206995,2160,-1,
          206997,2160,404032,
           206999,2160,404032,
           207000,2160,-1,
           207002,2160,404032,
           207003,2160,-1,
          207005,2160,-1,
         207007,2160,-1,
         207008,2160,404032,
          207010,2160,404032,
           207012,2160,404032,
           207013,2160,-1,
           207015,2160,404032,
           207017,2160,-1,
          207018,2160,-1,
          207020,2160,404032,
          207021,2160,-1,
         207023,2160,-1,
        207025,2160,-1,
        207026,2160,404032,
         207028,2160,404032,
          207030,2160,404032,
           207031,2160,404032,
           207033,2160,-1,
           207035,2160,404032,
           207036,2160,-1,
          207038,2160,-1,
          207039,2160,404032,
          207041,2160,-1,
         207043,2160,-1,
         207044,2160,404032,
          207046,2160,404032,
          207048,2160,-1,
          207049,2160,404032,
          207051,2160,-1,
         207053,2160,-1,
        207054,2160,-1,
       207056,2160,-1,
       207057,2160,404032,
        207059,2160,404032,
         207061,2160,404032,
          207062,2160,404032,
           207064,2160,404032,
           207065,2160,-1,
           207067,2160,404032,
           207069,2160,-1,
          207070,2160,-1,
          207072,2160,404032,
          207073,2160,-1,
         207075,2160,-1,
         207077,2160,404032,
          207078,2160,404032,
          207080,2160,-1,
          207081,2160,404032,
          207083,2160,-1,
         207085,2160,-1,
        207086,2160,-1,
        207088,2160,404032,
         207090,2160,404032,
          207091,2160,404032,
          207093,2160,-1,
          207094,2160,404032,
          207096,2160,-1,
         207098,2160,-1,
         207099,2160,404032,
         207101,2160,-1,
        207103,2160,-1,
       207104,2160,-1,
      207106,2160,-1,
      207107,2160,404032,
       207109,2160,404032,
        207110,2160,404032,
         207112,2160,404032,
          207114,2160,404032,
           207115,2160,404032,
           207117,2160,-1,
           207118,2160,404032,
           207120,2160,-1,
          207122,2160,-1,
          207123,2160,404032,
          207125,2160,-1,
         207126,2160,-1,
         207128,2160,404032,
          207130,2160,404032,
          207131,2160,-1,
          207133,2160,404032,
          207134,2160,-1,
         207136,2160,-1,
        207138,2160,-1,
        207139,2160,404032,
         207141,2160,404032,
          207143,2160,404032,
          207144,2160,-1,
          207146,2160,404032,
          207147,2160,-1,
         207149,2160,-1,
         207151,2160,404032,
         207152,2160,-1,
        207154,2160,-1,
       207156,2160,-1,
       207157,2160,404032,
        207159,2160,404032,
         207160,2160,404032,
          207162,2160,404032,
          207163,2160,-1,
          207165,2160,404032,
          207167,2160,-1,
         207168,2160,-1,
         207170,2160,404032,
         207172,2160,-1,
        207173,2160,-1,
        207175,2160,404032,
         207177,2160,404032,
         207178,2160,-1,
         207180,2160,404032,
         207181,2160,-1,
        207183,2160,-1,
       207185,2160,-1,
      207186,2160,-1,
     207188,2160,-1,
     207190,2160,404032,
      207191,2160,404032,
       207193,2160,404032,
        207194,2160,404032,
         207196,2160,404032,
          207197,2160,404032,
           207199,2160,404032,
           207201,2160,-1,
           207202,2160,404032,
           207204,2160,-1,
          207206,2160,-1,
          207207,2160,404032,
          207209,2160,-1,
         207210,2160,-1,
         207212,2160,404032,
          207214,2160,404032,
          207215,2160,-1,
          207217,2160,404032,
          207218,2160,-1,
         207220,2160,-1,
        207222,2160,-1,
        207223,2160,404032,
         207225,2160,404032,
          207226,2160,404032,
          207229,2160,-1,
          207231,2160,404032,
          207233,2160,-1,
         207234,2160,-1,
         207236,2160,404032,
         207238,2160,-1,
        207239,2160,-1,
       207241,2160,-1,
       207242,2160,404032,
        207244,2160,404032,
         207246,2160,404032,
          207247,2160,404032,
          207249,2160,-1,
          207250,2160,404032,
          207252,2160,-1,
         207254,2160,-1,
         207255,2160,404032,
         207257,2160,-1,
        207258,2160,-1,
        207260,2160,404032,
         207262,2160,404032,
         207263,2160,-1,
         207265,2160,404032,
         207266,2160,-1,
        207268,2160,-1,
       207270,2160,-1,
      207271,2160,-1,
      207273,2160,404032,
       207274,2160,404032,
        207276,2160,404032,
         207278,2160,404032,
          207279,2160,404032,
          207281,2160,-1,
          207282,2160,404032,
          207284,2160,-1,
         207286,2160,-1,
         207287,2160,404032,
         207289,2160,-1,
        207291,2160,-1,
        207292,2160,404032,
         207294,2160,404032,
         207295,2160,-1,
         207297,2160,404032,
         207299,2160,-1,
        207300,2160,-1,
       207302,2160,-1,
       207304,2160,404032,
        207305,2160,404032,
         207307,2160,404032,
         207308,2160,-1,
         207310,2160,404032,
         207312,2160,-1,
        207313,2160,-1,
        207315,2160,404032,
        207317,2160,-1,
       207318,2160,-1,
      207320,2160,-1,
     207321,2160,-1,
    207323,2160,-1,
    207325,2160,404032,
     207326,2160,404032,
      207328,2160,404032,
       207330,2160,404032,
        207331,2160,404032,
         207333,2160,404032,
          207335,2160,404032,
           207336,2160,404032,
           207338,2160,-1,
           207340,2160,404032,
           207341,2160,-1,
          207343,2160,-1,
          207344,2160,404032,
          207346,2160,-1,
         207348,2160,-1,
         207349,2160,404032,
          207351,2160,404032,
          207352,2160,-1,
          207354,2160,404032,
          207356,2160,-1,
         207357,2160,-1,
        207359,2160,-1,
        207361,2160,404032,
         207362,2160,404032,
          207364,2160,404032,
          207365,2160,-1,
          207367,2160,404032,
          207369,2160,-1,
         207370,2160,-1,
         207372,2160,404032,
         207374,2160,-1,
        207375,2160,-1,
       207377,2160,-1,
       207379,2160,404032,
        207380,2160,404032,
         207382,2160,404032,
          207383,2160,404032,
          207385,2160,-1,
          207386,2160,404032,
          207388,2160,-1,
         207390,2160,-1,
         207392,2160,404032,
         207393,2160,-1,
        207395,2160,-1,
        207396,2160,404032,
         207398,2160,404032,
         207400,2160,-1,
         207401,2160,404032,
         207403,2160,-1,
        207405,2160,-1,
       207406,2160,-1,
      207408,2160,-1,
      207410,2160,404032,
       207411,2160,404032,
        207413,2160,404032,
         207414,2160,404032,
          207416,2160,404032,
          207417,2160,-1,
          207419,2160,404032,
          207421,2160,-1,
         207422,2160,-1,
         207424,2160,404032,
         207426,2160,-1,
        207427,2160,-1,
        207429,2160,404032,
         207430,2160,404032,
         207432,2160,-1,
         207434,2160,404032,
         207435,2160,-1,
        207437,2160,-1,
       207439,2160,-1,
       207440,2160,404032,
        207442,2160,404032,
         207443,2160,404032,
         207445,2160,-1,
         207447,2160,404032,
         207448,2160,-1,
        207450,2160,-1,
        207452,2160,404032,
        207453,2160,-1,
       207455,2160,-1,
      207457,2160,-1,
     207458,2160,-1,
     207460,2160,404032,
      207461,2160,404032,
       207463,2160,404032,
        207464,2160,404032,
         207466,2160,404032,
          207468,2160,404032,
          207469,2160,-1,
          207471,2160,404032,
          207472,2160,-1,
         207474,2160,-1,
         207476,2160,404032,
         207477,2160,-1,
        207479,2160,-1,
        207482,2160,404032,
         207484,2160,404032,
         207486,2160,-1,
         207487,2160,404032,
         207489,2160,-1,
        207491,2160,-1,
       207492,2160,-1,
       207494,2160,404032,
        207495,2160,404032,
         207497,2160,404032,
         207499,2160,-1,
         207500,2160,404032,
         207502,2160,-1,
        207503,2160,-1,
        207505,2160,404032,
        207507,2160,-1,
       207509,2160,-1,
      207511,2160,-1,
      207513,2160,404032,
       207515,2160,404032,
        207517,2160,404032,
         207519,2160,404032,
         207521,2160,-1,
         207523,2160,404032,
         207525,2160,-1,
        207527,2160,-1,
        207529,2160,404032,
        207531,2160,-1,
       207533,2160,-1,
       207535,2160,404032,
        207537,2160,404032,
        207540,2160,-1,
        207541,2160,404032,
        207543,2160,-1,
       207545,2160,-1,
      207547,2160,-1,
     207550,2160,-1,
    207552,2160,-1,
   207554,2160,-1,
  207556,2160,-1,
  207558,2160,404032,
   207560,2160,404032,
    207562,2160,404032,
     207564,2160,404032,
      207566,2160,404032,
       207569,2160,404032,
        207571,2160,404032,
         207573,2160,404032,
          207575,2160,404032,
           207577,2160,404032,
            207579,2160,404032,
            207581,2160,-1,
            207583,2160,404032,
            207585,2160,-1,
           207587,2160,-1,
           207589,2160,404032,
           207591,2160,-1,
          207593,2160,-1,
          207595,2160,404032,
           207597,2160,404032,
           207599,2160,-1,
           207601,2160,404032,
           207603,2160,-1,
          207605,2160,-1,
         207608,2160,-1,
         207609,2160,404032,
          207612,2160,404032,
           207613,2160,404032,
           207616,2160,-1,
           207617,2160,404032,
           207619,2160,-1,
          207621,2160,-1,
          207623,2160,404032,
          207625,2160,-1,
         207627,2160,-1,
        207629,2160,-1,
        207631,2160,404032,
         207633,2160,404032,
          207635,2160,404032,
           207637,2160,404032,
           207639,2160,-1,
           207641,2160,404032,
           207643,2160,-1,
          207645,2160,-1,
          207647,2160,404032,
          207649,2160,-1,
         207651,2160,-1,
         207653,2160,404032,
          207655,2160,404032,
          207658,2160,-1,
          207660,2160,404032,
          207662,2160,-1,
         207664,2160,-1,
        207666,2160,-1,
       207668,2160,-1,
       207670,2160,404032,
        207672,2160,404032,
         207675,2160,404032,
          207677,2160,404032,
           207679,2160,404032,
           207681,2160,-1,
           207683,2160,404032,
           207685,2160,-1,
          207687,2160,-1,
          207689,2160,404032,
          207691,2160,-1,
         207693,2160,-1,
         207695,2160,404032,
          207697,2160,404032,
          207699,2160,-1,
          207701,2160,404032,
          207703,2160,-1,
         207705,2160,-1,
        207707,2160,-1,
        207709,2160,404032,
         207711,2160,404032,
          207713,2160,404032,
          207715,2160,-1,
          207717,2160,404032,
          207719,2160,-1,
         207721,2160,-1,
         207723,2160,404032,
         207725,2160,-1,
        207727,2160,-1,
       207729,2160,-1,
      207731,2160,-1,
      207732,2160,404032,
       207734,2160,404032,
        207736,2160,404032,
         207738,2160,404032,
          207740,2160,404032,
           207742,2160,404032,
           207744,2160,-1,
           207745,2160,404032,
           207747,2160,-1,
          207749,2160,-1,
          207751,2160,404032,
          207753,2160,-1,
         207755,2160,-1,
         207757,2160,404032,
          207759,2160,404032,
          207761,2160,-1,
          207763,2160,404032,
          207765,2160,-1,
         207767,2160,-1,
        207769,2160,-1,
        207771,2160,404032,
         207773,2160,404032,
          207775,2160,404032,
          207777,2160,-1,
          207778,2160,404032,
          207781,2160,-1,
         207788,2160,-1,
         207790,2160,404032,
         207792,2160,-1,
        207794,2160,-1,
       207796,2160,-1,
       207798,2160,404032,
        207800,2160,404032,
         207801,2160,404032,
          207803,2160,404032,
          207805,2160,-1,
          207807,2160,404032,
          207809,2160,-1,
         207812,2160,-1,
         207814,2160,404032,
         207816,2160,-1,
        207818,2160,-1,
        207820,2160,404032,
         207822,2160,404032,
         207824,2160,-1,
         207826,2160,404032,
         207828,2160,-1,
        207830,2160,-1,
       207832,2160,-1,
      207834,2160,-1,
     207836,2160,-1,
     207838,2160,404032,
      207840,2160,404032,
       207842,2160,404032,
        207845,2160,404032,
         207847,2160,404032,
          207848,2160,404032,
           207850,2160,404032,
           207852,2160,-1,
           207854,2160,404032,
           207856,2160,-1,
          207858,2160,-1,
          207860,2160,404032,
          207862,2160,-1,
         207864,2160,-1,
         207866,2160,404032,
          207868,2160,404032,
          207870,2160,-1,
          207872,2160,404032,
          207873,2160,-1,
         207877,2160,-1,
        207879,2160,-1,
        207881,2160,404032,
         207882,2160,404032,
          207884,2160,404032,
          207886,2160,-1,
          207888,2160,404032,
          207890,2160,-1,
         207892,2160,-1,
         207894,2160,404032,
         207896,2160,-1,
        207898,2160,-1,
       207900,2160,-1,
       207902,2160,404032,
        207904,2160,404032,
         207906,2160,404032,
          207908,2160,404032,
          207910,2160,-1,
          207912,2160,404032,
          207914,2160,-1,
         207916,2160,-1,
         207917,2160,404032,
         207919,2160,-1,
        207921,2160,-1,
        207923,2160,404032,
         207925,2160,404032,
         207927,2160,-1,
         207929,2160,404032,
         207931,2160,-1,
        207933,2160,-1,
       207935,2160,-1,
      207937,2160,-1,
      207939,2160,404032,
       207941,2160,404032,
        207943,2160,404032,
         207945,2160,404032,
          207946,2160,404032,
          207948,2160,-1,
          207951,2160,404032,
          207953,2160,-1,
         207955,2160,-1,
         207957,2160,404032,
         207959,2160,-1,
        207961,2160,-1,
        207963,2160,404032,
         207965,2160,404032,
         207967,2160,-1,
         207969,2160,404032,
         207971,2160,-1,
        207972,2160,-1,
       207974,2160,-1,
       207976,2160,404032,
        207978,2160,404032,
         207980,2160,404032,
         207982,2160,-1,
         207984,2160,404032,
         207986,2160,-1,
        207988,2160,-1,
        207990,2160,404032,
        207992,2160,-1,
       207994,2160,-1,
      207996,2160,-1,
     207998,2160,-1,
    208000,2160,-1,
    208002,2160,404032,
     208004,2160,404032,
      208005,2160,404032,
       208008,2160,404032,
        208009,2160,404032,
         208011,2160,404032,
          208013,2160,404032,
           208015,2160,404032,
           208017,2160,-1,
           208019,2160,404032,
           208021,2160,-1,
          208023,2160,-1,
          208025,2160,404032,
          208027,2160,-1,
         208029,2160,-1,
         208031,2160,404032,
          208033,2160,404032,
          208034,2160,-1,
          208036,2160,404032,
          208038,2160,-1,
         208040,2160,-1,
        208042,2160,-1,
        208044,2160,404032,
         208046,2160,404032,
          208048,2160,404032,
          208050,2160,-1,
          208052,2160,404032,
          208054,2160,-1,
         208056,2160,-1,
         208058,2160,404032,
         208060,2160,-1,
        208062,2160,-1,
       208064,2160,-1,
       208067,2160,404032,
        208069,2160,404032,
         208071,2160,404032,
          208073,2160,404032,
          208074,2160,-1,
          208077,2160,404032,
          208078,2160,-1,
         208080,2160,-1,
         208082,2160,404032,
         208085,2160,-1,
        208087,2160,-1,
        208088,2160,404032,
         208095,2160,404032,
         208097,2160,-1,
         208099,2160,404032,
         208101,2160,-1,
        208103,2160,-1,
       208105,2160,-1,
      208107,2160,-1,
      208110,2160,404032,
       208111,2160,404032,
        208113,2160,404032,
         208115,2160,404032,
          208117,2160,404032,
          208119,2160,-1,
          208121,2160,404032,
          208123,2160,-1,
         208125,2160,-1,
         208127,2160,404032,
         208129,2160,-1,
        208131,2160,-1,
        208133,2160,404032,
         208135,2160,404032,
         208137,2160,-1,
         208139,2160,404032,
         208141,2160,-1,
        208143,2160,-1,
       208145,2160,-1,
       208147,2160,404032,
        208149,2160,404032,
         208151,2160,404032,
         208153,2160,-1,
         208155,2160,404032,
         208157,2160,-1,
        208159,2160,-1,
        208162,2160,404032,
        208164,2160,-1,
       208166,2160,-1,
      208168,2160,-1,
     208170,2160,-1,
     208172,2160,404032,
      208174,2160,404032,
       208176,2160,404032,
        208177,2160,404032,
         208179,2160,404032,
          208181,2160,404032,
          208183,2160,-1,
          208185,2160,404032,
          208187,2160,-1,
         208189,2160,-1,
         208191,2160,404032,
         208193,2160,-1,
        208195,2160,-1,
        208197,2160,404032,
         208198,2160,404032,
         208201,2160,-1,
         208203,2160,404032,
         208205,2160,-1,
        208207,2160,-1,
       208209,2160,-1,
       208211,2160,404032,
        208213,2160,404032,
         208215,2160,404032,
         208217,2160,-1,
         208219,2160,404032,
         208221,2160,-1,
        208224,2160,-1,
        208226,2160,404032,
        208228,2160,-1,
       208230,2160,-1,
      208232,2160,-1,
      208234,2160,404032,
       208237,2160,404032,
        208239,2160,404032,
         208241,2160,404032,
         208242,2160,-1,
         208245,2160,404032,
         208247,2160,-1,
        208249,2160,-1,
        208250,2160,404032,
        208252,2160,-1,
       208255,2160,-1,
       208257,2160,404032,
        208259,2160,404032,
        208261,2160,-1,
        208263,2160,404032,
        208265,2160,-1,
       208267,2160,-1,
      208268,2160,-1,
     208270,2160,-1,
    208272,2160,-1,
   208274,2160,-1,
   208276,2160,404032,
    208278,2160,404032,
     208280,2160,404032,
      208282,2160,404032,
       208284,2160,404032,
        208286,2160,404032,
         208288,2160,404032,
          208290,2160,404032,
           208291,2160,404032,
           208293,2160,-1,
           208295,2160,404032,
           208297,2160,-1,
          208299,2160,-1,
          208301,2160,404032,
          208303,2160,-1,
         208305,2160,-1,
         208307,2160,404032,
          208309,2160,404032,
          208311,2160,-1,
          208313,2160,404032,
          208314,2160,-1,
         208317,2160,-1,
        208318,2160,-1,
        208321,2160,404032,
         208323,2160,404032,
          208325,2160,404032,
          208327,2160,-1,
          208328,2160,404032,
          208330,2160,-1,
         208332,2160,-1,
         208335,2160,404032,
         208337,2160,-1,
        208339,2160,-1,
       208341,2160,-1,
       208342,2160,404032,
        208344,2160,404032,
         208346,2160,404032,
          208348,2160,404032,
          208350,2160,-1,
          208352,2160,404032,
          208354,2160,-1,
         208356,2160,-1,
         208359,2160,404032,
         208360,2160,-1,
        208362,2160,-1,
        208364,2160,404032,
         208366,2160,404032,
         208368,2160,-1,
         208370,2160,404032,
         208372,2160,-1,
        208374,2160,-1,
       208376,2160,-1,
      208378,2160,-1,
      208380,2160,404032,
       208382,2160,404032,
        208383,2160,404032,
         208385,2160,404032,
          208387,2160,404032,
          208389,2160,-1,
          208391,2160,404032,
          208393,2160,-1,
         208395,2160,-1,
         208397,2160,404032,
         208399,2160,-1,
        208401,2160,-1,
        208403,2160,404032,
         208414,2160,404032,
         208416,2160,-1,
         208418,2160,404032,
         208420,2160,-1,
        208422,2160,-1,
       208424,2160,-1,
       208426,2160,404032,
        208428,2160,404032,
         208430,2160,404032,
         208432,2160,-1,
         208434,2160,404032,
         208436,2160,-1,
        208438,2160,-1,
        208440,2160,404032,
        208441,2160,-1,
       208444,2160,-1,
      208446,2160,-1,
     208448,2160,-1,
     208450,2160,404032,
      208452,2160,404032,
       208454,2160,404032,
        208456,2160,404032,
         208457,2160,404032,
          208459,2160,404032,
          208461,2160,-1,
          208463,2160,404032,
          208465,2160,-1,
         208467,2160,-1,
         208469,2160,404032,
         208471,2160,-1,
        208473,2160,-1,
        208475,2160,404032,
         208477,2160,404032,
         208479,2160,-1,
         208481,2160,404032,
         208482,2160,-1,
        208484,2160,-1,
       208486,2160,-1,
       208488,2160,404032,
        208490,2160,404032,
         208492,2160,404032,
         208494,2160,-1,
         208496,2160,404032,
         208498,2160,-1,
        208500,2160,-1,
        208502,2160,404032,
        208504,2160,-1,
       208506,2160,-1,
      208507,2160,-1,
      208509,2160,404032,
       208511,2160,404032,
        208513,2160,404032,
         208515,2160,404032,
         208517,2160,-1,
         208519,2160,404032,
         208521,2160,-1,
        208523,2160,-1,
        208525,2160,404032,
        208527,2160,-1,
       208529,2160,-1,
       208531,2160,404032,
        208532,2160,404032,
        208534,2160,-1,
        208536,2160,404032,
        208538,2160,-1,
       208540,2160,-1,
      208542,2160,-1,
     208544,2160,-1,
    208546,2160,-1,
    208547,2160,404032,
     208550,2160,404032,
      208552,2160,404032,
       208553,2160,404032,
        208555,2160,404032,
         208557,2160,404032,
          208559,2160,404032,
          208561,2160,-1,
          208563,2160,404032,
          208564,2160,-1,
         208567,2160,-1,
         208568,2160,404032,
         208570,2160,-1,
        208572,2160,-1,
        208574,2160,404032,
         208576,2160,404032,
         208578,2160,-1,
         208580,2160,404032,
         208582,2160,-1,
        208584,2160,-1,
       208585,2160,-1,
       208587,2160,404032,
        208589,2160,404032,
         208591,2160,404032,
         208593,2160,-1,
         208595,2160,404032,
         208597,2160,-1,
        208599,2160,-1,
        208601,2160,404032,
        208604,2160,-1,
       208606,2160,-1,
      208608,2160,-1,
      208610,2160,404032,
       208612,2160,404032,
        208613,2160,404032,
         208615,2160,404032,
         208617,2160,-1,
         208619,2160,404032,
         208621,2160,-1,
        208624,2160,-1,
        208626,2160,404032,
        208627,2160,-1,
       208629,2160,-1,
       208631,2160,404032,
        208633,2160,404032,
        208635,2160,-1,
        208637,2160,404032,
        208639,2160,-1,
       208641,2160,-1,
      208643,2160,-1,
     208645,2160,-1,
     208647,2160,404032,
      208649,2160,404032,
       208651,2160,404032,
        208652,2160,404032,
         208654,2160,404032,
         208656,2160,-1,
         208658,2160,404032,
         208660,2160,-1,
        208662,2160,-1,
        208664,2160,404032,
        208666,2160,-1,
       208668,2160,-1,
       208670,2160,404032,
        208672,2160,404032,
        208674,2160,-1,
        208676,2160,404032,
        208677,2160,-1,
       208679,2160,-1,
      208681,2160,-1,
      208683,2160,404032,
       208685,2160,404032,
        208687,2160,404032,
        208689,2160,-1,
        208691,2160,404032,
        208692,2160,-1,
       208694,2160,-1,
       208696,2160,404032,
       208698,2160,-1,
      208700,2160,-1,
     208702,2160,-1,
    208704,2160,-1,
   208706,2160,-1,
  208708,2160,-1,
 208710,2160,-1,
 208713,2160,27992,
 208716,2160,-1,
 208718,2160,27992,
 208720,2160,-1,
 208722,2160,27992,
 208724,2160,-1,
 208726,2160,27992,
 208735,2160,-1,
 208737,2160,27992,
 208738,2160,-1,
 208740,2160,27992,
 208742,2160,-1,
 208744,2160,27992,
 208746,2160,-1,
 208748,2160,27992,
 208750,2160,-1,
 208751,2160,27992,
 208753,2160,-1,
 208755,2160,27992,
 208757,2160,-1,
 208758,2160,27992,
 208761,2160,-1,
 208762,2160,27992,
 208764,2160,-1,
 208766,2160,27992,
 208768,2160,-1,
 208770,2160,27992,
 208771,2160,-1,
 208773,2160,27992,
 208775,2160,-1,
 208777,2160,27992,
 208779,2160,-1,
 208780,2160,27992,
 208782,2160,-1,
 208784,2160,27992,
 208786,2160,-1,
 208788,2160,27464,
 208853,2160,-1,
 208858,2160,26392,
 208870,2160,-1,
 208873,2160,26928,
 208880,2160,-1,
 208883,2160,25856,
 208888,2160,-1,
 208890,2160,27464,
 208896,2160,-1,
 208898,2160,26392,
 208903,2160,-1,
 208905,2160,26928,
 208911,2160,-1,
 208913,2160,25856,
 208919,2160,-1,
 208921,2160,25856,
 208923,2160,-1,
 208945,2160,396944,
  208948,2160,396856,
  208950,2160,-1,
 208952,2160,-1,
 208954,2160,396944,
  208956,2160,396856,
  208958,2160,-1,
 208960,2160,-1,
 208962,2160,396944,
  208963,2160,396856,
  208965,2160,-1,
 208967,2160,-1,
 208969,2160,396944,
  208971,2160,396856,
   208972,2160,396856,
   208974,2160,-1,
  208976,2160,-1,
 208978,2160,-1,
 208980,2160,396944,
  208982,2160,396856,
   208984,2160,396856,
   208986,2160,-1,
  208987,2160,-1,
 208989,2160,-1,
 208991,2160,396944,
  208993,2160,396856,
   208995,2160,396856,
   208997,2160,-1,
  208998,2160,-1,
 209000,2160,-1,
 209005,2160,397032,
 209007,2160,-1,
 209009,2160,397064,
 209011,2160,-1,
 209013,2160,397032,
 209015,2160,-1,
 209018,2160,397064,
 209020,2160,-1,
 209022,2160,397096,
 209024,2160,-1,
 209026,2160,397096,
 209029,2160,-1,
 209031,2160,397176,
 209033,2160,-1,
 209034,2160,397176,
 209037,2160,-1,
 209039,2160,397256,
 209041,2160,-1,
 209043,2160,397256,
 209045,2160,-1,
 209047,2160,397256,
 209049,2160,-1,
 209051,2160,397256,
 209054,2160,-1,
 209055,2160,397320,
 209058,2160,-1,
 209060,2160,397320,
 209063,2160,-1,
 209065,2160,397320,
 209067,2160,-1,
 209069,2160,397496,
 209072,2160,-1,
 209074,2160,397496,
 209077,2160,-1,
 209079,2160,397832,
  209081,2160,396856,
  209083,2160,-1,
 209086,2160,-1,
 209088,2160,398216,
  209090,2160,55352,
  209094,2160,-1,
  209096,2160,55352,
  209098,2160,-1,
 209100,2160,-1,
 209102,2160,398464,
  209104,2160,55352,
  209106,2160,-1,
  209107,2160,55352,
  209109,2160,-1,
 209111,2160,-1,
 209113,2160,398544,
  209115,2160,56568,
  209117,2160,-1,
  209120,2160,57256,
  209125,2160,-1,
 209128,2160,-1,
 209130,2160,398544,
  209132,2160,56568,
  209133,2160,-1,
  209135,2160,57256,
  209137,2160,-1,
 209139,2160,-1,
 209141,2160,397368,
 209143,2160,-1,
 209145,2160,397432,
 209148,2160,-1,
 209149,2160,397000,
 209151,2160,-1,
 209154,2160,397000,
 209156,2160,-1,
 209157,2160,397000,
 209159,2160,-1,
 209161,2160,397000,
 209163,2160,-1,
 209165,2160,397000,
 209167,2160,-1,
 209169,2160,397000,
 209171,2160,-1,
 209173,2160,397000,
 209175,2160,-1,
 209177,2160,397000,
 209179,2160,-1,
 209181,2160,397000,
 209183,2160,-1,
 209185,2160,397000,
 209187,2160,-1,
 209188,2160,397000,
 209191,2160,-1,
 209192,2160,396968,
 209195,2160,-1,
 209197,2160,396968,
 209199,2160,-1,
 209201,2160,396968,
 209203,2160,-1,
 209205,2160,396968,
 209207,2160,-1,
 209208,2160,396968,
 209210,2160,-1,
 209212,2160,396968,
 209214,2160,-1,
 209216,2160,396968,
 209218,2160,-1,
 209220,2160,396968,
 209222,2160,-1,
 209223,2160,396968,
 209225,2160,-1,
 209227,2160,396968,
 209229,2160,-1,
 209231,2160,396968,
 209233,2160,-1,
 209235,2160,36128,
 209240,2160,-1,
 209242,2160,36992,
 209246,2160,-1,
 209248,2160,35264,
 209253,1136,-1,
 209255,1136,35264,
 209257,1056,-1,
 209259,1056,35264,
 209260,896,-1,
 209262,896,35264,
 209264,64,-1,
 209266,64,32176,
 209296,64,-1,
 209298,64,32176,
 209315,64,-1,
 209317,64,27992,
 209319,64,-1,
 209321,64,37848,
 209324,64,-1,
 209326,64,27992,
 209328,64,-1,
 209330,64,36128,
 209332,64,-1,
 209333,64,32176,
 209348,64,-1,
 209350,64,32176,
 209362,64,-1,
 209364,64,404464,
  209366,64,32176,
  209439,64,-1,
 209445,64,-1,
 209447,64,404512,
  209449,64,32176,
  209495,64,-1,
 209498,64,-1,
 209500,64,404648,
  209501,64,32176,
  209513,64,-1,
  209515,64,404464,
   209517,64,32176,
   209608,64,-1,
  209611,64,-1,
 209613,64,-1,
 209614,64,404720,
  209616,64,32176,
  209628,64,-1,
  209630,64,404512,
   209632,64,32176,
   209717,64,-1,
  209720,64,-1,
 209722,64,-1,
 209724,64,404464,
  209726,64,32176,
  209783,64,-1,
 209786,64,-1,
 209788,64,404512,
  209790,64,32176,
  209846,64,-1,
 209849,64,-1,
 209851,64,404512,
  209853,64,32176,
  209913,64,-1,
 209916,64,-1,
 209918,64,32176,
 209940,64,-1,
 209942,64,32176,
 209961,64,-1,
 209964,64,32176,
 209981,64,-1,
 209983,64,32176,
 210008,64,-1,
 210011,64,32176,
 210046,64,-1,
 210050,64,32176,
 210086,64,-1,
 210089,64,32176,
 210122,64,-1,
 210125,64,32176,
 210140,64,-1,
 210143,64,32176,
 210165,64,-1,
 210168,64,32176,
 210187,64,-1,
 210190,64,32176,
 210207,64,-1,
 210210,64,32176,
 210229,64,-1,
 210232,64,32176,
 210249,64,-1,
 210252,64,32176,
 210270,64,-1,
 210272,64,32176,
 210289,64,-1,
 210292,64,32176,
 210309,64,-1,
 210312,64,32176,
 210329,64,-1,
 210332,64,32176,
 210350,64,-1,
 210352,64,32176,
 210371,64,-1,
 210373,64,32176,
 210391,64,-1,
 210393,64,24280,
 210396,64,-1,
210398,64,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 24280
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25856
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 12
		, "total": 12
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26392
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 17
		, "total": 17
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26928
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 12
		, "total": 12
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27464
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 70
		, "total": 70
		, "fails": 0
	}, {
		"": "typename.size(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "size"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27992
		, "static": true
		, "const": true
		, "hits": 20
		, "time": 43
		, "total": 43
		, "fails": 0
	}, {
		"": "object.create(type: typename): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "create"
		, "owner": "object"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 28696
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 34
		, "total": 34
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": true
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": true
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": true
		}]
		, "size": 0
		, "offs": 32176
		, "static": true
		, "const": true
		, "hits": 34
		, "time": 1351
		, "total": 1351
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34560
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 1873
		, "total": 1873
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 35264
		, "static": true
		, "const": true
		, "hits": 8
		, "time": 43
		, "total": 43
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: uint8, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "value"
			, "type": "uint8"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 36128
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 7
		, "total": 7
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 36992
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 37848
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42336
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 20
		, "total": 20
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43192
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 22
		, "total": 22
		, "fails": 0
	}, {
		"": "uint32.pop(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pop"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43728
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "uint32.swap(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "swap"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44264
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "uint32.bsr(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsr"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44800
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "uint32.bsf(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsf"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45336
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "uint32.hib(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "hib"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45872
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "uint32.lob(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "lob"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46408
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 47256
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48104
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48640
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 39
		, "total": 39
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49176
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49712
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50248
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50784
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 51480
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 52016
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 52712
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53240
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 39
		, "total": 39
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53768
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 7
		, "total": 7
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 54296
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 11
		, "total": 11
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 54824
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 5
		, "total": 5
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 55352
		, "static": true
		, "const": true
		, "hits": 5
		, "time": 14
		, "total": 14
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 56040
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 56568
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 8
		, "total": 8
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 57256
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 22
		, "total": 22
		, "fails": 0
	}, {
		"": "Math.modf(x: float64, intPart: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "modf"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "intPart"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "intPart"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 86
		, "offs": 396856
		, "static": true
		, "const": false
		, "hits": 10
		, "time": 25
		, "total": 25
		, "fails": 0
	}, {
		"": "Math.floor(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "floor"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 396944
		, "static": true
		, "const": false
		, "hits": 6
		, "time": 23
		, "total": 45
		, "fails": 0
	}, {
		"": "Math.absMod(val: float32, mod: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "val"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "mod"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 396968
		, "static": true
		, "const": false
		, "hits": 11
		, "time": 21
		, "total": 21
		, "fails": 0
	}, {
		"": "Math.absMod(val: float64, mod: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "val"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "mod"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 397000
		, "static": true
		, "const": false
		, "hits": 11
		, "time": 20
		, "total": 20
		, "fails": 0
	}, {
		"": "Math.clamp(t: float32, a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "t"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 397032
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 5
		, "total": 5
		, "fails": 0
	}, {
		"": "Math.clamp(t: float64, a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 175
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "t"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 175
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 175
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 175
			, "size": 8
			, "offs": 32
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 397064
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 3
		, "total": 3
		, "fails": 0
	}, {
		"": "Math.min(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 206
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 206
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 206
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 397096
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 5
		, "total": 5
		, "fails": 0
	}, {
		"": "Math.max(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 220
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 220
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 220
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 397176
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 5
		, "total": 5
		, "fails": 0
	}, {
		"": "Math.sum(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sum"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 234
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 234
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 234
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 397256
		, "static": true
		, "const": false
		, "hits": 4
		, "time": 8
		, "total": 8
		, "fails": 0
	}, {
		"": "Math.eval(x: float64, polynomial: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "eval"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 260
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 260
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "polynomial"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "polynomial"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 260
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 47
		, "offs": 397320
		, "static": true
		, "const": false
		, "hits": 3
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 269
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 269
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 269
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "eps"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 269
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 397368
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 284
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 284
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 284
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "eps"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 284
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 397432
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 2
		, "total": 2
		, "fails": 0
	}, {
		"": "Math.sinCos(arg: float64, quad: int32): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinCos"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 299
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 299
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "quad"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "quad"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 299
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 335
		, "offs": 397496
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 5
		, "total": 5
		, "fails": 0
	}, {
		"": "Math.tan(arg: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 356
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 356
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 356
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 378
		, "offs": 397832
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 4
		, "total": 7
		, "fails": 0
	}, {
		"": "Math.sinh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinh"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 413
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 413
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 413
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 241
		, "offs": 398216
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 7
		, "total": 13
		, "fails": 0
	}, {
		"": "Math.cosh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cosh"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 452
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 452
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 452
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 75
		, "offs": 398464
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 6
		, "total": 9
		, "fails": 0
	}, {
		"": "Math.asin(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "asin"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 467
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 467
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 467
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 173
		, "offs": 398544
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 13
		, "total": 24
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 403048
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 403056
		, "static": true
		, "const": false
		, "hits": 128
		, "time": 939
		, "total": 939
		, "fails": 128
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 20
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 20
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 403080
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 5
		, "total": 5
		, "fails": 1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 24
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 24
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 68
		, "offs": 403096
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 11
		, "total": 387
		, "fails": 1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 38
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 403168
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 4
		, "total": 4
		, "fails": 1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 43
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 43
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 403184
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 3
		, "total": 3
		, "fails": 1
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 403960
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 404024
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 6
		, "total": 6
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 54
		, "offs": 404032
		, "static": true
		, "const": false
		, "hits": 753
		, "time": 3413
		, "total": 3413
		, "fails": 0
	}, {
		"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 404464
		, "static": true
		, "const": false
		, "hits": 3
		, "time": 17
		, "total": 237
		, "fails": 0
	}, {
		"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 404512
		, "static": true
		, "const": false
		, "hits": 4
		, "time": 20
		, "total": 266
		, "fails": 0
	}, {
		"": "staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 66
		, "offs": 404648
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 6
		, "total": 113
		, "fails": 0
	}, {
		"": "virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 63
		, "offs": 404720
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 7
		, "total": 108
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 13382
		, "offs": 407412
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 583
		, "total": 7569
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 113
	, "statementCount": 1196
}
}

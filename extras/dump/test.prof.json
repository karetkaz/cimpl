{
"version": "2"
, "symbols": [{
	"": "typename"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "typename"
	, "type": "typename"
	, "size": 160
	, "offs": 8
	, "static": true
	, "const": true
}, {
	"": "typename.size"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": true
}, {
	"": "typename.offset"
	, "kind": "variable"
	, "cast": "inline"
	, "name": "offset"
	, "owner": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": true
}, {
	"": "typename.base(type: typename): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "base"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 25856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(2)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(2)"
	}
}, {
	"": "typename.file(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "file"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(3)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(3)"
	}
}, {
	"": "typename.line(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "line"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 26928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(4)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(4)"
	}
}, {
	"": "typename.name(type: typename): .cstr"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "name"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": ".cstr"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27464
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(5)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(5)"
	}
}, {
	"": "typename.size(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "size"
	, "owner": "typename"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 27992
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(6)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(6)"
	}
}, {
	"": "void"
	, "kind": "typename"
	, "cast": "void"
	, "name": "void"
	, "type": "typename"
	, "size": 0
	, "offs": 184
	, "static": true
	, "const": true
}, {
	"": "bool"
	, "kind": "typename"
	, "cast": "bool"
	, "name": "bool"
	, "type": "typename"
	, "size": 1
	, "offs": 352
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "char"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "char"
	, "type": "typename"
	, "size": 1
	, "offs": 520
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int8"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int8"
	, "type": "typename"
	, "size": 1
	, "offs": 688
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int16"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int16"
	, "type": "typename"
	, "size": 2
	, "offs": 856
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int32"
	, "kind": "typename"
	, "cast": "i32"
	, "name": "int32"
	, "type": "typename"
	, "size": 4
	, "offs": 1024
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "int64"
	, "kind": "typename"
	, "cast": "i64"
	, "name": "int64"
	, "type": "typename"
	, "size": 8
	, "offs": 1192
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint8"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint8"
	, "type": "typename"
	, "size": 1
	, "offs": 1360
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint16"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint16"
	, "type": "typename"
	, "size": 2
	, "offs": 1528
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32"
	, "kind": "typename"
	, "cast": "u32"
	, "name": "uint32"
	, "type": "typename"
	, "size": 4
	, "offs": 1696
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 42336
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(24)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(24)"
	}
}, {
	"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43192
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(25)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(25)"
	}
}, {
	"": "uint32.pop(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pop"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 43728
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(26)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(26)"
	}
}, {
	"": "uint32.swap(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "swap"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44264
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(27)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(27)"
	}
}, {
	"": "uint32.bsr(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsr"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 44800
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(28)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(28)"
	}
}, {
	"": "uint32.bsf(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "bsf"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45336
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(29)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(29)"
	}
}, {
	"": "uint32.hib(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "hib"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 45872
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(30)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(30)"
	}
}, {
	"": "uint32.lob(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lob"
	, "owner": "uint32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 46408
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(31)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(31)"
	}
}, {
	"": "uint64"
	, "kind": "typename"
	, "cast": "u64"
	, "name": "uint64"
	, "type": "typename"
	, "size": 8
	, "offs": 1864
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 47256
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(32)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(32)"
	}
}, {
	"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sxt"
	, "owner": "uint64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "offs"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "offs"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "count"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "count"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48104
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(33)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(33)"
	}
}, {
	"": "float32"
	, "kind": "typename"
	, "cast": "f32"
	, "name": "float32"
	, "type": "typename"
	, "size": 4
	, "offs": 2032
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float32.sin(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 48640
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(34)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(34)"
	}
}, {
	"": "float32.cos(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49176
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(35)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(35)"
	}
}, {
	"": "float32.tan(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 49712
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(36)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(36)"
	}
}, {
	"": "float32.log(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50248
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(37)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(37)"
	}
}, {
	"": "float32.exp(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 50784
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(38)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(38)"
	}
}, {
	"": "float32.pow(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 51480
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(39)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(39)"
	}
}, {
	"": "float32.sqrt(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 52016
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(40)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(40)"
	}
}, {
	"": "float32.atan2(x: float32, y: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float32"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 52712
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(41)"
		, "kind": "emit"
		, "type": "float32"
		, "value": "nfc(41)"
	}
}, {
	"": "float64"
	, "kind": "typename"
	, "cast": "f64"
	, "name": "float64"
	, "type": "typename"
	, "size": 8
	, "offs": 2200
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "float64.sin(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(42)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(42)"
	}
}, {
	"": "float64.cos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 53768
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(43)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(43)"
	}
}, {
	"": "float64.tan(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 54296
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(44)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(44)"
	}
}, {
	"": "float64.log(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 54824
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(45)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(45)"
	}
}, {
	"": "float64.exp(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 55352
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(46)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(46)"
	}
}, {
	"": "float64.pow(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 56040
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(47)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(47)"
	}
}, {
	"": "float64.sqrt(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sqrt"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 56568
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(48)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(48)"
	}
}, {
	"": "float64.atan2(x: float64, y: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "atan2"
	, "owner": "float64"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 57256
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(49)"
		, "kind": "emit"
		, "type": "float64"
		, "value": "nfc(49)"
	}
}, {
	"": "pointer"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "pointer"
	, "type": "typename"
	, "size": 4
	, "offs": 2368
	, "static": true
	, "const": true
}, {
	"": "pointer.alloc(ptr: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "alloc"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 35264
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(13)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(13)"
	}
}, {
	"": "pointer.fill(dst: pointer, value: uint8, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "fill"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36128
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(14)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(14)"
	}
}, {
	"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "copy"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 36992
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(15)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(15)"
	}
}, {
	"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "move"
	, "owner": "pointer"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "dst"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "dst"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "src"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "src"
		, "type": "pointer"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 37848
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(16)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(16)"
	}
}, {
	"": "variant"
	, "kind": "typename"
	, "cast": "var"
	, "name": "variant"
	, "type": "typename"
	, "size": 8
	, "offs": 2536
	, "static": true
	, "const": true
}, {
	"": "variant.as(var: variant, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "variant"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "var"
		, "kind": "variable"
		, "cast": "var"
		, "name": "var"
		, "type": "variant"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 24984
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(1)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(1)"
	}
}, {
	"": "function"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "function"
	, "type": "typename"
	, "size": 4
	, "offs": 2704
	, "static": true
	, "const": true
}, {
	"": "object"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 2880
	, "static": true
	, "const": true
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "null"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "null"
	, "type": "pointer"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "{pointer @0}"
		, "kind": ".literal"
		, "type": "pointer"
		, "value": "{pointer @0}"
	}
}, {
	"": "int"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "int"
	, "type": "typename"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "int32"
		, "value": "int32"
	}
}, {
	"": ".cstr"
	, "kind": "typename"
	, "cast": "arr"
	, "name": ".cstr"
	, "type": "char"
	, "size": 4
	, "offs": 3552
	, "static": true
	, "const": true
}, {
	"": "emit"
	, "kind": "typename"
	, "cast": "void"
	, "name": "emit"
	, "type": "function"
	, "size": 0
	, "offs": 3720
	, "static": true
	, "const": true
}, {
	"": "emit.nop"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "nop"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "nop"
		, "kind": "emit"
		, "type": "void"
		, "value": "nop"
	}
}, {
	"": "emit.not"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "not"
	, "owner": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "not.b32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "not.b32"
	}
}, {
	"": "emit.set"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "set"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "set.x32 sp(1)"
		, "kind": "emit"
		, "type": "void"
		, "value": "set.x32 sp(1)"
	}
}, {
	"": "emit.ret"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ret"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ret"
		, "kind": "emit"
		, "type": "void"
		, "value": "ret"
	}
}, {
	"": "emit.call"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "call"
	, "owner": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "call"
		, "kind": "emit"
		, "type": "void"
		, "value": "call"
	}
}, {
	"": "emit.p4x"
	, "kind": "typename"
	, "cast": "val"
	, "name": "p4x"
	, "owner": "emit"
	, "type": "typename"
	, "size": 16
	, "offs": 4728
	, "static": true
	, "const": true
}, {
	"": "emit.p4x.dp3"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp3.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp3.v4f"
	}
}, {
	"": "emit.p4x.dp4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dp4.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dp4.v4f"
	}
}, {
	"": "emit.p4x.dph"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "owner": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dph.v4f"
		, "kind": "emit"
		, "type": "float32"
		, "value": "dph.v4f"
	}
}, {
	"": "emit.dup"
	, "kind": "typename"
	, "cast": "void"
	, "name": "dup"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 4896
	, "static": true
	, "const": true
}, {
	"": "emit.dup.x1"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x1"
	, "owner": "emit.dup"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x32 sp(0)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "dup.x32 sp(0)"
	}
}, {
	"": "emit.dup.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.dup"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x64 sp(0)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "dup.x64 sp(0)"
	}
}, {
	"": "emit.dup.x4"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x4"
	, "owner": "emit.dup"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "dup.x128 sp(0)"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "dup.x128 sp(0)"
	}
}, {
	"": "emit.load"
	, "kind": "typename"
	, "cast": "void"
	, "name": "load"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 5568
	, "static": true
	, "const": true
}, {
	"": "emit.load.z32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.z32"
	}
}, {
	"": "emit.load.z64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.z64"
	}
}, {
	"": "emit.load.z128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.z128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.z128"
	}
}, {
	"": "emit.load.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i8"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i8"
	}
}, {
	"": "emit.load.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i16"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i16"
	}
}, {
	"": "emit.load.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "load.i32"
	}
}, {
	"": "emit.load.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "load.i64"
	}
}, {
	"": "emit.load.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "load.i128"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "load.i128"
	}
}, {
	"": "emit.store"
	, "kind": "typename"
	, "cast": "void"
	, "name": "store"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 7080
	, "static": true
	, "const": true
}, {
	"": "emit.store.i8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i8"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i8"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i8"
	}
}, {
	"": "emit.store.i16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i16"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i16"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i16"
	}
}, {
	"": "emit.store.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i32"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i32"
	}
}, {
	"": "emit.store.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i64"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i64"
	}
}, {
	"": "emit.store.i128"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i128"
	, "owner": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "store.i128"
		, "kind": "emit"
		, "type": "void"
		, "value": "store.i128"
	}
}, {
	"": "emit.cmt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cmt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8048
	, "static": true
	, "const": true
}, {
	"": "emit.cmt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "cmt.b32"
	}
}, {
	"": "emit.cmt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cmt"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cmt.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "cmt.b64"
	}
}, {
	"": "emit.and"
	, "kind": "typename"
	, "cast": "void"
	, "name": "and"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 8552
	, "static": true
	, "const": true
}, {
	"": "emit.and.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "and.b32"
	}
}, {
	"": "emit.and.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.and"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "and.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "and.b64"
	}
}, {
	"": "emit.or"
	, "kind": "typename"
	, "cast": "void"
	, "name": "or"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9040
	, "static": true
	, "const": true
}, {
	"": "emit.or.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "or.b32"
	}
}, {
	"": "emit.or.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.or"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "or.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "or.b64"
	}
}, {
	"": "emit.xor"
	, "kind": "typename"
	, "cast": "void"
	, "name": "xor"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 9528
	, "static": true
	, "const": true
}, {
	"": "emit.xor.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "xor.b32"
	}
}, {
	"": "emit.xor.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.xor"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "xor.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "xor.b64"
	}
}, {
	"": "emit.shl"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shl"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10016
	, "static": true
	, "const": true
}, {
	"": "emit.shl.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shl.b32"
	}
}, {
	"": "emit.shl.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shl"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shl.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shl.b64"
	}
}, {
	"": "emit.shr"
	, "kind": "typename"
	, "cast": "void"
	, "name": "shr"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 10504
	, "static": true
	, "const": true
}, {
	"": "emit.shr.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sar.b32"
	}
}, {
	"": "emit.shr.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.shr"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sar.b64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sar.b64"
	}
}, {
	"": "emit.shr.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "shr.b32"
	}
}, {
	"": "emit.shr.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.shr"
	, "type": "uint64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "shr.b64"
		, "kind": "emit"
		, "type": "uint64"
		, "value": "shr.b64"
	}
}, {
	"": "emit.neg"
	, "kind": "typename"
	, "cast": "void"
	, "name": "neg"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 11312
	, "static": true
	, "const": true
}, {
	"": "emit.neg.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "neg.i32"
	}
}, {
	"": "emit.neg.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "neg.i64"
	}
}, {
	"": "emit.neg.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "neg.f32"
	}
}, {
	"": "emit.neg.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "neg.f64"
	}
}, {
	"": "emit.neg.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v4f"
	}
}, {
	"": "emit.neg.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "neg.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "neg.v2d"
	}
}, {
	"": "emit.add"
	, "kind": "typename"
	, "cast": "void"
	, "name": "add"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 12472
	, "static": true
	, "const": true
}, {
	"": "emit.add.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "add.i32"
	}
}, {
	"": "emit.add.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "add.i64"
	}
}, {
	"": "emit.add.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "add.f32"
	}
}, {
	"": "emit.add.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "add.f64"
	}
}, {
	"": "emit.add.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v4f"
	}
}, {
	"": "emit.add.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "add.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "add.v2d"
	}
}, {
	"": "emit.sub"
	, "kind": "typename"
	, "cast": "void"
	, "name": "sub"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 13600
	, "static": true
	, "const": true
}, {
	"": "emit.sub.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "sub.i32"
	}
}, {
	"": "emit.sub.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "sub.i64"
	}
}, {
	"": "emit.sub.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "sub.f32"
	}
}, {
	"": "emit.sub.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "sub.f64"
	}
}, {
	"": "emit.sub.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v4f"
	}
}, {
	"": "emit.sub.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "sub.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "sub.v2d"
	}
}, {
	"": "emit.mul"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mul"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 14728
	, "static": true
	, "const": true
}, {
	"": "emit.mul.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mul.i32"
	}
}, {
	"": "emit.mul.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mul.i64"
	}
}, {
	"": "emit.mul.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u32"
	}
}, {
	"": "emit.mul.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mul.u64"
	}
}, {
	"": "emit.mul.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mul.f32"
	}
}, {
	"": "emit.mul.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mul.f64"
	}
}, {
	"": "emit.mul.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v4f"
	}
}, {
	"": "emit.mul.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mul.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "mul.v2d"
	}
}, {
	"": "emit.div"
	, "kind": "typename"
	, "cast": "void"
	, "name": "div"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 16176
	, "static": true
	, "const": true
}, {
	"": "emit.div.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "div.i32"
	}
}, {
	"": "emit.div.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "div.i64"
	}
}, {
	"": "emit.div.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u32"
	}
}, {
	"": "emit.div.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "div.u64"
	}
}, {
	"": "emit.div.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "div.f32"
	}
}, {
	"": "emit.div.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "div.f64"
	}
}, {
	"": "emit.div.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v4f"
	}
}, {
	"": "emit.div.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "div.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "div.v2d"
	}
}, {
	"": "emit.mod"
	, "kind": "typename"
	, "cast": "void"
	, "name": "mod"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 17624
	, "static": true
	, "const": true
}, {
	"": "emit.mod.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i32"
		, "kind": "emit"
		, "type": "int32"
		, "value": "mod.i32"
	}
}, {
	"": "emit.mod.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.i64"
		, "kind": "emit"
		, "type": "int64"
		, "value": "mod.i64"
	}
}, {
	"": "emit.mod.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u32"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u32"
	}
}, {
	"": "emit.mod.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.u64"
		, "kind": "emit"
		, "type": "uint32"
		, "value": "mod.u64"
	}
}, {
	"": "emit.mod.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f32"
		, "kind": "emit"
		, "type": "float32"
		, "value": "mod.f32"
	}
}, {
	"": "emit.mod.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "mod.f64"
		, "kind": "emit"
		, "type": "float64"
		, "value": "mod.f64"
	}
}, {
	"": "emit.ceq"
	, "kind": "typename"
	, "cast": "void"
	, "name": "ceq"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 18752
	, "static": true
	, "const": true
}, {
	"": "emit.ceq.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i32"
	}
}, {
	"": "emit.ceq.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.i64"
	}
}, {
	"": "emit.ceq.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f32"
	}
}, {
	"": "emit.ceq.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.f64"
	}
}, {
	"": "emit.ceq.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v4f"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v4f"
	}
}, {
	"": "emit.ceq.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "ceq.v2d"
		, "kind": "emit"
		, "type": "bool"
		, "value": "ceq.v2d"
	}
}, {
	"": "emit.clt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "clt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 19880
	, "static": true
	, "const": true
}, {
	"": "emit.clt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i32"
	}
}, {
	"": "emit.clt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.i64"
	}
}, {
	"": "emit.clt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u32"
	}
}, {
	"": "emit.clt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.u64"
	}
}, {
	"": "emit.clt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f32"
	}
}, {
	"": "emit.clt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "clt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "clt.f64"
	}
}, {
	"": "emit.cgt"
	, "kind": "typename"
	, "cast": "void"
	, "name": "cgt"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 21008
	, "static": true
	, "const": true
}, {
	"": "emit.cgt.i32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i32"
	}
}, {
	"": "emit.cgt.i64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "i64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.i64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.i64"
	}
}, {
	"": "emit.cgt.u32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u32"
	}
}, {
	"": "emit.cgt.u64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "u64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.u64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.u64"
	}
}, {
	"": "emit.cgt.f32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f32"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f32"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f32"
	}
}, {
	"": "emit.cgt.f64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "f64"
	, "owner": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "cgt.f64"
		, "kind": "emit"
		, "type": "bool"
		, "value": "cgt.f64"
	}
}, {
	"": "emit.min"
	, "kind": "typename"
	, "cast": "void"
	, "name": "min"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 22136
	, "static": true
	, "const": true
}, {
	"": "emit.min.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v4f"
	}
}, {
	"": "emit.min.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "min.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "min.v2d"
	}
}, {
	"": "emit.max"
	, "kind": "typename"
	, "cast": "void"
	, "name": "max"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 22624
	, "static": true
	, "const": true
}, {
	"": "emit.max.p4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p4f"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v4f"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v4f"
	}
}, {
	"": "emit.max.p2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "p2d"
	, "owner": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "max.v2d"
		, "kind": "emit"
		, "type": "emit.p4x"
		, "value": "max.v2d"
	}
}, {
	"": "emit.swz"
	, "kind": "typename"
	, "cast": "void"
	, "name": "swz"
	, "owner": "emit"
	, "type": "typename"
	, "size": 0
	, "offs": 23112
	, "static": true
	, "const": true
}, {
	"": "emit.swz.x2"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x2"
	, "owner": "emit.swz"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "swz.p4x zwxy(4e)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "swz.p4x zwxy(4e)"
	}
}, {
	"": "halt(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "halt"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 24280
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(0)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(0)"
	}
}, {
	"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "raise"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "file"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "file"
		, "type": "char[*]"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "line"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "line"
		, "type": "int32"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "level"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "level"
		, "type": "int32"
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "trace"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "trace"
		, "type": "int32"
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "variable"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 32176
	, "static": true
	, "const": true
	, "doc": "Report messages or raise errors."
	, "ast": {
		"": "nfc(11)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(11)"
	}
}, {
	"": "raise.abort"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "abort"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-2"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-2"
	}
}, {
	"": "raise.error"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "error"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "-1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "-1"
	}
}, {
	"": "raise.warn"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "warn"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1"
	}
}, {
	"": "raise.info"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "info"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "13"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "13"
	}
}, {
	"": "raise.debug"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "debug"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "14"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "14"
	}
}, {
	"": "raise.verbose"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "verbose"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "15"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "15"
	}
}, {
	"": "raise.noTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "noTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "0"
	}
}, {
	"": "raise.defTrace"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "defTrace"
	, "owner": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "128"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "128"
	}
}, {
	"": "tryExec(args: pointer, action(args: pointer): void): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tryExec"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "action(args: pointer): void"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "action"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 34560
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(12)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(12)"
	}
}, {
	"": "System"
	, "kind": "typename"
	, "cast": "void"
	, "name": "System"
	, "type": "typename"
	, "size": 0
	, "offs": 37896
	, "static": true
	, "const": true
}, {
	"": "System.exit(code: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exit"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "code"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "code"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 38560
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(17)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(17)"
	}
}, {
	"": "System.srand(seed: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "srand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "seed"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "seed"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39104
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(18)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(18)"
	}
}, {
	"": "System.time(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "time"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39480
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(19)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(19)"
	}
}, {
	"": "System.millis(): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "millis"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 39856
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(20)"
		, "kind": "emit"
		, "type": "int64"
		, "value": "nfc(20)"
	}
}, {
	"": "System.sleep(millis: int64): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sleep"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "millis"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "millis"
		, "type": "int64"
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40392
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(21)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(21)"
	}
}, {
	"": "System.rand(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rand"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 40768
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(22)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(22)"
	}
}, {
	"": "System.rand.max"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "max"
	, "owner": "System.rand(): int32"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "2147483647"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "2147483647"
	}
}, {
	"": "System.clock(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clock"
	, "owner": "System"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "int32"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 41304
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(23)"
		, "kind": "emit"
		, "type": "int32"
		, "value": "nfc(23)"
	}
}, {
	"": "System.clock.perSec"
	, "kind": "inline"
	, "cast": "i64"
	, "name": "perSec"
	, "owner": "System.clock(): int32"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "ast": {
		"": "1000000"
		, "kind": ".literal"
		, "type": "int64"
		, "value": "1000000"
	}
}, {
	"": "true"
	, "kind": "inline"
	, "cast": "val"
	, "name": "true"
	, "type": "bool"
	, "file": "cmplStd/stdlib.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "true"
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "1"
	}
}, {
	"": "false"
	, "kind": "inline"
	, "cast": "val"
	, "name": "false"
	, "type": "bool"
	, "file": "cmplStd/stdlib.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "false"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "bool"
		, "value": "0"
	}
}, {
	"": "byte"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "byte"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 8
		, "value": "uint8"
	}
}, {
	"": "float"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "float"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 9
		, "value": "float32"
	}
}, {
	"": "double"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "double"
	, "type": "typename"
	, "file": "cmplStd/stdlib.ci"
	, "line": 10
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 10
		, "value": "float64"
	}
}, {
	"": "signed(value: uint8): int8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 13
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int8(value)"
		, "kind": "()"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 13
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/stdlib.ci"
			, "line": 13
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint16): int16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "size": 2
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int16(value)"
		, "kind": "()"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 16
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/stdlib.ci"
			, "line": 16
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int32(value)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 19
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 19
			, "value": "value"
		}]
	}
}, {
	"": "signed(value: uint64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "signed"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert unsigned to signed integer"
	, "ast": {
		"": "int64(value)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 22
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/stdlib.ci"
			, "line": 22
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int8): uint8"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint8(value)"
		, "kind": "()"
		, "type": "uint8"
		, "file": "cmplStd/stdlib.ci"
		, "line": 25
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/stdlib.ci"
			, "line": 25
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int16): uint16"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "size": 2
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint16(value)"
		, "kind": "()"
		, "type": "uint16"
		, "file": "cmplStd/stdlib.ci"
		, "line": 28
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/stdlib.ci"
			, "line": 28
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint32(value)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 31
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/stdlib.ci"
			, "line": 31
			, "value": "value"
		}]
	}
}, {
	"": "unsigned(value: int64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "unsigned"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert signed to unsigned integer"
	, "ast": {
		"": "uint64(value)"
		, "kind": "()"
		, "type": "uint64"
		, "file": "cmplStd/stdlib.ci"
		, "line": 34
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/stdlib.ci"
			, "line": 34
			, "value": "value"
		}]
	}
}, {
	"": "sizeof(type: typename): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sizeof"
	, "type": "function"
	, "file": "cmplStd/stdlib.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the size of the given type"
	, "ast": {
		"": "typename.size(type)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/stdlib.ci"
		, "line": 37
		, "args": [{
			"": "type"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/stdlib.ci"
			, "line": 37
			, "value": "type"
		}]
	}
}, {
	"": "verbose(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 4
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 4
			, "value": "inspect"
		}]
	}
}, {
	"": "verbose(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "verbose"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `verbose` logging level"
	, "ast": {
		"": "raise(raise.verbose, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 6
		, "args": [{
		}, {
			"": "raise.verbose"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "verbose"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "verbose"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 6
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 6
			, "value": "null"
		}]
	}
}, {
	"": "debug(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 9
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 9
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 9
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 9
			, "value": "inspect"
		}]
	}
}, {
	"": "debug(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "debug"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 11
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "debug"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 11
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 11
			, "value": "null"
		}]
	}
}, {
	"": "trace(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 14
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 14
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 14
			, "value": "inspect"
		}]
	}
}, {
	"": "trace(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "trace"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 16
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `debug` logging level"
	, "ast": {
		"": "raise(raise.debug, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "raise.debug"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "debug"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "debug"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 16
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 16
			, "value": "null"
		}]
	}
}, {
	"": "info(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 19
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 19
			, "value": "inspect"
		}]
	}
}, {
	"": "info(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "info"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `info` logging level"
	, "ast": {
		"": "raise(raise.info, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "raise.info"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "info"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "info"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 21
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 21
			, "value": "null"
		}]
	}
}, {
	"": "warn(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 24
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 24
			, "value": "inspect"
		}]
	}
}, {
	"": "warn(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "warn"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message at `warn` logging level"
	, "ast": {
		"": "raise(raise.warn, raise.noTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "raise.warn"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "warn"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "warn"
			}
		}, {
			"": "raise.noTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "raise"
			}
			, "right": {
				"": "noTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 26
				, "value": "noTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 26
			, "value": "null"
		}]
	}
}, {
	"": "error(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 29
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 29
			, "value": "inspect"
		}]
	}
}, {
	"": "error(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "error"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `error` logging level"
	, "ast": {
		"": "raise(raise.error, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "raise.error"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "error"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "error"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 31
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 31
			, "value": "null"
		}]
	}
}, {
	"": "abort(message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, inspect)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 34
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "value": "message"
		}, {
			"": "inspect"
			, "kind": ".variable"
			, "type": "variant"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 34
			, "value": "inspect"
		}]
	}
}, {
	"": "abort(message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, message, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 36
				, "value": "defTrace"
			}
		}, {
			"": "message"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "value": "message"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 36
			, "value": "null"
		}]
	}
}, {
	"": "abort(): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abort"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message with stacktrace at `abort` logging level and abort execution"
	, "ast": {
		"": "raise(raise.abort, raise.defTrace, \"execution aborted!\", null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "raise.abort"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "abort"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "abort"
			}
		}, {
			"": "raise.defTrace"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "left": {
				"": "raise"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "raise"
			}
			, "right": {
				"": "defTrace"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 38
				, "value": "defTrace"
			}
		}, {
			"": "\"execution aborted!\""
			, "kind": ".literal"
			, "type": ".cstr"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "value": "\"execution aborted!\""
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 38
			, "value": "null"
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*], inspect: variant): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 41
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "inspect"
		, "kind": "inline"
		, "cast": "var"
		, "name": "inspect"
		, "type": "variant"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message, inspect))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 41
		, "args": [{
			"": "condition ? void(0) : abort(message, inspect)"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 41
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message, inspect)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 41
				, "args": [{
				}, {
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "message"
				}, {
					"": "inspect"
					, "kind": ".variable"
					, "type": "variant"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 41
					, "value": "inspect"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool, message: char[*]): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(message))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 43
		, "args": [{
			"": "condition ? void(0) : abort(message)"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 43
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 43
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(message)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 43
				, "args": [{
					"": "message"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 43
					, "value": "message"
				}]
			}
		}]
	}
}, {
	"": "assert(condition: bool): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assert"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 45
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "condition"
		, "kind": "inline"
		, "cast": "bool"
		, "name": "condition"
		, "type": "bool"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "report message and abort the execution if the assertion condition fails (is false)"
	, "ast": {
		"": "void(condition ? void(0) : abort(\"assertion failed!\"))"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 45
		, "args": [{
			"": "condition ? void(0) : abort(\"assertion failed!\")"
			, "kind": "?:"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 45
			, "test": {
				"": "condition"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "value": "condition"
			}
			, "left": {
				"": "void(0)"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 45
					, "value": "0"
				}]
			}
			, "right": {
				"": "abort(\"assertion failed!\")"
				, "kind": "()"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 45
				, "args": [{
					"": "\"assertion failed!\""
					, "kind": ".literal"
					, "type": ".cstr"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 45
					, "value": "\"assertion failed!\""
				}]
			}
		}]
	}
}, {
	"": "NotEquals"
	, "kind": "typename"
	, "cast": "val"
	, "name": "NotEquals"
	, "type": "typename"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 48
	, "size": 24
	, "offs": 76152
	, "static": true
	, "const": true
	, "doc": "@public"
}, {
	"": "NotEquals.expected"
	, "kind": "variable"
	, "cast": "var"
	, "name": "expected"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 50
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "Value of the expected result"
}, {
	"": "NotEquals.returned"
	, "kind": "variable"
	, "cast": "var"
	, "name": "returned"
	, "owner": "NotEquals"
	, "type": "variant"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 53
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "Value of the actual result"
}, {
	"": "NotEquals.extras"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "extras"
	, "owner": "NotEquals"
	, "type": "variant[]"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 56
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": true
	, "doc": "Extra argument to identify what happened"
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 56
		, "value": "null"
	}
}, {
	"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "message"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "message"
		, "type": "char[*]"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}]
	, "size": 103
	, "offs": 400160
	, "static": true
	, "const": false
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 61
		, "stmt": [{
			"": "if (returned == expected)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 62
			, "test": {
				"": "returned == expected"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 62
				, "left": {
					"": "returned"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 62
					, "value": "returned"
				}
				, "right": {
					"": "expected"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 62
					, "value": "expected"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/debug.ci"
				, "line": 62
				, "stmt": [{
					"": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/debug.ci"
					, "line": 63
				}]
			}
		}, {
			"": "extras"
			, "kind": ".variable"
			, "type": "variant[1]"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 65
			, "value": "extras"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "NotEquals"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 66
			, "value": "details"
		}, {
			"": "raise(raise.abort, raise.defTrace, \"assertion failed\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 71
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400160
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400162
		, "size": 2
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400164
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400165
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400169
		, "size": 1
	}, {
		"instruction": "inc.sp(+8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400170
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400174
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400179
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400181
		, "size": 2
	}, {
		"instruction": "inc.sp(+24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400183
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400187
		, "size": 5
	}, {
		"instruction": "load.sp(+48)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400192
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400196
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400198
		, "size": 5
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400203
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400207
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400209
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400214
		, "size": 4
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400218
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400220
		, "size": 5
	}, {
		"instruction": "load.c32 71"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400225
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400230
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400235
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400240
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400245
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400250
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 400254
		, "size": 4
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400258
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400262
		, "size": 1
	}]
}, {
	"": "assertEq(expected: int32, returned: int32): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "assertEq"
	, "type": "function"
	, "file": "cmplStd/lib/debug.ci"
	, "line": 74
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "expected"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "expected"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "returned"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "returned"
		, "type": "int32"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "abort execution if the returned value is not equal to the expected value"
	, "ast": {
		"": "assertEq(expected, returned, null)"
		, "kind": "()"
		, "type": "void"
		, "file": "cmplStd/lib/debug.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "expected"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "expected"
		}, {
			"": "returned"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "returned"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/lib/debug.ci"
			, "line": 74
			, "value": "null"
		}]
	}
}, {
	"": "Math"
	, "kind": "typename"
	, "cast": "void"
	, "name": "Math"
	, "type": "typename"
	, "file": "cmplStd/lib/math.ci"
	, "line": 2
	, "size": 0
	, "offs": 80976
	, "static": true
	, "const": true
	, "doc": "Mathematical utility functions and constants"
}, {
	"": "Math.pi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "pi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 6
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "pi"
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 6
		, "value": "3.141593"
	}
}, {
	"": "Math.e"
	, "kind": "inline"
	, "cast": "val"
	, "name": "e"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "e"
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 7
		, "value": "2.718282"
	}
}, {
	"": "Math.ln2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 8
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln2"
	, "ast": {
		"": "0.693147"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 8
		, "value": "0.693147"
	}
}, {
	"": "Math.log2E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log2E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log2E"
	, "ast": {
		"": "1.442695"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "1.442695"
	}
}, {
	"": "Math.ln10"
	, "kind": "inline"
	, "cast": "val"
	, "name": "ln10"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 10
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "ln10"
	, "ast": {
		"": "2.302585"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 10
		, "value": "2.302585"
	}
}, {
	"": "Math.log10E"
	, "kind": "inline"
	, "cast": "val"
	, "name": "log10E"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 11
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "log10E"
	, "ast": {
		"": "0.434294"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "0.434294"
	}
}, {
	"": "Math.phi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "phi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 12
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "phi"
	, "ast": {
		"": "1.618034"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 12
		, "value": "1.618034"
	}
}, {
	"": "Math.sqrt2"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrt2"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 13
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrt2"
	, "ast": {
		"": "1.414214"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 13
		, "value": "1.414214"
	}
}, {
	"": "Math.sqrtE"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtE"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 14
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtE"
	, "ast": {
		"": "1.648721"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 14
		, "value": "1.648721"
	}
}, {
	"": "Math.sqrtPi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 15
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPi"
	, "ast": {
		"": "1.772454"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 15
		, "value": "1.772454"
	}
}, {
	"": "Math.sqrtPhi"
	, "kind": "inline"
	, "cast": "val"
	, "name": "sqrtPhi"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 16
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "sqrtPhi"
	, "ast": {
		"": "1.272020"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 16
		, "value": "1.272020"
	}
}, {
	"": "Math.nan"
	, "kind": "inline"
	, "cast": "val"
	, "name": "nan"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 17
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "nan"
	, "ast": {
		"": "-nan"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "-nan"
	}
}, {
	"": "Math.inf"
	, "kind": "inline"
	, "cast": "val"
	, "name": "inf"
	, "owner": "Math"
	, "type": "float64"
	, "file": "cmplStd/lib/math.ci"
	, "line": 18
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": true
	, "doc": "inf"
	, "ast": {
		"": "inf"
		, "kind": ".literal"
		, "type": "float64"
		, "value": "inf"
	}
}, {
	"": "Math.modf(x: float64, intPart: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "modf"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "intPart"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "intPart"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 86
	, "offs": 400264
	, "static": true
	, "const": false
	, "doc": "Decompose a value into integer and fractional parts"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "stmt": [{
			"": "if (x < (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 23
			, "test": {
				"": "x < (1)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 23
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 23
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 23
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 23
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 23
				, "stmt": [{
					"": "if (x < (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 24
					, "test": {
						"": "x < (0)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 24
						, "left": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 24
							, "value": "x"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 24
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 24
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 24
						, "stmt": [{
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 25
							, "value": "result"
						}, {
							"": "intPart := -intPart;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 26
						}, {
							"": "return .result := result;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 27
							, "stmt": {
								"": ".result := result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "result"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 27
									, "value": "result"
								}
							}
						}]
					}
				}, {
					"": "intPart := (0);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 29
				}, {
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 30
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 30
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 32
			, "value": "result"
		}, {
			"": "intPart := x - result;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 33
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 34
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 34
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400264
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400266
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400275
		, "size": 1
	}, {
		"instruction": "jz +51"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400276
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400280
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 400282
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400283
		, "size": 1
	}, {
		"instruction": "jz +35"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400284
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 400288
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400289
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 400291
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400292
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400294
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400299
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400300
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 400304
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400305
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400307
		, "size": 1
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 400308
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400309
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 400311
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400312
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400314
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400315
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 400319
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400320
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 400322
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 400323
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400326
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400327
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400329
		, "size": 9
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 400338
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400339
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400341
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 400343
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400344
		, "size": 2
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 400346
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400347
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400349
		, "size": 1
	}]
}, {
	"": "Math.floor(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "floor"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 400352
	, "static": true
	, "const": false
	, "doc": "Computes the largest integer value not greater than the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 48
			, "value": "result"
		}, {
			"": "modf(x, &result);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 49
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 50
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 50
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 400352
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400353
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400355
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400359
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400364
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400365
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400369
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400373
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400375
		, "size": 1
	}]
}, {
	"": "Math.ceil(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceil"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 54
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the smallest integer not less than the input"
	, "ast": {
		"": "-floor(-x)"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 54
		, "right": {
			"": "floor(-x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 54
			, "args": [{
				"": "-x"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 54
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 54
					, "value": "x"
				}
			}]
		}
	}
}, {
	"": "Math.round(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "round"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Computes the nearest integer to the input"
	, "ast": {
		"": "floor(x + 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 57
		, "args": [{
			"": "x + 0.500000"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 57
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 57
				, "value": "x"
			}
			, "right": {
				"": "0.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 57
				, "value": "0.500000"
			}
		}]
	}
}, {
	"": "Math.sign(x: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > 0) - int32(x < 0)"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 64
		, "left": {
			"": "int32(x > 0)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 64
			, "args": [{
				"": "x > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "0"
				}
			}]
		}
		, "right": {
			"": "int32(x < 0)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 64
			, "args": [{
				"": "x < 0"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 64
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "x"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 64
					, "value": "0"
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: int64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "x"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 67
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 67
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 67
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 67
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 67
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 67
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: uint32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 70
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "x"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `1` if positive)"
	, "ast": {
		"": "int32(x > (0))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 70
		, "args": [{
			"": "x > (0)"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 70
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 70
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 70
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 70
					, "value": "0"
				}]
			}
		}]
	}
}, {
	"": "Math.sign(x: uint64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "x"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `1` if positive)"
	, "ast": {
		"": "int32(x > (0))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 73
		, "args": [{
			"": "x > (0)"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 73
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 73
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 73
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 73
					, "value": "0"
				}]
			}
		}]
	}
}, {
	"": "Math.sign(x: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 76
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 76
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 76
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 76
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 76
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 76
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 76
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 76
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.sign(x: float64): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sign"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 79
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the signum of the input (`0` if zero, `-1` if negative, `1` if positive)"
	, "ast": {
		"": "int32(x > (0)) - int32(x < (0))"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 79
		, "left": {
			"": "int32(x > (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 79
			, "args": [{
				"": "x > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 79
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 79
						, "value": "0"
					}]
				}
			}]
		}
		, "right": {
			"": "int32(x < (0))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 79
			, "args": [{
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 79
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 79
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 79
						, "value": "0"
					}]
				}
			}]
		}
	}
}, {
	"": "Math.absMod(val: float32, mod: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "mod"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 400376
	, "static": true
	, "const": false
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 83
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 83
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 83
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 83
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 83
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 83
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 83
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 83
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 83
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 83
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 83
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 84
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 84
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 84
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 84
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 86
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 86
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400376
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400378
		, "size": 2
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 400380
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400381
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400383
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400385
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 400386
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400387
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400391
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400393
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 400395
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400396
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400398
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(3, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 400399
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400402
		, "size": 1
	}]
}, {
	"": "Math.absMod(val: float64, mod: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "absMod"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "val"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "mod"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "mod"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 27
	, "offs": 400408
	, "static": true
	, "const": false
	, "doc": "Returns the positive modulus of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "stmt": [{
			"": "if ((val := val % mod) < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 91
			, "test": {
				"": "(val := val % mod) < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 91
				, "left": {
					"": "(val := val % mod)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 91
					, "args": [{
						"": "val := val % mod"
						, "kind": ":="
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 91
						, "left": {
							"": "val"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 91
							, "value": "val"
						}
						, "right": {
							"": "val % mod"
							, "kind": "%"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 91
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 91
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 91
								, "value": "mod"
							}
						}
					}]
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 91
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 91
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 91
				, "stmt": [{
					"": "return .result := val + mod;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 92
					, "stmt": {
						"": ".result := val + mod"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "val + mod"
							, "kind": "+"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 92
							, "left": {
								"": "val"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 92
								, "value": "val"
							}
							, "right": {
								"": "mod"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 92
								, "value": "mod"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := val;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 94
			, "stmt": {
				"": ".result := val"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "val"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 94
					, "value": "val"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400408
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400410
		, "size": 2
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 400412
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400413
		, "size": 2
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400415
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 400417
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400418
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400419
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400423
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400425
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 400427
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400428
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400430
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 400431
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400434
		, "size": 1
	}]
}, {
	"": "Math.abs(x: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 98
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < 0 ? -x : x"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 98
		, "test": {
			"": "x < 0"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "x"
			}
			, "right": {
				"": "0"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "0"
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 98
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 98
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 101
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "x"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 101
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 101
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 101
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 101
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 104
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "x"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 104
		, "value": "x"
	}
}, {
	"": "Math.abs(x: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "x"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 107
		, "value": "x"
	}
}, {
	"": "Math.abs(x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 110
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 110
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 110
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 110
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 110
			, "value": "x"
		}
	}
}, {
	"": "Math.abs(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 113
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the absolute value of the input"
	, "ast": {
		"": "x < (0) ? -x : x"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 113
		, "test": {
			"": "x < (0)"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "left": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "value": "x"
			}
			, "right": {
				"": "(0)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "args": [{
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 113
					, "value": "0"
				}]
			}
		}
		, "left": {
			"": "-x"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 113
				, "value": "x"
			}
		}
		, "right": {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 113
			, "value": "x"
		}
	}
}, {
	"": "Math.min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 116
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 116
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 116
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 116
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 116
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: int64, b: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 119
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "a"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "b"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 119
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 119
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 119
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 119
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: uint32, b: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 122
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "a"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "b"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 122
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 122
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 122
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 122
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: uint64, b: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 125
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "a"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "b"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 125
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 125
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 125
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 125
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 128
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 128
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 128
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 128
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 128
			, "value": "b"
		}
	}
}, {
	"": "Math.min(a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 131
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 131
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 131
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 131
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 131
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 134
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 134
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 134
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 134
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 134
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: int64, b: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 137
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "a"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "b"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 137
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 137
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 137
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 137
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: uint32, b: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 140
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "a"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "b"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 140
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 140
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 140
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 140
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: uint64, b: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 143
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "a"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "b"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 143
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 143
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 143
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 143
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 146
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 146
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 146
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 146
			, "value": "b"
		}
	}
}, {
	"": "Math.max(a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 149
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 149
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 149
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 149
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 149
			, "value": "b"
		}
	}
}, {
	"": "Math.clamp(t: int32, a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 152
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "t"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "t < a ? a : t > b ? b : t"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 152
		, "test": {
			"": "t < a"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "value": "t"
			}
			, "right": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "value": "a"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "value": "a"
		}
		, "right": {
			"": "t > b ? b : t"
			, "kind": "?:"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 152
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 152
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 152
					, "value": "b"
				}
			}
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "value": "b"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 152
				, "value": "t"
			}
		}
	}
}, {
	"": "Math.clamp(t: int64, a: int64, b: int64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 155
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "t"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "a"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "b"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "t < a ? a : t > b ? b : t"
		, "kind": "?:"
		, "type": "int64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 155
		, "test": {
			"": "t < a"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 155
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "value": "t"
			}
			, "right": {
				"": "a"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "value": "a"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 155
			, "value": "a"
		}
		, "right": {
			"": "t > b ? b : t"
			, "kind": "?:"
			, "type": "int64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 155
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 155
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 155
					, "value": "b"
				}
			}
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "value": "b"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 155
				, "value": "t"
			}
		}
	}
}, {
	"": "Math.clamp(t: uint32, a: uint32, b: uint32): uint32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 158
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "t"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "a"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "b"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "t < a ? a : t > b ? b : t"
		, "kind": "?:"
		, "type": "uint32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 158
		, "test": {
			"": "t < a"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 158
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "value": "t"
			}
			, "right": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "value": "a"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 158
			, "value": "a"
		}
		, "right": {
			"": "t > b ? b : t"
			, "kind": "?:"
			, "type": "uint32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 158
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 158
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 158
					, "value": "b"
				}
			}
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "value": "b"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 158
				, "value": "t"
			}
		}
	}
}, {
	"": "Math.clamp(t: uint64, a: uint64, b: uint64): uint64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 161
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "u64"
		, "name": ".result"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "t"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "a"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "b"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "t < a ? a : t > b ? b : t"
		, "kind": "?:"
		, "type": "uint64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 161
		, "test": {
			"": "t < a"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 161
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "value": "t"
			}
			, "right": {
				"": "a"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "value": "a"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 161
			, "value": "a"
		}
		, "right": {
			"": "t > b ? b : t"
			, "kind": "?:"
			, "type": "uint64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 161
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 161
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 161
					, "value": "b"
				}
			}
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "value": "b"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 161
				, "value": "t"
			}
		}
	}
}, {
	"": "Math.clamp(t: float32, a: float32, b: float32): float32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 164
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 400440
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 165
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 165
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 165
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 165
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 165
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 166
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 166
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 168
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 168
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 168
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 168
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 168
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 169
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float32"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 169
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 171
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float32"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 171
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400440
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400442
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 400444
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400445
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 400449
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400452
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400453
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400455
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 400457
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400458
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(4, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 400462
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400465
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(4, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 400466
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400469
		, "size": 1
	}]
}, {
	"": "Math.clamp(t: float64, a: float64, b: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "clamp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 175
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 30
	, "offs": 400472
	, "static": true
	, "const": false
	, "doc": "Returns the value of `t` clamped between `a` and `b`"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "stmt": [{
			"": "if (t < a)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 176
			, "test": {
				"": "t < a"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 176
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 176
					, "value": "t"
				}
				, "right": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 176
					, "value": "a"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 176
				, "stmt": [{
					"": "return .result := a;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 177
					, "stmt": {
						"": ".result := a"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 177
							, "value": "a"
						}
					}
				}]
			}
		}, {
			"": "if (t > b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 179
			, "test": {
				"": "t > b"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 179
				, "left": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 179
					, "value": "t"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 179
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 179
				, "stmt": [{
					"": "return .result := b;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 180
					, "stmt": {
						"": ".result := b"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 180
							, "value": "b"
						}
					}
				}]
			}
		}, {
			"": "return .result := t;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 182
			, "stmt": {
				"": ".result := t"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "t"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 182
					, "value": "t"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400472
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400474
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400476
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400477
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 400481
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400484
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400485
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400487
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 400489
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400490
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 400494
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400497
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(7, 5)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 400498
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400501
		, "size": 1
	}]
}, {
	"": "Math.lerp(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 191
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 191
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 191
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 191
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 191
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 191
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 191
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.lerp(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "lerp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 194
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the linear interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "a + t * (b - a)"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 194
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 194
			, "value": "a"
		}
		, "right": {
			"": "t * (b - a)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 194
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 194
				, "value": "t"
			}
			, "right": {
				"": "(b - a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 194
				, "args": [{
					"": "b - a"
					, "kind": "-"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 194
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 194
						, "value": "b"
					}
					, "right": {
						"": "a"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 194
						, "value": "a"
					}
				}]
			}
		}
	}
}, {
	"": "Math.smooth(t: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 196
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 196
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 196
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 196
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 196
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 196
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 196
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 196
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 196
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 196
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 196
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 196
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 196
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 196
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 196
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 197
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 197
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 197
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "t * t * ((3) - (2) * t)"
		, "kind": "*"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 197
		, "left": {
			"": "t * t"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 197
			, "left": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 197
				, "value": "t"
			}
			, "right": {
				"": "t"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 197
				, "value": "t"
			}
		}
		, "right": {
			"": "((3) - (2) * t)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 197
			, "args": [{
				"": "(3) - (2) * t"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 197
				, "left": {
					"": "(3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 197
					, "args": [{
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 197
						, "value": "3"
					}]
				}
				, "right": {
					"": "(2) * t"
					, "kind": "*"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 197
					, "left": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 197
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 197
							, "value": "2"
						}]
					}
					, "right": {
						"": "t"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 197
						, "value": "t"
					}
				}
			}]
		}
	}
}, {
	"": "Math.smooth(t: float32, a: float32, b: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 200
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "t"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), 0.000000, 1.000000))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 200
		, "args": [{
			"": "clamp((t - a) / (b - a), 0.000000, 1.000000)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 200
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 200
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 200
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 200
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 200
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 200
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 200
							, "value": "a"
						}
					}]
				}
			}, {
				"": "0.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 200
				, "value": "0.000000"
			}, {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 200
				, "value": "1.000000"
			}]
		}]
	}
}, {
	"": "Math.smooth(t: float64, a: float64, b: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "smooth"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 203
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "t"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "t"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns smooth interpolation between `a` and `b` by `t`"
	, "ast": {
		"": "smooth(clamp((t - a) / (b - a), 0.000000, 1.000000))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 203
		, "args": [{
			"": "clamp((t - a) / (b - a), 0.000000, 1.000000)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 203
			, "args": [{
			}, {
				"": "(t - a) / (b - a)"
				, "kind": "/"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 203
				, "left": {
					"": "(t - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 203
					, "args": [{
						"": "t - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 203
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "t"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "a"
						}
					}]
				}
				, "right": {
					"": "(b - a)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 203
					, "args": [{
						"": "b - a"
						, "kind": "-"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 203
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "b"
						}
						, "right": {
							"": "a"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 203
							, "value": "a"
						}
					}]
				}
			}, {
				"": "0.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 203
				, "value": "0.000000"
			}, {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 203
				, "value": "1.000000"
			}]
		}]
	}
}, {
	"": "Math.min(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "min"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 206
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 206
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 206
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 400504
	, "static": true
	, "const": false
	, "doc": "Returns the smaller value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 206
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 207
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 207
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 207
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "cmplStd/lib/math.ci"
						, "line": 207
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 207
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 207
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 207
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 207
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 208
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 208
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 210
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 211
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 211
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 211
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 211
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 211
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 211
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 211
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 211
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 211
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 211
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 211
				, "stmt": [{
					"": "if (result > data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 212
					, "test": {
						"": "result > data[i]"
						, "kind": ">"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 212
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 212
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 212
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 212
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 212
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 212
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 213
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 216
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 216
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400504
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400506
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400507
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400508
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400512
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400521
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400523
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400524
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400526
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400527
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400532
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400536
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400538
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400540
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 400542
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400546
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 400547
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400548
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400552
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400554
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 400556
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400560
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400561
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400563
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400567
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400569
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400571
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400572
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400576
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400580
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400582
		, "size": 1
	}]
}, {
	"": "Math.max(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "max"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 220
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 220
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 220
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 79
	, "offs": 400584
	, "static": true
	, "const": false
	, "doc": "Returns the greater value from the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 220
		, "stmt": [{
			"": "if (data.length == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 221
			, "test": {
				"": "data.length == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 221
				, "left": {
					"": "data.length"
					, "kind": "."
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 221
					, "left": {
						"": "data"
						, "kind": ".variable"
						, "type": "float64[]"
						, "file": "cmplStd/lib/math.ci"
						, "line": 221
						, "value": "data"
					}
					, "right": {
						"": "length"
						, "kind": ".variable"
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 221
						, "value": "length"
					}
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 221
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 221
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 221
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 222
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 222
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 224
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 225
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 225
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 225
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 225
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 225
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 225
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 225
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 225
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 225
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 225
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 225
				, "stmt": [{
					"": "if (result < data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 226
					, "test": {
						"": "result < data[i]"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 226
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 226
							, "value": "result"
						}
						, "right": {
							"": "data[i]"
							, "kind": "[]"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 226
							, "left": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 226
								, "value": "data"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 226
								, "value": "i"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 226
						, "stmt": [{
							"": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 227
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 230
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 230
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400584
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400586
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 400587
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400588
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400592
		, "size": 9
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400601
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400603
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400604
		, "size": 2
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400606
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400607
		, "size": 5
	}, {
		"instruction": "jmp +35"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400612
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400616
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400618
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400620
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 400622
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400626
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400627
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400628
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400632
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400634
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 400636
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400640
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400641
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400643
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400647
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400649
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400651
		, "size": 1
	}, {
		"instruction": "jnz -36"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400652
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400656
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400660
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400662
		, "size": 1
	}]
}, {
	"": "Math.sum(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sum"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 234
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 234
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 234
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 40
	, "offs": 400664
	, "static": true
	, "const": false
	, "doc": "Returns the sum of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 234
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 235
			, "value": "result"
		}, {
			"": "for (i; i < (data.length); i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 236
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 236
				, "value": "i"
			}
			, "test": {
				"": "i < (data.length)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 236
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 236
					, "value": "i"
				}
				, "right": {
					"": "(data.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 236
					, "args": [{
						"": "data.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 236
						, "left": {
							"": "data"
							, "kind": ".variable"
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 236
							, "value": "data"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 236
							, "value": "length"
						}
					}]
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 236
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 236
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 236
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 236
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 236
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 236
				, "stmt": [{
					"": "result := result + data[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 237
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 239
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 239
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 400664
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 400665
		, "size": 1
	}, {
		"instruction": "jmp +22"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400666
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400670
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400672
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400674
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 400676
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400680
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 400681
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400682
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400684
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400688
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400690
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400692
		, "size": 1
	}, {
		"instruction": "jnz -23"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 400693
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400697
		, "size": 4
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400701
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400703
		, "size": 1
	}]
}, {
	"": "Math.mean(data: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mean"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 243
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "data"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 20
	, "offs": 400704
	, "static": true
	, "const": false
	, "doc": "Returns the mean of the input values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 243
		, "stmt": [{
			"": "return .result := sum(...data) / (signed(data.length));"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 244
			, "stmt": {
				"": ".result := sum(...data) / (signed(data.length))"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "sum(...data) / (signed(data.length))"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 244
					, "left": {
						"": "sum(...data)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 244
						, "args": [{
							"": "...data"
							, "kind": "..."
							, "type": "float64[]"
							, "file": "cmplStd/lib/math.ci"
							, "line": 244
							, "right": {
								"": "data"
								, "kind": ".variable"
								, "type": "float64[]"
								, "file": "cmplStd/lib/math.ci"
								, "line": 244
								, "value": "data"
							}
						}]
					}
					, "right": {
						"": "(signed(data.length))"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 244
						, "args": [{
							"": "signed(data.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 244
							, "args": [{
								"": "data.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 244
								, "left": {
									"": "data"
									, "kind": ".variable"
									, "type": "float64[]"
									, "file": "cmplStd/lib/math.ci"
									, "line": 244
									, "value": "data"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 244
									, "value": "length"
								}
							}]
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 400704
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400705
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400707
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400712
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400713
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400717
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 400719
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 400720
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400721
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400723
		, "size": 1
	}]
}, {
	"": "Math.eval(x: float64, a0: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 248
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 248
		, "args": [{
			"": "a0"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 248
			, "value": "a0"
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 251
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * a1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 251
		, "args": [{
			"": "a0 + x * a1"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 251
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 251
				, "value": "a0"
			}
			, "right": {
				"": "x * a1"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 251
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 251
					, "value": "x"
				}
				, "right": {
					"": "a1"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 251
					, "value": "a1"
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 254
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 254
		, "args": [{
			"": "a0 + x * eval(x, a1, a2)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 254
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 254
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 254
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 254
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 254
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 254
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 254
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 254
						, "value": "a2"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 257
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "a0"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a0"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a1"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a1"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "a2"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a2"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "a3"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a3"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "size": 8
		, "offs": 40
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "(a0 + x * eval(x, a1, a2, a3))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 257
		, "args": [{
			"": "a0 + x * eval(x, a1, a2, a3)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 257
			, "left": {
				"": "a0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 257
				, "value": "a0"
			}
			, "right": {
				"": "x * eval(x, a1, a2, a3)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 257
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 257
					, "value": "x"
				}
				, "right": {
					"": "eval(x, a1, a2, a3)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 257
					, "args": [{
					}, {
						"": "x"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "x"
					}, {
						"": "a1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "a1"
					}, {
						"": "a2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "a2"
					}, {
						"": "a3"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 257
						, "value": "a3"
					}]
				}
			}
		}]
	}
}, {
	"": "Math.eval(x: float64, polynomial: float64[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "eval"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 260
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "polynomial"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "polynomial"
		, "type": "float64[]"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 47
	, "offs": 400728
	, "static": true
	, "const": false
	, "doc": "Return the polynomial evaluated at x using Horner's algorithm"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 261
			, "value": "result"
		}, {
			"": "for (i; i >= 0; i := i - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 262
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 262
				, "value": "i"
			}
			, "test": {
				"": "i >= 0"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 262
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 262
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 262
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 262
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 262
					, "value": "i"
				}
				, "right": {
					"": "i - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 262
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 262
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 262
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 262
				, "stmt": [{
					"": "result := result * x + polynomial[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 263
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 265
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 265
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 400728
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400729
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400731
		, "size": 4
	}, {
		"instruction": "jmp +25"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400735
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400739
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400741
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 400743
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400744
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400746
		, "size": 2
	}, {
		"instruction": "mad.u32 8"
		, "name": "mad.u32"
		, "code": "0x0d"
		, "offs": 400748
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 400752
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 400753
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400754
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400756
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400760
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400762
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 400763
		, "size": 1
	}, {
		"instruction": "jz -25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400764
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400768
		, "size": 4
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400772
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400774
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 269
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "eps"
		, "type": "float32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 400776
	, "static": true
	, "const": false
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 270
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 270
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 270
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 270
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 270
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 271
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 271
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 271
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 271
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 271
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 271
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 271
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 271
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 272
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 272
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 272
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 275
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 276
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 276
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 276
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 276
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 276
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 276
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 276
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 276
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 277
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 277
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 277
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 280
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 280
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400776
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400778
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 400780
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400781
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400785
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400787
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400789
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 400791
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 400792
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400793
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400797
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400802
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400804
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400805
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400809
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400811
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400813
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 400815
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 400816
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400817
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400821
		, "size": 5
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400826
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400828
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400829
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400830
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400832
		, "size": 1
	}]
}, {
	"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cmp"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 284
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "eps"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "eps"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}]
	, "size": 57
	, "offs": 400840
	, "static": true
	, "const": false
	, "doc": "Compare `a` and `b` floating point with `eps` tolerance"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "stmt": [{
			"": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 285
			, "test": {
				"": "a < b"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 285
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 285
					, "value": "a"
				}
				, "right": {
					"": "b"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 285
					, "value": "b"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 285
				, "stmt": [{
					"": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 286
					, "test": {
						"": "eps < (b - a)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 286
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 286
							, "value": "eps"
						}
						, "right": {
							"": "(b - a)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 286
							, "args": [{
								"": "b - a"
								, "kind": "-"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 286
								, "left": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 286
									, "value": "b"
								}
								, "right": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 286
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 286
						, "stmt": [{
							"": "return .result := -1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 287
							, "stmt": {
								"": ".result := -1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "-1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 287
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 287
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 290
				, "stmt": [{
					"": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 291
					, "test": {
						"": "eps < (a - b)"
						, "kind": "<"
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 291
						, "left": {
							"": "eps"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 291
							, "value": "eps"
						}
						, "right": {
							"": "(a - b)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 291
							, "args": [{
								"": "a - b"
								, "kind": "-"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 291
								, "left": {
									"": "a"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 291
									, "value": "a"
								}
								, "right": {
									"": "b"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 291
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 291
						, "stmt": [{
							"": "return .result := +1;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 292
							, "stmt": {
								"": ".result := +1"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "+1"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 292
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/math.ci"
										, "line": 292
										, "value": "1"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := 0;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 295
			, "stmt": {
				"": ".result := 0"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 295
					, "value": "0"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400840
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400842
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400844
		, "size": 1
	}, {
		"instruction": "jz +28"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400845
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400849
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400851
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400853
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 400855
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400856
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400857
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400861
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400866
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400868
		, "size": 1
	}, {
		"instruction": "jmp +24"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 400869
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400873
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400875
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400877
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 400879
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400880
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400881
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 400885
		, "size": 5
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400890
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400892
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 400893
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400894
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 400896
		, "size": 1
	}]
}, {
	"": "Math.sinCos(arg: float64, quad: int32): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinCos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 299
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "quad"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "quad"
		, "type": "int32"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 335
	, "offs": 400904
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "stmt": [{
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 313
			, "value": "x"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 314
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 314
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 314
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 314
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 314
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 314
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 315
				}, {
					"": "quad := quad + 2;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 316
				}]
			}
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 319
			, "value": "y"
		}, {
			"": "x := x * (1) / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 320
		}, {
			"": "if (x > (32764))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 321
			, "test": {
				"": "x > (32764)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 321
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 321
					, "value": "x"
				}
				, "right": {
					"": "(32764)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 321
					, "args": [{
						"": "32764"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 321
						, "value": "32764"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 321
				, "stmt": [{
					"": "e"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 322
					, "value": "e"
				}, {
					"": "y := modf(x, &e);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 323
				}, {
					"": "e := e + (quad);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 324
				}, {
					"": "f"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 326
					, "value": "f"
				}, {
					"": "modf(0.250000 * e, &f);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 327
				}, {
					"": "quad := (e - (4) * f);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 328
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 330
				, "stmt": [{
					"": "k"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 331
					, "value": "k"
				}, {
					"": "y := x - (k);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 332
				}, {
					"": "quad := quad + k;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 333
				}, {
					"": "quad := quad & 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 334
				}]
			}
		}, {
			"": "if (quad & 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 336
			, "test": {
				"": "quad & 1"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/lib/math.ci"
				, "line": 336
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 336
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 336
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 336
				, "stmt": [{
					"": "y := (1) - y;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 337
				}]
			}
		}, {
			"": "if (quad > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 339
			, "test": {
				"": "quad > 1"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 339
				, "left": {
					"": "quad"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 339
					, "value": "quad"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 339
					, "value": "1"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 339
				, "stmt": [{
					"": "y := -y;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 340
				}]
			}
		}, {
			"": "ysq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 343
			, "value": "ysq"
		}, {
			"": "temp1"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 344
			, "value": "temp1"
		}, {
			"": "temp2"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 345
			, "value": "temp2"
		}, {
			"": "return .result := temp1 / temp2;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 346
			, "stmt": {
				"": ".result := temp1 / temp2"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "temp1 / temp2"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 346
					, "left": {
						"": "temp1"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 346
						, "value": "temp1"
					}
					, "right": {
						"": "temp2"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 346
						, "value": "temp2"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400904
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400906
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 400908
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 400909
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400910
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 400914
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400915
		, "size": 2
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 400917
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 400921
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 400923
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400924
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400926
		, "size": 9
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400935
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 400944
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 400945
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400946
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400948
		, "size": 2
	}, {
		"instruction": "load.f64 32764.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400950
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 400959
		, "size": 1
	}, {
		"instruction": "jz +84"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 400960
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 400964
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400965
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 400967
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 400971
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 400976
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 400977
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 400981
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 400983
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 400985
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 400986
		, "size": 1
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 400987
		, "size": 1
	}, {
		"instruction": "load.f64 0.250000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 400988
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 400997
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 400999
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401000
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401004
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 401009
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401010
		, "size": 4
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401014
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401018
		, "size": 2
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401020
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401029
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401031
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 401032
		, "size": 1
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 401033
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401034
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401036
		, "size": 4
	}, {
		"instruction": "jmp +32"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401040
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401044
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 401046
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401047
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401049
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 401051
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 401052
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401053
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401055
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401057
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 401059
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401060
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401062
		, "size": 2
	}, {
		"instruction": "b32.and 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 401064
		, "size": 2
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 401066
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401068
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401072
		, "size": 2
	}, {
		"instruction": "b32.and 0x01"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 401074
		, "size": 2
	}, {
		"instruction": "jz +18"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401076
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401080
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401089
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 401091
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401092
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401094
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401096
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 401101
		, "size": 1
	}, {
		"instruction": "jz +5"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401102
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401106
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401107
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401109
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401111
		, "size": 1
	}, {
		"instruction": "load.f64 145.968841"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401112
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401121
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401123
		, "size": 1
	}, {
		"instruction": "load.f64 -13847.272500"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401124
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401133
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401134
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401136
		, "size": 1
	}, {
		"instruction": "load.f64 440103.053538"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401137
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401146
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401147
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401149
		, "size": 1
	}, {
		"instruction": "load.f64 -4942908.100903"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401150
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401159
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401160
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401162
		, "size": 1
	}, {
		"instruction": "load.f64 13578840.978774"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401163
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401172
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401173
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401175
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401176
		, "size": 2
	}, {
		"instruction": "load.f64 132.653491"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401178
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401187
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401188
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401190
		, "size": 1
	}, {
		"instruction": "load.f64 9463.096102"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401191
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401200
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401201
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401203
		, "size": 1
	}, {
		"instruction": "load.f64 408179.225234"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401204
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401213
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401214
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401216
		, "size": 1
	}, {
		"instruction": "load.f64 8644558.652923"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401217
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401226
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401227
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401229
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401231
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401232
		, "size": 2
	}, {
		"instruction": "inc.sp(-40)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401234
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401238
		, "size": 1
	}]
}, {
	"": "Math.sin(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 350
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 350
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 350
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the sine of the input"
	, "ast": {
		"": "sinCos(arg, 0)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 350
		, "args": [{
		}, {
			"": "arg"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 350
			, "value": "arg"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 350
			, "value": "0"
		}]
	}
}, {
	"": "Math.cos(arg: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 353
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 353
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 353
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the cosine of the input"
	, "ast": {
		"": "sinCos(abs(arg), 1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 353
		, "args": [{
		}, {
			"": "abs(arg)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 353
			, "args": [{
				"": "arg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 353
				, "value": "arg"
			}]
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 353
			, "value": "1"
		}]
	}
}, {
	"": "Math.tan(arg: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "tan"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 356
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 356
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "arg"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "arg"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 356
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 378
	, "offs": 401240
	, "static": true
	, "const": false
	, "doc": "Returns the tangent of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 356
		, "stmt": [{
			"": "complement"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 369
			, "value": "complement"
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 370
			, "value": "negate"
		}, {
			"": "if (arg < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 372
			, "test": {
				"": "arg < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 372
				, "left": {
					"": "arg"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 372
					, "value": "arg"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 372
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 372
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 372
				, "stmt": [{
					"": "arg := -arg;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 373
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 374
				}]
			}
		}, {
			"": "arg := (2) * arg / PIO2;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 376
		}, {
			"": "e"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 378
			, "value": "e"
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 379
			, "value": "x"
		}, {
			"": "i"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 380
			, "value": "i"
		}, {
			"": "if (i == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 382
			, "test": {
				"": "i == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 382
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 382
					, "value": "i"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 382
					, "value": "0"
				}
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 383
				, "stmt": [{
					"": "if (i == 1)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 383
					, "test": {
						"": "i == 1"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 383
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 383
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 383
							, "value": "1"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 383
						, "stmt": [{
							"": "x := (1) - x;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 384
						}, {
							"": "complement := true;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 385
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 387
						, "stmt": [{
							"": "if (i == 2)"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 387
							, "test": {
								"": "i == 2"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/lib/math.ci"
								, "line": 387
								, "left": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 387
									, "value": "i"
								}
								, "right": {
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 387
									, "value": "2"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/math.ci"
								, "line": 387
								, "stmt": [{
									"": "negate := !negate;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 388
								}, {
									"": "complement := true;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 389
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/math.ci"
								, "line": 391
								, "stmt": [{
									"": "if (i == 3)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/lib/math.ci"
									, "line": 391
									, "test": {
										"": "i == 3"
										, "kind": "=="
										, "type": "bool"
										, "file": "cmplStd/lib/math.ci"
										, "line": 391
										, "left": {
											"": "i"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/math.ci"
											, "line": 391
											, "value": "i"
										}
										, "right": {
											"": "3"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "cmplStd/lib/math.ci"
											, "line": 391
											, "value": "3"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/lib/math.ci"
										, "line": 391
										, "stmt": [{
											"": "x := (1) - x;"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/math.ci"
											, "line": 392
										}, {
											"": "negate := !negate;"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/math.ci"
											, "line": 393
										}]
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "xsq"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 396
			, "value": "xsq"
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 397
			, "value": "result"
		}, {
			"": "result := result / (((xsq + q2) * xsq + q1) * xsq + q0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 398
		}, {
			"": "if (complement)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 400
			, "test": {
				"": "complement"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 400
				, "value": "complement"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 400
				, "stmt": [{
					"": "if (result == (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 401
					, "test": {
						"": "result == (0)"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/math.ci"
						, "line": 401
						, "left": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 401
							, "value": "result"
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 401
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/math.ci"
								, "line": 401
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/math.ci"
						, "line": 401
						, "stmt": [{
							"": "return .result := nan;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/math.ci"
							, "line": 402
							, "stmt": {
								"": ".result := nan"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "nan"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 402
									, "value": "nan"
								}
							}
						}]
					}
				}, {
					"": "result := (1) / result;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 404
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 406
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 406
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 406
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 407
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 407
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 407
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 409
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 409
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401240
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401241
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401242
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401244
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 401245
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401246
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401250
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401252
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401253
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401255
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401260
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401264
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401265
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401274
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401276
		, "size": 1
	}, {
		"instruction": "load.f64 1.570796"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401277
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401286
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401287
		, "size": 2
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 401289
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401290
		, "size": 2
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401292
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 401296
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 401301
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401302
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401306
		, "size": 2
	}, {
		"instruction": "f64.2i32"
		, "name": "f64.2i32"
		, "code": "0x8a"
		, "offs": 401308
		, "size": 1
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401309
		, "size": 5
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 401314
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401315
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401317
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 401318
		, "size": 1
	}, {
		"instruction": "jnz +118"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 401319
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401323
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401325
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 401330
		, "size": 1
	}, {
		"instruction": "jz +32"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401331
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401335
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401344
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 401346
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401347
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401349
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401354
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401358
		, "size": 1
	}, {
		"instruction": "jmp +78"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401359
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401363
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401365
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 401370
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401371
		, "size": 4
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401375
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401379
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 401380
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401381
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401385
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401386
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401391
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401395
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401396
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 401400
		, "size": 2
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401402
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 401407
		, "size": 1
	}, {
		"instruction": "jz +29"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401408
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401412
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401421
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 401423
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401424
		, "size": 2
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401426
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401430
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 401431
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401432
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401436
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401437
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401439
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401441
		, "size": 1
	}, {
		"instruction": "load.f64 0.000034"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401442
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401451
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401453
		, "size": 1
	}, {
		"instruction": "load.f64 0.034226"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401454
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401463
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401464
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401466
		, "size": 1
	}, {
		"instruction": "load.f64 -15.506857"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401467
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401476
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401477
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401479
		, "size": 1
	}, {
		"instruction": "load.f64 1055.970902"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401480
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401489
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401490
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401492
		, "size": 1
	}, {
		"instruction": "load.f64 -13068.202648"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401493
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401502
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401503
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401505
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401506
		, "size": 2
	}, {
		"instruction": "load.f64 -155.503316"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401508
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401517
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401518
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401520
		, "size": 1
	}, {
		"instruction": "load.f64 4765.751363"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401521
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401530
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401531
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401533
		, "size": 1
	}, {
		"instruction": "load.f64 -16638.952389"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401534
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401543
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401544
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401545
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401549
		, "size": 1
	}, {
		"instruction": "jz +42"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401550
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401554
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401556
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 401557
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401558
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401562
		, "size": 9
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401571
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401573
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401577
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401578
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401587
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401589
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401590
		, "size": 2
	}, {
		"instruction": "load.sp(+36)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401592
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401596
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401597
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401601
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401603
		, "size": 1
	}, {
		"instruction": "set.x64 sp(16)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401604
		, "size": 2
	}, {
		"instruction": "inc.sp(-44)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401606
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401610
		, "size": 1
	}, {
		"instruction": "set.x64 sp(14)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401611
		, "size": 2
	}, {
		"instruction": "inc.sp(-36)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401613
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401617
		, "size": 1
	}]
}, {
	"": "Math.sinh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "sinh"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 413
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 413
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 413
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 241
	, "offs": 401624
	, "static": true
	, "const": false
	, "doc": "Returns the hyperbolic sine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 413
		, "stmt": [{
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 425
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 426
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 426
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 426
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 426
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 426
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 426
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 427
				}, {
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 428
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 431
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 431
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 431
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 431
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 431
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 431
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 432
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 432
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 432
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 432
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 432
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 432
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 435
			, "value": "result"
		}, {
			"": "if (x > 0.500000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 436
			, "test": {
				"": "x > 0.500000"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 436
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 436
					, "value": "x"
				}
				, "right": {
					"": "0.500000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 436
					, "value": "0.500000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 436
				, "stmt": [{
					"": "result := (float64.exp(x) - float64.exp(-x)) / (2);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 437
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 439
				, "stmt": [{
					"": "sq"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 440
					, "value": "sq"
				}, {
					"": "result := (((P3 * sq + P2) * sq + P1) * sq + P0) * x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 441
				}, {
					"": "result := result / (((sq + Q2) * sq + Q1) * sq + Q0);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 442
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 445
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 445
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 445
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 446
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 446
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 446
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 448
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 448
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401624
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401625
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401627
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 401628
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401629
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401633
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401635
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401636
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401638
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401643
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401647
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401648
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401650
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 401659
		, "size": 1
	}, {
		"instruction": "jz +27"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401660
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401664
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401666
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401670
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401679
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401680
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401682
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401686
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401687
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401688
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401690
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 401699
		, "size": 1
	}, {
		"instruction": "jz +34"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401700
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401704
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401706
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401710
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401712
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401713
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 401717
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401718
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401727
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401728
		, "size": 2
	}, {
		"instruction": "jmp +109"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 401730
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401734
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401736
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401738
		, "size": 1
	}, {
		"instruction": "load.f64 -26.305632"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401739
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401748
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401750
		, "size": 1
	}, {
		"instruction": "load.f64 -2894.211356"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401751
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401760
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401761
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401763
		, "size": 1
	}, {
		"instruction": "load.f64 -89912.720220"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401764
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401773
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401774
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401776
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401777
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401786
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401787
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401789
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401790
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401792
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401794
		, "size": 2
	}, {
		"instruction": "load.f64 -173.678954"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401796
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401805
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401806
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401808
		, "size": 1
	}, {
		"instruction": "load.f64 15215.173788"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401809
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401818
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401819
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 401821
		, "size": 1
	}, {
		"instruction": "load.f64 -630767.364050"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401822
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401831
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401832
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401833
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401835
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401839
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 401843
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401844
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401848
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401850
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401851
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401853
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401857
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401858
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 401860
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401864
		, "size": 1
	}]
}, {
	"": "Math.cosh(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "cosh"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 452
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 452
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 452
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 75
	, "offs": 401872
	, "static": true
	, "const": false
	, "doc": "Returns the hyperbolic cosine of the input"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 452
		, "stmt": [{
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 453
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 453
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 453
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 453
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 453
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 453
				, "stmt": [{
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 454
				}]
			}
		}, {
			"": "if (x > (21))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 456
			, "test": {
				"": "x > (21)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 456
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 456
					, "value": "x"
				}
				, "right": {
					"": "(21)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 456
					, "args": [{
						"": "21"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 456
						, "value": "21"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 456
				, "stmt": [{
					"": "return .result := float64.exp(x) / (2);"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 457
					, "stmt": {
						"": ".result := float64.exp(x) / (2)"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "float64.exp(x) / (2)"
							, "kind": "/"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 457
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 457
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 457
									, "value": "x"
								}]
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 457
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/math.ci"
									, "line": 457
									, "value": "2"
								}]
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := (float64.exp(x) + float64.exp(-x)) / (2);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 459
			, "stmt": {
				"": ".result := (float64.exp(x) + float64.exp(-x)) / (2)"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "(float64.exp(x) + float64.exp(-x)) / (2)"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 459
					, "left": {
						"": "(float64.exp(x) + float64.exp(-x))"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 459
						, "args": [{
							"": "float64.exp(x) + float64.exp(-x)"
							, "kind": "+"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 459
							, "left": {
								"": "float64.exp(x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 459
								, "args": [{
									"": "x"
									, "kind": ".variable"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 459
									, "value": "x"
								}]
							}
							, "right": {
								"": "float64.exp(-x)"
								, "kind": "()"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 459
								, "args": [{
									"": "-x"
									, "kind": "-"
									, "type": "float64"
									, "file": "cmplStd/lib/math.ci"
									, "line": 459
									, "right": {
										"": "x"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "cmplStd/lib/math.ci"
										, "line": 459
										, "value": "x"
									}
								}]
							}
						}]
					}
					, "right": {
						"": "(2)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/lib/math.ci"
						, "line": 459
						, "args": [{
							"": "2"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/math.ci"
							, "line": 459
							, "value": "2"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401872
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401874
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 401875
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401876
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401880
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401882
		, "size": 1
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401883
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401885
		, "size": 2
	}, {
		"instruction": "load.f64 21.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401887
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 401896
		, "size": 1
	}, {
		"instruction": "jz +23"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401897
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401901
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401903
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401907
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401916
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401917
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401919
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401920
		, "size": 2
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401922
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401926
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401928
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 401929
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 401933
		, "size": 1
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401934
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 401943
		, "size": 1
	}, {
		"instruction": "set.x64 sp(5)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401944
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401946
		, "size": 1
	}]
}, {
	"": "Math.asin(x: float64): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "asin"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 467
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 467
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 467
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 173
	, "offs": 401952
	, "static": true
	, "const": false
	, "doc": "Returns the arc sine of the input\n Special cases are:\n   Asin(±0) = ±0\n   Asin(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math.ci"
		, "line": 467
		, "stmt": [{
			"": "if (x == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 468
			, "test": {
				"": "x == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 468
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 468
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 468
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 468
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 468
				, "stmt": [{
					"": "return .result := x;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 470
					, "stmt": {
						"": ".result := x"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "x"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 470
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"": "negate"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/lib/math.ci"
			, "line": 473
			, "value": "negate"
		}, {
			"": "if (x < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 474
			, "test": {
				"": "x < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 474
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 474
					, "value": "x"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 474
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 474
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 474
				, "stmt": [{
					"": "negate := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 475
				}, {
					"": "x := -x;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 476
				}]
			}
		}, {
			"": "if (x > (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 479
			, "test": {
				"": "x > (1)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 479
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 479
					, "value": "x"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 479
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 479
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 479
				, "stmt": [{
					"": "return .result := nan;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 481
					, "stmt": {
						"": ".result := nan"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "nan"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 481
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 484
			, "value": "result"
		}, {
			"": "if (x > 0.700000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 485
			, "test": {
				"": "x > 0.700000"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 485
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 485
					, "value": "x"
				}
				, "right": {
					"": "0.700000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 485
					, "value": "0.700000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 485
				, "stmt": [{
					"": "result := pi / (2) - float64.atan2(result, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 486
				}]
			}
			, "else": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 488
				, "stmt": [{
					"": "result := float64.atan2(x, result);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 489
				}]
			}
		}, {
			"": "if (negate)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 492
			, "test": {
				"": "negate"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/lib/math.ci"
				, "line": 492
				, "value": "negate"
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math.ci"
				, "line": 492
				, "stmt": [{
					"": "return .result := -result;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math.ci"
					, "line": 493
					, "stmt": {
						"": ".result := -result"
						, "kind": ":="
						, "type": "float64"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "float64"
							, "value": ".result"
						}
						, "right": {
							"": "-result"
							, "kind": "-"
							, "type": "float64"
							, "file": "cmplStd/lib/math.ci"
							, "line": 493
							, "right": {
								"": "result"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/math.ci"
								, "line": 493
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math.ci"
			, "line": 495
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 495
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401952
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401954
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 401955
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401956
		, "size": 4
	}, {
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 401960
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 401963
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 401964
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401965
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 401967
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 401968
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 401969
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 401973
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 401978
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 401982
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401983
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 401985
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 401986
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 401988
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 401990
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 401999
		, "size": 1
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402000
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402004
		, "size": 9
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402013
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402015
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402019
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402020
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402029
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402031
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402033
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 402034
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402035
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402039
		, "size": 2
	}, {
		"instruction": "load.f64 0.700000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402041
		, "size": 9
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 402050
		, "size": 1
	}, {
		"instruction": "jz +38"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402051
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402055
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402064
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402073
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402074
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(8)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402076
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402078
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 402082
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402083
		, "size": 2
	}, {
		"instruction": "jmp +14"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 402085
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402089
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402091
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402093
		, "size": 4
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402097
		, "size": 2
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 402099
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 402103
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402104
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402108
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 402110
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402111
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402113
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402117
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402118
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402120
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402124
		, "size": 1
	}]
}, {
	"": "Math.acos(x: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "acos"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 502
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 502
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 502
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns the arc cosine of the input\n Special case is:\n   Acos(x) = NaN if x < -1 or x > 1"
	, "ast": {
		"": "(pi / (2) - asin(x))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 502
		, "args": [{
			"": "pi / (2) - asin(x)"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 502
			, "left": {
				"": "pi / (2)"
				, "kind": "/"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 502
				, "left": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 502
					, "value": "pi"
				}
				, "right": {
					"": "(2)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 502
					, "args": [{
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 502
						, "value": "2"
					}]
				}
			}
			, "right": {
				"": "asin(x)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 502
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 502
					, "value": "x"
				}]
			}
		}]
	}
}, {
	"": "Math.radians(degrees: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "radians"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 526
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 526
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "degrees"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "degrees"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 526
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to radians from degrees."
	, "ast": {
		"": "float64(degrees * pi / (180))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 526
		, "args": [{
			"": "degrees * pi / (180)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 526
			, "left": {
				"": "degrees * pi"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 526
				, "left": {
					"": "degrees"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 526
					, "value": "degrees"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 526
					, "value": "pi"
				}
			}
			, "right": {
				"": "(180)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 526
				, "args": [{
					"": "180"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/math.ci"
					, "line": 526
					, "value": "180"
				}]
			}
		}]
	}
}, {
	"": "Math.degrees(radians: float64): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "degrees"
	, "owner": "Math"
	, "type": "function"
	, "file": "cmplStd/lib/math.ci"
	, "line": 529
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 529
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "radians"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "radians"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 529
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Converts the input to degrees from radians."
	, "ast": {
		"": "float64(radians * (180) / pi)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math.ci"
		, "line": 529
		, "args": [{
			"": "radians * (180) / pi"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 529
			, "left": {
				"": "radians * (180)"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 529
				, "left": {
					"": "radians"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 529
					, "value": "radians"
				}
				, "right": {
					"": "(180)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math.ci"
					, "line": 529
					, "args": [{
						"": "180"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math.ci"
						, "line": 529
						, "value": "180"
					}]
				}
			}
			, "right": {
				"": "pi"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math.ci"
				, "line": 529
				, "value": "pi"
			}
		}]
	}
}, {
	"": "Complex"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Complex"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 2
	, "size": 16
	, "offs": 131984
	, "static": true
	, "const": true
	, "doc": "Complex number"
}, {
	"": "Complex.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 5
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "The real component of a complex number."
}, {
	"": "Complex.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "Complex"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 8
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "The imaginary component of a complex number."
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 8
		, "value": "0"
	}
}, {
	"": "Complex(re: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 402128
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 24
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 25
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 26
					}, {
						"": ".result.im := (0);"
						, "kind": ";"
						, "type": "void"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(3, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 402128
		, "size": 3
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 402131
		, "size": 1
	}, {
		"instruction": "set.x64 sp(7)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402132
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402134
		, "size": 1
	}]
}, {
	"": "Complex(re: float64, im: float64): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "Complex"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "re"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "re"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "im"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "im"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 402136
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 31
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 32
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := re;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 33
					}, {
						"": ".result.im := im;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 34
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 402136
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 402139
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402142
		, "size": 1
	}]
}, {
	"": "neg(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 59
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(-a.re, -a.im);"
	, "ast": {
		"": "Complex(emit(struct(a), neg.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 59
		, "args": [{
			"": "emit(struct(a), neg.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 59
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "a"
				}]
			}, {
				"": "neg.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "neg"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 59
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re + b.re, a.im + b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 62
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 62
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 62
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "add(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 64
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re + b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 64
		, "args": [{
		}, {
			"": "a.re + b"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 64
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 64
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 64
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "im"
			}
		}]
	}
}, {
	"": "add(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a + b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a + b.re"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 66
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 66
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 66
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re - b.re, a.im - b.im);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 69
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re - b, a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "a.re - b"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 71
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 71
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "b"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 71
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "im"
			}
		}]
	}
}, {
	"": "sub(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a - b.re, b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 73
		, "args": [{
		}, {
			"": "a - b.re"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 73
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 73
					, "value": "re"
				}
			}
		}, {
			"": "b.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 73
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "b"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "im"
			}
		}]
	}
}, {
	"": "mul(a: Complex, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 76
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public: Complex(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re);"
	, "ast": {
		"": "Complex(emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 76
		, "args": [{
			"": "emit(struct(a), struct(b), swz.x2, mul.p2d, add.f64, struct(a), struct(b), mul.p2d, swz.x2, sub.f64)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 76
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "b"
				}]
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "x2"
				}
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "p2d"
				}
			}, {
				"": "add.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 77
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "add"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 77
					, "value": "f64"
				}
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "p2d"
				}
			}, {
				"": "swz.x2"
				, "kind": "."
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "swz"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "swz"
				}
				, "right": {
					"": "x2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "x2"
				}
			}, {
				"": "sub.f64"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 78
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "sub"
				}
				, "right": {
					"": "f64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 78
					, "value": "f64"
				}
			}]
		}]
	}
}, {
	"": "mul(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 81
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re * b, a.im * b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "a.re * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "re"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}, {
			"": "a.im * b"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 81
			, "left": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 81
					, "value": "im"
				}
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "b"
			}
		}]
	}
}, {
	"": "mul(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 83
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a * b.re, a * b.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 83
		, "args": [{
		}, {
			"": "a * b.re"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "re"
				}
			}
		}, {
			"": "a * b.im"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 83
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "a"
			}
			, "right": {
				"": "b.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "b"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 83
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "div(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 86
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 139
	, "offs": 402144
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 86
		, "stmt": [{
			"": "if (Math.abs(b.re) >= Math.abs(b.im))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 90
			, "test": {
				"": "Math.abs(b.re) >= Math.abs(b.im)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 90
				, "left": {
					"": "Math.abs(b.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "re"
						}
					}]
				}
				, "right": {
					"": "Math.abs(b.im)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 90
					, "args": [{
						"": "b.im"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 90
						, "left": {
							"": "b"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "b"
						}
						, "right": {
							"": "im"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 90
							, "value": "im"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 90
				, "stmt": [{
					"": "r"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 91
					, "value": "r"
				}, {
					"": "den"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 92
					, "value": "den"
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 93
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "Complex"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.re := (a.re + r * a.im) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Complex.ci"
								, "line": 94
							}, {
								"": ".result.im := (a.im - r * a.re) / den;"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Complex.ci"
								, "line": 95
							}]
						}
					}
				}]
			}
		}, {
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 98
			, "value": "r"
		}, {
			"": "den"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 99
			, "value": "den"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 100
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := (a.re * r + a.im) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 101
					}, {
						"": ".result.im := (a.im * r - a.re) / den;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 102
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402144
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402146
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 402148
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 402149
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402150
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402154
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 402156
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 402157
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402161
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402163
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402165
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402167
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 402169
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 402170
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402171
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402175
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 402177
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 402178
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402182
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402184
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 402186
		, "size": 1
	}, {
		"instruction": "jnz +52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 402187
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402191
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402193
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402195
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402196
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402198
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402200
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402202
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 402203
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402204
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402206
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(15)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402208
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402210
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 402211
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402212
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402214
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402215
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402217
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402219
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402221
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402223
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 402224
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402225
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402227
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402228
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402230
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402234
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402235
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402239
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402241
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402243
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402244
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402246
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402248
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402250
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 402251
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402252
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402254
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402256
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402257
		, "size": 2
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 402259
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402260
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402262
		, "size": 1
	}, {
		"instruction": "set.x64 sp(15)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402263
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402265
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402267
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402269
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402270
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 402272
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402273
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402275
		, "size": 1
	}, {
		"instruction": "set.x64 sp(17)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402276
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402278
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402282
		, "size": 1
	}]
}, {
	"": "div(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 107
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 107
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 107
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 107
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 107
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float64, b: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 109
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "a"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "size": 16
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(Complex(a), b)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 109
		, "args": [{
		}, {
			"": "Complex(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 109
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 109
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 109
			, "value": "b"
		}]
	}
}, {
	"": "abs(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "abs"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.sqrt(a.re * a.re + a.im * a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 112
		, "args": [{
			"": "a.re * a.re + a.im * a.im"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 112
			, "left": {
				"": "a.re * a.re"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
				, "right": {
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "re"
					}
				}
			}
			, "right": {
				"": "a.im * a.im"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "left": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
				, "right": {
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 112
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 112
						, "value": "im"
					}
				}
			}
		}]
	}
}, {
	"": "arg(a: Complex): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "arg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 114
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "float64.atan2(a.re, a.im)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 114
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "re"
			}
		}, {
			"": "a.im"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 114
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "a"
			}
			, "right": {
				"": "im"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "im"
			}
		}]
	}
}, {
	"": "inv(a: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "inv"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 117
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 31
	, "offs": 402288
	, "static": true
	, "const": false
	, "doc": "Reciprocal of a complex number (1 / a)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 117
		, "stmt": [{
			"": "d"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 118
			, "value": "d"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 119
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := +a.re / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 120
					}, {
						"": ".result.im := -a.im / d;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 121
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402288
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402290
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402292
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402293
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(7)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402295
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402297
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 402298
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402299
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402301
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402303
		, "size": 1
	}, {
		"instruction": "set.x64 sp(9)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402304
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402306
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 402308
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402309
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 402311
		, "size": 1
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402312
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402314
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402318
		, "size": 1
	}]
}, {
	"": "conj(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "conj"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(a.re, -a.im)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 126
		, "args": [{
		}, {
			"": "a.re"
			, "kind": "."
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 126
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "a"
			}
			, "right": {
				"": "re"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "re"
			}
		}, {
			"": "-a.im"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 126
			, "right": {
				"": "a.im"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 126
					, "value": "a"
				}
				, "right": {
					"": "im"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 126
					, "value": "im"
				}
			}
		}]
	}
}, {
	"": "exp(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "exp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 129
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.exp(a.re) * float64.cos(a.im), float64.exp(a.re) * float64.sin(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 129
		, "args": [{
		}, {
			"": "float64.exp(a.re) * float64.cos(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.cos(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}, {
			"": "float64.exp(a.re) * float64.sin(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 129
			, "left": {
				"": "float64.exp(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "float64.sin(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 129
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 129
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "log(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "log"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 132
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.log(abs(a)), arg(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 132
		, "args": [{
		}, {
			"": "float64.log(abs(a))"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "abs(a)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 132
					, "value": "a"
				}]
			}]
		}, {
			"": "arg(a)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 132
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "value": "a"
			}]
		}]
	}
}, {
	"": "pow(a: Complex, b: Complex): Complex"
	, "kind": "function"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 135
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "val"
		, "name": "b"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 100
	, "offs": 402320
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 135
		, "stmt": [{
			"": "r"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 136
			, "value": "r"
		}, {
			"": "t"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 137
			, "value": "t"
		}, {
			"": "u"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 138
			, "value": "u"
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 139
			, "value": "v"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 140
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "Complex"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.re := v * float64.cos(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 141
					}, {
						"": ".result.im := v * float64.sin(u);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 142
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x128 sp(5)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 402320
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402322
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402324
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402326
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402327
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402329
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402331
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 402332
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402333
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402337
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402339
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(7)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 402343
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402345
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402347
		, "size": 2
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402349
		, "size": 4
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402353
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402355
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(5)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402359
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402361
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402363
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402364
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402366
		, "size": 2
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402368
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402372
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 402373
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402374
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402376
		, "size": 2
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402378
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402382
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 402384
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402385
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402387
		, "size": 1
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402388
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402392
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402393
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402395
		, "size": 2
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402397
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402401
		, "size": 1
	}, {
		"instruction": "set.x64 sp(19)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402402
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402404
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 402406
		, "size": 2
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402408
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 402412
		, "size": 1
	}, {
		"instruction": "set.x64 sp(21)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 402413
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402415
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402419
		, "size": 1
	}]
}, {
	"": "pow(a: Complex, b: float64): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "pow"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 146
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "b"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "pow(a, Complex(b))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 146
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 146
			, "value": "a"
		}, {
			"": "Complex(b)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 146
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 146
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sin(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sin"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 149
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.sin(a.re) * Math.cosh(a.im), +float64.cos(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 149
		, "args": [{
		}, {
			"": "float64.sin(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "float64.sin(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}, {
			"": "+float64.cos(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 149
			, "left": {
				"": "+float64.cos(a.re)"
				, "kind": "+"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "right": {
					"": "float64.cos(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 149
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 149
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 149
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 149
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "cos(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cos"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 151
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(float64.cos(a.re) * Math.cosh(a.im), -float64.sin(a.re) * Math.sinh(a.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 151
		, "args": [{
		}, {
			"": "float64.cos(a.re) * Math.cosh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "float64.cos(a.re)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.re"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "re"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "re"
					}
				}]
			}
			, "right": {
				"": "Math.cosh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}, {
			"": "-float64.sin(a.re) * Math.sinh(a.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 151
			, "left": {
				"": "-float64.sin(a.re)"
				, "kind": "-"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "right": {
					"": "float64.sin(a.re)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "args": [{
						"": "a.re"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "left": {
							"": "a"
							, "kind": ".variable"
							, "type": "Complex"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 151
							, "value": "a"
						}
						, "right": {
							"": "re"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/math/Complex.ci"
							, "line": 151
							, "value": "re"
						}
					}]
				}
			}
			, "right": {
				"": "Math.sinh(a.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "args": [{
					"": "a.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 151
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "a"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 151
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "tan(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tan"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 164
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sin(a), cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 164
		, "args": [{
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 164
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "a"
			}]
		}]
	}
}, {
	"": "cot(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cot"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 166
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(cos(a), sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 166
		, "args": [{
		}, {
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}, {
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 166
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sinh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sinh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 169
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 169
		, "args": [{
		}, {
			"": "sub(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 169
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 169
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 169
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 169
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 169
			, "value": "2"
		}]
	}
}, {
	"": "cosh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cosh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 171
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(a), exp(neg(a))), 2)"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 171
		, "args": [{
		}, {
			"": "add(exp(a), exp(neg(a)))"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 171
			, "args": [{
			}, {
				"": "exp(a)"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 171
					, "value": "a"
				}]
			}, {
				"": "exp(neg(a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "args": [{
					"": "neg(a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 171
					, "args": [{
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 171
						, "value": "a"
					}]
				}]
			}]
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 171
			, "value": "2"
		}]
	}
}, {
	"": "tanh(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "tanh"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 173
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(sub(exp(mul(2, a)), 1), add(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 173
		, "args": [{
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 173
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 173
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 173
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "1"
			}]
		}]
	}
}, {
	"": "coth(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "coth"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 175
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "div(add(exp(mul(2, a)), 1), sub(exp(mul(2, a)), 1))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 175
		, "args": [{
		}, {
			"": "add(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}, {
			"": "sub(exp(mul(2, a)), 1)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 175
			, "args": [{
			}, {
				"": "exp(mul(2, a))"
				, "kind": "()"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "args": [{
					"": "mul(2, a)"
					, "kind": "()"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 175
					, "args": [{
					}, {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "2"
					}, {
						"": "a"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 175
						, "value": "a"
					}]
				}]
			}, {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "1"
			}]
		}]
	}
}, {
	"": "sec(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sec"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 178
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cos(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 178
		, "args": [{
			"": "cos(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 178
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 178
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csc(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csc"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 180
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sin(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 180
		, "args": [{
			"": "sin(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 180
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 180
				, "value": "a"
			}]
		}]
	}
}, {
	"": "sech(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sech"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 182
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(cosh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 182
		, "args": [{
			"": "cosh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 182
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 182
				, "value": "a"
			}]
		}]
	}
}, {
	"": "csch(a: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "csch"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 184
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "inv(sinh(a))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 184
		, "args": [{
			"": "sinh(a)"
			, "kind": "()"
			, "type": "Complex"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 184
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 184
				, "value": "a"
			}]
		}]
	}
}, {
	"": "toCartesian(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toCartesian"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 187
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(x.re * float64.cos(x.im), x.re * float64.sin(x.im))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 187
		, "args": [{
		}, {
			"": "x.re * float64.cos(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.cos(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}, {
			"": "x.re * float64.sin(x.im)"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 187
			, "left": {
				"": "x.re"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "left": {
					"": "x"
					, "kind": ".variable"
					, "type": "Complex"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "x"
				}
				, "right": {
					"": "re"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "value": "re"
				}
			}
			, "right": {
				"": "float64.sin(x.im)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "args": [{
					"": "x.im"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/lib/math/Complex.ci"
					, "line": 187
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "Complex"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "x"
					}
					, "right": {
						"": "im"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/math/Complex.ci"
						, "line": 187
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"": "toPolar(x: Complex): Complex"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toPolar"
	, "type": "function"
	, "file": "cmplStd/lib/math/Complex.ci"
	, "line": 189
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "val"
		, "name": "x"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "Complex(abs(x), arg(x))"
		, "kind": "()"
		, "type": "Complex"
		, "file": "cmplStd/lib/math/Complex.ci"
		, "line": 189
		, "args": [{
		}, {
			"": "abs(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}, {
			"": "arg(x)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Complex.ci"
			, "line": 189
			, "args": [{
				"": "x"
				, "kind": ".variable"
				, "type": "Complex"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "x"
			}]
		}]
	}
}, {
	"": "vec4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec4f"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 2
	, "size": 16
	, "offs": 155352
	, "static": true
	, "const": true
	, "doc": "A 4d vector (4x float32)"
}, {
	"": "vec4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec4f"
	, "type": "vec4f.<?>"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 141
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec4f.<?>.x"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "x"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 5
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec4f.<?>.y"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "y"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 7
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec4f.<?>.z"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "z"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 9
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
}, {
	"": "vec4f.<?>.w"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "w"
	, "owner": "vec4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 11
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
}, {
	"": "vec4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 5
		, "value": "x"
	}
}, {
	"": "vec4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 7
		, "value": "y"
	}
}, {
	"": "vec4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 9
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Z component of the vector"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 9
		, "value": "z"
	}
}, {
	"": "vec4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "vec4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 11
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "W component of the vector"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 11
		, "value": "w"
	}
}, {
	"": "vec4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec4f"
	, "type": "float32[4]"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 14
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with given x, y, z, w components"
	, "ast": {
		"": "vec4f(emit(struct(w), struct(z), struct(y), struct(x)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 26
		, "args": [{
			"": "emit(struct(w), struct(z), struct(y), struct(x))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 26
			, "args": [{
			}, {
				"": "struct(w)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "w"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "w"
				}]
			}, {
				"": "struct(z)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "z"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "z"
				}]
			}, {
				"": "struct(y)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "y"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "y"
				}]
			}, {
				"": "struct(x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "args": [{
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 26
					, "value": "x"
				}]
			}]
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32, z: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 29
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "z"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "z"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with  (x: x, y: y, z: z, w: 1)"
	, "ast": {
		"": "vec4f(x, y, z, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "z"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(x: float32, y: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "y"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize with (x: x, y: y, z: 0, w: 1)"
	, "ast": {
		"": "vec4f(x, y, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "y"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 32
			, "value": "1.000000"
		}]
	}
}, {
	"": "vec4f(xyz: vec4f, w: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 35
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "xyz"
		, "kind": "variable"
		, "cast": "val"
		, "name": "xyz"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "w"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "w"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z components using the components form the given vector, and w with the given value"
	, "ast": {
		"": "vec4f(xyz.x, xyz.y, xyz.z, w)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "xyz.x"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "x"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "x"
			}
		}, {
			"": "xyz.y"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "y"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "y"
			}
		}, {
			"": "xyz.z"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "left": {
				"": "xyz"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "xyz"
			}
			, "right": {
				"": "z"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "z"
			}
		}, {
			"": "w"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 35
			, "value": "w"
		}]
	}
}, {
	"": "vec4f(val: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "vec4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "val"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "val"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Initialize x, y, z, w components with the given scalar value"
	, "ast": {
		"": "vec4f(val, val, val, val)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 38
		, "args": [{
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}, {
			"": "val"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 38
			, "value": "val"
		}]
	}
}, {
	"": "neg(rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "neg"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 69
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Returns a negated copy of the vector."
	, "ast": {
		"": "vec4f(emit(struct(rhs), neg.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 69
		, "args": [{
			"": "emit(struct(rhs), neg.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 69
			, "args": [{
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "rhs"
				}]
			}, {
				"": "neg.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "left": {
					"": "neg"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "neg"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 69
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 71
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), add.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 71
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), add.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 71
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "rhs"
				}]
			}, {
				"": "add.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "add"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 71
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), sub.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 73
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), sub.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "rhs"
				}]
			}, {
				"": "sub.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "sub"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 73
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), mul.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 75
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), mul.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 75
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "rhs"
				}]
			}, {
				"": "mul.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "mul"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 75
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "div(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 77
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), div.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 77
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), div.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 77
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "rhs"
				}]
			}, {
				"": "div.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "div"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 77
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "add(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add vector and scalar."
	, "ast": {
		"": "add(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 80
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 80
			, "value": "b"
		}]
	}
}, {
	"": "add(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add vector and scalar."
	, "ast": {
		"": "add(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 82
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 82
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "value": "b"
			}]
		}]
	}
}, {
	"": "sub(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 85
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract vector and scalar."
	, "ast": {
		"": "sub(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 85
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 85
			, "value": "b"
		}]
	}
}, {
	"": "sub(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract vector and scalar."
	, "ast": {
		"": "sub(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 87
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 87
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 87
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 87
				, "value": "b"
			}]
		}]
	}
}, {
	"": "mul(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply vector and scalar."
	, "ast": {
		"": "mul(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 90
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 90
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 90
			, "value": "b"
		}]
	}
}, {
	"": "mul(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 92
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply vector and scalar."
	, "ast": {
		"": "mul(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 92
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 92
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 92
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "value": "b"
			}]
		}]
	}
}, {
	"": "div(a: float32, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 95
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "size": 16
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide vector and scalar."
	, "ast": {
		"": "div(vec4f(a), b)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "vec4f(a)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 95
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 95
				, "value": "a"
			}]
		}, {
			"": "b"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 95
			, "value": "b"
		}]
	}
}, {
	"": "div(a: vec4f, b: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 97
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "b"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide vector and scalar."
	, "ast": {
		"": "div(a, vec4f(b))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 97
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 97
			, "value": "a"
		}, {
			"": "vec4f(b)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 97
			, "args": [{
				"": "b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 97
				, "value": "b"
			}]
		}]
	}
}, {
	"": "min(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 100
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise minimum of the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), min.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 100
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), min.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 100
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "rhs"
				}]
			}, {
				"": "min.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "min"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 100
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "max(lhs: vec4f, rhs: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 102
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise maximum of the two vectors."
	, "ast": {
		"": "vec4f(emit(struct(lhs), struct(rhs), max.p4f))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 102
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), max.p4f)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 102
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "rhs"
				}]
			}, {
				"": "max.p4f"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "max"
				}
				, "right": {
					"": "p4f"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 102
					, "value": "p4f"
				}
			}]
		}]
	}
}, {
	"": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "vec"
		, "kind": "inline"
		, "cast": "val"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "min"
		, "kind": "inline"
		, "cast": "val"
		, "name": "min"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}, {
		"": "max"
		, "kind": "inline"
		, "cast": "val"
		, "name": "max"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "size": 16
		, "offs": 48
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Clamp the vector component wise to the range [min ... max]"
	, "ast": {
		"": "min(max(vec, min), max)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 105
		, "args": [{
		}, {
			"": "max(vec, min)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 105
			, "args": [{
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "vec"
			}, {
				"": "min"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "min"
			}]
		}, {
			"": "max"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 105
			, "value": "max"
		}]
	}
}, {
	"": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "clamp"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 108
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "vec"
		, "kind": "inline"
		, "cast": "val"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "min"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "min"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "max"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "max"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Clamp each component of the vector to the range [min ... max]"
	, "ast": {
		"": "clamp(vec, vec4f(min), vec4f(max))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 108
		, "args": [{
		}, {
			"": "vec"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "value": "vec"
		}, {
			"": "vec4f(min)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "args": [{
				"": "min"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "min"
			}]
		}, {
			"": "vec4f(max)"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 108
			, "args": [{
				"": "max"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "max"
			}]
		}]
	}
}, {
	"": "dp3(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 112
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of the first 3 elements"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp3))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 112
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp3)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 112
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp3"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "p4x"
				}
				, "right": {
					"": "dp3"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 112
					, "value": "dp3"
				}
			}]
		}]
	}
}, {
	"": "dph(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 116
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Homogeneous dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dph))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 116
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dph)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 116
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dph"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "p4x"
				}
				, "right": {
					"": "dph"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 116
					, "value": "dph"
				}
			}]
		}]
	}
}, {
	"": "dp4(lhs: vec4f, rhs: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 120
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "lhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "rhs"
		, "kind": "inline"
		, "cast": "val"
		, "name": "rhs"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product"
	, "ast": {
		"": "float32(emit(struct(lhs), struct(rhs), p4x.dp4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 120
		, "args": [{
			"": "emit(struct(lhs), struct(rhs), p4x.dp4)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 120
			, "args": [{
			}, {
				"": "struct(lhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "args": [{
					"": "lhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "lhs"
				}]
			}, {
				"": "struct(rhs)"
				, "kind": "()"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "args": [{
					"": "rhs"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "rhs"
				}]
			}, {
				"": "p4x.dp4"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "left": {
					"": "p4x"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "p4x"
				}
				, "right": {
					"": "dp4"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 120
					, "value": "dp4"
				}
			}]
		}]
	}
}, {
	"": "cross(a: vec4f, b: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "cross"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 123
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Cross product of the first 3 elements"
	, "ast": {
		"": "vec4f(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 123
		, "args": [{
		}, {
			"": "a.y * b.z - a.z * b.y"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.y * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
			}
			, "right": {
				"": "a.z * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
			}
		}, {
			"": "a.z * b.x - a.x * b.z"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.z * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
			}
			, "right": {
				"": "a.x * b.z"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
				, "right": {
					"": "b.z"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "z"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "z"
					}
				}
			}
		}, {
			"": "a.x * b.y - a.y * b.x"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 123
			, "left": {
				"": "a.x * b.y"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
				, "right": {
					"": "b.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
			}
			, "right": {
				"": "a.y * b.x"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "left": {
					"": "a.y"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "a"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "a"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "y"
					}
				}
				, "right": {
					"": "b.x"
					, "kind": "."
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 123
					, "left": {
						"": "b"
						, "kind": ".variable"
						, "type": "vec4f"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "b"
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 123
						, "value": "x"
					}
				}
			}
		}]
	}
}, {
	"": "length(v: vec4f): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 126
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "val"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Length of the vector(xyz)"
	, "ast": {
		"": "float32.sqrt(dp3(v, v))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 126
		, "args": [{
			"": "dp3(v, v)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 126
			, "args": [{
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "v"
			}, {
				"": "v"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "v"
			}]
		}]
	}
}, {
	"": "normalize(v: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "normalize"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 128
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Normalize the vector(xyz)"
	, "ast": {
		"": "div(v, vec4f(length(v)))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 128
		, "args": [{
		}, {
			"": "v"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 128
			, "value": "v"
		}, {
			"": "vec4f(length(v))"
			, "kind": "()"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 128
			, "args": [{
				"": "length(v)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 128
				, "args": [{
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 128
					, "value": "v"
				}]
			}]
		}]
	}
}, {
	"": "eval(v: vec4f, x: float32): float32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "eval"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector4f.ci"
	, "line": 131
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f32"
		, "name": ".result"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "v"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "v"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "x"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Evaluate as a polynomial in point x"
	, "ast": {
		"": "float32((((v.w * x + v.z) * x + v.y) * x) + v.x)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Vector4f.ci"
		, "line": 131
		, "args": [{
			"": "(((v.w * x + v.z) * x + v.y) * x) + v.x"
			, "kind": "+"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Vector4f.ci"
			, "line": 131
			, "left": {
				"": "(((v.w * x + v.z) * x + v.y) * x)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "args": [{
					"": "((v.w * x + v.z) * x + v.y) * x"
					, "kind": "*"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "left": {
						"": "((v.w * x + v.z) * x + v.y)"
						, "kind": "()"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 131
						, "args": [{
							"": "(v.w * x + v.z) * x + v.y"
							, "kind": "+"
							, "type": "float32"
							, "file": "cmplStd/lib/math/Vector4f.ci"
							, "line": 131
							, "left": {
								"": "(v.w * x + v.z) * x"
								, "kind": "*"
								, "type": "float32"
								, "file": "cmplStd/lib/math/Vector4f.ci"
								, "line": 131
								, "left": {
									"": "(v.w * x + v.z)"
									, "kind": "()"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "args": [{
										"": "v.w * x + v.z"
										, "kind": "+"
										, "type": "float32"
										, "file": "cmplStd/lib/math/Vector4f.ci"
										, "line": 131
										, "left": {
											"": "v.w * x"
											, "kind": "*"
											, "type": "float32"
											, "file": "cmplStd/lib/math/Vector4f.ci"
											, "line": 131
											, "left": {
												"": "v.w"
												, "kind": "."
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "left": {
													"": "v"
													, "kind": ".variable"
													, "type": "vec4f"
													, "file": "cmplStd/lib/math/Vector4f.ci"
													, "line": 131
													, "value": "v"
												}
												, "right": {
													"": "w"
													, "kind": ".variable"
													, "type": "float32"
													, "file": "cmplStd/lib/math/Vector4f.ci"
													, "line": 131
													, "value": "w"
												}
											}
											, "right": {
												"": "x"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "x"
											}
										}
										, "right": {
											"": "v.z"
											, "kind": "."
											, "type": "float32"
											, "file": "cmplStd/lib/math/Vector4f.ci"
											, "line": 131
											, "left": {
												"": "v"
												, "kind": ".variable"
												, "type": "vec4f"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "v"
											}
											, "right": {
												"": "z"
												, "kind": ".variable"
												, "type": "float32"
												, "file": "cmplStd/lib/math/Vector4f.ci"
												, "line": 131
												, "value": "z"
											}
										}
									}]
								}
								, "right": {
									"": "x"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "x"
								}
							}
							, "right": {
								"": "v.y"
								, "kind": "."
								, "type": "float32"
								, "file": "cmplStd/lib/math/Vector4f.ci"
								, "line": 131
								, "left": {
									"": "v"
									, "kind": ".variable"
									, "type": "vec4f"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "v"
								}
								, "right": {
									"": "y"
									, "kind": ".variable"
									, "type": "float32"
									, "file": "cmplStd/lib/math/Vector4f.ci"
									, "line": 131
									, "value": "y"
								}
							}
						}]
					}
					, "right": {
						"": "x"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Vector4f.ci"
						, "line": 131
						, "value": "x"
					}
				}]
			}
			, "right": {
				"": "v.x"
				, "kind": "."
				, "type": "float32"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "left": {
					"": "v"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "value": "v"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/lib/math/Vector4f.ci"
					, "line": 131
					, "value": "x"
				}
			}
		}]
	}
}, {
	"": "mat4f"
	, "kind": "typename"
	, "cast": "val"
	, "name": "mat4f"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 2
	, "size": 64
	, "offs": 177016
	, "static": true
	, "const": true
	, "doc": "A 4x4 matrix"
}, {
	"": "mat4f.m"
	, "kind": "variable"
	, "cast": "val"
	, "name": "m"
	, "owner": "mat4f"
	, "type": "float32[4][4]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 4
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array: m[1][0]"
}, {
	"": "mat4f.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "mat4f"
	, "type": "float32[16]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 7
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as a flatten array: data[4] => m[1][0]"
}, {
	"": "mat4f.v"
	, "kind": "variable"
	, "cast": "val"
	, "name": "v"
	, "owner": "mat4f"
	, "type": "vec4f[4]"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 10
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access elements as an array of vectors: v[1].x => m[1][0]"
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 212
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.x"
	, "kind": "variable"
	, "cast": "val"
	, "name": "x"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 14
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.y"
	, "kind": "variable"
	, "cast": "val"
	, "name": "y"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 16
	, "size": 16
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.z"
	, "kind": "variable"
	, "cast": "val"
	, "name": "z"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 18
	, "size": 16
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.w"
	, "kind": "variable"
	, "cast": "val"
	, "name": "w"
	, "owner": "mat4f.<?>"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 20
	, "size": 16
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 14
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 14
		, "value": "x"
	}
}, {
	"": "mat4f.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 16
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 16
		, "value": "y"
	}
}, {
	"": "mat4f.z"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "z"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 18
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "z"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 18
		, "value": "z"
	}
}, {
	"": "mat4f.w"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "w"
	, "owner": "mat4f"
	, "type": "vec4f"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 20
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "w"
		, "kind": ".variable"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 20
		, "value": "w"
	}
}, {
	"": "mat4f.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "mat4f"
	, "type": "mat4f.<?>"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 212
	, "size": 64
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "mat4f.<?>.xx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 24
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 26
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 28
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.xw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "xw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 30
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 33
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 35
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 37
	, "size": 4
	, "offs": 24
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.yw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "yw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 39
	, "size": 4
	, "offs": 28
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 42
	, "size": 4
	, "offs": 32
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 44
	, "size": 4
	, "offs": 36
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 46
	, "size": 4
	, "offs": 40
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.zw"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "zw"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 48
	, "size": 4
	, "offs": 44
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wx"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wx"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 51
	, "size": 4
	, "offs": 48
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wy"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wy"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 53
	, "size": 4
	, "offs": 52
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.wz"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "wz"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 55
	, "size": 4
	, "offs": 56
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.<?>.ww"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "ww"
	, "owner": "mat4f.<?>"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 57
	, "size": 4
	, "offs": 60
	, "static": false
	, "const": false
	, "doc": "@public"
}, {
	"": "mat4f.xx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 24
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 24
		, "value": "xx"
	}
}, {
	"": "mat4f.xy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 26
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 26
		, "value": "xy"
	}
}, {
	"": "mat4f.xz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 28
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 28
		, "value": "xz"
	}
}, {
	"": "mat4f.xw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "xw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 30
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "xw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 30
		, "value": "xw"
	}
}, {
	"": "mat4f.yx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 33
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 33
		, "value": "yx"
	}
}, {
	"": "mat4f.yy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 35
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 35
		, "value": "yy"
	}
}, {
	"": "mat4f.yz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 37
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 37
		, "value": "yz"
	}
}, {
	"": "mat4f.yw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "yw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 39
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "yw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 39
		, "value": "yw"
	}
}, {
	"": "mat4f.zx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 42
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 42
		, "value": "zx"
	}
}, {
	"": "mat4f.zy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 44
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 44
		, "value": "zy"
	}
}, {
	"": "mat4f.zz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 46
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 46
		, "value": "zz"
	}
}, {
	"": "mat4f.zw"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zw"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 48
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "zw"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 48
		, "value": "zw"
	}
}, {
	"": "mat4f.wx"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wx"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 51
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wx"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 51
		, "value": "wx"
	}
}, {
	"": "mat4f.wy"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wy"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 53
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wy"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 53
		, "value": "wy"
	}
}, {
	"": "mat4f.wz"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "wz"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 55
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "wz"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 55
		, "value": "wz"
	}
}, {
	"": "mat4f.ww"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ww"
	, "owner": "mat4f"
	, "type": "float32"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 57
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "@public"
	, "ast": {
		"": "ww"
		, "kind": ".variable"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 57
		, "value": "ww"
	}
}, {
	"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 62
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "xx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": false
	}, {
		"": "xy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}, {
		"": "xz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}, {
		"": "xw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "xw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 62
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": false
	}, {
		"": "yx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 84
		, "static": false
		, "const": false
	}, {
		"": "yy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 88
		, "static": false
		, "const": false
	}, {
		"": "yz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 92
		, "static": false
		, "const": false
	}, {
		"": "yw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "yw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 63
		, "size": 4
		, "offs": 96
		, "static": false
		, "const": false
	}, {
		"": "zx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 100
		, "static": false
		, "const": false
	}, {
		"": "zy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 104
		, "static": false
		, "const": false
	}, {
		"": "zz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 108
		, "static": false
		, "const": false
	}, {
		"": "zw"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "zw"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 64
		, "size": 4
		, "offs": 112
		, "static": false
		, "const": false
	}, {
		"": "wx"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wx"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 116
		, "static": false
		, "const": false
	}, {
		"": "wy"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wy"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 120
		, "static": false
		, "const": false
	}, {
		"": "wz"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "wz"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 124
		, "static": false
		, "const": false
	}, {
		"": "ww"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "ww"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "size": 4
		, "offs": 128
		, "static": false
		, "const": false
	}]
	, "size": 49
	, "offs": 402424
	, "static": true
	, "const": false
	, "doc": "Initialize all elements with the given values"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 65
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 66
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xy := xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xz := xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.xw := xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 67
					}, {
						"": ".result.yx := yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yy := yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yz := yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.yw := yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 68
					}, {
						"": ".result.zx := zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zy := zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zz := zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.zw := zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 69
					}, {
						"": ".result.wx := wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.wy := wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.wz := wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}, {
						"": ".result.ww := ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 70
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402424
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402427
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402430
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402433
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402436
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402439
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402442
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402445
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402448
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402451
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402454
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402457
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402460
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402463
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402466
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402469
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402472
		, "size": 1
	}]
}, {
	"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mat4f"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 75
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "x"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "y"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "z"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "z"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": true
	}, {
		"": "w"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "w"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "size": 4
		, "offs": 80
		, "static": false
		, "const": true
	}]
	, "size": 21
	, "offs": 402480
	, "static": true
	, "const": false
	, "doc": "Initialize matrix with row vectors"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 75
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 76
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.z := z;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}, {
						"": ".result.w := w;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 76
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402480
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402482
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402483
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402485
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402487
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402488
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402490
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402492
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402493
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402495
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402497
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402498
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402500
		, "size": 1
	}]
}, {
	"": "dp3(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp3"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 80
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product of the first 3 elements"
	, "ast": {
		"": "vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), 1.000000)"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "dp3(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "dp3(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 80
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "vec"
			}]
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 80
			, "value": "1.000000"
		}]
	}
}, {
	"": "dph(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dph"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 82
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: homogeneous dot product"
	, "ast": {
		"": "vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "dph(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}, {
			"": "dph(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 82
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 82
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "dp4(mat: mat4f, vec: vec4f): vec4f"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dp4"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "vec"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "vec"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Multiply with vector: dot product"
	, "ast": {
		"": "vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec))"
		, "kind": "()"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "dp4(mat.x, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "x"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.y, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "y"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.z, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "z"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "z"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}, {
			"": "dp4(mat.w, vec)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 84
			, "args": [{
			}, {
				"": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "left": {
					"": "mat"
					, "kind": ".variable"
					, "type": "mat4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "mat"
				}
				, "right": {
					"": "w"
					, "kind": ".variable"
					, "type": "vec4f"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 84
					, "value": "w"
				}
			}, {
				"": "vec"
				, "kind": ".variable"
				, "type": "vec4f"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "vec"
			}]
		}]
	}
}, {
	"": "transpose(mat: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "transpose"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 87
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "mat"
		, "kind": "variable"
		, "cast": "val"
		, "name": "mat"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "size": 64
		, "offs": 128
		, "static": false
		, "const": true
	}]
	, "size": 49
	, "offs": 402504
	, "static": true
	, "const": false
	, "doc": "Transpose the matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 87
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 88
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := mat.xx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xy := mat.yx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xz := mat.zx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.xw := mat.wx;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 89
					}, {
						"": ".result.yx := mat.xy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yy := mat.yy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yz := mat.zy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.yw := mat.wy;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 90
					}, {
						"": ".result.zx := mat.xz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zy := mat.yz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zz := mat.zz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.zw := mat.wz;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 91
					}, {
						"": ".result.wx := mat.xw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wy := mat.yw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.wz := mat.zw;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}, {
						"": ".result.ww := mat.ww;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 92
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x32 sp(17, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402504
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(18, 5)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402507
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(19, 9)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402510
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(20, 13)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402513
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(21, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402516
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(22, 6)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402519
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(23, 10)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402522
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(24, 14)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402525
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(25, 3)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402528
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(26, 7)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402531
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(27, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402534
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(28, 15)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402537
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(29, 4)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402540
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(30, 8)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402543
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(31, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402546
		, "size": 3
	}, {
		"instruction": "mov.x32 sp(32, 16)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 402549
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402552
		, "size": 1
	}]
}, {
	"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 97
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "lhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "lhs"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "rhs"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "rhs"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}]
	, "size": 245
	, "offs": 402560
	, "static": true
	, "const": false
	, "doc": "Multiply two matrices (rows * cols)"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 97
		, "stmt": [{
			"": "transposed"
			, "kind": ".variable"
			, "type": "mat4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 98
			, "value": "transposed"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 99
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := dp4(transposed, lhs.x);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 100
					}, {
						"": ".result.y := dp4(transposed, lhs.y);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 101
					}, {
						"": ".result.z := dp4(transposed, lhs.z);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 102
					}, {
						"": ".result.w := dp4(transposed, lhs.w);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 103
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402560
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402564
		, "size": 2
	}, {
		"instruction": "load.sp(-60)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 402566
		, "size": 4
	}, {
		"instruction": "copy.mem -64"
		, "name": "copy.mem"
		, "code": "0x1e"
		, "offs": 402570
		, "size": 4
	}, {
		"instruction": "inc.sp(+64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402574
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402578
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 402583
		, "size": 1
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402584
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 402588
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402592
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402594
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402596
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402600
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402601
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402603
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402604
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402605
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402607
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402611
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402612
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402614
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402615
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402616
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402618
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402622
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402623
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402625
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402626
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402627
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402629
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402630
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402632
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402633
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402634
		, "size": 2
	}, {
		"instruction": "set.x128 sp(23)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402636
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 402638
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402642
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402644
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402648
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402650
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402654
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402655
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402657
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402658
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402659
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402661
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402665
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402666
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402668
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402669
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402670
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402672
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402676
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402677
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402679
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402680
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402681
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402683
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402684
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402686
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402687
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402688
		, "size": 2
	}, {
		"instruction": "set.x128 sp(27)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402690
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 402692
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402696
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402698
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402702
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402704
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402708
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402709
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402711
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402712
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402713
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402715
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402719
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402720
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402722
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402723
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402724
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402726
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402730
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402731
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402733
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402734
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402735
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402737
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402738
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402740
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402741
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402742
		, "size": 2
	}, {
		"instruction": "set.x128 sp(31)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402744
		, "size": 2
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 402746
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(19)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402750
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402752
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402756
		, "size": 2
	}, {
		"instruction": "inc.i32(+48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402758
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402762
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402763
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402765
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402766
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402767
		, "size": 2
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402769
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402773
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402774
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402776
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402777
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402778
		, "size": 2
	}, {
		"instruction": "inc.i32(+16)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402780
		, "size": 4
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402784
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402785
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402787
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402788
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402789
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402791
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402792
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402794
		, "size": 1
	}, {
		"instruction": "dp4.v4f"
		, "name": "dp4.v4f"
		, "code": "0x9b"
		, "offs": 402795
		, "size": 1
	}, {
		"instruction": "set.x128 sp(2)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402796
		, "size": 2
	}, {
		"instruction": "set.x128 sp(35)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402798
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402800
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402804
		, "size": 1
	}]
}, {
	"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 111
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "center"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "center"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "size": 4
		, "offs": 76
		, "static": false
		, "const": false
	}]
	, "size": 454
	, "offs": 402808
	, "static": true
	, "const": false
	, "doc": "Build a rotation matrix\nadapted from: https://sites.google.com/site/glennmurray/Home/rotation-matrices-and-formulas"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 111
		, "stmt": [{
			"": "len"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 112
			, "value": "len"
		}, {
			"": "if ((len) < 0.000000)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 113
			, "test": {
				"": "(len) < 0.000000"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 113
				, "left": {
					"": "(len)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 113
					, "args": [{
						"": "len"
						, "kind": ".variable"
						, "type": "float32"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 113
						, "value": "len"
					}]
				}
				, "right": {
					"": "0.000000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 113
					, "value": "0.000000"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 113
				, "stmt": [{
					"": "trace(\"invalid direction of rotation\", direction);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 114
				}, {
					"": "return .result := {...};"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/math/Matrix4f.ci"
					, "line": 115
					, "stmt": {
						"": ".result := {...}"
						, "kind": ":="
						, "type": "void"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "mat4f"
							, "value": ".result"
						}
						, "right": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "stmt": [{
								"": ".result.x := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 116
							}, {
								"": ".result.y := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 117
							}, {
								"": ".result.z := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 118
							}, {
								"": ".result.w := vec4f(0, 0, 0, 0);"
								, "kind": ";"
								, "type": "void"
								, "file": "cmplStd/lib/math/Matrix4f.ci"
								, "line": 119
							}]
						}
					}
				}]
			}
		}, {
			"": "x"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 122
			, "value": "x"
		}, {
			"": "y"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 123
			, "value": "y"
		}, {
			"": "z"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 124
			, "value": "z"
		}, {
			"": "cx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 125
			, "value": "cx"
		}, {
			"": "cy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 126
			, "value": "cy"
		}, {
			"": "cz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 127
			, "value": "cz"
		}, {
			"": "xx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 128
			, "value": "xx"
		}, {
			"": "xy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 129
			, "value": "xy"
		}, {
			"": "xz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 130
			, "value": "xz"
		}, {
			"": "yy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 131
			, "value": "yy"
		}, {
			"": "yz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 132
			, "value": "yz"
		}, {
			"": "zz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 133
			, "value": "zz"
		}, {
			"": "s"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 135
			, "value": "s"
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 136
			, "value": "c"
		}, {
			"": "k"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 137
			, "value": "k"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 139
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := xx + (yy + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 140
					}, {
						"": ".result.xy := xy * k - z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 141
					}, {
						"": ".result.xz := xz * k + y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 142
					}, {
						"": ".result.xw := (cx * (yy + zz) - x * (cy * y + cz * z)) * k + (cy * z - cz * y) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 143
					}, {
						"": ".result.yx := xy * k + z * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 145
					}, {
						"": ".result.yy := yy + (xx + zz) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 146
					}, {
						"": ".result.yz := yz * k - x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 147
					}, {
						"": ".result.yw := (cy * (xx + zz) - y * (cx * x + cz * z)) * k + (cz * x - cx * z) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 148
					}, {
						"": ".result.zx := xz * k - y * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 150
					}, {
						"": ".result.zy := yz * k + x * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 151
					}, {
						"": ".result.zz := zz + (xx + yy) * c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 152
					}, {
						"": ".result.zw := (cz * (xx + yy) - z * (cx * x + cy * y)) * k + (cx * y - cy * x) * s;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 153
					}, {
						"": ".result.w := vec4f(0, 0, 0, 1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 155
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402808
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 402810
		, "size": 1
	}, {
		"instruction": "dup.x128 sp(0)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 402811
		, "size": 2
	}, {
		"instruction": "dup.x128 sp(4)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 402813
		, "size": 2
	}, {
		"instruction": "dp3.v4f"
		, "name": "dp3.v4f"
		, "code": "0x9a"
		, "offs": 402815
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402816
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 402820
		, "size": 2
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402822
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402826
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 402828
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 402829
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 402838
		, "size": 1
	}, {
		"instruction": "jz +69"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 402839
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402843
		, "size": 5
	}, {
		"instruction": "load.c32 114"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402848
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402853
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 402858
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402863
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 402868
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402873
		, "size": 2
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402875
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402879
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402880
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402881
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402882
		, "size": 1
	}, {
		"instruction": "set.x128 sp(9)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402883
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402885
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402886
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402887
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402888
		, "size": 1
	}, {
		"instruction": "set.x128 sp(13)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402889
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402891
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402892
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402893
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402894
		, "size": 1
	}, {
		"instruction": "set.x128 sp(17)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402895
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402897
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402898
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402899
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 402900
		, "size": 1
	}, {
		"instruction": "set.x128 sp(21)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 402901
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 402903
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 402907
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402908
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 402910
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402911
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 402913
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402914
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402916
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 402920
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402921
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 402923
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402924
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402926
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 402930
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402931
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 402933
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402934
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 402936
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402937
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402939
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 402943
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402944
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 402946
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 402950
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402951
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402953
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 402955
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402956
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402958
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 402960
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402961
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402963
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 402965
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402966
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402968
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 402970
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402971
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402973
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 402975
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402976
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402978
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 402980
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402981
		, "size": 2
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402983
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402987
		, "size": 2
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 402989
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 402993
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 402998
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403000
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403001
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403003
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403005
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403007
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403008
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403010
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403011
		, "size": 1
	}, {
		"instruction": "set.x32 sp(21)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403012
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403014
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403016
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403018
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403019
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403021
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403023
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403024
		, "size": 1
	}, {
		"instruction": "set.x32 sp(22)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403025
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403027
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403029
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403031
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403032
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403034
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403036
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403037
		, "size": 1
	}, {
		"instruction": "set.x32 sp(23)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403038
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403040
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403042
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403044
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403046
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403047
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403048
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403050
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403052
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403054
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403055
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403057
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403059
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403060
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403061
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403062
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403063
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403065
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403066
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403068
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403070
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403071
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403073
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403075
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403076
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403077
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403079
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403080
		, "size": 1
	}, {
		"instruction": "set.x32 sp(24)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403081
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403083
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403085
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403087
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403088
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403090
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403092
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403093
		, "size": 1
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403094
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403096
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403098
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403100
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403102
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403103
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403105
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403106
		, "size": 1
	}, {
		"instruction": "set.x32 sp(26)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403107
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403109
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403111
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403113
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403114
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403116
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403118
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403119
		, "size": 1
	}, {
		"instruction": "set.x32 sp(27)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403120
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403122
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403124
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403126
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403128
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403129
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403130
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403132
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403134
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403136
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403137
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403139
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403141
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403142
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403143
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403144
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403145
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403147
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403148
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(16)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403150
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403152
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403153
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403155
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403157
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403158
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403159
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403161
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403162
		, "size": 1
	}, {
		"instruction": "set.x32 sp(28)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403163
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403165
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403167
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403169
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403170
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403172
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403174
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403175
		, "size": 1
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403176
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403178
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403180
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403182
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403183
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403185
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403187
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403188
		, "size": 1
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403189
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403191
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403193
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403195
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403197
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403198
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403200
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403201
		, "size": 1
	}, {
		"instruction": "set.x32 sp(31)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403202
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403204
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403206
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403208
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403210
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403211
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403212
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403214
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403216
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403218
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403219
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403221
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403223
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403224
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403225
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403226
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403227
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403229
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403230
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403232
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403234
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403235
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(17)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403237
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403239
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403240
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403241
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403243
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403244
		, "size": 1
	}, {
		"instruction": "set.x32 sp(32)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403245
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403247
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403252
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403253
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403254
		, "size": 1
	}, {
		"instruction": "set.x128 sp(36)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 403255
		, "size": 2
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403257
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403261
		, "size": 1
	}]
}, {
	"": "rotation(direction: vec4f, angle: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "rotation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 160
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "angle"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "angle"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 224
	, "offs": 403264
	, "static": true
	, "const": false
	, "doc": "Build a rotation matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 160
		, "stmt": [{
			"": "xx"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 161
			, "value": "xx"
		}, {
			"": "yy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 162
			, "value": "yy"
		}, {
			"": "zz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 163
			, "value": "zz"
		}, {
			"": "xy"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 164
			, "value": "xy"
		}, {
			"": "xz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 165
			, "value": "xz"
		}, {
			"": "yz"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 166
			, "value": "yz"
		}, {
			"": "s"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 167
			, "value": "s"
		}, {
			"": "c"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 168
			, "value": "c"
		}, {
			"": "k"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 169
			, "value": "k"
		}, {
			"": "tmp"
			, "kind": ".variable"
			, "type": "vec4f"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 170
			, "value": "tmp"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 172
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := k * xx + c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 173
					}, {
						"": ".result.xy := k * xy - tmp.z;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 174
					}, {
						"": ".result.xz := k * xz + tmp.y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 175
					}, {
						"": ".result.xw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 176
					}, {
						"": ".result.yx := k * xy + tmp.z;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 178
					}, {
						"": ".result.yy := k * yy + c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 179
					}, {
						"": ".result.yz := k * yz - tmp.x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 180
					}, {
						"": ".result.yw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 181
					}, {
						"": ".result.zx := k * xz - tmp.y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 183
					}, {
						"": ".result.zy := k * yz + tmp.x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 184
					}, {
						"": ".result.zz := k * zz + c;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 185
					}, {
						"": ".result.zw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 186
					}, {
						"": ".result.w := vec4f(0, 0, 0, 1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 188
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403264
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403266
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403267
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403269
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403270
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403271
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403273
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403277
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403278
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403280
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403284
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403285
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403286
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403288
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403292
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403293
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403295
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403299
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403300
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403301
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403303
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403304
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403306
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403310
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403311
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403312
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403314
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403315
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403317
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403321
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403322
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403323
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403325
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403329
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403330
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403332
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403336
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403337
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403338
		, "size": 2
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 403340
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403344
		, "size": 2
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 403346
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403350
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403355
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403357
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403358
		, "size": 2
	}, {
		"instruction": "load.i128"
		, "name": "load.i128"
		, "code": "0x2a"
		, "offs": 403360
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403361
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403363
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403365
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403367
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403369
		, "size": 2
	}, {
		"instruction": "set.x128 sp(1)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 403371
		, "size": 2
	}, {
		"instruction": "mul.v4f"
		, "name": "mul.v4f"
		, "code": "0x93"
		, "offs": 403373
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403374
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403376
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403378
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403379
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403381
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403382
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403384
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403386
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403388
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403389
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403391
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403392
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403394
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403396
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403398
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403399
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403401
		, "size": 1
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403402
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403404
		, "size": 1
	}, {
		"instruction": "set.x32 sp(20)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403405
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403407
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403409
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403411
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403412
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403414
		, "size": 1
	}, {
		"instruction": "set.x32 sp(21)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403415
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403417
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403419
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403421
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403422
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403424
		, "size": 1
	}, {
		"instruction": "set.x32 sp(22)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403425
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403427
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403429
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403431
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403432
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403434
		, "size": 1
	}, {
		"instruction": "set.x32 sp(23)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403435
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403437
		, "size": 1
	}, {
		"instruction": "set.x32 sp(24)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403438
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403440
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403442
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403444
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403445
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 403447
		, "size": 1
	}, {
		"instruction": "set.x32 sp(25)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403448
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403450
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403452
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403454
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403455
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403457
		, "size": 1
	}, {
		"instruction": "set.x32 sp(26)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403458
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403460
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403462
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403464
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403465
		, "size": 2
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 403467
		, "size": 1
	}, {
		"instruction": "set.x32 sp(27)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403468
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403470
		, "size": 1
	}, {
		"instruction": "set.x32 sp(28)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403471
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403473
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403478
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403479
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403480
		, "size": 1
	}, {
		"instruction": "set.x128 sp(32)"
		, "name": "set.x128"
		, "code": "0x15"
		, "offs": 403481
		, "size": 2
	}, {
		"instruction": "inc.sp(-52)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403483
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403487
		, "size": 1
	}]
}, {
	"": "translation(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "translation"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 193
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 193
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 193
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 193
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 88
	, "offs": 403488
	, "static": true
	, "const": false
	, "doc": "Build a translation matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 193
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 194
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 195
					}, {
						"": ".result.xy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 195
					}, {
						"": ".result.xz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 195
					}, {
						"": ".result.xw := direction.x * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 195
					}, {
						"": ".result.yx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 196
					}, {
						"": ".result.yy := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 196
					}, {
						"": ".result.yz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 196
					}, {
						"": ".result.yw := direction.y * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 196
					}, {
						"": ".result.zx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 197
					}, {
						"": ".result.zy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 197
					}, {
						"": ".result.zz := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 197
					}, {
						"": ".result.zw := direction.z * amount;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 197
					}, {
						"": ".result.wx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 198
					}, {
						"": ".result.wy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 198
					}, {
						"": ".result.wz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 198
					}, {
						"": ".result.ww := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 198
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403488
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403493
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403495
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403496
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403498
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403499
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403501
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403503
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403504
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403506
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403507
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403509
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403510
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403512
		, "size": 5
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403517
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403519
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403520
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403522
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403524
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403528
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403529
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403531
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403532
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403534
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403535
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403537
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403538
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403540
		, "size": 5
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403545
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403547
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403549
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403553
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403554
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403556
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403557
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403559
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403560
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403562
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403563
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403565
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403566
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403568
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403573
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403575
		, "size": 1
	}]
}, {
	"": "scale(direction: vec4f, amount: float32): mat4f"
	, "kind": "function"
	, "cast": "inline"
	, "name": "scale"
	, "type": "function"
	, "file": "cmplStd/lib/math/Matrix4f.ci"
	, "line": 203
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "mat4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 203
		, "size": 64
		, "offs": 64
		, "static": false
		, "const": false
	}, {
		"": "direction"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "direction"
		, "type": "vec4f"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 203
		, "size": 4
		, "offs": 68
		, "static": false
		, "const": true
	}, {
		"": "amount"
		, "kind": "variable"
		, "cast": "f32"
		, "name": "amount"
		, "type": "float32"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 203
		, "size": 4
		, "offs": 72
		, "static": false
		, "const": false
	}]
	, "size": 217
	, "offs": 403576
	, "static": true
	, "const": false
	, "doc": "Build a scaling matrix"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Matrix4f.ci"
		, "line": 203
		, "stmt": [{
			"": "rcp(val: float32): float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 204
			, "value": "rcp(val: float32): float32"
		}, {
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Matrix4f.ci"
			, "line": 205
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "mat4f"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.xx := rcp(direction.x * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 206
					}, {
						"": ".result.xy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 206
					}, {
						"": ".result.xz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 206
					}, {
						"": ".result.xw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 206
					}, {
						"": ".result.yx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 207
					}, {
						"": ".result.yy := rcp(direction.y * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 207
					}, {
						"": ".result.yz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 207
					}, {
						"": ".result.yw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 207
					}, {
						"": ".result.zx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 208
					}, {
						"": ".result.zy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 208
					}, {
						"": ".result.zz := rcp(direction.z * amount);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 208
					}, {
						"": ".result.zw := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 208
					}, {
						"": ".result.wx := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 209
					}, {
						"": ".result.wy := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 209
					}, {
						"": ".result.wz := (0);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 209
					}, {
						"": ".result.ww := (1);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Matrix4f.ci"
						, "line": 209
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403576
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403578
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403579
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403581
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403582
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403584
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 403585
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403586
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403590
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 403592
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403593
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403597
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 403599
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 403600
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 403609
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403610
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403614
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403615
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403619
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403624
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 403626
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403627
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403629
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403631
		, "size": 1
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403632
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403634
		, "size": 1
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403635
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403637
		, "size": 1
	}, {
		"instruction": "set.x32 sp(7)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403638
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403640
		, "size": 1
	}, {
		"instruction": "set.x32 sp(8)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403641
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403643
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403645
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403649
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403650
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403652
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403653
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403655
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 403656
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403657
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403661
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 403663
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403664
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403668
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 403670
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 403671
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 403680
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403681
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403685
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403686
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403690
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403695
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 403697
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403698
		, "size": 2
	}, {
		"instruction": "set.x32 sp(9)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403700
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403702
		, "size": 1
	}, {
		"instruction": "set.x32 sp(10)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403703
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403705
		, "size": 1
	}, {
		"instruction": "set.x32 sp(11)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403706
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403708
		, "size": 1
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403709
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403711
		, "size": 1
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403712
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403714
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403716
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 403720
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403721
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 403723
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403724
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403726
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 403727
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403728
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403732
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 403734
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403735
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403739
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 403741
		, "size": 1
	}, {
		"instruction": "load.f64 0.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 403742
		, "size": 9
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 403751
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403752
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403756
		, "size": 1
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403757
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403761
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403766
		, "size": 2
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 403768
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403769
		, "size": 2
	}, {
		"instruction": "set.x32 sp(14)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403771
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403773
		, "size": 1
	}, {
		"instruction": "set.x32 sp(15)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403774
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403776
		, "size": 1
	}, {
		"instruction": "set.x32 sp(16)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403777
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403779
		, "size": 1
	}, {
		"instruction": "set.x32 sp(17)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403780
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403782
		, "size": 1
	}, {
		"instruction": "set.x32 sp(18)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403783
		, "size": 2
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 403785
		, "size": 5
	}, {
		"instruction": "set.x32 sp(19)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403790
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403792
		, "size": 1
	}]
}, {
	"": "vec2d"
	, "kind": "typename"
	, "cast": "val"
	, "name": "vec2d"
	, "type": "typename"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 2
	, "size": 16
	, "offs": 200344
	, "static": true
	, "const": true
	, "doc": "A 2d vector (2x float64)"
}, {
	"": "vec2d.<?>"
	, "kind": "variable"
	, "cast": "val"
	, "name": "<?>"
	, "owner": "vec2d"
	, "type": "vec2d.<?>"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 44
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "vec2d.<?>.x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "x"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 5
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
}, {
	"": "vec2d.<?>.y"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "y"
	, "owner": "vec2d.<?>"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 7
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
}, {
	"": "vec2d.x"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "x"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "X component of the vector"
	, "ast": {
		"": "x"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 5
		, "value": "x"
	}
}, {
	"": "vec2d.y"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "y"
	, "owner": "vec2d"
	, "type": "float64"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 7
	, "size": 0
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Y component of the vector"
	, "ast": {
		"": "y"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 7
		, "value": "y"
	}
}, {
	"": "vec2d.data"
	, "kind": "variable"
	, "cast": "val"
	, "name": "data"
	, "owner": "vec2d"
	, "type": "float64[2]"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 10
	, "size": 16
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "Access the components as an array"
}, {
	"": "vec2d(x: float64, y: float64): vec2d"
	, "kind": "function"
	, "cast": "inline"
	, "name": "vec2d"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "x"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "y"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "size": 8
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 7
	, "offs": 403800
	, "static": true
	, "const": false
	, "doc": "Initialize with given x, y components"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 14
		, "stmt": [{
			"": "return .result := {...};"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 15
			, "stmt": {
				"": ".result := {...}"
				, "kind": ":="
				, "type": "void"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "vec2d"
					, "value": ".result"
				}
				, "right": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "stmt": [{
						"": ".result.x := x;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Vector2d.ci"
						, "line": 16
					}, {
						"": ".result.y := y;"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/lib/math/Vector2d.ci"
						, "line": 17
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "mov.x64 sp(5, 3)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 403800
		, "size": 3
	}, {
		"instruction": "mov.x64 sp(7, 1)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 403803
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403806
		, "size": 1
	}]
}, {
	"": "add(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "add"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise add the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), add.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 22
		, "args": [{
			"": "emit(struct(a), struct(b), add.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 22
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "b"
				}]
			}, {
				"": "add.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "left": {
					"": "add"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "add"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 22
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "sub(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sub"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise subtract the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), sub.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 25
		, "args": [{
			"": "emit(struct(a), struct(b), sub.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "b"
				}]
			}, {
				"": "sub.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "left": {
					"": "sub"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "sub"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 25
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "mul(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "mul"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 28
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise multiply the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), mul.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 28
		, "args": [{
			"": "emit(struct(a), struct(b), mul.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 28
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "b"
				}]
			}, {
				"": "mul.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "left": {
					"": "mul"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "mul"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 28
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "div(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "div"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 31
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise divide the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), div.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 31
		, "args": [{
			"": "emit(struct(a), struct(b), div.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 31
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "b"
				}]
			}, {
				"": "div.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "left": {
					"": "div"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "div"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 31
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "min(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 34
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the minimum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), min.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 34
		, "args": [{
			"": "emit(struct(a), struct(b), min.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 34
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "b"
				}]
			}, {
				"": "min.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "left": {
					"": "min"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "min"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 34
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "max(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 37
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Component wise select the maximum from the two vectors."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), max.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 37
		, "args": [{
			"": "emit(struct(a), struct(b), max.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "b"
				}]
			}, {
				"": "max.p2d"
				, "kind": "."
				, "type": "emit.p4x"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "left": {
					"": "max"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "max"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "emit.p4x"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 37
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "ceq(a: vec2d, b: vec2d): vec2d"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "ceq"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "val"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "val"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "size": 16
		, "offs": 32
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Compare the two vectors for equality."
	, "ast": {
		"": "vec2d(emit(struct(a), struct(b), ceq.p2d))"
		, "kind": "()"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 40
		, "args": [{
			"": "emit(struct(a), struct(b), ceq.p2d)"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "struct(a)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "a"
				}]
			}, {
				"": "struct(b)"
				, "kind": "()"
				, "type": "vec2d"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "args": [{
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "ceq.p2d"
				, "kind": "."
				, "type": "bool"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "left": {
					"": "ceq"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "ceq"
				}
				, "right": {
					"": "p2d"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 40
					, "value": "p2d"
				}
			}]
		}]
	}
}, {
	"": "dot(a: vec2d, b: vec2d): float64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "dot"
	, "type": "function"
	, "file": "cmplStd/lib/math/Vector2d.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "a"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "b"
		, "type": "vec2d"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Dot product of thw two vectors"
	, "ast": {
		"": "a.x * b.x + a.y * b.y"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/lib/math/Vector2d.ci"
		, "line": 43
		, "left": {
			"": "a.x * b.x"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.x"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
			, "right": {
				"": "b.x"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "x"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "x"
				}
			}
		}
		, "right": {
			"": "a.y * b.y"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/lib/math/Vector2d.ci"
			, "line": 43
			, "left": {
				"": "a.y"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "a"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "a"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
			, "right": {
				"": "b.y"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "vec2d"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "b"
				}
				, "right": {
					"": "y"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/math/Vector2d.ci"
					, "line": 43
					, "value": "y"
				}
			}
		}
	}
}, {
	"": "length(str: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "length"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 38
	, "offs": 403808
	, "static": true
	, "const": false
	, "doc": "Computes the length of the string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 4
		, "stmt": [{
			"": "if ((str) == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 5
			, "test": {
				"": "(str) == null"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 5
				, "left": {
					"": "(str)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 5
					, "args": [{
						"": "str"
						, "kind": ".variable"
						, "type": "char[*]"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 5
						, "value": "str"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 5
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 5
				, "stmt": [{
					"": "return .result := 0;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 6
					, "stmt": {
						"": ".result := 0"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 6
							, "value": "0"
						}
					}
				}]
			}
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 8
			, "value": "result"
		}, {
			"": "for ( ; str[result]; result := result + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 9
			, "test": {
				"": "str[result]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 9
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 9
					, "value": "str"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 9
					, "value": "result"
				}
			}
			, "step": {
				"": "result := result + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 9
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 9
					, "value": "result"
				}
				, "right": {
					"": "result + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 9
					, "left": {
						"": "result"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 9
						, "value": "result"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 9
						, "value": "1"
					}
				}
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 11
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 11
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403808
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 403810
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 403815
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403816
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403820
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403821
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403823
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403824
		, "size": 1
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403825
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403829
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403833
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403835
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403837
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403838
		, "size": 1
	}, {
		"instruction": "jnz -10"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 403839
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403843
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403845
		, "size": 1
	}]
}, {
	"": "indexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "indexOf"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 403848
	, "static": true
	, "const": false
	, "doc": "Returns the index of the first occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 15
		, "stmt": [{
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 16
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 16
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 16
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 16
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 16
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 16
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 16
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 16
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 16
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 16
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 16
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 17
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 17
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 17
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 17
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 17
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 17
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 17
						, "stmt": [{
							"": "return .result := i;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 18
							, "stmt": {
								"": ".result := i"
								, "kind": ":="
								, "type": "int32"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "int32"
									, "value": ".result"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 18
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := -1;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 21
			, "stmt": {
				"": ".result := -1"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "-1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 21
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 21
						, "value": "1"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403848
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403849
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403853
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403855
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403857
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403858
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 403859
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403863
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 403864
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403865
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403869
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403871
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403872
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403876
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403878
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403880
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403881
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 403882
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403886
		, "size": 4
	}, {
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403890
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403895
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403897
		, "size": 1
	}]
}, {
	"": "lastIndexOf(str: char[*], chr: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "lastIndexOf"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 25
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 50
	, "offs": 403904
	, "static": true
	, "const": false
	, "doc": "Returns the index of the last occurrence of a character in string"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 25
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 26
			, "value": "result"
		}, {
			"": "for (i; str[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 27
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 27
				, "value": "i"
			}
			, "test": {
				"": "str[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 27
				, "left": {
					"": "str"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 27
					, "value": "str"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 27
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 27
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 27
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 27
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 27
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 27
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 27
				, "stmt": [{
					"": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 28
					, "test": {
						"": "str[i] == chr"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 28
						, "left": {
							"": "str[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 28
							, "left": {
								"": "str"
								, "kind": ".variable"
								, "type": "char[*]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 28
								, "value": "str"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 28
								, "value": "i"
							}
						}
						, "right": {
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 28
							, "value": "chr"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 28
						, "stmt": [{
							"": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 29
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 32
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 32
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.c32 -1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 403904
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403909
		, "size": 1
	}, {
		"instruction": "jmp +27"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403910
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403914
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403916
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403918
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403919
		, "size": 1
	}, {
		"instruction": "load.sp(+16)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 403920
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403924
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 403925
		, "size": 1
	}, {
		"instruction": "jz +7"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 403926
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(1, 0)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 403930
		, "size": 3
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 403933
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403937
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403939
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403941
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403942
		, "size": 1
	}, {
		"instruction": "jnz -29"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 403943
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403947
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 403951
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 403953
		, "size": 1
	}]
}, {
	"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 36
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 36
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 73
	, "offs": 403960
	, "static": true
	, "const": false
	, "doc": "Check if a string begins with a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 36
		, "stmt": [{
			"": "for (i; (with[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 37
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 37
				, "value": "i"
			}
			, "test": {
				"": "(with[i]) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 37
				, "left": {
					"": "(with[i])"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 37
					, "args": [{
						"": "with[i]"
						, "kind": "[]"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 37
						, "left": {
							"": "with"
							, "kind": ".variable"
							, "type": "char[*]"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 37
							, "value": "with"
						}
						, "right": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 37
							, "value": "i"
						}
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 37
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 37
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 37
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 37
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 37
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 37
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 37
				, "stmt": [{
					"": "if (cmp(str[i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 38
					, "test": {
						"": "cmp(str[i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 38
						, "left": {
							"": "cmp(str[i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 38
							, "args": [{
							}, {
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 38
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 38
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 38
									, "value": "i"
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 38
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 38
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 38
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 38
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 38
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 39
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 39
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 42
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 42
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403960
		, "size": 1
	}, {
		"instruction": "jmp +45"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 403961
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403965
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403966
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403968
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403970
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403971
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403972
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403974
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 403976
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 403977
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 403978
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 403980
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403981
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403985
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 403986
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 403987
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 403991
		, "size": 1
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 403992
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 403996
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 403997
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404001
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404002
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404006
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404008
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404010
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404011
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404012
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404013
		, "size": 1
	}, {
		"instruction": "jz -49"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404014
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404018
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404022
		, "size": 5
	}, {
		"instruction": "load.sp(+20)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404027
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404031
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404032
		, "size": 1
	}]
}, {
	"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
	, "kind": "function"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 46
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 46
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 126
	, "offs": 404040
	, "static": true
	, "const": false
	, "doc": "Check if a string ends in a specified string, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 46
		, "stmt": [{
			"": "withLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 47
			, "value": "withLen"
		}, {
			"": "strLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 48
			, "value": "strLen"
		}, {
			"": "if (strLen < withLen)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 49
			, "test": {
				"": "strLen < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 49
				, "left": {
					"": "strLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 49
					, "value": "strLen"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 49
					, "value": "withLen"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 49
				, "stmt": [{
					"": "return .result := false;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 50
					, "stmt": {
						"": ".result := false"
						, "kind": ":="
						, "type": "bool"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "bool"
							, "value": ".result"
						}
						, "right": {
							"": "false"
							, "kind": ".variable"
							, "type": "bool"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 50
							, "value": "false"
						}
					}
				}]
			}
		}, {
			"": "for (i; i < withLen; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 52
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 52
				, "value": "i"
			}
			, "test": {
				"": "i < withLen"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "withLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 52
					, "value": "withLen"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 52
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 52
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 52
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 52
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 52
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 52
				, "stmt": [{
					"": "if (cmp(str[strLen - withLen + i], with[i]) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 53
					, "test": {
						"": "cmp(str[strLen - withLen + i], with[i]) != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 53
						, "left": {
							"": "cmp(str[strLen - withLen + i], with[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 53
							, "args": [{
							}, {
								"": "str[strLen - withLen + i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 53
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 53
									, "value": "str"
								}
								, "right": {
									"": "strLen - withLen + i"
									, "kind": "+"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 53
									, "left": {
										"": "strLen - withLen"
										, "kind": "-"
										, "type": "int32"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 53
										, "left": {
											"": "strLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 53
											, "value": "strLen"
										}
										, "right": {
											"": "withLen"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 53
											, "value": "withLen"
										}
									}
									, "right": {
										"": "i"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 53
										, "value": "i"
									}
								}
							}, {
								"": "with[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 53
								, "left": {
									"": "with"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 53
									, "value": "with"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 53
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 53
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 53
						, "stmt": [{
							"": "return .result := false;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 54
							, "stmt": {
								"": ".result := false"
								, "kind": ":="
								, "type": "bool"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "bool"
									, "value": ".result"
								}
								, "right": {
									"": "false"
									, "kind": ".variable"
									, "type": "bool"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 54
									, "value": "false"
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := true;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 57
			, "stmt": {
				"": ".result := true"
				, "kind": ":="
				, "type": "bool"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "bool"
					, "value": ".result"
				}
				, "right": {
					"": "true"
					, "kind": ".variable"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 57
					, "value": "true"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404040
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404041
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404043
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404048
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404049
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404053
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404054
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404056
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404061
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404062
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404066
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404068
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404070
		, "size": 1
	}, {
		"instruction": "jz +15"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404071
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404075
		, "size": 1
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404076
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404080
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404081
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404085
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404086
		, "size": 1
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404087
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404091
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404092
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404094
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404096
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 404098
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404099
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404101
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404102
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404103
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404104
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404106
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404108
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404109
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404110
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404112
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404113
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404117
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404118
		, "size": 1
	}, {
		"instruction": "jnz +15"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404119
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404123
		, "size": 1
	}, {
		"instruction": "load.sp(+32)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404124
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404128
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404129
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404133
		, "size": 1
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404134
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404138
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404140
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404142
		, "size": 1
	}, {
		"instruction": "jnz -52"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404143
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404147
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404151
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404156
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404160
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404161
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404165
		, "size": 1
	}]
}, {
	"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 61
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": true
	}, {
		"": "cmp(chr: char, with: char): int32"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "cmp"
		, "type": "function"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "chr"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "chr"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "with"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "with"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 61
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 404168
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, less or greater, using a custom comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 61
		, "stmt": [{
			"": "result"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 62
			, "value": "result"
		}, {
			"": "for (i; result == 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 63
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 63
				, "value": "i"
			}
			, "test": {
				"": "result == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 63
				, "left": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 63
					, "value": "result"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 63
					, "value": "0"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 63
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 63
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 63
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 63
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 63
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 63
				, "stmt": [{
					"": "result := cmp(str[i], with[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 64
				}, {
					"": "if ((str[i]) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 65
					, "test": {
						"": "(str[i]) == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 65
						, "left": {
							"": "(str[i])"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 65
							, "args": [{
								"": "str[i]"
								, "kind": "[]"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 65
								, "left": {
									"": "str"
									, "kind": ".variable"
									, "type": "char[*]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 65
									, "value": "str"
								}
								, "right": {
									"": "i"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 65
									, "value": "i"
								}
							}]
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 65
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 65
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 66
						}]
					}
				}]
			}
		}, {
			"": "return .result := result;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 69
			, "stmt": {
				"": ".result := result"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "result"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 69
					, "value": "result"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404168
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404169
		, "size": 1
	}, {
		"instruction": "jmp +46"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404170
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404174
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404175
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404177
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404179
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404180
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404181
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404183
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404185
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404186
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404187
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404189
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404190
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404194
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404196
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404198
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404200
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404201
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404202
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404203
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404204
		, "size": 4
	}, {
		"instruction": "jmp +16"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404208
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404212
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404216
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404218
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404219
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404220
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404224
		, "size": 4
	}, {
		"instruction": "set.x32 sp(5)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404228
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404230
		, "size": 1
	}]
}, {
	"": "ignCaseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "ignCaseCmp"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 73
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 73
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 36
	, "offs": 404304
	, "static": true
	, "const": false
	, "doc": "ignore case character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 73
		, "stmt": [{
			"": "ignCase(chr: char): char"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 74
			, "value": "ignCase(chr: char): char"
		}, {
			"": "return .result := ignCase(chr) - ignCase(with);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 84
			, "stmt": {
				"": ".result := ignCase(chr) - ignCase(with)"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "ignCase(chr) - ignCase(with)"
					, "kind": "-"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 84
					, "left": {
						"": "ignCase(chr)"
						, "kind": "()"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 84
						, "args": [{
							"": "chr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 84
							, "value": "chr"
						}]
					}
					, "right": {
						"": "ignCase(with)"
						, "kind": "()"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 84
						, "args": [{
							"": "with"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 84
							, "value": "with"
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404304
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404305
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404309
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404310
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404315
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404316
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404320
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404321
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404325
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404326
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404331
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404332
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 404336
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404337
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404339
		, "size": 1
	}]
}, {
	"": "caseCmp(chr: char, with: char): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "caseCmp"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 88
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "chr"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "with"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "with"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 88
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 14
	, "offs": 404344
	, "static": true
	, "const": false
	, "doc": "default character comparator"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 88
		, "stmt": [{
			"": "return .result := chr - with;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 89
			, "stmt": {
				"": ".result := chr - with"
				, "kind": ":="
				, "type": "char"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "chr - with"
					, "kind": "-"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 89
					, "left": {
						"": "chr"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 89
						, "value": "chr"
					}
					, "right": {
						"": "with"
						, "kind": ".variable"
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 89
						, "value": "with"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404344
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404348
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404349
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404353
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 404354
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404355
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404357
		, "size": 1
	}]
}, {
	"": "toHex(value: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "toHex"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 93
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 93
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "convert lower part (4 bits) of the input value to the corresponding lower case hexadecimal character"
	, "ast": {
		"": "int32(\"0123456789abcdef\"[value & 15])"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 93
		, "args": [{
			"": "\"0123456789abcdef\"[value & 15]"
			, "kind": "[]"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 93
			, "left": {
				"": "\"0123456789abcdef\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 93
				, "value": "\"0123456789abcdef\""
			}
			, "right": {
				"": "value & 15"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 93
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 93
					, "value": "value"
				}
				, "right": {
					"": "15"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 93
					, "value": "15"
				}
			}
		}]
	}
}, {
	"": "startsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "startsWith"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 96
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 96
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 96
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 96
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string begins with a specified string, using case-sensitive comparison"
	, "ast": {
		"": "startsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 96
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 96
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 96
			, "value": "caseCmp"
		}]
	}
}, {
	"": "endsWith(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "endsWith"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 98
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 98
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 98
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string ends in a specified string, using case-sensitive comparison"
	, "ast": {
		"": "endsWith(str, with, caseCmp)"
		, "kind": "()"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 98
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 98
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 98
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 98
			, "value": "caseCmp"
		}]
	}
}, {
	"": "compare(str: char[*], with: char[*]): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "compare"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 100
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 100
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, less or greater, using case-sensitive comparison"
	, "ast": {
		"": "compare(str, with, caseCmp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 100
		, "args": [{
		}, {
			"": "str"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 100
			, "value": "str"
		}, {
			"": "with"
			, "kind": ".variable"
			, "type": "char[*]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 100
			, "value": "with"
		}, {
			"": "caseCmp"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 100
			, "value": "caseCmp"
		}]
	}
}, {
	"": "equals(str: char[*], with: char[*]): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "equals"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 102
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 102
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 102
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "with"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "with"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 102
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if the two strings are equal, using case-sensitive comparison"
	, "ast": {
		"": "compare(str, with, caseCmp) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 102
		, "left": {
			"": "compare(str, with, caseCmp)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 102
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 102
				, "value": "str"
			}, {
				"": "with"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 102
				, "value": "with"
			}, {
				"": "caseCmp"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 102
				, "value": "caseCmp"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 102
			, "value": "0"
		}
	}
}, {
	"": "contains(str: char[*], chr: char): bool"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "contains"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 105
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "bool"
		, "name": ".result"
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 105
		, "size": 1
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "str"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "str"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 105
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": true
	}, {
		"": "chr"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "chr"
		, "type": "char"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 105
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Check if a string contains the given character"
	, "ast": {
		"": "indexOf(str, chr) >= 0"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 105
		, "left": {
			"": "indexOf(str, chr)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 105
			, "args": [{
			}, {
				"": "str"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 105
				, "value": "str"
			}, {
				"": "chr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 105
				, "value": "chr"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 105
			, "value": "0"
		}
	}
}, {
	"": "FormatFlags"
	, "kind": "typename"
	, "cast": "val"
	, "name": "FormatFlags"
	, "type": "typename"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 119
	, "size": 16
	, "offs": 224656
	, "static": true
	, "const": true
	, "doc": "Flags to convert numbers to string"
}, {
	"": "FormatFlags.sign"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sign"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 121
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": true
	, "doc": "forced show sign"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 121
		, "value": "0"
	}
}, {
	"": "FormatFlags.precision"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "precision"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 124
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
	, "doc": "precision length"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 124
		, "value": "0"
	}
}, {
	"": "FormatFlags.padChr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padChr"
	, "owner": "FormatFlags"
	, "type": "char"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 127
	, "size": 1
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "padding character"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 127
		, "value": "0"
	}
}, {
	"": "FormatFlags.padLen"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "padLen"
	, "owner": "FormatFlags"
	, "type": "int32"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 130
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "doc": "padding length"
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 130
		, "value": "0"
	}
}, {
	"": "append(output: char[], pos: int32, value: char[*]): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 134
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "value"
		, "type": "char[*]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 119
	, "offs": 404360
	, "static": true
	, "const": false
	, "doc": "Append a string to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 134
		, "stmt": [{
			"": "if ((value) == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 135
			, "test": {
				"": "(value) == null"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 135
				, "left": {
					"": "(value)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 135
					, "args": [{
						"": "value"
						, "kind": ".variable"
						, "type": "char[*]"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 135
						, "value": "value"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 135
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 135
				, "stmt": [{
					"": "return .result := append(output, pos, \"NULL\");"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 136
					, "stmt": {
						"": ".result := append(output, pos, \"NULL\")"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "append(output, pos, \"NULL\")"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 136
							, "args": [{
							}, {
								"": "output"
								, "kind": ".variable"
								, "type": "char[]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 136
								, "value": "output"
							}, {
								"": "pos"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 136
								, "value": "pos"
							}, {
								"": "\"NULL\""
								, "kind": ".literal"
								, "type": ".cstr"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 136
								, "value": "\"NULL\""
							}]
						}
					}
				}]
			}
		}, {
			"": "for (i; value[i]; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 138
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 138
				, "value": "i"
			}
			, "test": {
				"": "value[i]"
				, "kind": "[]"
				, "type": "char"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 138
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "char[*]"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 138
					, "value": "value"
				}
				, "right": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 138
					, "value": "i"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 138
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 138
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 138
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 138
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 138
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 138
				, "stmt": [{
					"": "if (pos >= (output.length))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 139
					, "test": {
						"": "pos >= (output.length)"
						, "kind": ">="
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 139
						, "left": {
							"": "pos"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 139
							, "value": "pos"
						}
						, "right": {
							"": "(output.length)"
							, "kind": "()"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 139
							, "args": [{
								"": "output.length"
								, "kind": "."
								, "type": "uint32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 139
								, "left": {
									"": "output"
									, "kind": ".variable"
									, "type": "char[]"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 139
									, "value": "output"
								}
								, "right": {
									"": "length"
									, "kind": ".variable"
									, "type": "uint32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 139
									, "value": "length"
								}
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 139
						, "stmt": [{
							"": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 140
						}]
					}
				}, {
					"": "output[pos] := value[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 142
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 143
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 146
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 146
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 146
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 146
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 146
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 146
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 146
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 146
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 147
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 149
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 150
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 150
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404360
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404362
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404367
		, "size": 1
	}, {
		"instruction": "jz +27"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404368
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404372
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 404373
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404375
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404377
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404382
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404387
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404388
		, "size": 4
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404392
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404394
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404395
		, "size": 1
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404396
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404400
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404402
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404404
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404405
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404409
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404413
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404415
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404417
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404418
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404419
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404421
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404423
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404424
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404425
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404427
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404431
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404433
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404437
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404439
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404441
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404442
		, "size": 1
	}, {
		"instruction": "jnz -43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404443
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404447
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404451
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404453
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404455
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404456
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404460
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404462
		, "size": 4
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404466
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404468
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404469
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404471
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404473
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404474
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(5, 2)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 404475
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 404478
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, radix: int32, value: uint64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 154
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 154
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 154
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 154
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "radix"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "radix"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 154
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 154
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 154
		, "size": 4
		, "offs": 32
		, "static": false
		, "const": true
	}]
	, "size": 653
	, "offs": 404496
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 154
		, "stmt": [{
			"": "whiteSpace"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 155
			, "value": "whiteSpace"
		}, {
			"": "radixDigits"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 156
			, "value": "radixDigits"
		}, {
			"": "len"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 158
			, "value": "len"
		}, {
			"": "digits"
			, "kind": ".variable"
			, "type": "char[80]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 159
			, "value": "digits"
		}, {
			"": "assert(radix > 1, \"radix is too small\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 161
		}, {
			"": "assert(radix < (radixDigits.length), \"radix is too big\", radix);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 162
		}, {
			"": "for ( ; value > (0); value := value / (radix))"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 165
			, "test": {
				"": "value > (0)"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 165
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 165
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "uint64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 165
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 165
						, "value": "0"
					}]
				}
			}
			, "step": {
				"": "value := value / (radix)"
				, "kind": ":="
				, "type": "uint64"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 165
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "uint64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 165
					, "value": "value"
				}
				, "right": {
					"": "value / (radix)"
					, "kind": "/"
					, "type": "uint64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 165
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "uint64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 165
						, "value": "value"
					}
					, "right": {
						"": "(radix)"
						, "kind": "()"
						, "type": "uint64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 165
						, "args": [{
							"": "radix"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 165
							, "value": "radix"
						}]
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 165
				, "stmt": [{
					"": "digits[len := len + 1] := radixDigits[value % (radix)];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 166
				}]
			}
		}, {
			"": "if (len == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 168
			, "test": {
				"": "len == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 168
				, "left": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 168
					, "value": "len"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 168
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 168
				, "stmt": [{
					"": "digits[len := len + 1] := '0';"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 169
				}]
			}
		}, {
			"": "maxLen"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 172
			, "value": "maxLen"
		}, {
			"": "padChr"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 174
			, "value": "padChr"
		}, {
			"": "if (padChr == '')"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 175
			, "test": {
				"": "padChr == ''"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 175
				, "left": {
					"": "padChr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 175
					, "value": "padChr"
				}
				, "right": {
					"": "''"
					, "kind": ".literal"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 175
					, "value": "''"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 175
				, "stmt": [{
					"": "padChr := ' ';"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 176
				}]
			}
		}, {
			"": "if ((format.sign) != 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 180
			, "test": {
				"": "(format.sign) != 0"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 180
				, "left": {
					"": "(format.sign)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 180
					, "args": [{
						"": "format.sign"
						, "kind": "."
						, "type": "char"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 180
						, "left": {
							"": "format"
							, "kind": ".variable"
							, "type": "FormatFlags"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 180
							, "value": "format"
						}
						, "right": {
							"": "sign"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 180
							, "value": "sign"
						}
					}]
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 180
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 180
				, "stmt": [{
					"": "maxLen := maxLen - 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 181
				}, {
					"": "if (contains(whiteSpace, padChr))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 182
					, "test": {
						"": "contains(whiteSpace, padChr)"
						, "kind": "()"
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 182
						, "args": [{
						}, {
							"": "whiteSpace"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 182
							, "value": "whiteSpace"
						}, {
							"": "padChr"
							, "kind": ".variable"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 182
							, "value": "padChr"
						}]
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 182
						, "stmt": [{
							"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
							, "kind": "for"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 184
							, "test": {
								"": "maxLen > 0"
								, "kind": ">"
								, "type": "bool"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 184
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 184
									, "value": "maxLen"
								}
								, "right": {
									"": "0"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 184
									, "value": "0"
								}
							}
							, "step": {
								"": "maxLen := maxLen - 1"
								, "kind": ":="
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 184
								, "left": {
									"": "maxLen"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 184
									, "value": "maxLen"
								}
								, "right": {
									"": "maxLen - 1"
									, "kind": "-"
									, "type": "int32"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 184
									, "left": {
										"": "maxLen"
										, "kind": ".variable"
										, "type": "int32"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 184
										, "value": "maxLen"
									}
									, "right": {
										"": "1"
										, "kind": ".literal"
										, "type": "int32"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 184
										, "value": "1"
									}
								}
							}
							, "stmt": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 184
								, "stmt": [{
									"": "assert(pos < (output.length));"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 185
								}, {
									"": "output[pos] := padChr;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 186
								}, {
									"": "pos := pos + 1;"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 187
								}]
							}
						}]
					}
				}, {
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 190
				}, {
					"": "output[pos] := format.sign;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 191
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 192
				}]
			}
		}, {
			"": "for ( ; maxLen > 0; maxLen := maxLen - 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 196
			, "test": {
				"": "maxLen > 0"
				, "kind": ">"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 196
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 196
					, "value": "maxLen"
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 196
					, "value": "0"
				}
			}
			, "step": {
				"": "maxLen := maxLen - 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 196
				, "left": {
					"": "maxLen"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 196
					, "value": "maxLen"
				}
				, "right": {
					"": "maxLen - 1"
					, "kind": "-"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 196
					, "left": {
						"": "maxLen"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 196
						, "value": "maxLen"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 196
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 196
				, "stmt": [{
					"": "assert(pos < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 197
				}, {
					"": "output[pos] := padChr;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 198
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 199
				}]
			}
		}, {
			"": "for (i; i < len; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 203
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 203
				, "value": "i"
			}
			, "test": {
				"": "i < len"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 203
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 203
					, "value": "i"
				}
				, "right": {
					"": "len"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 203
					, "value": "len"
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 203
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 203
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 203
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 203
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 203
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 203
				, "stmt": [{
					"": "assert(i < (output.length));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 204
				}, {
					"": "output[pos] := digits[len - i];"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 205
				}, {
					"": "pos := pos + 1;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 206
				}]
			}
		}, {
			"": "if (pos >= (output.length))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 209
			, "test": {
				"": "pos >= (output.length)"
				, "kind": ">="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 209
				, "left": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 209
					, "value": "pos"
				}
				, "right": {
					"": "(output.length)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 209
					, "args": [{
						"": "output.length"
						, "kind": "."
						, "type": "uint32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 209
						, "left": {
							"": "output"
							, "kind": ".variable"
							, "type": "char[]"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 209
							, "value": "output"
						}
						, "right": {
							"": "length"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 209
							, "value": "length"
						}
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 209
				, "stmt": [{
					"": "pos := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 210
				}]
			}
		}, {
			"": "output[pos] := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 212
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 213
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 213
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404496
		, "size": 1
	}, {
		"instruction": "inc.sp(+80)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404497
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404501
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404503
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404508
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404509
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404513
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404517
		, "size": 5
	}, {
		"instruction": "load.c32 161"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404522
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404527
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404532
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404537
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404542
		, "size": 5
	}, {
		"instruction": "load.sp(+124)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404547
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404551
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(25)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404555
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404557
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404561
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404562
		, "size": 4
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404566
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404570
		, "size": 5
	}, {
		"instruction": "load.c32 162"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404575
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404580
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404585
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404590
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404595
		, "size": 5
	}, {
		"instruction": "load.sp(+124)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404600
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404604
		, "size": 4
	}, {
		"instruction": "jmp +41"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404608
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404612
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(24)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 404616
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(28)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404618
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 404620
		, "size": 1
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 404621
		, "size": 1
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 404622
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404623
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404624
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404625
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404629
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404631
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404635
		, "size": 2
	}, {
		"instruction": "set.x32 sp(24)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404637
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404639
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404640
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(23)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 404641
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(27)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404643
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 404645
		, "size": 1
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 404646
		, "size": 1
	}, {
		"instruction": "set.x64 sp(25)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 404647
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(23)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 404649
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 404651
		, "size": 1
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 404652
		, "size": 1
	}, {
		"instruction": "jnz -41"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404653
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(20)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404657
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404659
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404660
		, "size": 1
	}, {
		"instruction": "jz +25"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404661
		, "size": 4
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404665
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404670
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404674
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404676
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404680
		, "size": 2
	}, {
		"instruction": "set.x32 sp(24)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404682
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404684
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404685
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(22)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404686
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404688
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 404692
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(21)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404693
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 404695
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(23)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404696
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404698
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404702
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404703
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404707
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404708
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404709
		, "size": 1
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404710
		, "size": 4
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404714
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404719
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404723
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(24)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404724
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404726
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404727
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 404728
		, "size": 1
	}, {
		"instruction": "jnz +198"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404729
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404733
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404735
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404739
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404741
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 404742
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404746
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404750
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404751
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 404756
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 404757
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404761
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404762
		, "size": 1
	}, {
		"instruction": "jnz +95"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404763
		, "size": 4
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404767
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(28)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404771
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404773
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404775
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404776
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404780
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404784
		, "size": 5
	}, {
		"instruction": "load.c32 185"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404789
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404794
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404799
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404804
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404809
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404814
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404819
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404823
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404827
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404828
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404830
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404832
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404833
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(28)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404834
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404836
		, "size": 4
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404840
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404842
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404844
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404848
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404850
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 404852
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 404853
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 404854
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(28)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404858
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404860
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404862
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404863
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404867
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404871
		, "size": 5
	}, {
		"instruction": "load.c32 190"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404876
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404881
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404886
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404891
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404896
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404901
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404906
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(24)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404910
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404912
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404913
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404915
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404917
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404918
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(28)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404919
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404921
		, "size": 4
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 404925
		, "size": 2
	}, {
		"instruction": "jmp +83"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404927
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(28)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404931
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404933
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 404935
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 404936
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 404940
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404944
		, "size": 5
	}, {
		"instruction": "load.c32 197"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404949
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404954
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 404959
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404964
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404969
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 404974
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 404979
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 404983
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 404987
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404988
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404990
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 404992
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 404993
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(28)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 404994
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 404996
		, "size": 4
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405000
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405002
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405004
		, "size": 4
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405008
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405010
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405012
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 405013
		, "size": 1
	}, {
		"instruction": "jnz -83"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 405014
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405018
		, "size": 1
	}, {
		"instruction": "jmp +85"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405019
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405023
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(32)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405025
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405027
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405028
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405032
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405036
		, "size": 5
	}, {
		"instruction": "load.c32 204"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405041
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405046
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405051
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405056
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405061
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405066
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 405071
		, "size": 4
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405075
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(24)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405079
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405081
		, "size": 2
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 405083
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 405084
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405085
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405086
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405088
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 405090
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 405091
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(29)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405092
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405094
		, "size": 4
	}, {
		"instruction": "set.x32 sp(30)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405098
		, "size": 2
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405100
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405104
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(24)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405106
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405108
		, "size": 1
	}, {
		"instruction": "jnz -86"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 405109
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405113
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(28)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405117
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(31)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405119
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405121
		, "size": 1
	}, {
		"instruction": "jnz +12"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 405122
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405126
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405128
		, "size": 4
	}, {
		"instruction": "set.x32 sp(29)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405132
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405134
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405135
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(30)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405137
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 405139
		, "size": 1
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 405140
		, "size": 1
	}, {
		"instruction": "mov.x32 sp(31, 28)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 405141
		, "size": 3
	}, {
		"instruction": "inc.sp(-92)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405144
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 405148
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 217
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 217
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u64"
		, "name": "value"
		, "type": "uint64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 217
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 217
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 10, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 217
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 217
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 217
			, "value": "pos"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 217
			, "value": "10"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 217
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 217
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 217
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 220
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 220
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 220
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 220
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 220
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 220
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 10, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 220
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 220
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 220
			, "value": "pos"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 220
			, "value": "10"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 220
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 220
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 220
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 223
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 223
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint16"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 223
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 10, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 223
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 223
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 223
			, "value": "pos"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 223
			, "value": "10"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 223
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 223
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 223
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 226
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "u32"
		, "name": "value"
		, "type": "uint8"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 10, uint64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 226
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "value": "pos"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "value": "10"
		}, {
			"": "uint64(value)"
			, "kind": "()"
			, "type": "uint64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 226
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 226
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, radix: int32, value: int64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 229
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 229
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "radix"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "radix"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 229
		, "size": 8
		, "offs": 28
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 229
		, "size": 4
		, "offs": 32
		, "static": false
		, "const": true
	}]
	, "size": 102
	, "offs": 405152
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 229
		, "stmt": [{
			"": "signedFormat"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 230
			, "value": "signedFormat"
		}, {
			"": "if (value < (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 236
			, "test": {
				"": "value < (0)"
				, "kind": "<"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 236
				, "left": {
					"": "value"
					, "kind": ".variable"
					, "type": "int64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 236
					, "value": "value"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "int64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 236
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 236
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 236
				, "stmt": [{
					"": "value := -value;"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 237
				}]
			}
		}, {
			"": "return .result := append(output, pos, radix, uint64(value), signedFormat);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 239
			, "stmt": {
				"": ".result := append(output, pos, radix, uint64(value), signedFormat)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, radix, uint64(value), signedFormat)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 239
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 239
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 239
						, "value": "pos"
					}, {
						"": "radix"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 239
						, "value": "radix"
					}, {
						"": "uint64(value)"
						, "kind": "()"
						, "type": "uint64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 239
						, "args": [{
							"": "value"
							, "kind": ".variable"
							, "type": "int64"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 239
							, "value": "value"
						}]
					}, {
						"": "signedFormat"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 239
						, "value": "signedFormat"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405152
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405156
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 405158
		, "size": 1
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 405159
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405160
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405164
		, "size": 5
	}, {
		"instruction": "jmp +7"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405169
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405173
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405175
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405176
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 405180
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405181
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405183
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 405187
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405188
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405190
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405192
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 405196
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405197
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405199
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405201
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405205
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405206
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 405210
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405211
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 405213
		, "size": 1
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 405214
		, "size": 1
	}, {
		"instruction": "jz +9"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405215
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405219
		, "size": 2
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 405221
		, "size": 1
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405222
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405224
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405225
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405227
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405229
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(11)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405231
		, "size": 2
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405233
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405237
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 405242
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405243
		, "size": 4
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405247
		, "size": 2
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405249
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 405253
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 243
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 243
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 243
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 243
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i64"
		, "name": "value"
		, "type": "int64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 243
		, "size": 8
		, "offs": 20
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 243
		, "size": 4
		, "offs": 24
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 10, int64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 243
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 243
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 243
			, "value": "pos"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 243
			, "value": "10"
		}, {
			"": "int64(value)"
			, "kind": "()"
			, "type": "int64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 243
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 243
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 243
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 246
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 246
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 246
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 246
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 246
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 246
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 10, int64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 246
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 246
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 246
			, "value": "pos"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 246
			, "value": "10"
		}, {
			"": "int64(value)"
			, "kind": "()"
			, "type": "int64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 246
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 246
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 246
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 249
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 249
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 249
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 249
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int16"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 249
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 249
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 10, int64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 249
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 249
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 249
			, "value": "pos"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 249
			, "value": "10"
		}, {
			"": "int64(value)"
			, "kind": "()"
			, "type": "int64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 249
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 249
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 249
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 252
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 252
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 252
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 252
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "value"
		, "type": "int8"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 252
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 252
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, 10, int64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 252
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 252
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 252
			, "value": "pos"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 252
			, "value": "10"
		}, {
			"": "int64(value)"
			, "kind": "()"
			, "type": "int64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 252
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 252
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 252
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 255
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 255
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 255
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 255
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 255
		, "size": 8
		, "offs": 24
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 255
		, "size": 4
		, "offs": 28
		, "static": false
		, "const": true
	}]
	, "size": 402
	, "offs": 405280
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 255
		, "stmt": [{
			"": "formatDec"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 257
			, "value": "formatDec"
		}, {
			"": "formatInt"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 258
			, "value": "formatInt"
		}, {
			"": "end"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 265
			, "value": "end"
		}, {
			"": "fraction"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 267
			, "value": "fraction"
		}, {
			"": "pos := append(output, pos, uint64(int64(value)), formatInt);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 268
		}, {
			"": "eps"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 270
			, "value": "eps"
		}, {
			"": "if (fraction < eps && pos >= end)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 271
			, "test": {
				"": "fraction < eps && pos >= end"
				, "kind": "&&"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 271
				, "left": {
					"": "fraction < eps"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 271
					, "left": {
						"": "fraction"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 271
						, "value": "fraction"
					}
					, "right": {
						"": "eps"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 271
						, "value": "eps"
					}
				}
				, "right": {
					"": "pos >= end"
					, "kind": ">="
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 271
					, "left": {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 271
						, "value": "pos"
					}
					, "right": {
						"": "end"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 271
						, "value": "end"
					}
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 271
				, "stmt": [{
					"": "return .result := pos;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 272
					, "stmt": {
						"": ".result := pos"
						, "kind": ":="
						, "type": "int32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "int32"
							, "value": ".result"
						}
						, "right": {
							"": "pos"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 272
							, "value": "pos"
						}
					}
				}]
			}
		}, {
			"": "pos := append(output, pos, \".\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 276
		}, {
			"": "max"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 277
			, "value": "max"
		}, {
			"": "if (format.precision == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 279
			, "test": {
				"": "format.precision == 0"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 279
				, "left": {
					"": "format.precision"
					, "kind": "."
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 279
					, "left": {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 279
						, "value": "format"
					}
					, "right": {
						"": "precision"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 279
						, "value": "precision"
					}
				}
				, "right": {
					"": "0"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 279
					, "value": "0"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 279
				, "stmt": [{
					"": "max := (output.length - (1));"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 281
				}]
			}
		}, {
			"": "for ( ; (fraction > eps && pos < max) || pos < end; )"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 283
			, "test": {
				"": "(fraction > eps && pos < max) || pos < end"
				, "kind": "||"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 283
				, "left": {
					"": "(fraction > eps && pos < max)"
					, "kind": "()"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 283
					, "args": [{
						"": "fraction > eps && pos < max"
						, "kind": "&&"
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 283
						, "left": {
							"": "fraction > eps"
							, "kind": ">"
							, "type": "bool"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 283
							, "left": {
								"": "fraction"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 283
								, "value": "fraction"
							}
							, "right": {
								"": "eps"
								, "kind": ".variable"
								, "type": "float64"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 283
								, "value": "eps"
							}
						}
						, "right": {
							"": "pos < max"
							, "kind": "<"
							, "type": "bool"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 283
							, "left": {
								"": "pos"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 283
								, "value": "pos"
							}
							, "right": {
								"": "max"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 283
								, "value": "max"
							}
						}
					}]
				}
				, "right": {
					"": "pos < end"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 283
					, "left": {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 283
						, "value": "pos"
					}
					, "right": {
						"": "end"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 283
						, "value": "end"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 283
				, "stmt": [{
					"": "fraction := Math.modf(fraction * (10), &value);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 284
				}, {
					"": "pos := append(output, pos, uint64(int64(value)), formatDec);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 285
				}]
			}
		}, {
			"": "return .result := pos;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 287
			, "stmt": {
				"": ".result := pos"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "pos"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 287
					, "value": "pos"
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405280
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405284
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 405286
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 405287
		, "size": 1
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405288
		, "size": 4
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405292
		, "size": 5
	}, {
		"instruction": "jmp +7"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405297
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405301
		, "size": 2
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405303
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405304
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 405308
		, "size": 1
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405309
		, "size": 5
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405314
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405316
		, "size": 2
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405318
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405322
		, "size": 1
	}, {
		"instruction": "load.sp(+12)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405323
		, "size": 4
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 405327
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405328
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405330
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 405334
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405335
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405337
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 405341
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 405342
		, "size": 1
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405343
		, "size": 4
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405347
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405349
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405351
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405355
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(7)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405357
		, "size": 2
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405359
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 405363
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 405364
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405365
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405367
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405369
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405370
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405374
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405376
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405380
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405382
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405384
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 405388
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(9)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405389
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405391
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 405393
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 405394
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405395
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405399
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 405401
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405402
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405406
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405408
		, "size": 2
	}, {
		"instruction": "load.sp(+44)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405410
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405414
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 405419
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405420
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405424
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405425
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405427
		, "size": 2
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405429
		, "size": 5
	}, {
		"instruction": "dup.x64 sp(14)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405434
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 405436
		, "size": 1
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405437
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405441
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 405446
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405447
		, "size": 4
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405451
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405453
		, "size": 2
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405455
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 405459
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405460
		, "size": 2
	}, {
		"instruction": "jz +14"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405462
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405466
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(11)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405470
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405472
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405474
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 405475
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405476
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(14, 11)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 405480
		, "size": 3
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405483
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 405487
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405488
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(13)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405489
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405491
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405493
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405498
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 405503
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405504
		, "size": 4
	}, {
		"instruction": "set.x32 sp(12)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405508
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(13)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405510
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405512
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405516
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405518
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405520
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 405524
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 405525
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405526
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405528
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405530
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405531
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405535
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405537
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405541
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405543
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405545
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(9)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405549
		, "size": 2
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405551
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 405555
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405556
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 405557
		, "size": 1
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405558
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(14)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405562
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405564
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405568
		, "size": 2
	}, {
		"instruction": "jmp +63"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405570
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 405574
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(3)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405575
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405577
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 405586
		, "size": 1
	}, {
		"instruction": "load.sp(+56)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405587
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405591
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 405596
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405597
		, "size": 4
	}, {
		"instruction": "set.x64 sp(3)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405601
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405603
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(14)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405604
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(15)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405606
		, "size": 2
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405608
		, "size": 5
	}, {
		"instruction": "dup.x64 sp(15)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405613
		, "size": 2
	}, {
		"instruction": "f64.2i64"
		, "name": "f64.2i64"
		, "code": "0x8b"
		, "offs": 405615
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405616
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405621
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 405626
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405627
		, "size": 4
	}, {
		"instruction": "set.x32 sp(13)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405631
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405633
		, "size": 2
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 405635
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 405639
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405640
		, "size": 2
	}, {
		"instruction": "jz +13"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405642
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405646
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405650
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405652
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405654
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405655
		, "size": 2
	}, {
		"instruction": "jnz +13"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 405657
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405661
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(12)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405665
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(4)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405667
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405669
		, "size": 1
	}, {
		"instruction": "jnz -96"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 405670
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(15, 12)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 405674
		, "size": 3
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405677
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 405681
		, "size": 1
	}]
}, {
	"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 291
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 291
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "inline"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 291
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 291
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 291
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "format"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "format"
		, "type": "FormatFlags"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 291
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": true
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "append(output, pos, float64(value), format)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 291
		, "args": [{
		}, {
			"": "output"
			, "kind": ".variable"
			, "type": "char[]"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 291
			, "value": "output"
		}, {
			"": "pos"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 291
			, "value": "pos"
		}, {
			"": "float64(value)"
			, "kind": "()"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 291
			, "args": [{
				"": "value"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 291
				, "value": "value"
			}]
		}, {
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 291
			, "value": "format"
		}]
	}
}, {
	"": "append(output: char[], pos: int32, value: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "append"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 294
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 294
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "output"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "output"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 294
		, "size": 8
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "pos"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "pos"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 294
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "value"
		, "type": "int32"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 294
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 31
	, "offs": 405704
	, "static": true
	, "const": false
	, "doc": "Append a number to the output at the given position"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 294
		, "stmt": [{
			"": "format"
			, "kind": ".variable"
			, "type": "FormatFlags"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 295
			, "value": "format"
		}, {
			"": "return .result := append(output, pos, value, format);"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 296
			, "stmt": {
				"": ".result := append(output, pos, value, format)"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "append(output, pos, value, format)"
					, "kind": "()"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 296
					, "args": [{
					}, {
						"": "output"
						, "kind": ".variable"
						, "type": "char[]"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 296
						, "value": "output"
					}, {
						"": "pos"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 296
						, "value": "pos"
					}, {
						"": "value"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 296
						, "value": "value"
					}, {
						"": "format"
						, "kind": ".variable"
						, "type": "FormatFlags"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 296
						, "value": "format"
					}]
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405704
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405705
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405707
		, "size": 2
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405709
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(6)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405714
		, "size": 2
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 405716
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405717
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 405722
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 405727
		, "size": 1
	}, {
		"instruction": "inc.sp(-28)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405728
		, "size": 4
	}, {
		"instruction": "set.x32 sp(6)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 405732
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 405734
		, "size": 1
	}]
}, {
	"": "float64(value: char[]): float64"
	, "kind": "function"
	, "cast": "inline"
	, "name": "float64"
	, "type": "function"
	, "file": "cmplStd/lib/text/string.ci"
	, "line": 300
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "f64"
		, "name": ".result"
		, "type": "float64"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 300
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "variable"
		, "cast": "arr"
		, "name": "value"
		, "type": "char[]"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 300
		, "size": 8
		, "offs": 16
		, "static": false
		, "const": true
	}]
	, "size": 343
	, "offs": 405736
	, "static": true
	, "const": false
	, "doc": "Convert a string to a 64 bit floating point value"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/lib/text/string.ci"
		, "line": 300
		, "stmt": [{
			"": "sign"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 301
			, "value": "sign"
		}, {
			"": "result"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 302
			, "value": "result"
		}, {
			"": "decimal"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 303
			, "value": "decimal"
		}, {
			"": "for (i; i < (value.length) && (value[i]) != 0; i := i + 1)"
			, "kind": "for"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 306
			, "init": {
				"": "i"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 306
				, "value": "i"
			}
			, "test": {
				"": "i < (value.length) && (value[i]) != 0"
				, "kind": "&&"
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 306
				, "left": {
					"": "i < (value.length)"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 306
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 306
						, "value": "i"
					}
					, "right": {
						"": "(value.length)"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 306
						, "args": [{
							"": "value.length"
							, "kind": "."
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 306
							, "left": {
								"": "value"
								, "kind": ".variable"
								, "type": "char[]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 306
								, "value": "value"
							}
							, "right": {
								"": "length"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 306
								, "value": "length"
							}
						}]
					}
				}
				, "right": {
					"": "(value[i]) != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 306
					, "left": {
						"": "(value[i])"
						, "kind": "()"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 306
						, "args": [{
							"": "value[i]"
							, "kind": "[]"
							, "type": "char"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 306
							, "left": {
								"": "value"
								, "kind": ".variable"
								, "type": "char[]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 306
								, "value": "value"
							}
							, "right": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 306
								, "value": "i"
							}
						}]
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 306
						, "value": "0"
					}
				}
			}
			, "step": {
				"": "i := i + 1"
				, "kind": ":="
				, "type": "int32"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 306
				, "left": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 306
					, "value": "i"
				}
				, "right": {
					"": "i + 1"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 306
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 306
						, "value": "i"
					}
					, "right": {
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 306
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 306
				, "stmt": [{
					"": "chr"
					, "kind": ".variable"
					, "type": "char"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 307
					, "value": "chr"
				}, {
					"": "if (chr >= '0' && chr <= '9')"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 308
					, "test": {
						"": "chr >= '0' && chr <= '9'"
						, "kind": "&&"
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 308
						, "left": {
							"": "chr >= '0'"
							, "kind": ">="
							, "type": "bool"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 308
							, "left": {
								"": "chr"
								, "kind": ".variable"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 308
								, "value": "chr"
							}
							, "right": {
								"": "'0'"
								, "kind": ".literal"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 308
								, "value": "'0'"
							}
						}
						, "right": {
							"": "chr <= '9'"
							, "kind": "<="
							, "type": "bool"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 308
							, "left": {
								"": "chr"
								, "kind": ".variable"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 308
								, "value": "chr"
							}
							, "right": {
								"": "'9'"
								, "kind": ".literal"
								, "type": "char"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 308
								, "value": "'9'"
							}
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 308
						, "stmt": [{
							"": "result := result * (10) + ((chr - '0'));"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 309
						}, {
							"": "decimal := decimal * (10);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 310
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 312
						, "stmt": [{
							"": "if (chr == '.')"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 312
							, "test": {
								"": "chr == '.'"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 312
								, "left": {
									"": "chr"
									, "kind": ".variable"
									, "type": "char"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 312
									, "value": "chr"
								}
								, "right": {
									"": "'.'"
									, "kind": ".literal"
									, "type": "char"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 312
									, "value": "'.'"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 312
								, "stmt": [{
									"": "if (decimal != (0))"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 313
									, "test": {
										"": "decimal != (0)"
										, "kind": "!="
										, "type": "bool"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 313
										, "left": {
											"": "decimal"
											, "kind": ".variable"
											, "type": "float64"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 313
											, "value": "decimal"
										}
										, "right": {
											"": "(0)"
											, "kind": "()"
											, "type": "float64"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 313
											, "args": [{
												"": "0"
												, "kind": ".literal"
												, "type": "int32"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 313
												, "value": "0"
											}]
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 313
										, "stmt": [{
											"": "return .result := Math.nan;"
											, "kind": "return"
											, "type": "void"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 315
											, "stmt": {
												"": ".result := Math.nan"
												, "kind": ":="
												, "type": "float64"
												, "left": {
													"": ".result"
													, "kind": ".variable"
													, "type": "float64"
													, "value": ".result"
												}
												, "right": {
													"": "Math.nan"
													, "kind": "."
													, "type": "float64"
													, "file": "cmplStd/lib/text/string.ci"
													, "line": 315
													, "left": {
														"": "Math"
														, "kind": ".variable"
														, "type": "typename"
														, "file": "cmplStd/lib/text/string.ci"
														, "line": 315
														, "value": "Math"
													}
													, "right": {
														"": "nan"
														, "kind": ".variable"
														, "type": "float64"
														, "file": "cmplStd/lib/text/string.ci"
														, "line": 315
														, "value": "nan"
													}
												}
											}
										}]
									}
								}, {
									"": "decimal := (1);"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 317
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 319
								, "stmt": [{
									"": "if (chr == '-' && i == 0)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 319
									, "test": {
										"": "chr == '-' && i == 0"
										, "kind": "&&"
										, "type": "bool"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 319
										, "left": {
											"": "chr == '-'"
											, "kind": "=="
											, "type": "bool"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 319
											, "left": {
												"": "chr"
												, "kind": ".variable"
												, "type": "char"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 319
												, "value": "chr"
											}
											, "right": {
												"": "'-'"
												, "kind": ".literal"
												, "type": "char"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 319
												, "value": "'-'"
											}
										}
										, "right": {
											"": "i == 0"
											, "kind": "=="
											, "type": "bool"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 319
											, "left": {
												"": "i"
												, "kind": ".variable"
												, "type": "int32"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 319
												, "value": "i"
											}
											, "right": {
												"": "0"
												, "kind": ".literal"
												, "type": "int32"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 319
												, "value": "0"
											}
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 319
										, "stmt": [{
											"": "sign := (-1);"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 320
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 322
										, "stmt": [{
											"": "if (chr == '+' && i == 0)"
											, "kind": "if"
											, "type": "void"
											, "file": "cmplStd/lib/text/string.ci"
											, "line": 322
											, "test": {
												"": "chr == '+' && i == 0"
												, "kind": "&&"
												, "type": "bool"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 322
												, "left": {
													"": "chr == '+'"
													, "kind": "=="
													, "type": "bool"
													, "file": "cmplStd/lib/text/string.ci"
													, "line": 322
													, "left": {
														"": "chr"
														, "kind": ".variable"
														, "type": "char"
														, "file": "cmplStd/lib/text/string.ci"
														, "line": 322
														, "value": "chr"
													}
													, "right": {
														"": "'+'"
														, "kind": ".literal"
														, "type": "char"
														, "file": "cmplStd/lib/text/string.ci"
														, "line": 322
														, "value": "'+'"
													}
												}
												, "right": {
													"": "i == 0"
													, "kind": "=="
													, "type": "bool"
													, "file": "cmplStd/lib/text/string.ci"
													, "line": 322
													, "left": {
														"": "i"
														, "kind": ".variable"
														, "type": "int32"
														, "file": "cmplStd/lib/text/string.ci"
														, "line": 322
														, "value": "i"
													}
													, "right": {
														"": "0"
														, "kind": ".literal"
														, "type": "int32"
														, "file": "cmplStd/lib/text/string.ci"
														, "line": 322
														, "value": "0"
													}
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 322
												, "stmt": [{
													"": "sign := (1);"
													, "kind": ";"
													, "type": "void"
													, "file": "cmplStd/lib/text/string.ci"
													, "line": 323
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/lib/text/string.ci"
												, "line": 325
												, "stmt": [{
													"": "return .result := Math.nan;"
													, "kind": "return"
													, "type": "void"
													, "file": "cmplStd/lib/text/string.ci"
													, "line": 327
													, "stmt": {
														"": ".result := Math.nan"
														, "kind": ":="
														, "type": "float64"
														, "left": {
															"": ".result"
															, "kind": ".variable"
															, "type": "float64"
															, "value": ".result"
														}
														, "right": {
															"": "Math.nan"
															, "kind": "."
															, "type": "float64"
															, "file": "cmplStd/lib/text/string.ci"
															, "line": 327
															, "left": {
																"": "Math"
																, "kind": ".variable"
																, "type": "typename"
																, "file": "cmplStd/lib/text/string.ci"
																, "line": 327
																, "value": "Math"
															}
															, "right": {
																"": "nan"
																, "kind": ".variable"
																, "type": "float64"
																, "file": "cmplStd/lib/text/string.ci"
																, "line": 327
																, "value": "nan"
															}
														}
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}
		}, {
			"": "if (decimal == (0))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 331
			, "test": {
				"": "decimal == (0)"
				, "kind": "=="
				, "type": "bool"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 331
				, "left": {
					"": "decimal"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 331
					, "value": "decimal"
				}
				, "right": {
					"": "(0)"
					, "kind": "()"
					, "type": "float64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 331
					, "args": [{
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 331
						, "value": "0"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 331
				, "stmt": [{
					"": "if (value.length > (0))"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 332
					, "test": {
						"": "value.length > (0)"
						, "kind": ">"
						, "type": "bool"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 332
						, "left": {
							"": "value.length"
							, "kind": "."
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 332
							, "left": {
								"": "value"
								, "kind": ".variable"
								, "type": "char[]"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 332
								, "value": "value"
							}
							, "right": {
								"": "length"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 332
								, "value": "length"
							}
						}
						, "right": {
							"": "(0)"
							, "kind": "()"
							, "type": "uint32"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 332
							, "args": [{
								"": "0"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/lib/text/string.ci"
								, "line": 332
								, "value": "0"
							}]
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 332
						, "stmt": [{
							"": "return .result := sign * result;"
							, "kind": "return"
							, "type": "void"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 333
							, "stmt": {
								"": ".result := sign * result"
								, "kind": ":="
								, "type": "float64"
								, "left": {
									"": ".result"
									, "kind": ".variable"
									, "type": "float64"
									, "value": ".result"
								}
								, "right": {
									"": "sign * result"
									, "kind": "*"
									, "type": "float64"
									, "file": "cmplStd/lib/text/string.ci"
									, "line": 333
									, "left": {
										"": "sign"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 333
										, "value": "sign"
									}
									, "right": {
										"": "result"
										, "kind": ".variable"
										, "type": "float64"
										, "file": "cmplStd/lib/text/string.ci"
										, "line": 333
										, "value": "result"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"": "return .result := sign * result / decimal;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/lib/text/string.ci"
			, "line": 336
			, "stmt": {
				"": ".result := sign * result / decimal"
				, "kind": ":="
				, "type": "float64"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "float64"
					, "value": ".result"
				}
				, "right": {
					"": "sign * result / decimal"
					, "kind": "/"
					, "type": "float64"
					, "file": "cmplStd/lib/text/string.ci"
					, "line": 336
					, "left": {
						"": "sign * result"
						, "kind": "*"
						, "type": "float64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 336
						, "left": {
							"": "sign"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 336
							, "value": "sign"
						}
						, "right": {
							"": "result"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/lib/text/string.ci"
							, "line": 336
							, "value": "result"
						}
					}
					, "right": {
						"": "decimal"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/lib/text/string.ci"
						, "line": 336
						, "value": "decimal"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405736
		, "size": 9
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 405745
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405746
		, "size": 1
	}, {
		"instruction": "jmp +257"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405747
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405751
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405753
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 405755
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405756
		, "size": 1
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405757
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405761
		, "size": 1
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405762
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 405767
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 405768
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405769
		, "size": 2
	}, {
		"instruction": "jz +20"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405771
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405775
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405779
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405783
		, "size": 1
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405784
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 405789
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 405790
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405791
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405795
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405797
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 405806
		, "size": 1
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405807
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405811
		, "size": 1
	}, {
		"instruction": "inc.i32(-48)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 405812
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 405816
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 405817
		, "size": 1
	}, {
		"instruction": "set.x64 sp(6)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405818
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405820
		, "size": 2
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405822
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 405831
		, "size": 1
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405832
		, "size": 2
	}, {
		"instruction": "jmp +162"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405834
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405838
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405842
		, "size": 1
	}, {
		"instruction": "load.c32 46"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405843
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 405848
		, "size": 1
	}, {
		"instruction": "jz +43"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405849
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 405853
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 405855
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 405856
		, "size": 1
	}, {
		"instruction": "jnz +20"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 405857
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405861
		, "size": 9
	}, {
		"instruction": "set.x64 sp(13)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405870
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405872
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 405876
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405877
		, "size": 9
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405886
		, "size": 2
	}, {
		"instruction": "jmp +108"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405888
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405892
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405896
		, "size": 1
	}, {
		"instruction": "load.c32 45"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405897
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 405902
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405903
		, "size": 2
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405905
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405909
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405913
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405915
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 405916
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405917
		, "size": 4
	}, {
		"instruction": "load.f64 -1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405921
		, "size": 9
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405930
		, "size": 2
	}, {
		"instruction": "jmp +64"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405932
		, "size": 4
	}, {
		"instruction": "load.sp(+0)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 405936
		, "size": 4
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 405940
		, "size": 1
	}, {
		"instruction": "load.c32 43"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 405941
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 405946
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405947
		, "size": 2
	}, {
		"instruction": "jz +12"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405949
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405953
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 405957
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 405959
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 405960
		, "size": 1
	}, {
		"instruction": "jz +19"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 405961
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405965
		, "size": 9
	}, {
		"instruction": "set.x64 sp(8)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405974
		, "size": 2
	}, {
		"instruction": "jmp +20"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 405976
		, "size": 4
	}, {
		"instruction": "load.f64 -nan"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 405980
		, "size": 9
	}, {
		"instruction": "set.x64 sp(13)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 405989
		, "size": 2
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405991
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 405995
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 405996
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 406000
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 406004
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(10)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 406006
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 406008
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 406009
		, "size": 2
	}, {
		"instruction": "jz +17"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 406011
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 406015
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 406019
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 406021
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 406023
		, "size": 1
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 406024
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 406025
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 406026
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 406027
		, "size": 1
	}, {
		"instruction": "jnz -277"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 406028
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 406032
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 406036
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 406038
		, "size": 1
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 406039
		, "size": 1
	}, {
		"instruction": "jz +24"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 406040
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 406044
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 406046
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 406047
		, "size": 1
	}, {
		"instruction": "jz +16"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 406048
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 406052
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 406054
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 406056
		, "size": 1
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 406057
		, "size": 2
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 406059
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 406063
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 406064
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 406066
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 406068
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 406069
		, "size": 2
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 406071
		, "size": 1
	}, {
		"instruction": "set.x64 sp(11)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 406072
		, "size": 2
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 406074
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 406078
		, "size": 1
	}]
}, {
	"": "integer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "integer"
	, "type": "typename"
	, "file": "cmplStd/test/test.ci"
	, "line": 5
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/test.ci"
		, "line": 5
		, "value": "int64"
	}
}, {
	"": "emitldz32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitldz32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 3
	, "size": 4
	, "offs": 406080
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 3
		, "args": [{
			"": "load.z32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 3
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "load"
			}
			, "right": {
				"": "z32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "z32"
			}
		}]
	}
}, {
	"": "emitldz64"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitldz64"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 4
	, "size": 8
	, "offs": 406088
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(load.z64)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 4
		, "args": [{
			"": "load.z64"
			, "kind": "."
			, "type": "int64"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 4
			, "left": {
				"": "load"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "load"
			}
			, "right": {
				"": "z64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "z64"
			}
		}]
	}
}, {
	"": "emitA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitA"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 6
	, "size": 4
	, "offs": 406096
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 6
		, "value": "42"
	}
}, {
	"": "emitB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitB"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 7
	, "size": 4
	, "offs": 406104
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 7
		, "value": "96"
	}
}, {
	"": "emitAddI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitAddI32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 10
	, "size": 4
	, "offs": 406112
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `emitA + emitB`"
	, "ast": {
		"": "emit(int32(emitA), int32(emitB), add.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 10
		, "args": [{
		}, {
			"": "int32(emitA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitA"
			}]
		}, {
			"": "int32(emitB)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "args": [{
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitB"
			}]
		}, {
			"": "add.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 10
			, "left": {
				"": "add"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "add"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitDivI32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitDivI32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 13
	, "size": 4
	, "offs": 406120
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `10 / 5`"
	, "ast": {
		"": "emit(int32(10), int32(5), div.i32)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "int32(10)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "args": [{
				"": "10"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "10"
			}]
		}, {
			"": "int32(5)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "args": [{
				"": "5"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "5"
			}]
		}, {
			"": "div.i32"
			, "kind": "."
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 13
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "div"
			}
			, "right": {
				"": "i32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "i32"
			}
		}]
	}
}, {
	"": "emitNfcF32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "emitNfcF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 16
	, "size": 4
	, "offs": 406128
	, "static": true
	, "const": false
	, "doc": "Emit the calculation of `float32.sin(3.14f / 2)`"
	, "ast": {
		"": "emit(float32(3.140000), float32(2), div.f32, float32.sin)"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "float32(3.140000)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "args": [{
				"": "3.140000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "3.140000"
			}]
		}, {
			"": "float32(2)"
			, "kind": "()"
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "args": [{
				"": "2"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "2"
			}]
		}, {
			"": "div.f32"
			, "kind": "."
			, "type": "float32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "left": {
				"": "div"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "div"
			}
			, "right": {
				"": "f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "f32"
			}
		}, {
			"": "float32.sin"
			, "kind": "."
			, "type": "function"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 16
			, "left": {
				"": "float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "float32"
			}
			, "right": {
				"": "sin"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "sin"
			}
		}]
	}
}, {
	"": "floatAsInt32(value: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt32"
	, "type": "function"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 19
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "value"
		, "type": "float32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "interpret a 32 bit floating point number as an 32 bit integer"
	, "ast": {
		"": "int32(emit(float32(value)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 19
		, "args": [{
			"": "emit(float32(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 19
			, "args": [{
				"": "float32(value)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 19
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/lang/emit.ci"
					, "line": 19
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "floatAsInt64(value: float64): int64"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "floatAsInt64"
	, "type": "function"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i64"
		, "name": ".result"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "interpret a 64 bit floating point number as an 64 bit integer"
	, "ast": {
		"": "int64(emit(float64(value)))"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/emit.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "emitFloatAsInt1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 23
	, "size": 4
	, "offs": 406136
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 23
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 23
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt2"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 24
	, "size": 8
	, "offs": 406144
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt32(500)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 24
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 24
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "emitFloatAsInt3"
	, "type": "int32"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 25
	, "size": 4
	, "offs": 406152
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 25
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 25
			, "value": "500"
		}]
	}
}, {
	"": "emitFloatAsInt4"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "emitFloatAsInt4"
	, "type": "int64"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 26
	, "size": 8
	, "offs": 406160
	, "static": true
	, "const": false
	, "ast": {
		"": "floatAsInt64(500)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 26
		, "args": [{
			"": "500"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 26
			, "value": "500"
		}]
	}
}, {
	"": "emitSlice"
	, "kind": "variable"
	, "cast": "arr"
	, "name": "emitSlice"
	, "type": "char[]"
	, "file": "cmplStd/test/lang/emit.ci"
	, "line": 29
	, "size": 8
	, "offs": 406168
	, "static": true
	, "const": false
	, "ast": {
		"": "emit(int32(3), pointer(\"string\"))"
		, "kind": "()"
		, "type": "emit"
		, "file": "cmplStd/test/lang/emit.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "int32(3)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 29
			, "args": [{
				"": "3"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "3"
			}]
		}, {
			"": "pointer(\"string\")"
			, "kind": "()"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/emit.ci"
			, "line": 29
			, "args": [{
				"": "\"string\""
				, "kind": ".literal"
				, "type": ".cstr"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "\"string\""
			}]
		}]
	}
}, {
	"": "zero(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "zero"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 3
		, "value": "0"
	}
}, {
	"": "last(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "last"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 4
		, "value": "b"
	}
}, {
	"": "sum(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sum"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a + b"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 5
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 5
			, "value": "b"
		}
	}
}, {
	"": "any(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "any"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "(a) ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 6
		, "test": {
			"": "(a)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "args": [{
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "a"
			}]
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 6
			, "value": "b"
		}
	}
}, {
	"": "min(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "min"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a < b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 7
		, "test": {
			"": "a < b"
			, "kind": "<"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 7
			, "value": "b"
		}
	}
}, {
	"": "max(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "max"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 8
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "a > b ? a : b"
		, "kind": "?:"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 8
		, "test": {
			"": "a > b"
			, "kind": ">"
			, "type": "bool"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "left": {
				"": "a"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "a"
			}
			, "right": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "b"
			}
		}
		, "left": {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "a"
		}
		, "right": {
			"": "b"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 8
			, "value": "b"
		}
	}
}, {
	"": "i3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i3"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 10
	, "size": 4
	, "offs": 406176
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 10
		, "value": "3"
	}
}, {
	"": "i6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i6"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 11
	, "size": 4
	, "offs": 406184
	, "static": true
	, "const": false
	, "ast": {
		"": "6"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 11
		, "value": "6"
	}
}, {
	"": "i2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 12
	, "size": 4
	, "offs": 406192
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 12
		, "value": "2"
	}
}, {
	"": "i8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 13
	, "size": 4
	, "offs": 406200
	, "static": true
	, "const": false
	, "ast": {
		"": "8"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 13
		, "value": "8"
	}
}, {
	"": "zeroVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 15
	, "size": 4
	, "offs": 406208
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 15
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 15
			, "value": "6"
		}]
	}
}, {
	"": "zeroVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 16
	, "size": 4
	, "offs": 406216
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 16
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 16
			, "value": "i6"
		}]
	}
}, {
	"": "zeroXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zeroXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 17
	, "size": 4
	, "offs": 406224
	, "static": true
	, "const": false
	, "ast": {
		"": "zero(i3 + 1, i6 + 1)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 17
		, "args": [{
		}, {
			"": "i3 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i3"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}, {
			"": "i6 + 1"
			, "kind": "+"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 17
			, "left": {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "i6"
			}
			, "right": {
				"": "1"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "1"
			}
		}]
	}
}, {
	"": "lastVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 19
	, "size": 4
	, "offs": 406232
	, "static": true
	, "const": false
	, "ast": {
		"": "last(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 19
			, "value": "6"
		}]
	}
}, {
	"": "lastVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 20
	, "size": 4
	, "offs": 406240
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 20
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 20
			, "value": "i6"
		}]
	}
}, {
	"": "lastXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lastXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 21
	, "size": 4
	, "offs": 406248
	, "static": true
	, "const": false
	, "ast": {
		"": "last(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 21
		, "left": {
			"": "last(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 21
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 21
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 21
			, "value": "1"
		}
	}
}, {
	"": "sum2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 23
	, "size": 4
	, "offs": 406256
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 23
			, "value": "6"
		}]
	}
}, {
	"": "sum2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 24
	, "size": 4
	, "offs": 406264
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 24
			, "value": "i6"
		}]
	}
}, {
	"": "sum2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sum2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 25
	, "size": 4
	, "offs": 406272
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(i3 + 1, i6 + 1) - 2"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 25
		, "left": {
			"": "sum(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 25
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 25
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 25
			, "value": "2"
		}
	}
}, {
	"": "any2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 27
	, "size": 4
	, "offs": 406280
	, "static": true
	, "const": false
	, "ast": {
		"": "any(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 27
			, "value": "6"
		}]
	}
}, {
	"": "any2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 28
	, "size": 4
	, "offs": 406288
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 28
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 28
			, "value": "i6"
		}]
	}
}, {
	"": "any2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "any2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 29
	, "size": 4
	, "offs": 406296
	, "static": true
	, "const": false
	, "ast": {
		"": "any(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 29
		, "left": {
			"": "any(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 29
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 29
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 29
			, "value": "1"
		}
	}
}, {
	"": "min2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 31
	, "size": 4
	, "offs": 406304
	, "static": true
	, "const": false
	, "ast": {
		"": "min(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 31
			, "value": "6"
		}]
	}
}, {
	"": "min2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 32
	, "size": 4
	, "offs": 406312
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 32
			, "value": "i6"
		}]
	}
}, {
	"": "min2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "min2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 33
	, "size": 4
	, "offs": 406320
	, "static": true
	, "const": false
	, "ast": {
		"": "min(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 33
		, "left": {
			"": "min(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 33
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 33
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 33
			, "value": "1"
		}
	}
}, {
	"": "max2Val"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Val"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 35
	, "size": 4
	, "offs": 406328
	, "static": true
	, "const": false
	, "ast": {
		"": "max(3, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 35
			, "value": "6"
		}]
	}
}, {
	"": "max2Var"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Var"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 36
	, "size": 4
	, "offs": 406336
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3, i6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 36
			, "value": "i6"
		}]
	}
}, {
	"": "max2Xpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "max2Xpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 37
	, "size": 4
	, "offs": 406344
	, "static": true
	, "const": false
	, "ast": {
		"": "max(i3 + 1, i6 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 37
		, "left": {
			"": "max(i3 + 1, i6 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 37
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 37
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 37
			, "value": "1"
		}
	}
}, {
	"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 39
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(a, sum(b, sum(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 39
			, "value": "a"
		}, {
			"": "sum(b, sum(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 39
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "b"
			}, {
				"": "sum(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 39
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "sumRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "sum(sum(sum(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 40
		, "args": [{
		}, {
			"": "sum(sum(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 40
			, "args": [{
			}, {
				"": "sum(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 40
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 40
			, "value": "d"
		}]
	}
}, {
	"": "sumRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 41
	, "size": 4
	, "offs": 406352
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 41
			, "value": "8"
		}]
	}
}, {
	"": "sumLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 42
	, "size": 4
	, "offs": 406360
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 42
			, "value": "8"
		}]
	}
}, {
	"": "sumRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 43
	, "size": 4
	, "offs": 406368
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 43
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 43
			, "value": "i8"
		}]
	}
}, {
	"": "sumLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 44
	, "size": 4
	, "offs": 406376
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 44
			, "value": "i8"
		}]
	}
}, {
	"": "sumRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 45
	, "size": 4
	, "offs": 406384
	, "static": true
	, "const": false
	, "ast": {
		"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 45
		, "left": {
			"": "sumLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 45
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 45
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 45
			, "value": "4"
		}
	}
}, {
	"": "sumLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sumLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 46
	, "size": 4
	, "offs": 406392
	, "static": true
	, "const": false
	, "ast": {
		"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 4"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 46
		, "left": {
			"": "sumRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 46
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 46
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 46
			, "value": "4"
		}
	}
}, {
	"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 48
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(a, any(b, any(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 48
			, "value": "a"
		}, {
			"": "any(b, any(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 48
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "b"
			}, {
				"": "any(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 48
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "anyRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 49
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "any(any(any(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "any(any(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 49
			, "args": [{
			}, {
				"": "any(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 49
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 49
			, "value": "d"
		}]
	}
}, {
	"": "anyRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 50
	, "size": 4
	, "offs": 406400
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 50
			, "value": "8"
		}]
	}
}, {
	"": "anyLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 51
	, "size": 4
	, "offs": 406408
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 51
			, "value": "8"
		}]
	}
}, {
	"": "anyRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 52
	, "size": 4
	, "offs": 406416
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 52
			, "value": "i8"
		}]
	}
}, {
	"": "anyLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 53
	, "size": 4
	, "offs": 406424
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 53
			, "value": "i8"
		}]
	}
}, {
	"": "anyRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 54
	, "size": 4
	, "offs": 406432
	, "static": true
	, "const": false
	, "ast": {
		"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 54
		, "left": {
			"": "anyLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 54
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 54
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 54
			, "value": "1"
		}
	}
}, {
	"": "anyLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "anyLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 55
	, "size": 4
	, "offs": 406440
	, "static": true
	, "const": false
	, "ast": {
		"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 55
		, "left": {
			"": "anyRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 55
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 55
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 55
			, "value": "1"
		}
	}
}, {
	"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(a, min(b, min(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 57
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 57
			, "value": "a"
		}, {
			"": "min(b, min(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 57
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "b"
			}, {
				"": "min(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 57
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "minRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 58
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "min(min(min(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 58
		, "args": [{
		}, {
			"": "min(min(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 58
			, "args": [{
			}, {
				"": "min(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 58
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 58
			, "value": "d"
		}]
	}
}, {
	"": "minRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 59
	, "size": 4
	, "offs": 406448
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 59
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 59
			, "value": "8"
		}]
	}
}, {
	"": "minLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 60
	, "size": 4
	, "offs": 406456
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 60
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 60
			, "value": "8"
		}]
	}
}, {
	"": "minRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 61
	, "size": 4
	, "offs": 406464
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 61
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 61
			, "value": "i8"
		}]
	}
}, {
	"": "minLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 62
	, "size": 4
	, "offs": 406472
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 62
			, "value": "i8"
		}]
	}
}, {
	"": "minRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 63
	, "size": 4
	, "offs": 406480
	, "static": true
	, "const": false
	, "ast": {
		"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 63
		, "left": {
			"": "minLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 63
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 63
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 63
			, "value": "1"
		}
	}
}, {
	"": "minLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "minLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 64
	, "size": 4
	, "offs": 406488
	, "static": true
	, "const": false
	, "ast": {
		"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 64
		, "left": {
			"": "minRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 64
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 64
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 64
			, "value": "1"
		}
	}
}, {
	"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxLr"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 66
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(a, max(b, max(c, d)))"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "a"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 66
			, "value": "a"
		}, {
			"": "max(b, max(c, d))"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 66
			, "args": [{
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "b"
			}, {
				"": "max(c, d)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "args": [{
				}, {
					"": "c"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "c"
				}, {
					"": "d"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 66
					, "value": "d"
				}]
			}]
		}]
	}
}, {
	"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "maxRl"
	, "type": "function"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 67
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "c"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "c"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}, {
		"": "d"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "d"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "size": 4
		, "offs": 16
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "max(max(max(a, b), c), d)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 67
		, "args": [{
		}, {
			"": "max(max(a, b), c)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "max(a, b)"
				, "kind": "()"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "args": [{
				}, {
					"": "a"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "a"
				}, {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 67
					, "value": "b"
				}]
			}, {
				"": "c"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "c"
			}]
		}, {
			"": "d"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 67
			, "value": "d"
		}]
	}
}, {
	"": "maxRlVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 68
	, "size": 4
	, "offs": 406496
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 68
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 68
			, "value": "8"
		}]
	}
}, {
	"": "maxLrVal"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVal"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 69
	, "size": 4
	, "offs": 406504
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(3, 6, 2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 69
		, "args": [{
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "3"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 69
			, "value": "8"
		}]
	}
}, {
	"": "maxRlVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 70
	, "size": 4
	, "offs": 406512
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 70
			, "value": "i8"
		}]
	}
}, {
	"": "maxLrVar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrVar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 71
	, "size": 4
	, "offs": 406520
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3, i6, i2, i8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "i3"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i3"
		}, {
			"": "i6"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i6"
		}, {
			"": "i2"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i2"
		}, {
			"": "i8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 71
			, "value": "i8"
		}]
	}
}, {
	"": "maxRlXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxRlXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 72
	, "size": 4
	, "offs": 406528
	, "static": true
	, "const": false
	, "ast": {
		"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 72
		, "left": {
			"": "maxLr(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 72
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 72
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 72
			, "value": "1"
		}
	}
}, {
	"": "maxLrXpr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "maxLrXpr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/inlineMacros.ci"
	, "line": 73
	, "size": 4
	, "offs": 406536
	, "static": true
	, "const": false
	, "ast": {
		"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1) - 1"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/inlineMacros.ci"
		, "line": 73
		, "left": {
			"": "maxRl(i3 + 1, i6 + 1, i2 + 1, i8 + 1)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 73
			, "args": [{
			}, {
				"": "i3 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i3"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i3"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i6 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i6"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i6"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i2 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i2"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i2"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}, {
				"": "i8 + 1"
				, "kind": "+"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "left": {
					"": "i8"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "i8"
				}
				, "right": {
					"": "1"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/inlineMacros.ci"
					, "line": 73
					, "value": "1"
				}
			}]
		}
		, "right": {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/inlineMacros.ci"
			, "line": 73
			, "value": "1"
		}
	}
}, {
	"": "overload"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 3
		, "value": "1"
	}
}, {
	"": "overload(): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 4
		, "value": "2"
	}
}, {
	"": "overload(a: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 5
		, "value": "3"
	}
}, {
	"": "overload(a: float32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 6
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "f32"
		, "name": "a"
		, "type": "float32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "4"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 6
		, "value": "4"
	}
}, {
	"": "overload(a: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "overload"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "a"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "a"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "5"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 7
		, "value": "5"
	}
}, {
	"": "overload1"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload1"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 9
	, "size": 4
	, "offs": 406544
	, "static": true
	, "const": false
	, "ast": {
		"": "overload"
		, "kind": ".variable"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 9
		, "value": "overload"
	}
}, {
	"": "overload2"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload2"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 10
	, "size": 4
	, "offs": 406552
	, "static": true
	, "const": false
	, "ast": {
		"": "overload()"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 10
		, "args": [{
		}]
	}
}, {
	"": "overload3"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload3"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 11
	, "size": 4
	, "offs": 406560
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 11
		, "args": [{
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 11
			, "value": "0"
		}]
	}
}, {
	"": "overload4"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload4"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 12
	, "size": 4
	, "offs": 406568
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 12
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 12
			, "value": "0.000000"
		}]
	}
}, {
	"": "overload5"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "overload5"
	, "type": "float32"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 13
	, "size": 4
	, "offs": 406576
	, "static": true
	, "const": false
	, "ast": {
		"": "overload(0, 0)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 13
		, "args": [{
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 13
			, "value": "0"
		}]
	}
}, {
	"": "Celsius"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Celsius"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 272304
	, "static": true
	, "const": true
}, {
	"": "Celsius.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Celsius"
	, "type": "float64"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 15
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Fahrenheit"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Fahrenheit"
	, "type": "typename"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 272624
	, "static": true
	, "const": true
}, {
	"": "Fahrenheit.degrees"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "degrees"
	, "owner": "Fahrenheit"
	, "type": "float64"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 16
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Celsius(value: float64): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(emit(float64(value)))"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 21
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 21
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 21
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 21
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Fahrenheit(value: float64): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 22
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "f64"
		, "name": "value"
		, "type": "float64"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(emit(float64(value)))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 22
		, "args": [{
			"": "emit(float64(value))"
			, "kind": "()"
			, "type": "emit"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 22
			, "args": [{
				"": "float64(value)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 22
				, "args": [{
					"": "value"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 22
					, "value": "value"
				}]
			}]
		}]
	}
}, {
	"": "Celsius(value: Fahrenheit): Celsius"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Celsius"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius((value.degrees - (32)) / 1.800000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 25
		, "args": [{
			"": "(value.degrees - (32)) / 1.800000"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 25
			, "left": {
				"": "(value.degrees - (32))"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "args": [{
					"": "value.degrees - (32)"
					, "kind": "-"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 25
					, "left": {
						"": "value.degrees"
						, "kind": "."
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 25
						, "left": {
							"": "value"
							, "kind": ".variable"
							, "type": "Fahrenheit"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "value"
						}
						, "right": {
							"": "degrees"
							, "kind": ".variable"
							, "type": "float64"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "degrees"
						}
					}
					, "right": {
						"": "(32)"
						, "kind": "()"
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 25
						, "args": [{
							"": "32"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/overload.inline.ci"
							, "line": 25
							, "value": "32"
						}]
					}
				}]
			}
			, "right": {
				"": "1.800000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "value": "1.800000"
			}
		}]
	}
}, {
	"": "Fahrenheit(value: Celsius): Fahrenheit"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "Fahrenheit"
	, "type": "function"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 26
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "val"
		, "name": ".result"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "value"
		, "kind": "inline"
		, "cast": "val"
		, "name": "value"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "size": 8
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(value.degrees * 1.800000 + (32))"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 26
		, "args": [{
			"": "value.degrees * 1.800000 + (32)"
			, "kind": "+"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 26
			, "left": {
				"": "value.degrees * 1.800000"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "left": {
					"": "value.degrees"
					, "kind": "."
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "left": {
						"": "value"
						, "kind": ".variable"
						, "type": "Celsius"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 26
						, "value": "value"
					}
					, "right": {
						"": "degrees"
						, "kind": ".variable"
						, "type": "float64"
						, "file": "cmplStd/test/lang/overload.inline.ci"
						, "line": 26
						, "value": "degrees"
					}
				}
				, "right": {
					"": "1.800000"
					, "kind": ".literal"
					, "type": "float64"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "value": "1.800000"
				}
			}
			, "right": {
				"": "(32)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "args": [{
					"": "32"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/lang/overload.inline.ci"
					, "line": 26
					, "value": "32"
				}]
			}
		}]
	}
}, {
	"": "boilC"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilC"
	, "type": "Celsius"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 28
	, "size": 8
	, "offs": 406584
	, "static": true
	, "const": false
	, "ast": {
		"": "Celsius(100.000000)"
		, "kind": "()"
		, "type": "Celsius"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 28
		, "args": [{
			"": "100.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 28
			, "value": "100.000000"
		}]
	}
}, {
	"": "boilF"
	, "kind": "variable"
	, "cast": "val"
	, "name": "boilF"
	, "type": "Fahrenheit"
	, "file": "cmplStd/test/lang/overload.inline.ci"
	, "line": 29
	, "size": 8
	, "offs": 406592
	, "static": true
	, "const": false
	, "ast": {
		"": "Fahrenheit(boilC)"
		, "kind": "()"
		, "type": "Fahrenheit"
		, "file": "cmplStd/test/lang/overload.inline.ci"
		, "line": 29
		, "args": [{
			"": "boilC"
			, "kind": ".variable"
			, "type": "Celsius"
			, "file": "cmplStd/test/lang/overload.inline.ci"
			, "line": 29
			, "value": "boilC"
		}]
	}
}, {
	"": "pi64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "pi64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 3
	, "size": 8
	, "offs": 406600
	, "static": true
	, "const": false
	, "ast": {
		"": "3.141593"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 3
		, "value": "3.141593"
	}
}, {
	"": "e64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "e64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 4
	, "size": 8
	, "offs": 406608
	, "static": true
	, "const": false
	, "ast": {
		"": "2.718282"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 4
		, "value": "2.718282"
	}
}, {
	"": "pi32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "pi32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 6
	, "size": 4
	, "offs": 406616
	, "static": true
	, "const": false
	, "ast": {
		"": "pi64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 6
		, "value": "pi64"
	}
}, {
	"": "e32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "e32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 7
	, "size": 4
	, "offs": 406624
	, "static": true
	, "const": false
	, "ast": {
		"": "e64"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 7
		, "value": "e64"
	}
}, {
	"": "rgb888(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb888"
	, "type": "function"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R8G8B8 color format"
	, "ast": {
		"": "r << 16 & 16711680 | g << 8 & 65280 | b & 255"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 10
		, "left": {
			"": "r << 16 & 16711680 | g << 8 & 65280"
			, "kind": "|"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 10
			, "left": {
				"": "r << 16 & 16711680"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "left": {
					"": "r << 16"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "r"
					}
					, "right": {
						"": "16"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "16"
					}
				}
				, "right": {
					"": "16711680"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "value": "16711680"
				}
			}
			, "right": {
				"": "g << 8 & 65280"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "left": {
					"": "g << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "g"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 10
						, "value": "8"
					}
				}
				, "right": {
					"": "65280"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 10
					, "value": "65280"
				}
			}
		}
		, "right": {
			"": "b & 255"
			, "kind": "&"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 10
			, "left": {
				"": "b"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "b"
			}
			, "right": {
				"": "255"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "255"
			}
		}
	}
}, {
	"": "rgb565(r: int32, g: int32, b: int32): int32"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "rgb565"
	, "type": "function"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 12
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "r"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "r"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "g"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "g"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "b"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "b"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "doc": "pack 8 bit color components (0 .. 255) to R5G6B5 color format"
	, "ast": {
		"": "r << 8 & 63488 | g << 3 & 2016 | b >> 3 & 31"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 12
		, "left": {
			"": "r << 8 & 63488 | g << 3 & 2016"
			, "kind": "|"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 12
			, "left": {
				"": "r << 8 & 63488"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "r << 8"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "left": {
						"": "r"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "r"
					}
					, "right": {
						"": "8"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "8"
					}
				}
				, "right": {
					"": "63488"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "63488"
				}
			}
			, "right": {
				"": "g << 3 & 2016"
				, "kind": "&"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "g << 3"
					, "kind": "<<"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "left": {
						"": "g"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "g"
					}
					, "right": {
						"": "3"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/std/number.ci"
						, "line": 12
						, "value": "3"
					}
				}
				, "right": {
					"": "2016"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "2016"
				}
			}
		}
		, "right": {
			"": "b >> 3 & 31"
			, "kind": "&"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 12
			, "left": {
				"": "b >> 3"
				, "kind": ">>"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "left": {
					"": "b"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "b"
				}
				, "right": {
					"": "3"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 12
					, "value": "3"
				}
			}
			, "right": {
				"": "31"
				, "kind": ".literal"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "value": "31"
			}
		}
	}
}, {
	"": "r_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 14
	, "size": 4
	, "offs": 406632
	, "static": true
	, "const": false
	, "ast": {
		"": "14 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 14
		, "left": {
			"": "14"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 14
			, "value": "14"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 14
			, "value": "3"
		}
	}
}, {
	"": "g_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "g_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 15
	, "size": 4
	, "offs": 406640
	, "static": true
	, "const": false
	, "ast": {
		"": "63 << 2"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 15
		, "left": {
			"": "63"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 15
			, "value": "63"
		}
		, "right": {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 15
			, "value": "2"
		}
	}
}, {
	"": "b_comp"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "b_comp"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 16
	, "size": 4
	, "offs": 406648
	, "static": true
	, "const": false
	, "ast": {
		"": "31 << 3"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 16
		, "left": {
			"": "31"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 16
			, "value": "31"
		}
		, "right": {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 16
			, "value": "3"
		}
	}
}, {
	"": "r5g6b5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r5g6b5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 18
	, "size": 4
	, "offs": 406656
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb565(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 18
			, "value": "b_comp"
		}]
	}
}, {
	"": "r8g8b8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "r8g8b8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 19
	, "size": 4
	, "offs": 406664
	, "static": true
	, "const": false
	, "ast": {
		"": "rgb888(r_comp, g_comp, b_comp)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 19
		, "args": [{
		}, {
			"": "r_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "r_comp"
		}, {
			"": "g_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "g_comp"
		}, {
			"": "b_comp"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 19
			, "value": "b_comp"
		}]
	}
}, {
	"": "zxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 21
	, "size": 4
	, "offs": 406672
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 21
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 21
			, "value": "5"
		}]
	}
}, {
	"": "zxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG6"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 22
	, "size": 4
	, "offs": 406680
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 22
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 22
			, "value": "6"
		}]
	}
}, {
	"": "zxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 23
	, "size": 4
	, "offs": 406688
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 23
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 23
			, "value": "5"
		}]
	}
}, {
	"": "sxtR5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 25
	, "size": 4
	, "offs": 406696
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 11, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "r5g6b5"
		}, {
			"": "11"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "11"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 25
			, "value": "5"
		}]
	}
}, {
	"": "sxtG6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG6"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 26
	, "size": 4
	, "offs": 406704
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 5, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "r5g6b5"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 26
			, "value": "6"
		}]
	}
}, {
	"": "sxtB5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB5"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 27
	, "size": 4
	, "offs": 406712
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 27
			, "value": "5"
		}]
	}
}, {
	"": "zxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtR8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 29
	, "size": 4
	, "offs": 406720
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 29
			, "value": "8"
		}]
	}
}, {
	"": "zxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtG8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 30
	, "size": 4
	, "offs": 406728
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 30
			, "value": "8"
		}]
	}
}, {
	"": "zxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "zxtB8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 31
	, "size": 4
	, "offs": 406736
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 31
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 31
			, "value": "8"
		}]
	}
}, {
	"": "sxtR8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtR8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 33
	, "size": 4
	, "offs": 406744
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 16, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "r8g8b8"
		}, {
			"": "16"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "16"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 33
			, "value": "8"
		}]
	}
}, {
	"": "sxtG8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtG8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 34
	, "size": 4
	, "offs": 406752
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 8, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 34
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "r8g8b8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "8"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 34
			, "value": "8"
		}]
	}
}, {
	"": "sxtB8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sxtB8"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 35
	, "size": 4
	, "offs": 406760
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r8g8b8, 0, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "r8g8b8"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "r8g8b8"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "0"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 35
			, "value": "8"
		}]
	}
}, {
	"": "testSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 37
	, "size": 8
	, "offs": 406768
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sin(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 37
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 37
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 37
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testCos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 38
	, "size": 8
	, "offs": 406776
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.cos(pi64 / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 38
		, "args": [{
			"": "pi64 / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 38
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "value": "pi64"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 38
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testTan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 39
	, "size": 8
	, "offs": 406784
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.tan(pi64 / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 39
		, "args": [{
			"": "pi64 / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 39
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "value": "pi64"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 39
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testLog_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 40
	, "size": 8
	, "offs": 406792
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.log(e64 * e64 * e64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 40
		, "args": [{
			"": "e64 * e64 * e64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 40
			, "left": {
				"": "e64 * e64"
				, "kind": "*"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "left": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
				, "right": {
					"": "e64"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 40
					, "value": "e64"
				}
			}
			, "right": {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "value": "e64"
			}
		}]
	}
}, {
	"": "testExp_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testExp_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 41
	, "size": 8
	, "offs": 406800
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.exp(1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 41
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 41
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testPow_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 42
	, "size": 8
	, "offs": 406808
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.pow(pi64 * pi64, 0.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 42
		, "args": [{
		}, {
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 42
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "pi64"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 42
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testSqrt_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 43
	, "size": 8
	, "offs": 406816
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.sqrt(pi64 * pi64)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 43
		, "args": [{
			"": "pi64 * pi64"
			, "kind": "*"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 43
			, "left": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
			, "right": {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "pi64"
			}
		}]
	}
}, {
	"": "testAtan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testAtan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 44
	, "size": 8
	, "offs": 406824
	, "static": true
	, "const": false
	, "ast": {
		"": "float64.atan2(pi64, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 44
		, "args": [{
		}, {
			"": "pi64"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 44
			, "value": "pi64"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 44
			, "value": "1.000000"
		}]
	}
}, {
	"": "testSin_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSin_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 46
	, "size": 4
	, "offs": 406832
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sin(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 46
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 46
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 46
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testCos_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testCos_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 47
	, "size": 4
	, "offs": 406840
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.cos(pi32 / (2))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 47
		, "args": [{
			"": "pi32 / (2)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 47
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "value": "pi32"
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 47
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testTan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testTan_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 48
	, "size": 4
	, "offs": 406848
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.tan(pi32 / (4))"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 48
		, "args": [{
			"": "pi32 / (4)"
			, "kind": "/"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 48
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "value": "pi32"
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 48
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testLog_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testLog_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 49
	, "size": 4
	, "offs": 406856
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.log(e32 * e32 * e32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 49
		, "args": [{
			"": "e32 * e32 * e32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 49
			, "left": {
				"": "e32 * e32"
				, "kind": "*"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "left": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
				, "right": {
					"": "e32"
					, "kind": ".variable"
					, "type": "float32"
					, "file": "cmplStd/test/std/number.ci"
					, "line": 49
					, "value": "e32"
				}
			}
			, "right": {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "value": "e32"
			}
		}]
	}
}, {
	"": "testExp_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testExp_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 50
	, "size": 4
	, "offs": 406864
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.exp(1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 50
		, "args": [{
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPow_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testPow_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 51
	, "size": 4
	, "offs": 406872
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.pow(pi32 * pi32, 0.500000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 51
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "pi32"
			}
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 51
			, "value": "0.500000"
		}]
	}
}, {
	"": "testSqrt_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testSqrt_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 52
	, "size": 4
	, "offs": 406880
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.sqrt(pi32 * pi32)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 52
		, "args": [{
			"": "pi32 * pi32"
			, "kind": "*"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 52
			, "left": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
			, "right": {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "pi32"
			}
		}]
	}
}, {
	"": "testAtan_f32"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testAtan_f32"
	, "type": "float32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 53
	, "size": 4
	, "offs": 406888
	, "static": true
	, "const": false
	, "ast": {
		"": "float32.atan2(pi32, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "pi32"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 53
			, "value": "pi32"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testPopulation_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testPopulation_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 55
	, "size": 4
	, "offs": 406896
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.pop(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 55
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 55
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testSwapBits_u32"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "testSwapBits_u32"
	, "type": "uint32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 56
	, "size": 4
	, "offs": 406904
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.swap(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 56
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 56
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanReverse_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanReverse_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 57
	, "size": 4
	, "offs": 406912
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsr(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 57
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 57
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testBitScanForward_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testBitScanForward_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 58
	, "size": 4
	, "offs": 406920
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.bsf(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 58
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 58
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testHighBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testHighBit_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 59
	, "size": 4
	, "offs": 406928
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.hib(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 59
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 59
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testLowBit_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testLowBit_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 60
	, "size": 4
	, "offs": 406936
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.lob(r5g6b5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 60
		, "args": [{
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 60
			, "value": "r5g6b5"
		}]
	}
}, {
	"": "testZeroExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 62
	, "size": 4
	, "offs": 406944
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 62
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 62
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u32"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 63
	, "size": 4
	, "offs": 406952
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 63
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 63
			, "value": "5"
		}]
	}
}, {
	"": "testZeroExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testZeroExtend_u64"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 65
	, "size": 4
	, "offs": 406960
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.zxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 65
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 65
			, "value": "5"
		}]
	}
}, {
	"": "testSignExtend_u64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "testSignExtend_u64"
	, "type": "int32"
	, "file": "cmplStd/test/std/number.ci"
	, "line": 66
	, "size": 4
	, "offs": 406968
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64.sxt(r5g6b5, 0, 5)"
		, "kind": "()"
		, "type": "int64"
		, "file": "cmplStd/test/std/number.ci"
		, "line": 66
		, "args": [{
		}, {
			"": "r5g6b5"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "r5g6b5"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "0"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/number.ci"
			, "line": 66
			, "value": "5"
		}]
	}
}, {
	"": "realloc(data: pointer, size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "realloc"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 3
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 3
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 3
			, "value": "data"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 3
			, "value": "size"
		}]
	}
}, {
	"": "malloc(size: int32): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "malloc"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "size"
		, "kind": "inline"
		, "cast": "i32"
		, "name": "size"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(null, size)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 4
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 4
			, "value": "null"
		}, {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 4
			, "value": "size"
		}]
	}
}, {
	"": "free(data: pointer): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "free"
	, "type": "function"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 5
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "ref"
		, "name": ".result"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "data"
		, "kind": "inline"
		, "cast": "ref"
		, "name": "data"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer.alloc(data, 0)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 5
		, "args": [{
		}, {
			"": "data"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 5
			, "value": "data"
		}, {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 5
			, "value": "0"
		}]
	}
}, {
	"": "p1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p1"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 7
	, "size": 4
	, "offs": 406976
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(1024)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 7
		, "args": [{
			"": "1024"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 7
			, "value": "1024"
		}]
	}
}, {
	"": "p2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p2"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 8
	, "size": 4
	, "offs": 406984
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(80)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 8
		, "args": [{
			"": "80"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 8
			, "value": "80"
		}]
	}
}, {
	"": "p3"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p3"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 9
	, "size": 4
	, "offs": 406992
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(160)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 9
		, "args": [{
			"": "160"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 9
			, "value": "160"
		}]
	}
}, {
	"": "p4"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "p4"
	, "type": "pointer"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 10
	, "size": 4
	, "offs": 407000
	, "static": true
	, "const": false
	, "ast": {
		"": "malloc(820)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 10
		, "args": [{
			"": "820"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/memory.ci"
			, "line": 10
			, "value": "820"
		}]
	}
}, {
	"": "val1"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val1"
	, "type": "int64"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 23
	, "size": 8
	, "offs": 407008
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 23
		, "value": "42"
	}
}, {
	"": "val2"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "val2"
	, "type": "int64"
	, "file": "cmplStd/test/std/memory.ci"
	, "line": 24
	, "size": 8
	, "offs": 407016
	, "static": true
	, "const": false
	, "ast": {
		"": "96"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/memory.ci"
		, "line": 24
		, "value": "96"
	}
}, {
	"": "noError(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "noError"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 11
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 407024
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 407024
		, "size": 1
	}]
}, {
	"": "stackOverflow(ptr: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "stackOverflow"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 14
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "ptr"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "ptr"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 24
	, "offs": 407032
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "stmt": [{
			"": "data"
			, "kind": ".variable"
			, "type": "uint8[8192]"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 16
			, "value": "data"
		}, {
			"": "stackOverflow(ptr);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 17
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407032
		, "size": 4
	}, {
		"instruction": "load.sp(+8196)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 407036
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407040
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407041
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 407046
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407047
		, "size": 4
	}, {
		"instruction": "inc.sp(-8192)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407051
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 407055
		, "size": 1
	}]
}, {
	"": "divisionByZero(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "divisionByZero"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 20
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 12
	, "offs": 407056
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "stmt": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 21
			, "value": "value"
		}]
	}
	, "asm": [{
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407056
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407061
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 407062
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407063
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 407067
		, "size": 1
	}]
}, {
	"": "abortExecution(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "abortExecution"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 24
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 68
	, "offs": 407072
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "stmt": [{
			"": "NotEquals"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 25
			, "value": "NotEquals"
		}, {
			"": "details"
			, "kind": ".variable"
			, "type": "abortExecution.NotEquals"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 30
			, "value": "details"
		}, {
			"": "abort(\"fatal error\", details);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 35
		}]
	}
	, "asm": [{
		"instruction": "inc.sp(+16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407072
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407076
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407081
		, "size": 2
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407083
		, "size": 5
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407088
		, "size": 2
	}, {
		"instruction": "load.c32 77"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407090
		, "size": 5
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407095
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407097
		, "size": 5
	}, {
		"instruction": "load.c32 35"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407102
		, "size": 5
	}, {
		"instruction": "load.c32 -2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407107
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 407112
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407117
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407122
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 407127
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 407131
		, "size": 4
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407135
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 407139
		, "size": 1
	}]
}, {
	"": "invalidMemoryAccess(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidMemoryAccess"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 13
	, "offs": 407144
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "stmt": [{
			"": "i32Ref"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 39
			, "value": "i32Ref"
		}, {
			"": "i32Val"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 40
			, "value": "i32Val"
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 407144
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407149
		, "size": 2
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 407151
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 407152
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 407156
		, "size": 1
	}]
}, {
	"": "invalidInstruction(args: pointer): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "invalidInstruction"
	, "type": "function"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 43
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "args"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "args"
		, "type": "pointer"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 2
	, "offs": 407160
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "stmt": [{
			"": "emit(load.z32, ret);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 44
		}]
	}
	, "asm": [{
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 407160
		, "size": 1
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 407161
		, "size": 1
	}]
}, {
	"": "tryExecErr0"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr0"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 47
	, "size": 4
	, "offs": 407168
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, noError)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 47
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 47
			, "value": "null"
		}, {
			"": "noError"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 47
			, "value": "noError"
		}]
	}
}, {
	"": "tryExecErr1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr1"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 48
	, "size": 4
	, "offs": 407176
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, null)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 48
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 48
			, "value": "null"
		}]
	}
}, {
	"": "tryExecErr2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr2"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 49
	, "size": 4
	, "offs": 407184
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, stackOverflow)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 49
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 49
			, "value": "null"
		}, {
			"": "stackOverflow"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 49
			, "value": "stackOverflow"
		}]
	}
}, {
	"": "tryExecErr3"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr3"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 50
	, "size": 4
	, "offs": 407192
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, divisionByZero)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 50
			, "value": "null"
		}, {
			"": "divisionByZero"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 50
			, "value": "divisionByZero"
		}]
	}
}, {
	"": "tryExecErr4"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr4"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 51
	, "size": 4
	, "offs": 407200
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidInstruction)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 51
			, "value": "null"
		}, {
			"": "invalidInstruction"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 51
			, "value": "invalidInstruction"
		}]
	}
}, {
	"": "tryExecErr5"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr5"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 52
	, "size": 4
	, "offs": 407208
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, invalidMemoryAccess)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 52
			, "value": "null"
		}, {
			"": "invalidMemoryAccess"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 52
			, "value": "invalidMemoryAccess"
		}]
	}
}, {
	"": "tryExecErr6"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "tryExecErr6"
	, "type": "int32"
	, "file": "cmplStd/test/std/tryExec.ci"
	, "line": 53
	, "size": 4
	, "offs": 407216
	, "static": true
	, "const": false
	, "ast": {
		"": "tryExec(null, abortExecution)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "null"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 53
			, "value": "null"
		}, {
			"": "abortExecution"
			, "kind": ".variable"
			, "type": "function"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 53
			, "value": "abortExecution"
		}]
	}
}, {
	"": "value"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "value"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 7
	, "size": 8
	, "offs": 407224
	, "static": true
	, "const": false
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "valueRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 8
	, "size": 4
	, "offs": 407232
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 8
		, "value": "value"
	}
}, {
	"": "valuePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valuePtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 9
	, "size": 4
	, "offs": 407240
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 9
		, "value": "value"
	}
}, {
	"": "valueVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 10
	, "size": 8
	, "offs": 407248
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 10
		, "value": "value"
	}
}, {
	"": "fromRef"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "fromRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 12
	, "size": 8
	, "offs": 407256
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 12
		, "value": "valueRef"
	}
}, {
	"": "fromPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromPtr"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 13
	, "size": 4
	, "offs": 407264
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 13
		, "value": "valuePtr"
	}
}, {
	"": "fromVar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fromVar"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 14
	, "size": 4
	, "offs": 407272
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 14
		, "value": "valueVar"
	}
}, {
	"": "nullRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 16
	, "size": 4
	, "offs": 407280
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 16
		, "value": "null"
	}
}, {
	"": "nullPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 17
	, "size": 4
	, "offs": 407288
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 17
		, "value": "null"
	}
}, {
	"": "nullVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "nullVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 18
	, "size": 8
	, "offs": 407296
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 18
		, "value": "null"
	}
}, {
	"": "nullTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 19
	, "size": 4
	, "offs": 407304
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 19
		, "value": "null"
	}
}, {
	"": "nullFun"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullFun"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 20
	, "size": 4
	, "offs": 407312
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 20
		, "value": "null"
	}
}, {
	"": "nullObj"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nullObj"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 21
	, "size": 4
	, "offs": 407320
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 21
		, "value": "null"
	}
}, {
	"": "typePtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typePtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 23
	, "size": 4
	, "offs": 407328
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 23
		, "value": "int64"
	}
}, {
	"": "typeVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "typeVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 24
	, "size": 8
	, "offs": 407336
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 24
		, "value": "int64"
	}
}, {
	"": "typeTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 25
	, "size": 4
	, "offs": 407344
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 25
		, "value": "int64"
	}
}, {
	"": "local"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "local"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 27
	, "size": 8
	, "offs": 407352
	, "static": true
	, "const": false
	, "ast": {
		"": "value"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 27
		, "value": "value"
	}
}, {
	"": "copyVal"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "copyVal"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 28
	, "size": 8
	, "offs": 407360
	, "static": true
	, "const": false
	, "ast": {
		"": "local"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 28
		, "value": "local"
	}
}, {
	"": "copyRef"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyRef"
	, "type": "int64"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 29
	, "size": 4
	, "offs": 407368
	, "static": true
	, "const": false
	, "ast": {
		"": "valueRef"
		, "kind": ".variable"
		, "type": "int64"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 29
		, "value": "valueRef"
	}
}, {
	"": "copyPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 30
	, "size": 4
	, "offs": 407376
	, "static": true
	, "const": false
	, "ast": {
		"": "valuePtr"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 30
		, "value": "valuePtr"
	}
}, {
	"": "copyVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 31
	, "size": 8
	, "offs": 407384
	, "static": true
	, "const": false
	, "ast": {
		"": "valueVar"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 31
		, "value": "valueVar"
	}
}, {
	"": "copyTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 32
	, "size": 4
	, "offs": 407392
	, "static": true
	, "const": false
	, "ast": {
		"": "typeTyp"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 32
		, "value": "typeTyp"
	}
}, {
	"": "ptrVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVoid"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 35
	, "size": 4
	, "offs": 407400
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 35
		, "value": "void"
	}
}, {
	"": "ptrBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrBool"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 36
	, "size": 4
	, "offs": 407408
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 36
		, "value": "bool"
	}
}, {
	"": "ptrChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrChar"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 37
	, "size": 4
	, "offs": 407416
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 37
		, "value": "char"
	}
}, {
	"": "ptrInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt8"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 38
	, "size": 4
	, "offs": 407424
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 38
		, "value": "int8"
	}
}, {
	"": "ptrInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt16"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 39
	, "size": 4
	, "offs": 407432
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 39
		, "value": "int16"
	}
}, {
	"": "ptrInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 40
	, "size": 4
	, "offs": 407440
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 40
		, "value": "int32"
	}
}, {
	"": "ptrInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrInt64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 41
	, "size": 4
	, "offs": 407448
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 41
		, "value": "int64"
	}
}, {
	"": "ptrUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint8"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 42
	, "size": 4
	, "offs": 407456
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 42
		, "value": "uint8"
	}
}, {
	"": "ptrUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint16"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 43
	, "size": 4
	, "offs": 407464
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 43
		, "value": "uint16"
	}
}, {
	"": "ptrUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 44
	, "size": 4
	, "offs": 407472
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 44
		, "value": "uint32"
	}
}, {
	"": "ptrUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrUint64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 45
	, "size": 4
	, "offs": 407480
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 45
		, "value": "uint64"
	}
}, {
	"": "ptrFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat32"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 46
	, "size": 4
	, "offs": 407488
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 46
		, "value": "float32"
	}
}, {
	"": "ptrFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFloat64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 47
	, "size": 4
	, "offs": 407496
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 47
		, "value": "float64"
	}
}, {
	"": "ptrTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrTypename"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 48
	, "size": 4
	, "offs": 407504
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 48
		, "value": "typename"
	}
}, {
	"": "ptrFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrFunction"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 49
	, "size": 4
	, "offs": 407512
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 49
		, "value": "function"
	}
}, {
	"": "ptrPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrPointer"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 50
	, "size": 4
	, "offs": 407520
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 50
		, "value": "pointer"
	}
}, {
	"": "ptrVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrVariant"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 51
	, "size": 4
	, "offs": 407528
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 51
		, "value": "variant"
	}
}, {
	"": "ptrObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrObject"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 52
	, "size": 4
	, "offs": 407536
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 52
		, "value": "object"
	}
}, {
	"": "varVoid"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVoid"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 55
	, "size": 8
	, "offs": 407544
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 55
		, "value": "void"
	}
}, {
	"": "varBool"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varBool"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 56
	, "size": 8
	, "offs": 407552
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 56
		, "value": "bool"
	}
}, {
	"": "varChar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varChar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 57
	, "size": 8
	, "offs": 407560
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 57
		, "value": "char"
	}
}, {
	"": "varInt8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt8"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 58
	, "size": 8
	, "offs": 407568
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 58
		, "value": "int8"
	}
}, {
	"": "varInt16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt16"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 59
	, "size": 8
	, "offs": 407576
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 59
		, "value": "int16"
	}
}, {
	"": "varInt32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 60
	, "size": 8
	, "offs": 407584
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 60
		, "value": "int32"
	}
}, {
	"": "varInt64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varInt64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 61
	, "size": 8
	, "offs": 407592
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 61
		, "value": "int64"
	}
}, {
	"": "varUint8"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint8"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 62
	, "size": 8
	, "offs": 407600
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 62
		, "value": "uint8"
	}
}, {
	"": "varUint16"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint16"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 63
	, "size": 8
	, "offs": 407608
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 63
		, "value": "uint16"
	}
}, {
	"": "varUint32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 64
	, "size": 8
	, "offs": 407616
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 64
		, "value": "uint32"
	}
}, {
	"": "varUint64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varUint64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 65
	, "size": 8
	, "offs": 407624
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 65
		, "value": "uint64"
	}
}, {
	"": "varFloat32"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat32"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 66
	, "size": 8
	, "offs": 407632
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 66
		, "value": "float32"
	}
}, {
	"": "varFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFloat64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 67
	, "size": 8
	, "offs": 407640
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 67
		, "value": "float64"
	}
}, {
	"": "varTypename"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varTypename"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 68
	, "size": 8
	, "offs": 407648
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 68
		, "value": "typename"
	}
}, {
	"": "varFunction"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varFunction"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 69
	, "size": 8
	, "offs": 407656
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 69
		, "value": "function"
	}
}, {
	"": "varPointer"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varPointer"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 70
	, "size": 8
	, "offs": 407664
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 70
		, "value": "pointer"
	}
}, {
	"": "varVariant"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varVariant"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 71
	, "size": 8
	, "offs": 407672
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 71
		, "value": "variant"
	}
}, {
	"": "varObject"
	, "kind": "variable"
	, "cast": "var"
	, "name": "varObject"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 72
	, "size": 8
	, "offs": 407680
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 72
		, "value": "object"
	}
}, {
	"": "typVoid"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVoid"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 75
	, "size": 4
	, "offs": 407688
	, "static": true
	, "const": false
	, "ast": {
		"": "void"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 75
		, "value": "void"
	}
}, {
	"": "typBool"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typBool"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 76
	, "size": 4
	, "offs": 407696
	, "static": true
	, "const": false
	, "ast": {
		"": "bool"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 76
		, "value": "bool"
	}
}, {
	"": "typChar"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typChar"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 77
	, "size": 4
	, "offs": 407704
	, "static": true
	, "const": false
	, "ast": {
		"": "char"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 77
		, "value": "char"
	}
}, {
	"": "typInt8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 78
	, "size": 4
	, "offs": 407712
	, "static": true
	, "const": false
	, "ast": {
		"": "int8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 78
		, "value": "int8"
	}
}, {
	"": "typInt16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt16"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 79
	, "size": 4
	, "offs": 407720
	, "static": true
	, "const": false
	, "ast": {
		"": "int16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 79
		, "value": "int16"
	}
}, {
	"": "typInt32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 80
	, "size": 4
	, "offs": 407728
	, "static": true
	, "const": false
	, "ast": {
		"": "int32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 80
		, "value": "int32"
	}
}, {
	"": "typInt64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typInt64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 81
	, "size": 4
	, "offs": 407736
	, "static": true
	, "const": false
	, "ast": {
		"": "int64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 81
		, "value": "int64"
	}
}, {
	"": "typUint8"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 82
	, "size": 4
	, "offs": 407744
	, "static": true
	, "const": false
	, "ast": {
		"": "uint8"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 82
		, "value": "uint8"
	}
}, {
	"": "typUint16"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint16"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 83
	, "size": 4
	, "offs": 407752
	, "static": true
	, "const": false
	, "ast": {
		"": "uint16"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 83
		, "value": "uint16"
	}
}, {
	"": "typUint32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 84
	, "size": 4
	, "offs": 407760
	, "static": true
	, "const": false
	, "ast": {
		"": "uint32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 84
		, "value": "uint32"
	}
}, {
	"": "typUint64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typUint64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 85
	, "size": 4
	, "offs": 407768
	, "static": true
	, "const": false
	, "ast": {
		"": "uint64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 85
		, "value": "uint64"
	}
}, {
	"": "typFloat32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 86
	, "size": 4
	, "offs": 407776
	, "static": true
	, "const": false
	, "ast": {
		"": "float32"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 86
		, "value": "float32"
	}
}, {
	"": "typFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFloat64"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 87
	, "size": 4
	, "offs": 407784
	, "static": true
	, "const": false
	, "ast": {
		"": "float64"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 87
		, "value": "float64"
	}
}, {
	"": "typTypename"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typTypename"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 88
	, "size": 4
	, "offs": 407792
	, "static": true
	, "const": false
	, "ast": {
		"": "typename"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 88
		, "value": "typename"
	}
}, {
	"": "typFunction"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typFunction"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 89
	, "size": 4
	, "offs": 407800
	, "static": true
	, "const": false
	, "ast": {
		"": "function"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 89
		, "value": "function"
	}
}, {
	"": "typPointer"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typPointer"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 90
	, "size": 4
	, "offs": 407808
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 90
		, "value": "pointer"
	}
}, {
	"": "typVariant"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typVariant"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 91
	, "size": 4
	, "offs": 407816
	, "static": true
	, "const": false
	, "ast": {
		"": "variant"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 91
		, "value": "variant"
	}
}, {
	"": "typObject"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typObject"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 92
	, "size": 4
	, "offs": 407824
	, "static": true
	, "const": false
	, "ast": {
		"": "object"
		, "kind": ".variable"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 92
		, "value": "object"
	}
}, {
	"": "valueOfPtr"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfPtr"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 95
	, "size": 4
	, "offs": 407832
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(value)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 95
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 95
			, "value": "value"
		}]
	}
}, {
	"": "valueOfVar"
	, "kind": "variable"
	, "cast": "var"
	, "name": "valueOfVar"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 96
	, "size": 8
	, "offs": 407840
	, "static": true
	, "const": false
	, "ast": {
		"": "variant(value)"
		, "kind": "()"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 96
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 96
			, "value": "value"
		}]
	}
}, {
	"": "valueOfTyp"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "valueOfTyp"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 97
	, "size": 4
	, "offs": 407848
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 97
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 97
			, "value": "value"
		}]
	}
}, {
	"": "typeOfValue"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeOfValue"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 99
	, "size": 4
	, "offs": 407856
	, "static": true
	, "const": false
	, "ast": {
		"": "typename(value)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 99
		, "args": [{
			"": "value"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/init.reference.ci"
			, "line": 99
			, "value": "value"
		}]
	}
}, {
	"": "copyPtrFloat64"
	, "kind": "variable"
	, "cast": "var"
	, "name": "copyPtrFloat64"
	, "type": "variant"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 105
	, "size": 8
	, "offs": 407864
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrFloat64"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 105
		, "value": "ptrFloat64"
	}
}, {
	"": "copyVarFloat64"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "copyVarFloat64"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/init.reference.ci"
	, "line": 108
	, "size": 4
	, "offs": 407872
	, "static": true
	, "const": false
	, "ast": {
		"": "varFloat64"
		, "kind": ".variable"
		, "type": "variant"
		, "file": "cmplStd/test/lang/init.reference.ci"
		, "line": 108
		, "value": "varFloat64"
	}
}, {
	"": "variable"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "variable"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 3
	, "size": 4
	, "offs": 407880
	, "static": true
	, "const": false
	, "doc": "Uninitialized variables will be initialized with default type initializer: 0"
}, {
	"": "constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 7
	, "size": 4
	, "offs": 407888
	, "static": true
	, "const": true
	, "doc": "Constant variables must be explicitly initialized"
	, "ast": {
		"": "42"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 7
		, "value": "42"
	}
}, {
	"": "ComplexVal"
	, "kind": "typename"
	, "cast": "val"
	, "name": "ComplexVal"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 9
	, "size": 16
	, "offs": 308992
	, "static": true
	, "const": true
}, {
	"": "ComplexVal.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "ComplexVal"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 10
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "ComplexVal.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "ComplexVal"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 11
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 11
		, "value": "0"
	}
}, {
	"": "ComplexObj"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "ComplexObj"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 13
	, "size": 20
	, "offs": 309472
	, "static": true
	, "const": true
}, {
	"": "ComplexObj.re"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "re"
	, "owner": "ComplexObj"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 14
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "ComplexObj.im"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "im"
	, "owner": "ComplexObj"
	, "type": "float64"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 15
	, "size": 8
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.variable.ci"
		, "line": 15
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "valInitImplicit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "valInitImplicit"
	, "type": "ComplexVal"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 24
	, "size": 16
	, "offs": 407896
	, "static": true
	, "const": false
	, "doc": "Value types must be explicitly initialized\nthe initializer will be extended with implicit field initializers\n{re: 8} => {\nvalInitImplicit.re := 8;\nvalInitImplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "ComplexVal"
		, "stmt": [{
			"": "valInitImplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 24
		}, {
			"": "valInitImplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "objInitImplicit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "objInitImplicit"
	, "type": "ComplexObj"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 33
	, "size": 4
	, "offs": 407912
	, "static": true
	, "const": false
	, "doc": "Reference types must be explicitly initialized\nthe initializer will be extended with instance creation\n{re: 8} => {\nobjInitImplicit := Object.create(ComplexObj);\nobjInitImplicit.re := 8;\nobjInitImplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "ComplexObj"
		, "stmt": [{
			"": "objInitImplicit := create(ComplexObj);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 33
		}, {
			"": "objInitImplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 33
		}, {
			"": "objInitImplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "objInitExplicit"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "objInitExplicit"
	, "type": "object"
	, "file": "cmplStd/test/lang/init.variable.ci"
	, "line": 41
	, "size": 4
	, "offs": 407920
	, "static": true
	, "const": false
	, "doc": "variable type can be base type of the explicit initializer type\nComplexObj {re: 8} => {\nobjInitExplicit := Object.create(ComplexObj);\nobjInitExplicit.re := 8;\nobjInitExplicit.im := 0;\n}"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "object"
		, "stmt": [{
			"": "objInitExplicit := create(ComplexObj);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 41
		}, {
			"": "objInitExplicit.re := (8);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.variable.ci"
			, "line": 41
		}, {
			"": "objInitExplicit.im := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "empty(): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "empty"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 4
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 4
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}]
	, "size": 1
	, "offs": 407928
	, "static": true
	, "const": false
	, "doc": "function with empty implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
		}]
	}
	, "asm": [{
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 407928
		, "size": 1
	}]
}, {
	"": "funAdd(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funAdd"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 7
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 407936
	, "static": true
	, "const": false
	, "doc": "function with implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "stmt": [{
			"": "return .result := x + y;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 8
			, "stmt": {
				"": ".result := x + y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x + y"
					, "kind": "+"
					, "type": "int32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 8
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 8
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 8
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407936
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 407938
		, "size": 2
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 407940
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 407941
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 407943
		, "size": 1
	}]
}, {
	"": "funAddResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 12
	, "size": 4
	, "offs": 407944
	, "static": true
	, "const": false
	, "doc": "function invocation"
	, "ast": {
		"": "funAdd(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 12
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 12
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 12
			, "value": "7"
		}]
	}
}, {
	"": "funAddRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funAddRef"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 15
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 407952
	, "static": true
	, "const": false
	, "doc": "initialized function reference"
	, "ast": {
		"": "funAdd"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 15
		, "value": "funAdd"
	}
}, {
	"": "funAddRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funAddRefResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 18
	, "size": 4
	, "offs": 407960
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funAddRef(2, 8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 18
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 18
			, "value": "2"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 18
			, "value": "8"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMul"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 21
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 21
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 407968
	, "static": true
	, "const": false
	, "doc": "forward function reference (must be implemented somewhere)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "value": "funMul"
	}
}, {
	"": "funMulResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 24
	, "size": 4
	, "offs": 407976
	, "static": true
	, "const": false
	, "doc": "forward function invocation"
	, "ast": {
		"": "funMul(2, 6)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 24
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 24
			, "value": "6"
		}]
	}
}, {
	"": "funMulRef(x: int32, y: int32): int32"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "funMulRef"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 27
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 407984
	, "static": true
	, "const": false
	, "doc": "initialized function reference (copy address)"
	, "ast": {
		"": "funMul"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 27
		, "value": "funMul"
	}
}, {
	"": "funMulRefResult"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "funMulRefResult"
	, "type": "int32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 30
	, "size": 4
	, "offs": 407992
	, "static": true
	, "const": false
	, "doc": "function reference invocation"
	, "ast": {
		"": "funMulRef(2, 7)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 30
			, "value": "2"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 30
			, "value": "7"
		}]
	}
}, {
	"": "funMul(x: int32, y: int32): int32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "funMul"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 33
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "i32"
		, "name": ".result"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}, {
		"": "y"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "y"
		, "type": "int32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "size": 4
		, "offs": 12
		, "static": false
		, "const": false
	}]
	, "size": 8
	, "offs": 408000
	, "static": true
	, "const": false
	, "doc": "forward function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "stmt": [{
			"": "return .result := x * y;"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 34
			, "stmt": {
				"": ".result := x * y"
				, "kind": ":="
				, "type": "int32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "int32"
					, "value": ".result"
				}
				, "right": {
					"": "x * y"
					, "kind": "*"
					, "type": "int32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 34
					, "left": {
						"": "x"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 34
						, "value": "x"
					}
					, "right": {
						"": "y"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 34
						, "value": "y"
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408000
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408002
		, "size": 2
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 408004
		, "size": 1
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408005
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408007
		, "size": 1
	}]
}, {
	"": "fib(n: uint32): uint32"
	, "kind": "function"
	, "cast": "inline"
	, "name": "fib"
	, "type": "function"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 38
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "u32"
		, "name": ".result"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "n"
		, "kind": "variable"
		, "cast": "u32"
		, "name": "n"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 54
	, "offs": 408008
	, "static": true
	, "const": false
	, "doc": "recursive function implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "stmt": [{
			"": "if (n <= (1))"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 39
			, "test": {
				"": "n <= (1)"
				, "kind": "<="
				, "type": "bool"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 39
				, "left": {
					"": "n"
					, "kind": ".variable"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 39
					, "value": "n"
				}
				, "right": {
					"": "(1)"
					, "kind": "()"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 39
					, "args": [{
						"": "1"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 39
						, "value": "1"
					}]
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 39
				, "stmt": [{
					"": "return .result := n;"
					, "kind": "return"
					, "type": "void"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 40
					, "stmt": {
						"": ".result := n"
						, "kind": ":="
						, "type": "uint32"
						, "left": {
							"": ".result"
							, "kind": ".variable"
							, "type": "uint32"
							, "value": ".result"
						}
						, "right": {
							"": "n"
							, "kind": ".variable"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 40
							, "value": "n"
						}
					}
				}]
			}
		}, {
			"": "return .result := fib(n - (1)) + fib(n - (2));"
			, "kind": "return"
			, "type": "void"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 42
			, "stmt": {
				"": ".result := fib(n - (1)) + fib(n - (2))"
				, "kind": ":="
				, "type": "uint32"
				, "left": {
					"": ".result"
					, "kind": ".variable"
					, "type": "uint32"
					, "value": ".result"
				}
				, "right": {
					"": "fib(n - (1)) + fib(n - (2))"
					, "kind": "+"
					, "type": "uint32"
					, "file": "cmplStd/test/lang/function.ci"
					, "line": 42
					, "left": {
						"": "fib(n - (1))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (1)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(1)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/function.ci"
									, "line": 42
									, "value": "1"
								}]
							}
						}]
					}
					, "right": {
						"": "fib(n - (2))"
						, "kind": "()"
						, "type": "uint32"
						, "file": "cmplStd/test/lang/function.ci"
						, "line": 42
						, "args": [{
							"": "n - (2)"
							, "kind": "-"
							, "type": "uint32"
							, "file": "cmplStd/test/lang/function.ci"
							, "line": 42
							, "left": {
								"": "n"
								, "kind": ".variable"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "value": "n"
							}
							, "right": {
								"": "(2)"
								, "kind": "()"
								, "type": "uint32"
								, "file": "cmplStd/test/lang/function.ci"
								, "line": 42
								, "args": [{
									"": "2"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/function.ci"
									, "line": 42
									, "value": "2"
								}]
							}
						}]
					}
				}
			}
		}]
	}
	, "asm": [{
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408008
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408010
		, "size": 5
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 408015
		, "size": 1
	}, {
		"instruction": "jnz +8"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 408016
		, "size": 4
	}, {
		"instruction": "mov.x32 sp(2, 1)"
		, "name": "mov.x32"
		, "code": "0x16"
		, "offs": 408020
		, "size": 3
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408023
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 408024
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408025
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408027
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408031
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 408036
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408037
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 408041
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408042
		, "size": 2
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 408044
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408048
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 408053
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408054
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 408058
		, "size": 1
	}, {
		"instruction": "set.x32 sp(3)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408059
		, "size": 2
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408061
		, "size": 1
	}]
}, {
	"": "fibonacci_13"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "fibonacci_13"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/function.ci"
	, "line": 46
	, "size": 4
	, "offs": 408064
	, "static": true
	, "const": false
	, "doc": "recursive function invocation"
	, "ast": {
		"": "fib(13)"
		, "kind": "()"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 46
		, "args": [{
			"": "13"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 46
			, "value": "13"
		}]
	}
}, {
	"": "sizeofVoid"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVoid"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 3
	, "size": 4
	, "offs": 408072
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(void)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 3
		, "args": [{
			"": "void"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 3
			, "value": "void"
		}]
	}
}, {
	"": "sizeofBool"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofBool"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 4
	, "size": 4
	, "offs": 408080
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(bool)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 4
		, "args": [{
			"": "bool"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 4
			, "value": "bool"
		}]
	}
}, {
	"": "sizeofChar"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofChar"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 5
	, "size": 4
	, "offs": 408088
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(char)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 5
		, "args": [{
			"": "char"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 5
			, "value": "char"
		}]
	}
}, {
	"": "sizeofInt8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 6
	, "size": 4
	, "offs": 408096
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 6
		, "args": [{
			"": "int8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 6
			, "value": "int8"
		}]
	}
}, {
	"": "sizeofInt16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt16"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 7
	, "size": 4
	, "offs": 408104
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 7
		, "args": [{
			"": "int16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 7
			, "value": "int16"
		}]
	}
}, {
	"": "sizeofInt32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 8
	, "size": 4
	, "offs": 408112
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 8
		, "args": [{
			"": "int32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 8
			, "value": "int32"
		}]
	}
}, {
	"": "sizeofInt64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofInt64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 9
	, "size": 4
	, "offs": 408120
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(int64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 9
		, "args": [{
			"": "int64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 9
			, "value": "int64"
		}]
	}
}, {
	"": "sizeofUint8"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint8"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 10
	, "size": 4
	, "offs": 408128
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint8)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 10
		, "args": [{
			"": "uint8"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 10
			, "value": "uint8"
		}]
	}
}, {
	"": "sizeofUint16"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint16"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 11
	, "size": 4
	, "offs": 408136
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint16)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 11
		, "args": [{
			"": "uint16"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 11
			, "value": "uint16"
		}]
	}
}, {
	"": "sizeofUint32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 12
	, "size": 4
	, "offs": 408144
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 12
		, "args": [{
			"": "uint32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 12
			, "value": "uint32"
		}]
	}
}, {
	"": "sizeofUint64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofUint64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 13
	, "size": 4
	, "offs": 408152
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(uint64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 13
		, "args": [{
			"": "uint64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 13
			, "value": "uint64"
		}]
	}
}, {
	"": "sizeofFloat32"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat32"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 14
	, "size": 4
	, "offs": 408160
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float32)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 14
		, "args": [{
			"": "float32"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 14
			, "value": "float32"
		}]
	}
}, {
	"": "sizeofFloat64"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFloat64"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 15
	, "size": 4
	, "offs": 408168
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(float64)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 15
		, "args": [{
			"": "float64"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 15
			, "value": "float64"
		}]
	}
}, {
	"": "sizeofPointer"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofPointer"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 16
	, "size": 4
	, "offs": 408176
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(pointer)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 16
		, "args": [{
			"": "pointer"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 16
			, "value": "pointer"
		}]
	}
}, {
	"": "sizeofVariant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofVariant"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 17
	, "size": 4
	, "offs": 408184
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(variant)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 17
		, "args": [{
			"": "variant"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 17
			, "value": "variant"
		}]
	}
}, {
	"": "sizeofTypename"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofTypename"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 18
	, "size": 4
	, "offs": 408192
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(typename)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 18
		, "args": [{
			"": "typename"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 18
			, "value": "typename"
		}]
	}
}, {
	"": "sizeofFunction"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofFunction"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 19
	, "size": 4
	, "offs": 408200
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(function)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 19
		, "args": [{
			"": "function"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 19
			, "value": "function"
		}]
	}
}, {
	"": "sizeofObject"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeofObject"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 20
	, "size": 4
	, "offs": 408208
	, "static": true
	, "const": false
	, "ast": {
		"": "sizeof(object)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 20
		, "args": [{
			"": "object"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 20
			, "value": "object"
		}]
	}
}, {
	"": "RecordSizeof"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeof"
	, "type": "object"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 22
	, "size": 12
	, "offs": 319152
	, "static": true
	, "const": true
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "RecordSizeofExt"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "RecordSizeofExt"
	, "type": "RecordSizeof"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 26
	, "size": 16
	, "offs": 319472
	, "static": true
	, "const": true
}, {
	"": "RecordSizeofExt.y"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "y"
	, "owner": "RecordSizeofExt"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 27
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 27
		, "value": "0"
	}
}, {
	"": "RecordSizeof.x"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "x"
	, "owner": "RecordSizeof"
	, "type": "int64"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 23
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 23
		, "value": "0"
	}
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "typeofRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofRecord"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 30
	, "size": 4
	, "offs": 408216
	, "static": true
	, "const": false
	, "ast": {
		"": "RecordSizeofExt"
		, "kind": ".variable"
		, "type": "RecordSizeof"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 30
		, "value": "RecordSizeofExt"
	}
}, {
	"": "nameOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfRecord"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 31
	, "size": 4
	, "offs": 408224
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 31
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 31
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "offsetOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 32
	, "size": 4
	, "offs": 408232
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofRecord.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 32
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 32
			, "value": "typeofRecord"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 32
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 33
	, "size": 4
	, "offs": 408240
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofRecord.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 33
		, "left": {
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 33
			, "value": "typeofRecord"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 33
			, "value": "size"
		}
	}
}, {
	"": "fileOfRecord"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfRecord"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 34
	, "size": 4
	, "offs": 408248
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofRecord)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 34
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 34
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "lineOfRecord"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfRecord"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 35
	, "size": 4
	, "offs": 408256
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofRecord)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 35
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 35
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "typeofBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 37
	, "size": 4
	, "offs": 408264
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofRecord)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 37
		, "args": [{
			"": "typeofRecord"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 37
			, "value": "typeofRecord"
		}]
	}
}, {
	"": "nameOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "nameOfBase"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 38
	, "size": 4
	, "offs": 408272
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.name(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 38
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 38
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 39
	, "size": 4
	, "offs": 408280
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 39
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 39
			, "value": "typeofBase"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 39
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 40
	, "size": 4
	, "offs": 408288
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 40
		, "left": {
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 40
			, "value": "typeofBase"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 40
			, "value": "size"
		}
	}
}, {
	"": "fileOfBase"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "fileOfBase"
	, "type": "char[*]"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 41
	, "size": 4
	, "offs": 408296
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.file(typeofBase)"
		, "kind": "()"
		, "type": ".cstr"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 41
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 41
			, "value": "typeofBase"
		}]
	}
}, {
	"": "lineOfBase"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "lineOfBase"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 42
	, "size": 4
	, "offs": 408304
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.line(typeofBase)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 42
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 42
			, "value": "typeofBase"
		}]
	}
}, {
	"": "typeofBase1"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase1"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 44
	, "size": 4
	, "offs": 408312
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 44
		, "args": [{
			"": "typeofBase"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 44
			, "value": "typeofBase"
		}]
	}
}, {
	"": "offsetOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 45
	, "size": 4
	, "offs": 408320
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 45
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 45
			, "value": "typeofBase1"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 45
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase1"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase1"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 46
	, "size": 4
	, "offs": 408328
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase1.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 46
		, "left": {
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 46
			, "value": "typeofBase1"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 46
			, "value": "size"
		}
	}
}, {
	"": "typeofBase2"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "typeofBase2"
	, "type": "typename"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 48
	, "size": 4
	, "offs": 408336
	, "static": true
	, "const": false
	, "ast": {
		"": "typename.base(typeofBase1)"
		, "kind": "()"
		, "type": "typename"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 48
		, "args": [{
			"": "typeofBase1"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 48
			, "value": "typeofBase1"
		}]
	}
}, {
	"": "offsetOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "offsetOfBase2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 49
	, "size": 4
	, "offs": 408344
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.offset"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 49
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 49
			, "value": "typeofBase2"
		}
		, "right": {
			"": "offset"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 49
			, "value": "offset"
		}
	}
}, {
	"": "sizeOfBase2"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "sizeOfBase2"
	, "type": "int32"
	, "file": "cmplStd/test/lang/reflect.ci"
	, "line": 50
	, "size": 4
	, "offs": 408352
	, "static": true
	, "const": false
	, "ast": {
		"": "typeofBase2.size"
		, "kind": "."
		, "type": "int32"
		, "file": "cmplStd/test/lang/reflect.ci"
		, "line": 50
		, "left": {
			"": "typeofBase2"
			, "kind": ".variable"
			, "type": "typename"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 50
			, "value": "typeofBase2"
		}
		, "right": {
			"": "size"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/reflect.ci"
			, "line": 50
			, "value": "size"
		}
	}
}, {
	"": "RecordMemberTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMemberTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 2
	, "size": 32
	, "offs": 323568
	, "static": true
	, "const": true
	, "doc": "test and documentation of member initializations"
}, {
	"": "RecordMemberTest.Inner"
	, "kind": "typename"
	, "cast": "val"
	, "name": "Inner"
	, "owner": "RecordMemberTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 4
	, "size": 8
	, "offs": 323728
	, "static": true
	, "const": true
}, {
	"": "RecordMemberTest.Inner.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 5
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.Inner.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest.Inner"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 6
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.member"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "member"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 10
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 13
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.memberInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "memberInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 16
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 16
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.constantInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "constantInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 19
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": true
	, "ast": {
		"": "3"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 19
		, "value": "3"
	}
}, {
	"": "RecordMemberTest.memberRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "memberRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 22
	, "size": 8
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "RecordMemberTest.constantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "constantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 25
	, "size": 8
	, "offs": 24
	, "static": false
	, "const": true
}, {
	"": "RecordMemberTest.global"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "global"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 34
	, "size": 4
	, "offs": 408360
	, "static": true
	, "const": false
}, {
	"": "RecordMemberTest.globalInit"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalInit"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 37
	, "size": 4
	, "offs": 408368
	, "static": true
	, "const": false
	, "ast": {
		"": "1"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 37
		, "value": "1"
	}
}, {
	"": "RecordMemberTest.globalConstant"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "globalConstant"
	, "owner": "RecordMemberTest"
	, "type": "int32"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 40
	, "size": 4
	, "offs": 408376
	, "static": true
	, "const": true
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.member.ci"
		, "line": 40
		, "value": "2"
	}
}, {
	"": "RecordMemberTest.globalRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 43
	, "size": 8
	, "offs": 408384
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRec.constant := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 43
		}, {
			"": "globalRec.member := (0);"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "RecordMemberTest.globalRecInit"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalRecInit"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 46
	, "size": 8
	, "offs": 408392
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalRecInit.member := 4;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 46
		}, {
			"": "globalRecInit.constant := 5;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 46
		}]
	}
}, {
	"": "RecordMemberTest.globalConstantRec"
	, "kind": "variable"
	, "cast": "val"
	, "name": "globalConstantRec"
	, "owner": "RecordMemberTest"
	, "type": "RecordMemberTest.Inner"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 49
	, "size": 8
	, "offs": 408400
	, "static": true
	, "const": true
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest.Inner"
		, "stmt": [{
			"": "globalConstantRec.member := 6;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 49
		}, {
			"": "globalConstantRec.constant := 7;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 49
		}]
	}
}, {
	"": "recordMemberTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMemberTest"
	, "type": "RecordMemberTest"
	, "file": "cmplStd/test/lang/init.member.ci"
	, "line": 52
	, "size": 32
	, "offs": 408408
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMemberTest"
		, "stmt": [{
			"": "recordMemberTest.member := 10;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 53
		}, {
			"": "recordMemberTest.constant := 11;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 54
		}, {
			"": "recordMemberTest.memberInit := 12;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 55
		}, {
			"": "recordMemberTest.constantInit := 13;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 56
		}, {
			"": "recordMemberTest.memberRec.member := 14;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 59
		}, {
			"": "recordMemberTest.memberRec.constant := 15;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 60
		}, {
			"": "recordMemberTest.constantRec.member := 16;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 64
		}, {
			"": "recordMemberTest.constantRec.constant := 17;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.member.ci"
			, "line": 65
		}]
	}
}, {
	"": "RecordMethodTest"
	, "kind": "typename"
	, "cast": "val"
	, "name": "RecordMethodTest"
	, "type": "typename"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 4
	, "size": 16
	, "offs": 327432
	, "static": true
	, "const": true
	, "doc": "static, virtual and abstract methods"
}, {
	"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 10
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 408440
	, "static": true
	, "const": false
	, "doc": "static method is like a `global function` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "stmt": [{
			"": "trace(\"staticMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 11
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408440
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408445
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408450
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408455
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408460
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408465
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 408470
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 408474
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408478
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 18
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 18
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 408480
	, "static": true
	, "const": false
	, "doc": "static forward method is like a `forward function reference` hidden in a record\n@see lang/function.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.abstractMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "abstractMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 25
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 25
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
	, "doc": "abstract methods must be overridden when inheriting or instantiating\nthe compiler sees it as a `constant function reference` without `default type initializer`\n@see lang/member.ci"
}, {
	"": "RecordMethodTest.delegateMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "delegateMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 32
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
	, "doc": "virtual method (use to delegate)\nthe compiler sees it as a `constant function reference` with `default field initializer`\n@see lang/member.ci"
	, "ast": {
		"": "forwardMethod"
		, "kind": ".variable"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 32
		, "value": "forwardMethod"
	}
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 408488
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "stmt": [{
			"": "trace(\"virtualMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 41
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408488
		, "size": 5
	}, {
		"instruction": "load.c32 41"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408493
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408498
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408503
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408508
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408513
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 408518
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 408522
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408526
		, "size": 1
	}]
}, {
	"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "virtualMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 40
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": true
	, "doc": "virtual methods can be overridden when inheriting or instantiating\nthe compiler will generate a static function and an instance member initialized with the static method\n  * static void virtualMethod(...) { ... }\n  * void virtualMethod(...) = [static] virtualMethod;"
	, "ast": {
		"": "virtualMethod"
		, "kind": ".variable"
		, "type": "function"
		, "value": "virtualMethod"
	}
}, {
	"": "RecordMethodTest.forwardMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "forwardMethod"
	, "owner": "RecordMethodTest"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 47
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 408528
	, "static": true
	, "const": false
	, "doc": "static forward method implementation"
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 47
		, "stmt": [{
			"": "trace(\"forwardMethod\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 48
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408528
		, "size": 5
	}, {
		"instruction": "load.c32 48"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408533
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408538
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408543
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408548
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408553
		, "size": 5
	}, {
		"instruction": "load.sp(+40)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 408558
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 408562
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408566
		, "size": 1
	}]
}, {
	"": "globalFunction(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "globalFunction"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 57
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 39
	, "offs": 408568
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 57
		, "stmt": [{
			"": "trace(\"globalFunction\", x);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 58
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408568
		, "size": 5
	}, {
		"instruction": "load.c32 58"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408573
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408578
		, "size": 5
	}, {
		"instruction": "load.c32 128"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408583
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408588
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408593
		, "size": 5
	}, {
		"instruction": "load.sp(+28)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 408598
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 408602
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408606
		, "size": 1
	}]
}, {
	"": "recordMethodTest"
	, "kind": "variable"
	, "cast": "val"
	, "name": "recordMethodTest"
	, "type": "RecordMethodTest"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 62
	, "size": 16
	, "offs": 408608
	, "static": true
	, "const": false
	, "doc": "create an instance of the type "
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "RecordMethodTest"
		, "stmt": [{
			"": "recordMethodTest.abstractMethod := globalFunction;"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 64
		}, {
			"": "recordMethodTest.delegateMethod := forwardMethod;"
			, "kind": ";"
			, "type": "void"
		}, {
			"": "recordMethodTest.virtualMethod := virtualMethod;"
			, "kind": ";"
			, "type": "void"
		}]
	}
}, {
	"": "staticMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "staticMethod"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 84
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 66
	, "offs": 408624
	, "static": true
	, "const": false
	, "doc": "extension function is defined, it has the highest priority."
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "stmt": [{
			"": "debug(\"extension.staticMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 85
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 86
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 86
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 86
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "cmplStd/test/lang/init.method.ci"
						, "line": 86
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 86
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 86
				, "stmt": [{
					"": "RecordMethodTest.staticMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 87
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408624
		, "size": 5
	}, {
		"instruction": "load.c32 85"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408629
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408634
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 408639
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408640
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408645
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408650
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 408655
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 408659
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408663
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 408668
		, "size": 1
	}, {
		"instruction": "jnz +20"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 408669
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 408673
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408675
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408677
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408679
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 408684
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408685
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408689
		, "size": 1
	}]
}, {
	"": "virtualMethod(this: RecordMethodTest, x: int32): void"
	, "kind": "function"
	, "cast": "inline"
	, "name": "virtualMethod"
	, "type": "function"
	, "file": "cmplStd/test/lang/init.method.ci"
	, "line": 90
	, "args": [{
		"": ".result"
		, "kind": "variable"
		, "cast": "void"
		, "name": ".result"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "val"
		, "name": "this"
		, "type": "RecordMethodTest"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 16
		, "offs": 16
		, "static": false
		, "const": false
	}, {
		"": "x"
		, "kind": "variable"
		, "cast": "i32"
		, "name": "x"
		, "type": "int32"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "size": 4
		, "offs": 20
		, "static": false
		, "const": false
	}]
	, "size": 63
	, "offs": 408696
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "stmt": [{
			"": "debug(\"extension.virtualMethod\");"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 91
		}, {
			"": "if ((this) != null)"
			, "kind": "if"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 92
			, "test": {
				"": "(this) != null"
				, "kind": "!="
				, "type": "bool"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 92
				, "left": {
					"": "(this)"
					, "kind": "()"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 92
					, "args": [{
						"": "this"
						, "kind": ".variable"
						, "type": "RecordMethodTest"
						, "file": "cmplStd/test/lang/init.method.ci"
						, "line": 92
						, "value": "this"
					}]
				}
				, "right": {
					"": "null"
					, "kind": ".variable"
					, "type": "pointer"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 92
					, "value": "null"
				}
			}
			, "then": {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 92
				, "stmt": [{
					"": "this.virtualMethod(this, x);"
					, "kind": ";"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.method.ci"
					, "line": 93
				}]
			}
		}]
	}
	, "asm": [{
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408696
		, "size": 5
	}, {
		"instruction": "load.c32 91"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408701
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 408706
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 408711
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408712
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408717
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408722
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 408727
		, "size": 4
	}, {
		"instruction": "load.sp(+8)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 408731
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 408735
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 408740
		, "size": 1
	}, {
		"instruction": "jnz +17"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 408741
		, "size": 4
	}, {
		"instruction": "dup.x128 sp(2)"
		, "name": "dup.x128"
		, "code": "0x12"
		, "offs": 408745
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(5)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408747
		, "size": 2
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 408749
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(8)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 408751
		, "size": 2
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 408753
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 408754
		, "size": 4
	}, {
		"instruction": "ret"
		, "name": "ret"
		, "code": "0x03"
		, "offs": 408758
		, "size": 1
	}]
}, {
	"": "rgbF32"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbF32"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 2
	, "size": 16
	, "offs": 333768
	, "static": true
	, "const": true
}, {
	"": "rgbF32.r"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "r"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 3
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbF32.g"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "g"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 4
	, "size": 4
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "rgbF32.b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "b"
	, "owner": "rgbF32"
	, "type": "float32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 5
	, "size": 4
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "rgbU8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "rgbU8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 9
	, "size": 3
	, "offs": 334408
	, "static": true
	, "const": true
}, {
	"": "rgbU8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 10
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "rgbU8.g"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "g"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 11
	, "size": 1
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "rgbU8.r"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "r"
	, "owner": "rgbU8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 12
	, "size": 1
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "color"
	, "kind": "typename"
	, "cast": "val"
	, "name": "color"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 16
	, "size": 4
	, "offs": 335048
	, "static": true
	, "const": true
}, {
	"": "color.col"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "col"
	, "owner": "color"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 17
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "color.rgb"
	, "kind": "variable"
	, "cast": "val"
	, "name": "rgb"
	, "owner": "color"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 18
	, "size": 3
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "Color"
	, "kind": "typename"
	, "cast": "ref"
	, "name": "Color"
	, "type": "object"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 22
	, "size": 20
	, "offs": 335528
	, "static": true
	, "const": true
}, {
	"": "Color.value"
	, "kind": "variable"
	, "cast": "val"
	, "name": "value"
	, "owner": "Color"
	, "type": "rgbF32"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 23
	, "size": 16
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "object..type"
	, "kind": "variable"
	, "cast": "ref"
	, "name": ".type"
	, "owner": "object"
	, "type": "typename"
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": true
}, {
	"": "object.create(type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "create"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 28696
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(7)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(7)"
	}
}, {
	"": "object.destroy(this: object): void"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "destroy"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "void"
		, "size": 0
		, "offs": 0
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29240
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(8)"
		, "kind": "emit"
		, "type": "void"
		, "value": "nfc(8)"
	}
}, {
	"": "object.as(this: object, type: typename): pointer"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "as"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "pointer"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "type"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "type"
		, "type": "typename"
		, "size": 4
		, "offs": 8
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 29928
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(9)"
		, "kind": "emit"
		, "type": "pointer"
		, "value": "nfc(9)"
	}
}, {
	"": "object.type(this: object): typename"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "type"
	, "owner": "object"
	, "type": "function"
	, "args": [{
		"": ".result"
		, "kind": "inline"
		, "cast": "inline"
		, "name": ".result"
		, "type": "typename"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}, {
		"": "this"
		, "kind": "variable"
		, "cast": "ref"
		, "name": "this"
		, "type": "object"
		, "size": 4
		, "offs": 4
		, "static": false
		, "const": false
	}]
	, "size": 0
	, "offs": 30456
	, "static": true
	, "const": true
	, "ast": {
		"": "nfc(10)"
		, "kind": "emit"
		, "type": "typename"
		, "value": "nfc(10)"
	}
}, {
	"": "black"
	, "kind": "variable"
	, "cast": "val"
	, "name": "black"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 26
	, "size": 3
	, "offs": 408760
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "black.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}, {
			"": "black.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 26
		}]
	}
}, {
	"": "green"
	, "kind": "variable"
	, "cast": "val"
	, "name": "green"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 27
	, "size": 3
	, "offs": 408768
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "green.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}, {
			"": "green.b := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 27
		}]
	}
}, {
	"": "white"
	, "kind": "variable"
	, "cast": "val"
	, "name": "white"
	, "type": "rgbU8"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 28
	, "size": 3
	, "offs": 408776
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "rgbU8"
		, "stmt": [{
			"": "white.r := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.g := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}, {
			"": "white.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 28
		}]
	}
}, {
	"": "cyan"
	, "kind": "variable"
	, "cast": "val"
	, "name": "cyan"
	, "type": "color"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 30
	, "size": 4
	, "offs": 408784
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "cyan.col := (65535);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 30
		}]
	}
}, {
	"": "blue"
	, "kind": "variable"
	, "cast": "val"
	, "name": "blue"
	, "type": "color"
	, "file": "cmplStd/test/lang/recUnion.ci"
	, "line": 31
	, "size": 4
	, "offs": 408792
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "color"
		, "stmt": [{
			"": "blue.rgb.r := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.g := (0);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}, {
			"": "blue.rgb.b := (255);"
			, "kind": ";"
			, "type": "void"
			, "file": "cmplStd/test/lang/recUnion.ci"
			, "line": 31
		}]
	}
}, {
	"": "record_pack0"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack0"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 2
	, "size": 8
	, "offs": 336776
	, "static": true
	, "const": true
}, {
	"": "record_pack0._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 3
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack0"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 4
	, "size": 8
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 5
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack0"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 6
	, "size": 4
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack0"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 7
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack0.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack0"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 8
	, "size": 2
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack1"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 12
	, "size": 17
	, "offs": 337896
	, "static": true
	, "const": true
}, {
	"": "record_pack1._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 13
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack1.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack1"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 14
	, "size": 8
	, "offs": 1
	, "static": false
	, "const": false
}, {
	"": "record_pack1._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 15
	, "size": 1
	, "offs": 9
	, "static": false
	, "const": false
}, {
	"": "record_pack1.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack1"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 16
	, "size": 4
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack1._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack1"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 17
	, "size": 1
	, "offs": 14
	, "static": false
	, "const": false
}, {
	"": "record_pack1.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack1"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 18
	, "size": 2
	, "offs": 15
	, "static": false
	, "const": false
}, {
	"": "record_pack2"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack2"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 22
	, "size": 20
	, "offs": 339016
	, "static": true
	, "const": true
}, {
	"": "record_pack2._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 23
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack2.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack2"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 24
	, "size": 8
	, "offs": 2
	, "static": false
	, "const": false
}, {
	"": "record_pack2._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 25
	, "size": 1
	, "offs": 10
	, "static": false
	, "const": false
}, {
	"": "record_pack2.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack2"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 26
	, "size": 4
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack2._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack2"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 27
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack2.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack2"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 28
	, "size": 2
	, "offs": 18
	, "static": false
	, "const": false
}, {
	"": "record_pack4"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack4"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 32
	, "size": 24
	, "offs": 340136
	, "static": true
	, "const": true
}, {
	"": "record_pack4._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 33
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack4.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack4"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 34
	, "size": 8
	, "offs": 4
	, "static": false
	, "const": false
}, {
	"": "record_pack4._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 35
	, "size": 1
	, "offs": 12
	, "static": false
	, "const": false
}, {
	"": "record_pack4.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack4"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 36
	, "size": 4
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack4._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack4"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 37
	, "size": 1
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack4.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack4"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 38
	, "size": 2
	, "offs": 22
	, "static": false
	, "const": false
}, {
	"": "record_pack8"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_pack8"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 42
	, "size": 32
	, "offs": 341256
	, "static": true
	, "const": true
}, {
	"": "record_pack8._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 43
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_pack8.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_pack8"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 44
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_pack8._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 45
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_pack8.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_pack8"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 46
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_pack8._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_pack8"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 47
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_pack8.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_pack8"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 48
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "record_packDef"
	, "kind": "typename"
	, "cast": "val"
	, "name": "record_packDef"
	, "type": "typename"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 52
	, "size": 32
	, "offs": 342376
	, "static": true
	, "const": true
}, {
	"": "record_packDef._0"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_0"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 53
	, "size": 1
	, "offs": 0
	, "static": false
	, "const": false
}, {
	"": "record_packDef.a"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "a"
	, "owner": "record_packDef"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 54
	, "size": 8
	, "offs": 8
	, "static": false
	, "const": false
}, {
	"": "record_packDef._1"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_1"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 55
	, "size": 1
	, "offs": 16
	, "static": false
	, "const": false
}, {
	"": "record_packDef.b"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "b"
	, "owner": "record_packDef"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 56
	, "size": 4
	, "offs": 20
	, "static": false
	, "const": false
}, {
	"": "record_packDef._2"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "_2"
	, "owner": "record_packDef"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 57
	, "size": 1
	, "offs": 24
	, "static": false
	, "const": false
}, {
	"": "record_packDef.c"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "c"
	, "owner": "record_packDef"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/recPacking.ci"
	, "line": 58
	, "size": 2
	, "offs": 26
	, "static": false
	, "const": false
}, {
	"": "a"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "a"
	, "type": "typename"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 3
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "96.300000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 3
		, "value": "96.300000"
	}
}, {
	"": "b"
	, "kind": "inline"
	, "cast": "inline"
	, "name": "b"
	, "type": "typename"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 4
	, "size": 0
	, "offs": 0
	, "static": true
	, "const": false
	, "ast": {
		"": "42.140000"
		, "kind": ".literal"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 4
		, "value": "42.140000"
	}
}, {
	"": "shift"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "shift"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 5
	, "size": 4
	, "offs": 408800
	, "static": true
	, "const": false
	, "ast": {
		"": "2"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 5
		, "value": "2"
	}
}, {
	"": "boolA"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolA"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 7
	, "size": 1
	, "offs": 408808
	, "static": true
	, "const": false
	, "ast": {
		"": "true"
		, "kind": ".variable"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 7
		, "value": "true"
	}
}, {
	"": "boolB"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolB"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 8
	, "size": 1
	, "offs": 408816
	, "static": true
	, "const": false
	, "ast": {
		"": "!false"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 8
		, "right": {
			"": "false"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 8
			, "value": "false"
		}
	}
}, {
	"": "boolAnd"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolAnd"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 17
	, "size": 1
	, "offs": 408824
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA & boolB"
		, "kind": "&"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 17
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 17
			, "value": "boolB"
		}
	}
}, {
	"": "boolIor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolIor"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 18
	, "size": 1
	, "offs": 408832
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA | boolB"
		, "kind": "|"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 18
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 18
			, "value": "boolB"
		}
	}
}, {
	"": "boolXor"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolXor"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 19
	, "size": 1
	, "offs": 408840
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA ^ boolB"
		, "kind": "^"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 19
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 19
			, "value": "boolB"
		}
	}
}, {
	"": "boolNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolNot"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 22
	, "size": 1
	, "offs": 408848
	, "static": true
	, "const": false
	, "ast": {
		"": "!boolB"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 22
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 22
			, "value": "boolB"
		}
	}
}, {
	"": "boolCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 23
	, "size": 1
	, "offs": 408856
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA == boolB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 23
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 23
			, "value": "boolB"
		}
	}
}, {
	"": "boolCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 24
	, "size": 1
	, "offs": 408864
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA != boolB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 24
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 24
			, "value": "boolB"
		}
	}
}, {
	"": "boolClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolClt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 25
	, "size": 1
	, "offs": 408872
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA < boolB"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 25
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 25
			, "value": "boolB"
		}
	}
}, {
	"": "boolCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 26
	, "size": 1
	, "offs": 408880
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA <= boolB"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 26
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 26
			, "value": "boolB"
		}
	}
}, {
	"": "boolCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 27
	, "size": 1
	, "offs": 408888
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA > boolB"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 27
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 27
			, "value": "boolB"
		}
	}
}, {
	"": "boolCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "boolCge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 28
	, "size": 1
	, "offs": 408896
	, "static": true
	, "const": false
	, "ast": {
		"": "boolA >= boolB"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 28
		, "left": {
			"": "boolA"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolA"
		}
		, "right": {
			"": "boolB"
			, "kind": ".variable"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 28
			, "value": "boolB"
		}
	}
}, {
	"": "chrA"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrA"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 30
	, "size": 1
	, "offs": 408904
	, "static": true
	, "const": false
	, "ast": {
		"": "'a'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 30
		, "value": "'a'"
	}
}, {
	"": "chrB"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrB"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 31
	, "size": 1
	, "offs": 408912
	, "static": true
	, "const": false
	, "ast": {
		"": "'b'"
		, "kind": ".literal"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 31
		, "value": "'b'"
	}
}, {
	"": "chrPls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrPls"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 32
	, "size": 1
	, "offs": 408920
	, "static": true
	, "const": false
	, "ast": {
		"": "+chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 32
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 32
			, "value": "chrB"
		}
	}
}, {
	"": "chrNeg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrNeg"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 33
	, "size": 1
	, "offs": 408928
	, "static": true
	, "const": false
	, "ast": {
		"": "-chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 33
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 33
			, "value": "chrB"
		}
	}
}, {
	"": "chrCmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrCmt"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 34
	, "size": 1
	, "offs": 408936
	, "static": true
	, "const": false
	, "ast": {
		"": "~chrB"
		, "kind": "~"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 34
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 34
			, "value": "chrB"
		}
	}
}, {
	"": "chrAdd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAdd"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 35
	, "size": 1
	, "offs": 408944
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA + chrB"
		, "kind": "+"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 35
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 35
			, "value": "chrB"
		}
	}
}, {
	"": "chrSub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrSub"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 36
	, "size": 1
	, "offs": 408952
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA - chrB"
		, "kind": "-"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 36
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 36
			, "value": "chrB"
		}
	}
}, {
	"": "chrMul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMul"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 37
	, "size": 1
	, "offs": 408960
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA * chrB"
		, "kind": "*"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 37
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 37
			, "value": "chrB"
		}
	}
}, {
	"": "chrDiv"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrDiv"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 38
	, "size": 1
	, "offs": 408968
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA / chrB"
		, "kind": "/"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 38
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 38
			, "value": "chrB"
		}
	}
}, {
	"": "chrMod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrMod"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 39
	, "size": 1
	, "offs": 408976
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA % chrB"
		, "kind": "%"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 39
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 39
			, "value": "chrB"
		}
	}
}, {
	"": "chrAnd"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrAnd"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 40
	, "size": 1
	, "offs": 408984
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA & chrB"
		, "kind": "&"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 40
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 40
			, "value": "chrB"
		}
	}
}, {
	"": "chrIor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrIor"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 41
	, "size": 1
	, "offs": 408992
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA | chrB"
		, "kind": "|"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 41
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 41
			, "value": "chrB"
		}
	}
}, {
	"": "chrXor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrXor"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 42
	, "size": 1
	, "offs": 409000
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA ^ chrB"
		, "kind": "^"
		, "type": "char"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 42
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 42
			, "value": "chrB"
		}
	}
}, {
	"": "chrShl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShl"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 43
	, "size": 1
	, "offs": 409008
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 43
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 43
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 43
			, "value": "shift"
		}
	}
}, {
	"": "chrShr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "chrShr"
	, "type": "char"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 44
	, "size": 1
	, "offs": 409016
	, "static": true
	, "const": false
	, "ast": {
		"": "(chrA) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 44
		, "left": {
			"": "(chrA)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 44
			, "args": [{
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrA"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 44
			, "value": "shift"
		}
	}
}, {
	"": "chrNot"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrNot"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 45
	, "size": 1
	, "offs": 409024
	, "static": true
	, "const": false
	, "ast": {
		"": "!(chrB)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 45
		, "right": {
			"": "(chrB)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 45
			, "args": [{
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrB"
			}]
		}
	}
}, {
	"": "chrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 46
	, "size": 1
	, "offs": 409032
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA == chrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 46
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 46
			, "value": "chrB"
		}
	}
}, {
	"": "chrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 47
	, "size": 1
	, "offs": 409040
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA != chrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 47
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 47
			, "value": "chrB"
		}
	}
}, {
	"": "chrClt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrClt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 48
	, "size": 1
	, "offs": 409048
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA < chrB"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 48
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 48
			, "value": "chrB"
		}
	}
}, {
	"": "chrCle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 49
	, "size": 1
	, "offs": 409056
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA <= chrB"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 49
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 49
			, "value": "chrB"
		}
	}
}, {
	"": "chrCgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 50
	, "size": 1
	, "offs": 409064
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA > chrB"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 50
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 50
			, "value": "chrB"
		}
	}
}, {
	"": "chrCge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "chrCge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 51
	, "size": 1
	, "offs": 409072
	, "static": true
	, "const": false
	, "ast": {
		"": "chrA >= chrB"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 51
		, "left": {
			"": "chrA"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrA"
		}
		, "right": {
			"": "chrB"
			, "kind": ".variable"
			, "type": "char"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 51
			, "value": "chrB"
		}
	}
}, {
	"": "i8A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8A"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 53
	, "size": 1
	, "offs": 409080
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 53
		, "value": "a"
	}
}, {
	"": "i8B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8B"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 54
	, "size": 1
	, "offs": 409088
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 54
		, "value": "b"
	}
}, {
	"": "i8Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Pls"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 55
	, "size": 1
	, "offs": 409096
	, "static": true
	, "const": false
	, "ast": {
		"": "+i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 55
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 55
			, "value": "i8B"
		}
	}
}, {
	"": "i8Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Neg"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 56
	, "size": 1
	, "offs": 409104
	, "static": true
	, "const": false
	, "ast": {
		"": "-i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 56
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 56
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Cmt"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 57
	, "size": 1
	, "offs": 409112
	, "static": true
	, "const": false
	, "ast": {
		"": "~i8B"
		, "kind": "~"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 57
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 57
			, "value": "i8B"
		}
	}
}, {
	"": "i8Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Add"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 58
	, "size": 1
	, "offs": 409120
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A + i8B"
		, "kind": "+"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 58
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 58
			, "value": "i8B"
		}
	}
}, {
	"": "i8Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Sub"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 59
	, "size": 1
	, "offs": 409128
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A - i8B"
		, "kind": "-"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 59
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 59
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mul"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 60
	, "size": 1
	, "offs": 409136
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A * i8B"
		, "kind": "*"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 60
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 60
			, "value": "i8B"
		}
	}
}, {
	"": "i8Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Div"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 61
	, "size": 1
	, "offs": 409144
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A / i8B"
		, "kind": "/"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 61
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 61
			, "value": "i8B"
		}
	}
}, {
	"": "i8Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Mod"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 62
	, "size": 1
	, "offs": 409152
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A % i8B"
		, "kind": "%"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 62
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 62
			, "value": "i8B"
		}
	}
}, {
	"": "i8And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8And"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 63
	, "size": 1
	, "offs": 409160
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A & i8B"
		, "kind": "&"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 63
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 63
			, "value": "i8B"
		}
	}
}, {
	"": "i8Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Ior"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 64
	, "size": 1
	, "offs": 409168
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A | i8B"
		, "kind": "|"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 64
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 64
			, "value": "i8B"
		}
	}
}, {
	"": "i8Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Xor"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 65
	, "size": 1
	, "offs": 409176
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A ^ i8B"
		, "kind": "^"
		, "type": "int8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 65
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 65
			, "value": "i8B"
		}
	}
}, {
	"": "i8Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shl"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 66
	, "size": 1
	, "offs": 409184
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 66
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 66
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 66
			, "value": "shift"
		}
	}
}, {
	"": "i8Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i8Shr"
	, "type": "int8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 67
	, "size": 1
	, "offs": 409192
	, "static": true
	, "const": false
	, "ast": {
		"": "(i8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 67
		, "left": {
			"": "(i8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 67
			, "args": [{
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 67
			, "value": "shift"
		}
	}
}, {
	"": "i8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 68
	, "size": 1
	, "offs": 409200
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 68
		, "right": {
			"": "(i8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 68
			, "args": [{
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8B"
			}]
		}
	}
}, {
	"": "i8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 69
	, "size": 1
	, "offs": 409208
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A == i8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 69
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 69
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 70
	, "size": 1
	, "offs": 409216
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A != i8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 70
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 70
			, "value": "i8B"
		}
	}
}, {
	"": "i8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 71
	, "size": 1
	, "offs": 409224
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A < i8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 71
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 71
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 72
	, "size": 1
	, "offs": 409232
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A <= i8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 72
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 72
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 73
	, "size": 1
	, "offs": 409240
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A > i8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 73
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 73
			, "value": "i8B"
		}
	}
}, {
	"": "i8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i8Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 74
	, "size": 1
	, "offs": 409248
	, "static": true
	, "const": false
	, "ast": {
		"": "i8A >= i8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 74
		, "left": {
			"": "i8A"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8A"
		}
		, "right": {
			"": "i8B"
			, "kind": ".variable"
			, "type": "int8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 74
			, "value": "i8B"
		}
	}
}, {
	"": "u8A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8A"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 76
	, "size": 1
	, "offs": 409256
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 76
		, "value": "a"
	}
}, {
	"": "u8B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8B"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 77
	, "size": 1
	, "offs": 409264
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 77
		, "value": "b"
	}
}, {
	"": "u8Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Pls"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 78
	, "size": 1
	, "offs": 409272
	, "static": true
	, "const": false
	, "ast": {
		"": "+u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 78
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 78
			, "value": "u8B"
		}
	}
}, {
	"": "u8Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Neg"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 79
	, "size": 1
	, "offs": 409280
	, "static": true
	, "const": false
	, "ast": {
		"": "-u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 79
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 79
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Cmt"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 80
	, "size": 1
	, "offs": 409288
	, "static": true
	, "const": false
	, "ast": {
		"": "~u8B"
		, "kind": "~"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 80
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 80
			, "value": "u8B"
		}
	}
}, {
	"": "u8Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Add"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 81
	, "size": 1
	, "offs": 409296
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A + u8B"
		, "kind": "+"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 81
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 81
			, "value": "u8B"
		}
	}
}, {
	"": "u8Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Sub"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 82
	, "size": 1
	, "offs": 409304
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A - u8B"
		, "kind": "-"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 82
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 82
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mul"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 83
	, "size": 1
	, "offs": 409312
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A * u8B"
		, "kind": "*"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 83
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 83
			, "value": "u8B"
		}
	}
}, {
	"": "u8Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Div"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 84
	, "size": 1
	, "offs": 409320
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A / u8B"
		, "kind": "/"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 84
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 84
			, "value": "u8B"
		}
	}
}, {
	"": "u8Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Mod"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 85
	, "size": 1
	, "offs": 409328
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A % u8B"
		, "kind": "%"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 85
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 85
			, "value": "u8B"
		}
	}
}, {
	"": "u8And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8And"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 86
	, "size": 1
	, "offs": 409336
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A & u8B"
		, "kind": "&"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 86
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 86
			, "value": "u8B"
		}
	}
}, {
	"": "u8Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Ior"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 87
	, "size": 1
	, "offs": 409344
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A | u8B"
		, "kind": "|"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 87
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 87
			, "value": "u8B"
		}
	}
}, {
	"": "u8Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Xor"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 88
	, "size": 1
	, "offs": 409352
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A ^ u8B"
		, "kind": "^"
		, "type": "uint8"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 88
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 88
			, "value": "u8B"
		}
	}
}, {
	"": "u8Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shl"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 89
	, "size": 1
	, "offs": 409360
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 89
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 89
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 89
			, "value": "shift"
		}
	}
}, {
	"": "u8Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u8Shr"
	, "type": "uint8"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 90
	, "size": 1
	, "offs": 409368
	, "static": true
	, "const": false
	, "ast": {
		"": "(u8A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 90
		, "left": {
			"": "(u8A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 90
			, "args": [{
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 90
			, "value": "shift"
		}
	}
}, {
	"": "u8Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 91
	, "size": 1
	, "offs": 409376
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u8B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 91
		, "right": {
			"": "(u8B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 91
			, "args": [{
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8B"
			}]
		}
	}
}, {
	"": "u8Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 92
	, "size": 1
	, "offs": 409384
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A == u8B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 92
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 92
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 93
	, "size": 1
	, "offs": 409392
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A != u8B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 93
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 93
			, "value": "u8B"
		}
	}
}, {
	"": "u8Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 94
	, "size": 1
	, "offs": 409400
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A < u8B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 94
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 94
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 95
	, "size": 1
	, "offs": 409408
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A <= u8B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 95
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 95
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 96
	, "size": 1
	, "offs": 409416
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A > u8B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 96
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 96
			, "value": "u8B"
		}
	}
}, {
	"": "u8Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u8Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 97
	, "size": 1
	, "offs": 409424
	, "static": true
	, "const": false
	, "ast": {
		"": "u8A >= u8B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 97
		, "left": {
			"": "u8A"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8A"
		}
		, "right": {
			"": "u8B"
			, "kind": ".variable"
			, "type": "uint8"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 97
			, "value": "u8B"
		}
	}
}, {
	"": "i16A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16A"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 99
	, "size": 2
	, "offs": 409432
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 99
		, "value": "a"
	}
}, {
	"": "i16B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16B"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 100
	, "size": 2
	, "offs": 409440
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 100
		, "value": "b"
	}
}, {
	"": "i16Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Pls"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 101
	, "size": 2
	, "offs": 409448
	, "static": true
	, "const": false
	, "ast": {
		"": "+i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 101
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 101
			, "value": "i16B"
		}
	}
}, {
	"": "i16Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Neg"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 102
	, "size": 2
	, "offs": 409456
	, "static": true
	, "const": false
	, "ast": {
		"": "-i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 102
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 102
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Cmt"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 103
	, "size": 2
	, "offs": 409464
	, "static": true
	, "const": false
	, "ast": {
		"": "~i16B"
		, "kind": "~"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 103
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 103
			, "value": "i16B"
		}
	}
}, {
	"": "i16Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Add"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 104
	, "size": 2
	, "offs": 409472
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A + i16B"
		, "kind": "+"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 104
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 104
			, "value": "i16B"
		}
	}
}, {
	"": "i16Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Sub"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 105
	, "size": 2
	, "offs": 409480
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A - i16B"
		, "kind": "-"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 105
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 105
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mul"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 106
	, "size": 2
	, "offs": 409488
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A * i16B"
		, "kind": "*"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 106
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 106
			, "value": "i16B"
		}
	}
}, {
	"": "i16Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Div"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 107
	, "size": 2
	, "offs": 409496
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A / i16B"
		, "kind": "/"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 107
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 107
			, "value": "i16B"
		}
	}
}, {
	"": "i16Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Mod"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 108
	, "size": 2
	, "offs": 409504
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A % i16B"
		, "kind": "%"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 108
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 108
			, "value": "i16B"
		}
	}
}, {
	"": "i16And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16And"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 109
	, "size": 2
	, "offs": 409512
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A & i16B"
		, "kind": "&"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 109
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 109
			, "value": "i16B"
		}
	}
}, {
	"": "i16Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Ior"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 110
	, "size": 2
	, "offs": 409520
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A | i16B"
		, "kind": "|"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 110
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 110
			, "value": "i16B"
		}
	}
}, {
	"": "i16Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Xor"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 111
	, "size": 2
	, "offs": 409528
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A ^ i16B"
		, "kind": "^"
		, "type": "int16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 111
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 111
			, "value": "i16B"
		}
	}
}, {
	"": "i16Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shl"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 112
	, "size": 2
	, "offs": 409536
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 112
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 112
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 112
			, "value": "shift"
		}
	}
}, {
	"": "i16Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i16Shr"
	, "type": "int16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 113
	, "size": 2
	, "offs": 409544
	, "static": true
	, "const": false
	, "ast": {
		"": "(i16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 113
		, "left": {
			"": "(i16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 113
			, "args": [{
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 113
			, "value": "shift"
		}
	}
}, {
	"": "i16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 114
	, "size": 1
	, "offs": 409552
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 114
		, "right": {
			"": "(i16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 114
			, "args": [{
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16B"
			}]
		}
	}
}, {
	"": "i16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 115
	, "size": 1
	, "offs": 409560
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A == i16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 115
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 115
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 116
	, "size": 1
	, "offs": 409568
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A != i16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 116
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 116
			, "value": "i16B"
		}
	}
}, {
	"": "i16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 117
	, "size": 1
	, "offs": 409576
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A < i16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 117
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 117
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 118
	, "size": 1
	, "offs": 409584
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A <= i16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 118
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 118
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 119
	, "size": 1
	, "offs": 409592
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A > i16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 119
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 119
			, "value": "i16B"
		}
	}
}, {
	"": "i16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i16Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 120
	, "size": 1
	, "offs": 409600
	, "static": true
	, "const": false
	, "ast": {
		"": "i16A >= i16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 120
		, "left": {
			"": "i16A"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16A"
		}
		, "right": {
			"": "i16B"
			, "kind": ".variable"
			, "type": "int16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 120
			, "value": "i16B"
		}
	}
}, {
	"": "u16A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16A"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 122
	, "size": 2
	, "offs": 409608
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 122
		, "value": "a"
	}
}, {
	"": "u16B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16B"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 123
	, "size": 2
	, "offs": 409616
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 123
		, "value": "b"
	}
}, {
	"": "u16Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Pls"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 124
	, "size": 2
	, "offs": 409624
	, "static": true
	, "const": false
	, "ast": {
		"": "+u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 124
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 124
			, "value": "u16B"
		}
	}
}, {
	"": "u16Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Neg"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 125
	, "size": 2
	, "offs": 409632
	, "static": true
	, "const": false
	, "ast": {
		"": "-u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 125
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 125
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Cmt"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 126
	, "size": 2
	, "offs": 409640
	, "static": true
	, "const": false
	, "ast": {
		"": "~u16B"
		, "kind": "~"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 126
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 126
			, "value": "u16B"
		}
	}
}, {
	"": "u16Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Add"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 127
	, "size": 2
	, "offs": 409648
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A + u16B"
		, "kind": "+"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 127
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 127
			, "value": "u16B"
		}
	}
}, {
	"": "u16Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Sub"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 128
	, "size": 2
	, "offs": 409656
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A - u16B"
		, "kind": "-"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 128
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 128
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mul"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 129
	, "size": 2
	, "offs": 409664
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A * u16B"
		, "kind": "*"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 129
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 129
			, "value": "u16B"
		}
	}
}, {
	"": "u16Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Div"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 130
	, "size": 2
	, "offs": 409672
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A / u16B"
		, "kind": "/"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 130
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 130
			, "value": "u16B"
		}
	}
}, {
	"": "u16Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Mod"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 131
	, "size": 2
	, "offs": 409680
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A % u16B"
		, "kind": "%"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 131
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 131
			, "value": "u16B"
		}
	}
}, {
	"": "u16And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16And"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 132
	, "size": 2
	, "offs": 409688
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A & u16B"
		, "kind": "&"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 132
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 132
			, "value": "u16B"
		}
	}
}, {
	"": "u16Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Ior"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 133
	, "size": 2
	, "offs": 409696
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A | u16B"
		, "kind": "|"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 133
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 133
			, "value": "u16B"
		}
	}
}, {
	"": "u16Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Xor"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 134
	, "size": 2
	, "offs": 409704
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A ^ u16B"
		, "kind": "^"
		, "type": "uint16"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 134
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 134
			, "value": "u16B"
		}
	}
}, {
	"": "u16Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shl"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 135
	, "size": 2
	, "offs": 409712
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 135
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 135
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 135
			, "value": "shift"
		}
	}
}, {
	"": "u16Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u16Shr"
	, "type": "uint16"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 136
	, "size": 2
	, "offs": 409720
	, "static": true
	, "const": false
	, "ast": {
		"": "(u16A) >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 136
		, "left": {
			"": "(u16A)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 136
			, "args": [{
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16A"
			}]
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 136
			, "value": "shift"
		}
	}
}, {
	"": "u16Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 137
	, "size": 1
	, "offs": 409728
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u16B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 137
		, "right": {
			"": "(u16B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 137
			, "args": [{
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16B"
			}]
		}
	}
}, {
	"": "u16Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 138
	, "size": 1
	, "offs": 409736
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A == u16B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 138
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 138
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 139
	, "size": 1
	, "offs": 409744
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A != u16B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 139
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 139
			, "value": "u16B"
		}
	}
}, {
	"": "u16Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 140
	, "size": 1
	, "offs": 409752
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A < u16B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 140
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 140
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 141
	, "size": 1
	, "offs": 409760
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A <= u16B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 141
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 141
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 142
	, "size": 1
	, "offs": 409768
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A > u16B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 142
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 142
			, "value": "u16B"
		}
	}
}, {
	"": "u16Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u16Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 143
	, "size": 1
	, "offs": 409776
	, "static": true
	, "const": false
	, "ast": {
		"": "u16A >= u16B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 143
		, "left": {
			"": "u16A"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16A"
		}
		, "right": {
			"": "u16B"
			, "kind": ".variable"
			, "type": "uint16"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 143
			, "value": "u16B"
		}
	}
}, {
	"": "i32A"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32A"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 145
	, "size": 4
	, "offs": 409784
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 145
		, "value": "a"
	}
}, {
	"": "i32B"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32B"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 146
	, "size": 4
	, "offs": 409792
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 146
		, "value": "b"
	}
}, {
	"": "i32Pls"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Pls"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 147
	, "size": 4
	, "offs": 409800
	, "static": true
	, "const": false
	, "ast": {
		"": "+i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 147
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 147
			, "value": "i32B"
		}
	}
}, {
	"": "i32Neg"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Neg"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 148
	, "size": 4
	, "offs": 409808
	, "static": true
	, "const": false
	, "ast": {
		"": "-i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 148
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 148
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cmt"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Cmt"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 149
	, "size": 4
	, "offs": 409816
	, "static": true
	, "const": false
	, "ast": {
		"": "~i32B"
		, "kind": "~"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 149
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 149
			, "value": "i32B"
		}
	}
}, {
	"": "i32Add"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Add"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 150
	, "size": 4
	, "offs": 409824
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A + i32B"
		, "kind": "+"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 150
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 150
			, "value": "i32B"
		}
	}
}, {
	"": "i32Sub"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Sub"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 151
	, "size": 4
	, "offs": 409832
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A - i32B"
		, "kind": "-"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 151
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 151
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mul"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mul"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 152
	, "size": 4
	, "offs": 409840
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A * i32B"
		, "kind": "*"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 152
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 152
			, "value": "i32B"
		}
	}
}, {
	"": "i32Div"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Div"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 153
	, "size": 4
	, "offs": 409848
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A / i32B"
		, "kind": "/"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 153
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 153
			, "value": "i32B"
		}
	}
}, {
	"": "i32Mod"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Mod"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 154
	, "size": 4
	, "offs": 409856
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A % i32B"
		, "kind": "%"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 154
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 154
			, "value": "i32B"
		}
	}
}, {
	"": "i32And"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32And"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 155
	, "size": 4
	, "offs": 409864
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A & i32B"
		, "kind": "&"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 155
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 155
			, "value": "i32B"
		}
	}
}, {
	"": "i32Ior"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Ior"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 156
	, "size": 4
	, "offs": 409872
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A | i32B"
		, "kind": "|"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 156
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 156
			, "value": "i32B"
		}
	}
}, {
	"": "i32Xor"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Xor"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 157
	, "size": 4
	, "offs": 409880
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A ^ i32B"
		, "kind": "^"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 157
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 157
			, "value": "i32B"
		}
	}
}, {
	"": "i32Shl"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shl"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 158
	, "size": 4
	, "offs": 409888
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A << shift"
		, "kind": "<<"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 158
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 158
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 158
			, "value": "shift"
		}
	}
}, {
	"": "i32Shr"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "i32Shr"
	, "type": "int32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 159
	, "size": 4
	, "offs": 409896
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >> shift"
		, "kind": ">>"
		, "type": "int32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 159
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 159
			, "value": "i32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 159
			, "value": "shift"
		}
	}
}, {
	"": "i32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 160
	, "size": 1
	, "offs": 409904
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 160
		, "right": {
			"": "(i32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 160
			, "args": [{
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32B"
			}]
		}
	}
}, {
	"": "i32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 161
	, "size": 1
	, "offs": 409912
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A == i32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 161
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 161
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 162
	, "size": 1
	, "offs": 409920
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A != i32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 162
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 162
			, "value": "i32B"
		}
	}
}, {
	"": "i32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 163
	, "size": 1
	, "offs": 409928
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A < i32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 163
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 163
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 164
	, "size": 1
	, "offs": 409936
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A <= i32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 164
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 164
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 165
	, "size": 1
	, "offs": 409944
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A > i32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 165
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 165
			, "value": "i32B"
		}
	}
}, {
	"": "i32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 166
	, "size": 1
	, "offs": 409952
	, "static": true
	, "const": false
	, "ast": {
		"": "i32A >= i32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 166
		, "left": {
			"": "i32A"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32A"
		}
		, "right": {
			"": "i32B"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 166
			, "value": "i32B"
		}
	}
}, {
	"": "u32A"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32A"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 168
	, "size": 4
	, "offs": 409960
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 168
		, "value": "a"
	}
}, {
	"": "u32B"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32B"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 169
	, "size": 4
	, "offs": 409968
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 169
		, "value": "b"
	}
}, {
	"": "u32Pls"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Pls"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 170
	, "size": 4
	, "offs": 409976
	, "static": true
	, "const": false
	, "ast": {
		"": "+u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 170
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 170
			, "value": "u32B"
		}
	}
}, {
	"": "u32Neg"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Neg"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 171
	, "size": 4
	, "offs": 409984
	, "static": true
	, "const": false
	, "ast": {
		"": "-u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 171
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 171
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cmt"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Cmt"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 172
	, "size": 4
	, "offs": 409992
	, "static": true
	, "const": false
	, "ast": {
		"": "~u32B"
		, "kind": "~"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 172
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 172
			, "value": "u32B"
		}
	}
}, {
	"": "u32Add"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Add"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 173
	, "size": 4
	, "offs": 410000
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A + u32B"
		, "kind": "+"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 173
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 173
			, "value": "u32B"
		}
	}
}, {
	"": "u32Sub"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Sub"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 174
	, "size": 4
	, "offs": 410008
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A - u32B"
		, "kind": "-"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 174
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 174
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mul"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mul"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 175
	, "size": 4
	, "offs": 410016
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A * u32B"
		, "kind": "*"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 175
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 175
			, "value": "u32B"
		}
	}
}, {
	"": "u32Div"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Div"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 176
	, "size": 4
	, "offs": 410024
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A / u32B"
		, "kind": "/"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 176
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 176
			, "value": "u32B"
		}
	}
}, {
	"": "u32Mod"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Mod"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 177
	, "size": 4
	, "offs": 410032
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A % u32B"
		, "kind": "%"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 177
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 177
			, "value": "u32B"
		}
	}
}, {
	"": "u32And"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32And"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 178
	, "size": 4
	, "offs": 410040
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A & u32B"
		, "kind": "&"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 178
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 178
			, "value": "u32B"
		}
	}
}, {
	"": "u32Ior"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Ior"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 179
	, "size": 4
	, "offs": 410048
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A | u32B"
		, "kind": "|"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 179
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 179
			, "value": "u32B"
		}
	}
}, {
	"": "u32Xor"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Xor"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 180
	, "size": 4
	, "offs": 410056
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A ^ u32B"
		, "kind": "^"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 180
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 180
			, "value": "u32B"
		}
	}
}, {
	"": "u32Shl"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shl"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 181
	, "size": 4
	, "offs": 410064
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A << shift"
		, "kind": "<<"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 181
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 181
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 181
			, "value": "shift"
		}
	}
}, {
	"": "u32Shr"
	, "kind": "variable"
	, "cast": "u32"
	, "name": "u32Shr"
	, "type": "uint32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 182
	, "size": 4
	, "offs": 410072
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >> shift"
		, "kind": ">>"
		, "type": "uint32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 182
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 182
			, "value": "u32A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 182
			, "value": "shift"
		}
	}
}, {
	"": "u32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 183
	, "size": 1
	, "offs": 410080
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 183
		, "right": {
			"": "(u32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 183
			, "args": [{
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32B"
			}]
		}
	}
}, {
	"": "u32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 184
	, "size": 1
	, "offs": 410088
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A == u32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 184
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 184
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 185
	, "size": 1
	, "offs": 410096
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A != u32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 185
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 185
			, "value": "u32B"
		}
	}
}, {
	"": "u32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 186
	, "size": 1
	, "offs": 410104
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A < u32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 186
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 186
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 187
	, "size": 1
	, "offs": 410112
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A <= u32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 187
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 187
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 188
	, "size": 1
	, "offs": 410120
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A > u32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 188
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 188
			, "value": "u32B"
		}
	}
}, {
	"": "u32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 189
	, "size": 1
	, "offs": 410128
	, "static": true
	, "const": false
	, "ast": {
		"": "u32A >= u32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 189
		, "left": {
			"": "u32A"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32A"
		}
		, "right": {
			"": "u32B"
			, "kind": ".variable"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 189
			, "value": "u32B"
		}
	}
}, {
	"": "i64A"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64A"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 191
	, "size": 8
	, "offs": 410136
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 191
		, "value": "a"
	}
}, {
	"": "i64B"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64B"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 192
	, "size": 8
	, "offs": 410144
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 192
		, "value": "b"
	}
}, {
	"": "i64Pls"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Pls"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 193
	, "size": 8
	, "offs": 410152
	, "static": true
	, "const": false
	, "ast": {
		"": "+i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 193
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 193
			, "value": "i64B"
		}
	}
}, {
	"": "i64Neg"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Neg"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 194
	, "size": 8
	, "offs": 410160
	, "static": true
	, "const": false
	, "ast": {
		"": "-i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 194
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 194
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cmt"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Cmt"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 195
	, "size": 8
	, "offs": 410168
	, "static": true
	, "const": false
	, "ast": {
		"": "~i64B"
		, "kind": "~"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 195
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 195
			, "value": "i64B"
		}
	}
}, {
	"": "i64Add"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Add"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 196
	, "size": 8
	, "offs": 410176
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A + i64B"
		, "kind": "+"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 196
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 196
			, "value": "i64B"
		}
	}
}, {
	"": "i64Sub"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Sub"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 197
	, "size": 8
	, "offs": 410184
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A - i64B"
		, "kind": "-"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 197
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 197
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mul"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mul"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 198
	, "size": 8
	, "offs": 410192
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A * i64B"
		, "kind": "*"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 198
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 198
			, "value": "i64B"
		}
	}
}, {
	"": "i64Div"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Div"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 199
	, "size": 8
	, "offs": 410200
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A / i64B"
		, "kind": "/"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 199
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 199
			, "value": "i64B"
		}
	}
}, {
	"": "i64Mod"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Mod"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 200
	, "size": 8
	, "offs": 410208
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A % i64B"
		, "kind": "%"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 200
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 200
			, "value": "i64B"
		}
	}
}, {
	"": "i64And"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64And"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 201
	, "size": 8
	, "offs": 410216
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A & i64B"
		, "kind": "&"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 201
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 201
			, "value": "i64B"
		}
	}
}, {
	"": "i64Ior"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Ior"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 202
	, "size": 8
	, "offs": 410224
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A | i64B"
		, "kind": "|"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 202
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 202
			, "value": "i64B"
		}
	}
}, {
	"": "i64Xor"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Xor"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 203
	, "size": 8
	, "offs": 410232
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A ^ i64B"
		, "kind": "^"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 203
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 203
			, "value": "i64B"
		}
	}
}, {
	"": "i64Shl"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shl"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 204
	, "size": 8
	, "offs": 410240
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A << shift"
		, "kind": "<<"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 204
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 204
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 204
			, "value": "shift"
		}
	}
}, {
	"": "i64Shr"
	, "kind": "variable"
	, "cast": "i64"
	, "name": "i64Shr"
	, "type": "int64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 205
	, "size": 8
	, "offs": 410248
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >> shift"
		, "kind": ">>"
		, "type": "int64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 205
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 205
			, "value": "i64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 205
			, "value": "shift"
		}
	}
}, {
	"": "i64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 206
	, "size": 1
	, "offs": 410256
	, "static": true
	, "const": false
	, "ast": {
		"": "!(i64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 206
		, "right": {
			"": "(i64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 206
			, "args": [{
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64B"
			}]
		}
	}
}, {
	"": "i64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 207
	, "size": 1
	, "offs": 410264
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A == i64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 207
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 207
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 208
	, "size": 1
	, "offs": 410272
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A != i64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 208
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 208
			, "value": "i64B"
		}
	}
}, {
	"": "i64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 209
	, "size": 1
	, "offs": 410280
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A < i64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 209
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 209
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 210
	, "size": 1
	, "offs": 410288
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A <= i64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 210
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 210
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 211
	, "size": 1
	, "offs": 410296
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A > i64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 211
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 211
			, "value": "i64B"
		}
	}
}, {
	"": "i64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "i64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 212
	, "size": 1
	, "offs": 410304
	, "static": true
	, "const": false
	, "ast": {
		"": "i64A >= i64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 212
		, "left": {
			"": "i64A"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64A"
		}
		, "right": {
			"": "i64B"
			, "kind": ".variable"
			, "type": "int64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 212
			, "value": "i64B"
		}
	}
}, {
	"": "u64A"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64A"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 214
	, "size": 8
	, "offs": 410312
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 214
		, "value": "a"
	}
}, {
	"": "u64B"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64B"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 215
	, "size": 8
	, "offs": 410320
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 215
		, "value": "b"
	}
}, {
	"": "u64Pls"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Pls"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 216
	, "size": 8
	, "offs": 410328
	, "static": true
	, "const": false
	, "ast": {
		"": "+u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 216
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 216
			, "value": "u64B"
		}
	}
}, {
	"": "u64Neg"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Neg"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 217
	, "size": 8
	, "offs": 410336
	, "static": true
	, "const": false
	, "ast": {
		"": "-u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 217
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 217
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cmt"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Cmt"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 218
	, "size": 8
	, "offs": 410344
	, "static": true
	, "const": false
	, "ast": {
		"": "~u64B"
		, "kind": "~"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 218
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 218
			, "value": "u64B"
		}
	}
}, {
	"": "u64Add"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Add"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 219
	, "size": 8
	, "offs": 410352
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A + u64B"
		, "kind": "+"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 219
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 219
			, "value": "u64B"
		}
	}
}, {
	"": "u64Sub"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Sub"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 220
	, "size": 8
	, "offs": 410360
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A - u64B"
		, "kind": "-"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 220
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 220
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mul"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mul"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 221
	, "size": 8
	, "offs": 410368
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A * u64B"
		, "kind": "*"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 221
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 221
			, "value": "u64B"
		}
	}
}, {
	"": "u64Div"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Div"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 222
	, "size": 8
	, "offs": 410376
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A / u64B"
		, "kind": "/"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 222
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 222
			, "value": "u64B"
		}
	}
}, {
	"": "u64Mod"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Mod"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 223
	, "size": 8
	, "offs": 410384
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A % u64B"
		, "kind": "%"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 223
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 223
			, "value": "u64B"
		}
	}
}, {
	"": "u64And"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64And"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 224
	, "size": 8
	, "offs": 410392
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A & u64B"
		, "kind": "&"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 224
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 224
			, "value": "u64B"
		}
	}
}, {
	"": "u64Ior"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Ior"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 225
	, "size": 8
	, "offs": 410400
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A | u64B"
		, "kind": "|"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 225
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 225
			, "value": "u64B"
		}
	}
}, {
	"": "u64Xor"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Xor"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 226
	, "size": 8
	, "offs": 410408
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A ^ u64B"
		, "kind": "^"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 226
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 226
			, "value": "u64B"
		}
	}
}, {
	"": "u64Shl"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shl"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 227
	, "size": 8
	, "offs": 410416
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A << shift"
		, "kind": "<<"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 227
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 227
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 227
			, "value": "shift"
		}
	}
}, {
	"": "u64Shr"
	, "kind": "variable"
	, "cast": "u64"
	, "name": "u64Shr"
	, "type": "uint64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 228
	, "size": 8
	, "offs": 410424
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >> shift"
		, "kind": ">>"
		, "type": "uint64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 228
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 228
			, "value": "u64A"
		}
		, "right": {
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 228
			, "value": "shift"
		}
	}
}, {
	"": "u64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 229
	, "size": 1
	, "offs": 410432
	, "static": true
	, "const": false
	, "ast": {
		"": "!(u64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 229
		, "right": {
			"": "(u64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 229
			, "args": [{
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64B"
			}]
		}
	}
}, {
	"": "u64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 230
	, "size": 1
	, "offs": 410440
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A == u64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 230
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 230
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 231
	, "size": 1
	, "offs": 410448
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A != u64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 231
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 231
			, "value": "u64B"
		}
	}
}, {
	"": "u64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 232
	, "size": 1
	, "offs": 410456
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A < u64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 232
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 232
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 233
	, "size": 1
	, "offs": 410464
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A <= u64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 233
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 233
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 234
	, "size": 1
	, "offs": 410472
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A > u64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 234
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 234
			, "value": "u64B"
		}
	}
}, {
	"": "u64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "u64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 235
	, "size": 1
	, "offs": 410480
	, "static": true
	, "const": false
	, "ast": {
		"": "u64A >= u64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 235
		, "left": {
			"": "u64A"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64A"
		}
		, "right": {
			"": "u64B"
			, "kind": ".variable"
			, "type": "uint64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 235
			, "value": "u64B"
		}
	}
}, {
	"": "f32A"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32A"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 237
	, "size": 4
	, "offs": 410488
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 237
		, "value": "a"
	}
}, {
	"": "f32B"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32B"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 238
	, "size": 4
	, "offs": 410496
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 238
		, "value": "b"
	}
}, {
	"": "f32Pls"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Pls"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 239
	, "size": 4
	, "offs": 410504
	, "static": true
	, "const": false
	, "ast": {
		"": "+f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 239
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 239
			, "value": "f32B"
		}
	}
}, {
	"": "f32Neg"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Neg"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 240
	, "size": 4
	, "offs": 410512
	, "static": true
	, "const": false
	, "ast": {
		"": "-f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 240
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 240
			, "value": "f32B"
		}
	}
}, {
	"": "f32Add"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Add"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 242
	, "size": 4
	, "offs": 410520
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A + f32B"
		, "kind": "+"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 242
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 242
			, "value": "f32B"
		}
	}
}, {
	"": "f32Sub"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Sub"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 243
	, "size": 4
	, "offs": 410528
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A - f32B"
		, "kind": "-"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 243
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 243
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mul"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mul"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 244
	, "size": 4
	, "offs": 410536
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A * f32B"
		, "kind": "*"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 244
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 244
			, "value": "f32B"
		}
	}
}, {
	"": "f32Div"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Div"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 245
	, "size": 4
	, "offs": 410544
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A / f32B"
		, "kind": "/"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 245
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 245
			, "value": "f32B"
		}
	}
}, {
	"": "f32Mod"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "f32Mod"
	, "type": "float32"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 246
	, "size": 4
	, "offs": 410552
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A % f32B"
		, "kind": "%"
		, "type": "float32"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 246
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 246
			, "value": "f32B"
		}
	}
}, {
	"": "f32Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 252
	, "size": 1
	, "offs": 410560
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f32B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 252
		, "right": {
			"": "(f32B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 252
			, "args": [{
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32B"
			}]
		}
	}
}, {
	"": "f32Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 253
	, "size": 1
	, "offs": 410568
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A == f32B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 253
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 253
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 254
	, "size": 1
	, "offs": 410576
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A != f32B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 254
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 254
			, "value": "f32B"
		}
	}
}, {
	"": "f32Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 255
	, "size": 1
	, "offs": 410584
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A < f32B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 255
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 255
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 256
	, "size": 1
	, "offs": 410592
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A <= f32B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 256
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 256
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 257
	, "size": 1
	, "offs": 410600
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A > f32B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 257
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 257
			, "value": "f32B"
		}
	}
}, {
	"": "f32Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f32Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 258
	, "size": 1
	, "offs": 410608
	, "static": true
	, "const": false
	, "ast": {
		"": "f32A >= f32B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 258
		, "left": {
			"": "f32A"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32A"
		}
		, "right": {
			"": "f32B"
			, "kind": ".variable"
			, "type": "float32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 258
			, "value": "f32B"
		}
	}
}, {
	"": "f64A"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64A"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 260
	, "size": 8
	, "offs": 410616
	, "static": true
	, "const": false
	, "ast": {
		"": "a"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 260
		, "value": "a"
	}
}, {
	"": "f64B"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64B"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 261
	, "size": 8
	, "offs": 410624
	, "static": true
	, "const": false
	, "ast": {
		"": "b"
		, "kind": ".variable"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 261
		, "value": "b"
	}
}, {
	"": "f64Pls"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Pls"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 262
	, "size": 8
	, "offs": 410632
	, "static": true
	, "const": false
	, "ast": {
		"": "+f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 262
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 262
			, "value": "f64B"
		}
	}
}, {
	"": "f64Neg"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Neg"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 263
	, "size": 8
	, "offs": 410640
	, "static": true
	, "const": false
	, "ast": {
		"": "-f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 263
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 263
			, "value": "f64B"
		}
	}
}, {
	"": "f64Add"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Add"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 265
	, "size": 8
	, "offs": 410648
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A + f64B"
		, "kind": "+"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 265
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 265
			, "value": "f64B"
		}
	}
}, {
	"": "f64Sub"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Sub"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 266
	, "size": 8
	, "offs": 410656
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A - f64B"
		, "kind": "-"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 266
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 266
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mul"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mul"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 267
	, "size": 8
	, "offs": 410664
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A * f64B"
		, "kind": "*"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 267
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 267
			, "value": "f64B"
		}
	}
}, {
	"": "f64Div"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Div"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 268
	, "size": 8
	, "offs": 410672
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A / f64B"
		, "kind": "/"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 268
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 268
			, "value": "f64B"
		}
	}
}, {
	"": "f64Mod"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "f64Mod"
	, "type": "float64"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 269
	, "size": 8
	, "offs": 410680
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A % f64B"
		, "kind": "%"
		, "type": "float64"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 269
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 269
			, "value": "f64B"
		}
	}
}, {
	"": "f64Not"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Not"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 275
	, "size": 1
	, "offs": 410688
	, "static": true
	, "const": false
	, "ast": {
		"": "!(f64B)"
		, "kind": "!"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 275
		, "right": {
			"": "(f64B)"
			, "kind": "()"
			, "type": "bool"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 275
			, "args": [{
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64B"
			}]
		}
	}
}, {
	"": "f64Ceq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Ceq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 276
	, "size": 1
	, "offs": 410696
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A == f64B"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 276
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 276
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 277
	, "size": 1
	, "offs": 410704
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A != f64B"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 277
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 277
			, "value": "f64B"
		}
	}
}, {
	"": "f64Clt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Clt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 278
	, "size": 1
	, "offs": 410712
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A < f64B"
		, "kind": "<"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 278
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 278
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cle"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cle"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 279
	, "size": 1
	, "offs": 410720
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A <= f64B"
		, "kind": "<="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 279
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 279
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cgt"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cgt"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 280
	, "size": 1
	, "offs": 410728
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A > f64B"
		, "kind": ">"
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 280
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 280
			, "value": "f64B"
		}
	}
}, {
	"": "f64Cge"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "f64Cge"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 281
	, "size": 1
	, "offs": 410736
	, "static": true
	, "const": false
	, "ast": {
		"": "f64A >= f64B"
		, "kind": ">="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 281
		, "left": {
			"": "f64A"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64A"
		}
		, "right": {
			"": "f64B"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 281
			, "value": "f64B"
		}
	}
}, {
	"": "ptrA"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrA"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 283
	, "size": 4
	, "offs": 410744
	, "static": true
	, "const": false
	, "ast": {
		"": "null"
		, "kind": ".variable"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 283
		, "value": "null"
	}
}, {
	"": "ptrB"
	, "kind": "variable"
	, "cast": "ref"
	, "name": "ptrB"
	, "type": "pointer"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 284
	, "size": 4
	, "offs": 410752
	, "static": true
	, "const": false
	, "ast": {
		"": "pointer(shift)"
		, "kind": "()"
		, "type": "pointer"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 284
		, "args": [{
			"": "shift"
			, "kind": ".variable"
			, "type": "int32"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 284
			, "value": "shift"
		}]
	}
}, {
	"": "ptrCeq"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCeq"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 299
	, "size": 1
	, "offs": 410760
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA == ptrB"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 299
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 299
			, "value": "ptrB"
		}
	}
}, {
	"": "ptrCne"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "ptrCne"
	, "type": "bool"
	, "file": "cmplStd/test/lang/useOperator.ci"
	, "line": 300
	, "size": 1
	, "offs": 410768
	, "static": true
	, "const": false
	, "ast": {
		"": "ptrA != ptrB"
		, "kind": "!="
		, "type": "bool"
		, "file": "cmplStd/test/lang/useOperator.ci"
		, "line": 300
		, "left": {
			"": "ptrA"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrA"
		}
		, "right": {
			"": "ptrB"
			, "kind": ".variable"
			, "type": "pointer"
			, "file": "cmplStd/test/lang/useOperator.ci"
			, "line": 300
			, "value": "ptrB"
		}
	}
}, {
	"": "t"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "t"
	, "type": "int32"
	, "file": "cmplStd/test/lang/stmt.if.ci"
	, "line": 26
	, "size": 4
	, "offs": 410776
	, "static": true
	, "const": false
	, "ast": {
		"": "0"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/lang/stmt.if.ci"
		, "line": 26
		, "value": "0"
	}
}, {
	"": "forIdx"
	, "kind": "variable"
	, "cast": "i32"
	, "name": "forIdx"
	, "type": "int32"
	, "file": "cmplStd/test/lang/stmt.for.ci"
	, "line": 12
	, "size": 4
	, "offs": 410784
	, "static": true
	, "const": false
}, {
	"": "testMathFloor_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 3
	, "size": 8
	, "offs": 410792
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 3
		, "args": [{
			"": "3.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 3
			, "value": "3.200000"
		}]
	}
}, {
	"": "testMathFloor_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_2"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 4
	, "size": 8
	, "offs": 410800
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 4
		, "args": [{
			"": "3.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 4
			, "value": "3.500000"
		}]
	}
}, {
	"": "testMathFloor_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 5
	, "size": 8
	, "offs": 410808
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 5
		, "args": [{
			"": "3.600000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 5
			, "value": "3.600000"
		}]
	}
}, {
	"": "testMathFloor_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_4"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 6
	, "size": 8
	, "offs": 410816
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 6
		, "args": [{
			"": "-3.200000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 6
			, "right": {
				"": "3.200000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 6
				, "value": "3.200000"
			}
		}]
	}
}, {
	"": "testMathFloor_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_5"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 7
	, "size": 8
	, "offs": 410824
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.500000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 7
		, "args": [{
			"": "-3.500000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 7
			, "right": {
				"": "3.500000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 7
				, "value": "3.500000"
			}
		}]
	}
}, {
	"": "testMathFloor_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathFloor_6"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 8
	, "size": 8
	, "offs": 410832
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.floor(-3.600000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 8
		, "args": [{
			"": "-3.600000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 8
			, "right": {
				"": "3.600000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 8
				, "value": "3.600000"
			}
		}]
	}
}, {
	"": "testMathSign_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 10
	, "size": 8
	, "offs": 410840
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 10
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 10
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 11
	, "size": 8
	, "offs": 410848
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 11
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 11
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 12
	, "size": 8
	, "offs": 410856
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 12
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 12
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 12
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathSign_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 13
	, "size": 8
	, "offs": 410864
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.200000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 13
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 13
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathSign_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 14
	, "size": 8
	, "offs": 410872
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(0.000000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 14
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 14
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathSign_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSign_3f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 15
	, "size": 8
	, "offs": 410880
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sign(-0.900000)"
		, "kind": "()"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 15
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 15
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 15
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 17
	, "size": 8
	, "offs": 410888
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 17
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 17
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 18
	, "size": 8
	, "offs": 410896
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 18
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 18
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 19
	, "size": 8
	, "offs": 410904
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 19
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 19
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 19
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathAbs_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 20
	, "size": 8
	, "offs": 410912
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.200000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 20
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 20
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAbs_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 21
	, "size": 8
	, "offs": 410920
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(0.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 21
		, "args": [{
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 21
			, "value": "0.000000"
		}]
	}
}, {
	"": "testMathAbs_3f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbs_3f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 22
	, "size": 8
	, "offs": 410928
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.abs(-0.900000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 22
		, "args": [{
			"": "-0.900000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 22
			, "right": {
				"": "0.900000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 22
				, "value": "0.900000"
			}
		}]
	}
}, {
	"": "testMathMin_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 24
	, "size": 8
	, "offs": 410936
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 24
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 24
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 24
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 25
	, "size": 8
	, "offs": 410944
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 25
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 25
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 25
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMin_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 26
	, "size": 8
	, "offs": 410952
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 26
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 26
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 26
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathMax_2F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_2F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 27
	, "size": 8
	, "offs": 410960
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(1.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 27
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 27
			, "value": "1.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 27
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathClamp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 29
	, "size": 8
	, "offs": 410968
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 29
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 29
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathClamp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathClamp_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 30
	, "size": 8
	, "offs": 410976
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.clamp(10.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 30
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "10.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 30
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathLerp_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 32
	, "size": 8
	, "offs": 410984
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 32
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 32
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathLerp_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathLerp_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 33
	, "size": 8
	, "offs": 410992
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.lerp(0.500000, 0.000000, 2.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 33
		, "args": [{
		}, {
			"": "0.500000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "0.500000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "0.000000"
		}, {
			"": "2.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 33
			, "value": "2.000000"
		}]
	}
}, {
	"": "testMathSmooth_1f"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1f"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 35
	, "size": 8
	, "offs": 411000
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 35
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 35
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSmooth_1F"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSmooth_1F"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 36
	, "size": 8
	, "offs": 411008
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.smooth(1.000000, 0.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 36
		, "args": [{
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "0.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 36
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathMin_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_nan"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 38
	, "size": 8
	, "offs": 411016
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 38
		, "args": [{
		}]
	}
}, {
	"": "testMathMin_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMin_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 39
	, "size": 8
	, "offs": 411024
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.min(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 39
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 39
			, "value": "6"
		}]
	}
}, {
	"": "testMathMax_nan"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_nan"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 40
	, "size": 8
	, "offs": 411032
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 40
		, "args": [{
		}]
	}
}, {
	"": "testMathMax_9"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathMax_9"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 41
	, "size": 8
	, "offs": 411040
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.max(6, 2, 5, 8, 2, 1, 9, 2, 6)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 41
		, "args": [{
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "5"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "8"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "1"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "9"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "2"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 41
			, "value": "6"
		}]
	}
}, {
	"": "testMathSum_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_0"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 43
	, "size": 8
	, "offs": 411048
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum()"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 43
		, "args": [{
		}]
	}
}, {
	"": "testMathSum_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 44
	, "size": 8
	, "offs": 411056
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 44
		, "args": [{
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 44
			, "value": "1"
		}]
	}
}, {
	"": "testMathSum_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 45
	, "size": 8
	, "offs": 411064
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 45
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 45
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 45
			, "value": "2"
		}]
	}
}, {
	"": "testMathSum_55"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSum_55"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 46
	, "size": 8
	, "offs": 411072
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 46
		, "args": [{
		}, {
			"": "1"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "1"
		}, {
			"": "2"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "2"
		}, {
			"": "3"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "3"
		}, {
			"": "4"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "4"
		}, {
			"": "5"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "5"
		}, {
			"": "6"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "6"
		}, {
			"": "7"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "7"
		}, {
			"": "8"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "8"
		}, {
			"": "9"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "9"
		}, {
			"": "10"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 46
			, "value": "10"
		}]
	}
}, {
	"": "testMathEval_x"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_x"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 48
	, "size": 8
	, "offs": 411080
	, "static": true
	, "const": false
	, "ast": {
		"": "10"
		, "kind": ".literal"
		, "type": "int32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 48
		, "value": "10"
	}
}, {
	"": "testMathEval_0"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_0"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 49
	, "size": 8
	, "offs": 411088
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 49
		, "args": [{
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 49
			, "value": "testMathEval_x"
		}]
	}
}, {
	"": "testMathEval_1"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_1"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 50
	, "size": 8
	, "offs": 411096
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 50
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 50
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 50
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_2"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_2"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 51
	, "size": 8
	, "offs": 411104
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 51
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 51
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_3"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_3"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 52
	, "size": 8
	, "offs": 411112
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 52
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 52
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_4"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_4"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 53
	, "size": 8
	, "offs": 411120
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 53
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 53
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_5"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_5"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 54
	, "size": 8
	, "offs": 411128
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 54
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 54
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathEval_6"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathEval_6"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 55
	, "size": 8
	, "offs": 411136
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.eval(testMathEval_x, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 55
		, "args": [{
		}, {
			"": "testMathEval_x"
			, "kind": ".variable"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "testMathEval_x"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}, {
			"": "1.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 55
			, "value": "1.000000"
		}]
	}
}, {
	"": "testMathSin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 57
	, "size": 8
	, "offs": 411144
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sin(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 57
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 57
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 57
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 58
	, "size": 8
	, "offs": 411152
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cos(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 58
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 58
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 58
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathTan_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathTan_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 59
	, "size": 8
	, "offs": 411160
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.tan(Math.pi / (4))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 59
		, "args": [{
			"": "Math.pi / (4)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 59
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "pi"
				}
			}
			, "right": {
				"": "(4)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "args": [{
					"": "4"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 59
					, "value": "4"
				}]
			}
		}]
	}
}, {
	"": "testMathSinh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathSinh_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 60
	, "size": 8
	, "offs": 411168
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.sinh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 60
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 60
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 60
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathCosh_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathCosh_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 61
	, "size": 8
	, "offs": 411176
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cosh(Math.pi / (2))"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 61
		, "args": [{
			"": "Math.pi / (2)"
			, "kind": "/"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 61
			, "left": {
				"": "Math.pi"
				, "kind": "."
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "left": {
					"": "Math"
					, "kind": ".variable"
					, "type": "typename"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "Math"
				}
				, "right": {
					"": "pi"
					, "kind": ".variable"
					, "type": "float64"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "pi"
				}
			}
			, "right": {
				"": "(2)"
				, "kind": "()"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "args": [{
					"": "2"
					, "kind": ".literal"
					, "type": "int32"
					, "file": "cmplStd/test/std/test.math.ci"
					, "line": 61
					, "value": "2"
				}]
			}
		}]
	}
}, {
	"": "testMathAsin_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAsin_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 63
	, "size": 8
	, "offs": 411184
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.asin(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 63
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 63
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathAcos_f64"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAcos_f64"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 64
	, "size": 8
	, "offs": 411192
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.acos(0.200000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 64
		, "args": [{
			"": "0.200000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 64
			, "value": "0.200000"
		}]
	}
}, {
	"": "testMathCmp_f32"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f32"
	, "type": "bool"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 67
	, "size": 1
	, "offs": 411200
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 67
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 67
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 67
			, "value": "0"
		}
	}
}, {
	"": "testMathCmp_f64"
	, "kind": "variable"
	, "cast": "bool"
	, "name": "testMathCmp_f64"
	, "type": "bool"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 68
	, "size": 1
	, "offs": 411208
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.cmp(0.000010, 0.000012, 0.000010) == 0"
		, "kind": "=="
		, "type": "bool"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 68
		, "left": {
			"": "Math.cmp(0.000010, 0.000012, 0.000010)"
			, "kind": "()"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 68
			, "args": [{
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}, {
				"": "0.000012"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000012"
			}, {
				"": "0.000010"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "0.000010"
			}]
		}
		, "right": {
			"": "0"
			, "kind": ".literal"
			, "type": "int32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 68
			, "value": "0"
		}
	}
}, {
	"": "testMathAbsMod_f64_0a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 70
	, "size": 8
	, "offs": 411216
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 70
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 70
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 71
	, "size": 8
	, "offs": 411224
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 71
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 71
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 71
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_0c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_0c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 72
	, "size": 8
	, "offs": 411232
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 72
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 72
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 72
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 72
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 74
	, "size": 8
	, "offs": 411240
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 74
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 74
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 74
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 75
	, "size": 8
	, "offs": 411248
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 75
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 75
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 75
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 76
	, "size": 8
	, "offs": 411256
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 76
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 76
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 76
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 76
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_9d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_9d"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 77
	, "size": 8
	, "offs": 411264
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 77
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 77
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 77
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 77
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8a"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8a"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 79
	, "size": 8
	, "offs": 411272
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 79
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 79
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 79
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8b"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8b"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 80
	, "size": 8
	, "offs": 411280
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 80
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 80
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 80
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8c"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8c"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 81
	, "size": 8
	, "offs": 411288
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 81
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 81
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 81
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 81
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f64_8d"
	, "kind": "variable"
	, "cast": "f64"
	, "name": "testMathAbsMod_f64_8d"
	, "type": "float64"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 82
	, "size": 8
	, "offs": 411296
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float64"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 82
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 82
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 82
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float64"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 82
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 84
	, "size": 4
	, "offs": 411304
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 84
		, "args": [{
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 84
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 85
	, "size": 4
	, "offs": 411312
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(0.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 85
		, "args": [{
		}, {
			"": "0.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 85
			, "value": "0.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 85
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_0c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_0c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 86
	, "size": 4
	, "offs": 411320
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-10.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 86
		, "args": [{
		}, {
			"": "-10.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 86
			, "right": {
				"": "10.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 86
				, "value": "10.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 86
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 88
	, "size": 4
	, "offs": 411328
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(19.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 88
		, "args": [{
		}, {
			"": "19.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 88
			, "value": "19.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 88
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 89
	, "size": 4
	, "offs": 411336
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(9.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 89
		, "args": [{
		}, {
			"": "9.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 89
			, "value": "9.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 89
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 90
	, "size": 4
	, "offs": 411344
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-1.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 90
		, "args": [{
		}, {
			"": "-1.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 90
			, "right": {
				"": "1.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 90
				, "value": "1.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 90
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_9d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_9d"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 91
	, "size": 4
	, "offs": 411352
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-11.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 91
		, "args": [{
		}, {
			"": "-11.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 91
			, "right": {
				"": "11.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 91
				, "value": "11.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 91
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8a"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8a"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 93
	, "size": 4
	, "offs": 411360
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(18.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 93
		, "args": [{
		}, {
			"": "18.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 93
			, "value": "18.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 93
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8b"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8b"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 94
	, "size": 4
	, "offs": 411368
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(8.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 94
		, "args": [{
		}, {
			"": "8.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 94
			, "value": "8.000000"
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 94
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8c"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8c"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 95
	, "size": 4
	, "offs": 411376
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-2.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 95
		, "args": [{
		}, {
			"": "-2.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 95
			, "right": {
				"": "2.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 95
				, "value": "2.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 95
			, "value": "10.000000"
		}]
	}
}, {
	"": "testMathAbsMod_f32_8d"
	, "kind": "variable"
	, "cast": "f32"
	, "name": "testMathAbsMod_f32_8d"
	, "type": "float32"
	, "file": "cmplStd/test/std/test.math.ci"
	, "line": 96
	, "size": 4
	, "offs": 411384
	, "static": true
	, "const": false
	, "ast": {
		"": "Math.absMod(-12.000000, 10.000000)"
		, "kind": "()"
		, "type": "float32"
		, "file": "cmplStd/test/std/test.math.ci"
		, "line": 96
		, "args": [{
		}, {
			"": "-12.000000"
			, "kind": "-"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 96
			, "right": {
				"": "12.000000"
				, "kind": ".literal"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 96
				, "value": "12.000000"
			}
		}, {
			"": "10.000000"
			, "kind": ".literal"
			, "type": "float32"
			, "file": "cmplStd/test/std/test.math.ci"
			, "line": 96
			, "value": "10.000000"
		}]
	}
}, {
	"": ".main"
	, "kind": "function"
	, "cast": "inline"
	, "name": ".main"
	, "type": "function"
	, "size": 13419
	, "offs": 411388
	, "static": true
	, "const": false
	, "ast": {
		"": "{...}"
		, "kind": "{}"
		, "type": "void"
		, "stmt": [{
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "cmplStd/stdlib.ci"
			, "line": 8
			, "stmt": [{
				"": "byte"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 8
				, "value": "byte"
			}, {
				"": "float"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 9
				, "value": "float"
			}, {
				"": "double"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 10
				, "value": "double"
			}, {
				"": "signed(value: uint8): int8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 13
				, "value": "signed(value: uint8): int8"
			}, {
				"": "signed(value: uint16): int16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 16
				, "value": "signed(value: uint16): int16"
			}, {
				"": "signed(value: uint32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 19
				, "value": "signed(value: uint32): int32"
			}, {
				"": "signed(value: uint64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 22
				, "value": "signed(value: uint64): int64"
			}, {
				"": "unsigned(value: int8): uint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 25
				, "value": "unsigned(value: int8): uint8"
			}, {
				"": "unsigned(value: int16): uint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 28
				, "value": "unsigned(value: int16): uint16"
			}, {
				"": "unsigned(value: int32): uint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 31
				, "value": "unsigned(value: int32): uint32"
			}, {
				"": "unsigned(value: int64): uint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 34
				, "value": "unsigned(value: int64): uint64"
			}, {
				"": "sizeof(type: typename): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/stdlib.ci"
				, "line": 37
				, "value": "sizeof(type: typename): int32"
			}, {
				"": "static if (typename(raise) == function)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/stdlib.ci"
				, "line": 39
				, "test": {
					"": "typename(raise) == function"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/stdlib.ci"
					, "line": 39
					, "left": {
						"": "typename(raise)"
						, "kind": "()"
						, "type": "typename"
						, "file": "cmplStd/stdlib.ci"
						, "line": 39
						, "args": [{
							"": "raise"
							, "kind": ".variable"
							, "type": "function"
							, "file": "cmplStd/stdlib.ci"
							, "line": 39
							, "value": "raise"
						}]
					}
					, "right": {
						"": "function"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/stdlib.ci"
						, "line": 39
						, "value": "function"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/stdlib.ci"
					, "line": 39
					, "stmt": [{
						"": "verbose(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 4
						, "value": "verbose(message: char[*], inspect: variant): void"
					}, {
						"": "verbose(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 6
						, "value": "verbose(message: char[*]): void"
					}, {
						"": "debug(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 9
						, "value": "debug(message: char[*], inspect: variant): void"
					}, {
						"": "debug(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 11
						, "value": "debug(message: char[*]): void"
					}, {
						"": "trace(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 14
						, "value": "trace(message: char[*], inspect: variant): void"
					}, {
						"": "trace(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 16
						, "value": "trace(message: char[*]): void"
					}, {
						"": "info(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 19
						, "value": "info(message: char[*], inspect: variant): void"
					}, {
						"": "info(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 21
						, "value": "info(message: char[*]): void"
					}, {
						"": "warn(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 24
						, "value": "warn(message: char[*], inspect: variant): void"
					}, {
						"": "warn(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 26
						, "value": "warn(message: char[*]): void"
					}, {
						"": "error(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 29
						, "value": "error(message: char[*], inspect: variant): void"
					}, {
						"": "error(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 31
						, "value": "error(message: char[*]): void"
					}, {
						"": "abort(message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 34
						, "value": "abort(message: char[*], inspect: variant): void"
					}, {
						"": "abort(message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 36
						, "value": "abort(message: char[*]): void"
					}, {
						"": "abort(): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 38
						, "value": "abort(): void"
					}, {
						"": "assert(condition: bool, message: char[*], inspect: variant): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 41
						, "value": "assert(condition: bool, message: char[*], inspect: variant): void"
					}, {
						"": "assert(condition: bool, message: char[*]): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 43
						, "value": "assert(condition: bool, message: char[*]): void"
					}, {
						"": "assert(condition: bool): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 45
						, "value": "assert(condition: bool): void"
					}, {
						"": "NotEquals"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 48
						, "value": "NotEquals"
					}, {
						"": "assertEq(expected: int32, returned: int32, message: char[*]): void"
						, "kind": ".variable"
						, "type": "function"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 61
						, "value": "assertEq(expected: int32, returned: int32, message: char[*]): void"
					}, {
						"": "assertEq(expected: int32, returned: int32): void"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/lib/debug.ci"
						, "line": 74
						, "value": "assertEq(expected: int32, returned: int32): void"
					}]
				}
			}, {
				"": "Math"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math.ci"
				, "line": 2
				, "value": "Math"
			}, {
				"": "Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 2
				, "value": "Complex"
			}, {
				"": "Complex(re: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 24
				, "value": "Complex(re: float64): Complex"
			}, {
				"": "Complex(re: float64, im: float64): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 31
				, "value": "Complex(re: float64, im: float64): Complex"
			}, {
				"": "neg(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 59
				, "value": "neg(a: Complex): Complex"
			}, {
				"": "add(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 62
				, "value": "add(a: Complex, b: Complex): Complex"
			}, {
				"": "add(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 64
				, "value": "add(a: Complex, b: float64): Complex"
			}, {
				"": "add(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 66
				, "value": "add(a: float64, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 69
				, "value": "sub(a: Complex, b: Complex): Complex"
			}, {
				"": "sub(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 71
				, "value": "sub(a: Complex, b: float64): Complex"
			}, {
				"": "sub(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 73
				, "value": "sub(a: float64, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 76
				, "value": "mul(a: Complex, b: Complex): Complex"
			}, {
				"": "mul(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 81
				, "value": "mul(a: Complex, b: float64): Complex"
			}, {
				"": "mul(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 83
				, "value": "mul(a: float64, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 86
				, "value": "div(a: Complex, b: Complex): Complex"
			}, {
				"": "div(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 107
				, "value": "div(a: Complex, b: float64): Complex"
			}, {
				"": "div(a: float64, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 109
				, "value": "div(a: float64, b: Complex): Complex"
			}, {
				"": "abs(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 112
				, "value": "abs(a: Complex): float64"
			}, {
				"": "arg(a: Complex): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 114
				, "value": "arg(a: Complex): float64"
			}, {
				"": "inv(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 117
				, "value": "inv(a: Complex): Complex"
			}, {
				"": "conj(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 126
				, "value": "conj(a: Complex): Complex"
			}, {
				"": "exp(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 129
				, "value": "exp(a: Complex): Complex"
			}, {
				"": "log(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 132
				, "value": "log(a: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: Complex): Complex"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 135
				, "value": "pow(a: Complex, b: Complex): Complex"
			}, {
				"": "pow(a: Complex, b: float64): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 146
				, "value": "pow(a: Complex, b: float64): Complex"
			}, {
				"": "sin(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 149
				, "value": "sin(a: Complex): Complex"
			}, {
				"": "cos(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 151
				, "value": "cos(a: Complex): Complex"
			}, {
				"": "tan(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 164
				, "value": "tan(a: Complex): Complex"
			}, {
				"": "cot(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 166
				, "value": "cot(a: Complex): Complex"
			}, {
				"": "sinh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 169
				, "value": "sinh(a: Complex): Complex"
			}, {
				"": "cosh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 171
				, "value": "cosh(a: Complex): Complex"
			}, {
				"": "tanh(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 173
				, "value": "tanh(a: Complex): Complex"
			}, {
				"": "coth(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 175
				, "value": "coth(a: Complex): Complex"
			}, {
				"": "sec(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 178
				, "value": "sec(a: Complex): Complex"
			}, {
				"": "csc(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 180
				, "value": "csc(a: Complex): Complex"
			}, {
				"": "sech(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 182
				, "value": "sech(a: Complex): Complex"
			}, {
				"": "csch(a: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 184
				, "value": "csch(a: Complex): Complex"
			}, {
				"": "toCartesian(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 187
				, "value": "toCartesian(x: Complex): Complex"
			}, {
				"": "toPolar(x: Complex): Complex"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Complex.ci"
				, "line": 189
				, "value": "toPolar(x: Complex): Complex"
			}, {
				"": "vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 2
				, "value": "vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 26
				, "value": "vec4f(x: float32, y: float32, z: float32, w: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32, z: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 29
				, "value": "vec4f(x: float32, y: float32, z: float32): vec4f"
			}, {
				"": "vec4f(x: float32, y: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 32
				, "value": "vec4f(x: float32, y: float32): vec4f"
			}, {
				"": "vec4f(xyz: vec4f, w: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 35
				, "value": "vec4f(xyz: vec4f, w: float32): vec4f"
			}, {
				"": "vec4f(val: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 38
				, "value": "vec4f(val: float32): vec4f"
			}, {
				"": "neg(rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 69
				, "value": "neg(rhs: vec4f): vec4f"
			}, {
				"": "add(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 71
				, "value": "add(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "sub(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 73
				, "value": "sub(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "mul(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 75
				, "value": "mul(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "div(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 77
				, "value": "div(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "add(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 80
				, "value": "add(a: float32, b: vec4f): vec4f"
			}, {
				"": "add(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 82
				, "value": "add(a: vec4f, b: float32): vec4f"
			}, {
				"": "sub(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 85
				, "value": "sub(a: float32, b: vec4f): vec4f"
			}, {
				"": "sub(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 87
				, "value": "sub(a: vec4f, b: float32): vec4f"
			}, {
				"": "mul(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 90
				, "value": "mul(a: float32, b: vec4f): vec4f"
			}, {
				"": "mul(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 92
				, "value": "mul(a: vec4f, b: float32): vec4f"
			}, {
				"": "div(a: float32, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 95
				, "value": "div(a: float32, b: vec4f): vec4f"
			}, {
				"": "div(a: vec4f, b: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 97
				, "value": "div(a: vec4f, b: float32): vec4f"
			}, {
				"": "min(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 100
				, "value": "min(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "max(lhs: vec4f, rhs: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 102
				, "value": "max(lhs: vec4f, rhs: vec4f): vec4f"
			}, {
				"": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 105
				, "value": "clamp(vec: vec4f, min: vec4f, max: vec4f): vec4f"
			}, {
				"": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 108
				, "value": "clamp(vec: vec4f, min: float32, max: float32): vec4f"
			}, {
				"": "dp3(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 112
				, "value": "dp3(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dph(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 116
				, "value": "dph(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "dp4(lhs: vec4f, rhs: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 120
				, "value": "dp4(lhs: vec4f, rhs: vec4f): float32"
			}, {
				"": "cross(a: vec4f, b: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 123
				, "value": "cross(a: vec4f, b: vec4f): vec4f"
			}, {
				"": "length(v: vec4f): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 126
				, "value": "length(v: vec4f): float32"
			}, {
				"": "normalize(v: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 128
				, "value": "normalize(v: vec4f): vec4f"
			}, {
				"": "eval(v: vec4f, x: float32): float32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector4f.ci"
				, "line": 131
				, "value": "eval(v: vec4f, x: float32): float32"
			}, {
				"": "mat4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 2
				, "value": "mat4f"
			}, {
				"": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 62
				, "value": "mat4f(xx: float32, xy: float32, xz: float32, xw: float32, yx: float32, yy: float32, yz: float32, yw: float32, zx: float32, zy: float32, zz: float32, zw: float32, wx: float32, wy: float32, wz: float32, ww: float32): mat4f"
			}, {
				"": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 75
				, "value": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f): mat4f"
			}, {
				"": "dp3(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 80
				, "value": "dp3(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dph(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 82
				, "value": "dph(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "dp4(mat: mat4f, vec: vec4f): vec4f"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 84
				, "value": "dp4(mat: mat4f, vec: vec4f): vec4f"
			}, {
				"": "transpose(mat: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 87
				, "value": "transpose(mat: mat4f): mat4f"
			}, {
				"": "mul(lhs: mat4f, rhs: mat4f): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 97
				, "value": "mul(lhs: mat4f, rhs: mat4f): mat4f"
			}, {
				"": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 111
				, "value": "rotation(center: vec4f, direction: vec4f, angle: float32): mat4f"
			}, {
				"": "rotation(direction: vec4f, angle: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 160
				, "value": "rotation(direction: vec4f, angle: float32): mat4f"
			}, {
				"": "translation(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 193
				, "value": "translation(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "scale(direction: vec4f, amount: float32): mat4f"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Matrix4f.ci"
				, "line": 203
				, "value": "scale(direction: vec4f, amount: float32): mat4f"
			}, {
				"": "vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 2
				, "value": "vec2d"
			}, {
				"": "vec2d(x: float64, y: float64): vec2d"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 14
				, "value": "vec2d(x: float64, y: float64): vec2d"
			}, {
				"": "add(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 22
				, "value": "add(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "sub(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 25
				, "value": "sub(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "mul(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 28
				, "value": "mul(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "div(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 31
				, "value": "div(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "min(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 34
				, "value": "min(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "max(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 37
				, "value": "max(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "ceq(a: vec2d, b: vec2d): vec2d"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 40
				, "value": "ceq(a: vec2d, b: vec2d): vec2d"
			}, {
				"": "dot(a: vec2d, b: vec2d): float64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/math/Vector2d.ci"
				, "line": 43
				, "value": "dot(a: vec2d, b: vec2d): float64"
			}, {
				"": "length(str: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 4
				, "value": "length(str: char[*]): int32"
			}, {
				"": "indexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 15
				, "value": "indexOf(str: char[*], chr: char): int32"
			}, {
				"": "lastIndexOf(str: char[*], chr: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 25
				, "value": "lastIndexOf(str: char[*], chr: char): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 36
				, "value": "startsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 46
				, "value": "endsWith(str: char[*], with: char[*], cmp(chr: char, with: char): int32): bool"
			}, {
				"": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 61
				, "value": "compare(str: char[*], with: char[*], cmp(chr: char, with: char): int32): int32"
			}, {
				"": "ignCaseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 73
				, "value": "ignCaseCmp(chr: char, with: char): int32"
			}, {
				"": "caseCmp(chr: char, with: char): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 88
				, "value": "caseCmp(chr: char, with: char): int32"
			}, {
				"": "toHex(value: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 93
				, "value": "toHex(value: int32): int32"
			}, {
				"": "startsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 96
				, "value": "startsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "endsWith(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 98
				, "value": "endsWith(str: char[*], with: char[*]): bool"
			}, {
				"": "compare(str: char[*], with: char[*]): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 100
				, "value": "compare(str: char[*], with: char[*]): int32"
			}, {
				"": "equals(str: char[*], with: char[*]): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 102
				, "value": "equals(str: char[*], with: char[*]): bool"
			}, {
				"": "contains(str: char[*], chr: char): bool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 105
				, "value": "contains(str: char[*], chr: char): bool"
			}, {
				"": "FormatFlags"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 119
				, "value": "FormatFlags"
			}, {
				"": "append(output: char[], pos: int32, value: char[*]): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 134
				, "value": "append(output: char[], pos: int32, value: char[*]): int32"
			}, {
				"": "append(output: char[], pos: int32, radix: int32, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 154
				, "value": "append(output: char[], pos: int32, radix: int32, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 217
				, "value": "append(output: char[], pos: int32, value: uint64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 220
				, "value": "append(output: char[], pos: int32, value: uint32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 223
				, "value": "append(output: char[], pos: int32, value: uint16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 226
				, "value": "append(output: char[], pos: int32, value: uint8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, radix: int32, value: int64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 229
				, "value": "append(output: char[], pos: int32, radix: int32, value: int64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 243
				, "value": "append(output: char[], pos: int32, value: int64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 246
				, "value": "append(output: char[], pos: int32, value: int32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 249
				, "value": "append(output: char[], pos: int32, value: int16, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 252
				, "value": "append(output: char[], pos: int32, value: int8, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 255
				, "value": "append(output: char[], pos: int32, value: float64, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 291
				, "value": "append(output: char[], pos: int32, value: float32, format: FormatFlags): int32"
			}, {
				"": "append(output: char[], pos: int32, value: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 294
				, "value": "append(output: char[], pos: int32, value: int32): int32"
			}, {
				"": "float64(value: char[]): float64"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/lib/text/string.ci"
				, "line": 300
				, "value": "float64(value: char[]): float64"
			}]
		}, {
			"": "{...}"
			, "kind": "{}"
			, "type": "void"
			, "file": "cmplStd/test/test.ci"
			, "line": 5
			, "stmt": [{
				"": "integer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/test.ci"
				, "line": 5
				, "value": "integer"
			}, {
				"": "emitldz32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 3
				, "value": "emitldz32"
			}, {
				"": "emitldz64"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 4
				, "value": "emitldz64"
			}, {
				"": "emitA"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 6
				, "value": "emitA"
			}, {
				"": "emitB"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 7
				, "value": "emitB"
			}, {
				"": "emitAddI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 10
				, "value": "emitAddI32"
			}, {
				"": "emitDivI32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 13
				, "value": "emitDivI32"
			}, {
				"": "emitNfcF32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 16
				, "value": "emitNfcF32"
			}, {
				"": "floatAsInt32(value: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 19
				, "value": "floatAsInt32(value: float32): int32"
			}, {
				"": "floatAsInt64(value: float64): int64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 21
				, "value": "floatAsInt64(value: float64): int64"
			}, {
				"": "emitFloatAsInt1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 23
				, "value": "emitFloatAsInt1"
			}, {
				"": "emitFloatAsInt2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 24
				, "value": "emitFloatAsInt2"
			}, {
				"": "emitFloatAsInt3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 25
				, "value": "emitFloatAsInt3"
			}, {
				"": "emitFloatAsInt4"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 26
				, "value": "emitFloatAsInt4"
			}, {
				"": "emitSlice"
				, "kind": ".variable"
				, "type": "char[]"
				, "file": "cmplStd/test/lang/emit.ci"
				, "line": 29
				, "value": "emitSlice"
			}, {
				"": "zero(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 3
				, "value": "zero(a: int32, b: int32): int32"
			}, {
				"": "last(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 4
				, "value": "last(a: int32, b: int32): int32"
			}, {
				"": "sum(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 5
				, "value": "sum(a: int32, b: int32): int32"
			}, {
				"": "any(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 6
				, "value": "any(a: int32, b: int32): int32"
			}, {
				"": "min(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 7
				, "value": "min(a: int32, b: int32): int32"
			}, {
				"": "max(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 8
				, "value": "max(a: int32, b: int32): int32"
			}, {
				"": "i3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 10
				, "value": "i3"
			}, {
				"": "i6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 11
				, "value": "i6"
			}, {
				"": "i2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 12
				, "value": "i2"
			}, {
				"": "i8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 13
				, "value": "i8"
			}, {
				"": "zeroVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 15
				, "value": "zeroVal"
			}, {
				"": "zeroVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 16
				, "value": "zeroVar"
			}, {
				"": "zeroXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 17
				, "value": "zeroXpr"
			}, {
				"": "lastVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 19
				, "value": "lastVal"
			}, {
				"": "lastVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 20
				, "value": "lastVar"
			}, {
				"": "lastXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 21
				, "value": "lastXpr"
			}, {
				"": "sum2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 23
				, "value": "sum2Val"
			}, {
				"": "sum2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 24
				, "value": "sum2Var"
			}, {
				"": "sum2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 25
				, "value": "sum2Xpr"
			}, {
				"": "any2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 27
				, "value": "any2Val"
			}, {
				"": "any2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 28
				, "value": "any2Var"
			}, {
				"": "any2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 29
				, "value": "any2Xpr"
			}, {
				"": "min2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 31
				, "value": "min2Val"
			}, {
				"": "min2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 32
				, "value": "min2Var"
			}, {
				"": "min2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 33
				, "value": "min2Xpr"
			}, {
				"": "max2Val"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 35
				, "value": "max2Val"
			}, {
				"": "max2Var"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 36
				, "value": "max2Var"
			}, {
				"": "max2Xpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 37
				, "value": "max2Xpr"
			}, {
				"": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 39
				, "value": "sumLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 40
				, "value": "sumRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "sumRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 41
				, "value": "sumRlVal"
			}, {
				"": "sumLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 42
				, "value": "sumLrVal"
			}, {
				"": "sumRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 43
				, "value": "sumRlVar"
			}, {
				"": "sumLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 44
				, "value": "sumLrVar"
			}, {
				"": "sumRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 45
				, "value": "sumRlXpr"
			}, {
				"": "sumLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 46
				, "value": "sumLrXpr"
			}, {
				"": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 48
				, "value": "anyLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 49
				, "value": "anyRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "anyRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 50
				, "value": "anyRlVal"
			}, {
				"": "anyLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 51
				, "value": "anyLrVal"
			}, {
				"": "anyRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 52
				, "value": "anyRlVar"
			}, {
				"": "anyLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 53
				, "value": "anyLrVar"
			}, {
				"": "anyRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 54
				, "value": "anyRlXpr"
			}, {
				"": "anyLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 55
				, "value": "anyLrXpr"
			}, {
				"": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 57
				, "value": "minLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 58
				, "value": "minRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "minRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 59
				, "value": "minRlVal"
			}, {
				"": "minLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 60
				, "value": "minLrVal"
			}, {
				"": "minRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 61
				, "value": "minRlVar"
			}, {
				"": "minLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 62
				, "value": "minLrVar"
			}, {
				"": "minRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 63
				, "value": "minRlXpr"
			}, {
				"": "minLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 64
				, "value": "minLrXpr"
			}, {
				"": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 66
				, "value": "maxLr(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 67
				, "value": "maxRl(a: int32, b: int32, c: int32, d: int32): int32"
			}, {
				"": "maxRlVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 68
				, "value": "maxRlVal"
			}, {
				"": "maxLrVal"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 69
				, "value": "maxLrVal"
			}, {
				"": "maxRlVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 70
				, "value": "maxRlVar"
			}, {
				"": "maxLrVar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 71
				, "value": "maxLrVar"
			}, {
				"": "maxRlXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 72
				, "value": "maxRlXpr"
			}, {
				"": "maxLrXpr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/inlineMacros.ci"
				, "line": 73
				, "value": "maxLrXpr"
			}, {
				"": "overload"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 3
				, "value": "overload"
			}, {
				"": "overload(): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 4
				, "value": "overload(): int32"
			}, {
				"": "overload(a: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 5
				, "value": "overload(a: int32): int32"
			}, {
				"": "overload(a: float32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 6
				, "value": "overload(a: float32): int32"
			}, {
				"": "overload(a: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 7
				, "value": "overload(a: int32, b: int32): int32"
			}, {
				"": "overload1"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 9
				, "value": "overload1"
			}, {
				"": "overload2"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 10
				, "value": "overload2"
			}, {
				"": "overload3"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 11
				, "value": "overload3"
			}, {
				"": "overload4"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 12
				, "value": "overload4"
			}, {
				"": "overload5"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 13
				, "value": "overload5"
			}, {
				"": "Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 15
				, "value": "Celsius"
			}, {
				"": "Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 16
				, "value": "Fahrenheit"
			}, {
				"": "Celsius(value: float64): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 21
				, "value": "Celsius(value: float64): Celsius"
			}, {
				"": "Fahrenheit(value: float64): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 22
				, "value": "Fahrenheit(value: float64): Fahrenheit"
			}, {
				"": "Celsius(value: Fahrenheit): Celsius"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 25
				, "value": "Celsius(value: Fahrenheit): Celsius"
			}, {
				"": "Fahrenheit(value: Celsius): Fahrenheit"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 26
				, "value": "Fahrenheit(value: Celsius): Fahrenheit"
			}, {
				"": "boilC"
				, "kind": ".variable"
				, "type": "Celsius"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 28
				, "value": "boilC"
			}, {
				"": "boilF"
				, "kind": ".variable"
				, "type": "Fahrenheit"
				, "file": "cmplStd/test/lang/overload.inline.ci"
				, "line": 29
				, "value": "boilF"
			}, {
				"": "pi64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 3
				, "value": "pi64"
			}, {
				"": "e64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 4
				, "value": "e64"
			}, {
				"": "pi32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 6
				, "value": "pi32"
			}, {
				"": "e32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 7
				, "value": "e32"
			}, {
				"": "rgb888(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 10
				, "value": "rgb888(r: int32, g: int32, b: int32): int32"
			}, {
				"": "rgb565(r: int32, g: int32, b: int32): int32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 12
				, "value": "rgb565(r: int32, g: int32, b: int32): int32"
			}, {
				"": "r_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 14
				, "value": "r_comp"
			}, {
				"": "g_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 15
				, "value": "g_comp"
			}, {
				"": "b_comp"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 16
				, "value": "b_comp"
			}, {
				"": "r5g6b5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 18
				, "value": "r5g6b5"
			}, {
				"": "r8g8b8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 19
				, "value": "r8g8b8"
			}, {
				"": "zxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 21
				, "value": "zxtR5"
			}, {
				"": "zxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 22
				, "value": "zxtG6"
			}, {
				"": "zxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 23
				, "value": "zxtB5"
			}, {
				"": "sxtR5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 25
				, "value": "sxtR5"
			}, {
				"": "sxtG6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 26
				, "value": "sxtG6"
			}, {
				"": "sxtB5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 27
				, "value": "sxtB5"
			}, {
				"": "zxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 29
				, "value": "zxtR8"
			}, {
				"": "zxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 30
				, "value": "zxtG8"
			}, {
				"": "zxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 31
				, "value": "zxtB8"
			}, {
				"": "sxtR8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 33
				, "value": "sxtR8"
			}, {
				"": "sxtG8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 34
				, "value": "sxtG8"
			}, {
				"": "sxtB8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 35
				, "value": "sxtB8"
			}, {
				"": "testSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 37
				, "value": "testSin_f64"
			}, {
				"": "testCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 38
				, "value": "testCos_f64"
			}, {
				"": "testTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 39
				, "value": "testTan_f64"
			}, {
				"": "testLog_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 40
				, "value": "testLog_f64"
			}, {
				"": "testExp_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 41
				, "value": "testExp_f64"
			}, {
				"": "testPow_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 42
				, "value": "testPow_f64"
			}, {
				"": "testSqrt_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 43
				, "value": "testSqrt_f64"
			}, {
				"": "testAtan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 44
				, "value": "testAtan_f64"
			}, {
				"": "testSin_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 46
				, "value": "testSin_f32"
			}, {
				"": "testCos_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 47
				, "value": "testCos_f32"
			}, {
				"": "testTan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 48
				, "value": "testTan_f32"
			}, {
				"": "testLog_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 49
				, "value": "testLog_f32"
			}, {
				"": "testExp_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 50
				, "value": "testExp_f32"
			}, {
				"": "testPow_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 51
				, "value": "testPow_f32"
			}, {
				"": "testSqrt_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 52
				, "value": "testSqrt_f32"
			}, {
				"": "testAtan_f32"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 53
				, "value": "testAtan_f32"
			}, {
				"": "testPopulation_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 55
				, "value": "testPopulation_u32"
			}, {
				"": "testSwapBits_u32"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 56
				, "value": "testSwapBits_u32"
			}, {
				"": "testBitScanReverse_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 57
				, "value": "testBitScanReverse_u32"
			}, {
				"": "testBitScanForward_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 58
				, "value": "testBitScanForward_u32"
			}, {
				"": "testHighBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 59
				, "value": "testHighBit_u32"
			}, {
				"": "testLowBit_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 60
				, "value": "testLowBit_u32"
			}, {
				"": "testZeroExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 62
				, "value": "testZeroExtend_u32"
			}, {
				"": "testSignExtend_u32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 63
				, "value": "testSignExtend_u32"
			}, {
				"": "testZeroExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 65
				, "value": "testZeroExtend_u64"
			}, {
				"": "testSignExtend_u64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/number.ci"
				, "line": 66
				, "value": "testSignExtend_u64"
			}, {
				"": "realloc(data: pointer, size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 3
				, "value": "realloc(data: pointer, size: int32): pointer"
			}, {
				"": "malloc(size: int32): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 4
				, "value": "malloc(size: int32): pointer"
			}, {
				"": "free(data: pointer): pointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 5
				, "value": "free(data: pointer): pointer"
			}, {
				"": "p1"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 7
				, "value": "p1"
			}, {
				"": "p2"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 8
				, "value": "p2"
			}, {
				"": "p3"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 9
				, "value": "p3"
			}, {
				"": "p4"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 10
				, "value": "p4"
			}, {
				"": "pointer.fill(p1, 0, 1024);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 13
			}, {
				"": "pointer.copy(p1, p3, 160);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 14
			}, {
				"": "free(p1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 17
			}, {
				"": "free(p2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 18
			}, {
				"": "free(p3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 19
			}, {
				"": "free(p4);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 20
			}, {
				"": "val1"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 23
				, "value": "val1"
			}, {
				"": "val2"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 24
				, "value": "val2"
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 26
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 27
			}, {
				"": "pointer.move(pointer(val2), pointer(val1), sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 29
			}, {
				"": "pointer.fill(pointer(val1), 0, sizeof(int64));"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 30
			}, {
				"": "debug(\"val1\", val1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 32
			}, {
				"": "debug(\"val2\", val2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/std/memory.ci"
				, "line": 33
			}, {
				"": "noError(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 11
				, "value": "noError(ptr: pointer): void"
			}, {
				"": "stackOverflow(ptr: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 14
				, "value": "stackOverflow(ptr: pointer): void"
			}, {
				"": "divisionByZero(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 20
				, "value": "divisionByZero(args: pointer): void"
			}, {
				"": "abortExecution(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 24
				, "value": "abortExecution(args: pointer): void"
			}, {
				"": "invalidMemoryAccess(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 38
				, "value": "invalidMemoryAccess(args: pointer): void"
			}, {
				"": "invalidInstruction(args: pointer): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 43
				, "value": "invalidInstruction(args: pointer): void"
			}, {
				"": "tryExecErr0"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 47
				, "value": "tryExecErr0"
			}, {
				"": "tryExecErr1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 48
				, "value": "tryExecErr1"
			}, {
				"": "tryExecErr2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 49
				, "value": "tryExecErr2"
			}, {
				"": "tryExecErr3"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 50
				, "value": "tryExecErr3"
			}, {
				"": "tryExecErr4"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 51
				, "value": "tryExecErr4"
			}, {
				"": "tryExecErr5"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 52
				, "value": "tryExecErr5"
			}, {
				"": "tryExecErr6"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/std/tryExec.ci"
				, "line": 53
				, "value": "tryExecErr6"
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 3
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/init.reference.ci"
					, "line": 3
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 3
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/init.reference.ci"
							, "line": 3
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/init.reference.ci"
								, "line": 3
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 3
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/init.reference.ci"
					, "line": 3
					, "stmt": [{
						"": "integer"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/init.reference.ci"
						, "line": 4
						, "value": "integer"
					}]
				}
			}, {
				"": "value"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 7
				, "value": "value"
			}, {
				"": "valueRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 8
				, "value": "valueRef"
			}, {
				"": "valuePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 9
				, "value": "valuePtr"
			}, {
				"": "valueVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 10
				, "value": "valueVar"
			}, {
				"": "fromRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 12
				, "value": "fromRef"
			}, {
				"": "fromPtr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 13
				, "value": "fromPtr"
			}, {
				"": "fromVar"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 14
				, "value": "fromVar"
			}, {
				"": "nullRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 16
				, "value": "nullRef"
			}, {
				"": "nullPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 17
				, "value": "nullPtr"
			}, {
				"": "nullVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 18
				, "value": "nullVar"
			}, {
				"": "nullTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 19
				, "value": "nullTyp"
			}, {
				"": "nullFun"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 20
				, "value": "nullFun"
			}, {
				"": "nullObj"
				, "kind": ".variable"
				, "type": "object"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 21
				, "value": "nullObj"
			}, {
				"": "typePtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 23
				, "value": "typePtr"
			}, {
				"": "typeVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 24
				, "value": "typeVar"
			}, {
				"": "typeTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 25
				, "value": "typeTyp"
			}, {
				"": "local"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 27
				, "value": "local"
			}, {
				"": "copyVal"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 28
				, "value": "copyVal"
			}, {
				"": "copyRef"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 29
				, "value": "copyRef"
			}, {
				"": "copyPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 30
				, "value": "copyPtr"
			}, {
				"": "copyVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 31
				, "value": "copyVar"
			}, {
				"": "copyTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 32
				, "value": "copyTyp"
			}, {
				"": "ptrVoid"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 35
				, "value": "ptrVoid"
			}, {
				"": "ptrBool"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 36
				, "value": "ptrBool"
			}, {
				"": "ptrChar"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 37
				, "value": "ptrChar"
			}, {
				"": "ptrInt8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 38
				, "value": "ptrInt8"
			}, {
				"": "ptrInt16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 39
				, "value": "ptrInt16"
			}, {
				"": "ptrInt32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 40
				, "value": "ptrInt32"
			}, {
				"": "ptrInt64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 41
				, "value": "ptrInt64"
			}, {
				"": "ptrUint8"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 42
				, "value": "ptrUint8"
			}, {
				"": "ptrUint16"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 43
				, "value": "ptrUint16"
			}, {
				"": "ptrUint32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 44
				, "value": "ptrUint32"
			}, {
				"": "ptrUint64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 45
				, "value": "ptrUint64"
			}, {
				"": "ptrFloat32"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 46
				, "value": "ptrFloat32"
			}, {
				"": "ptrFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 47
				, "value": "ptrFloat64"
			}, {
				"": "ptrTypename"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 48
				, "value": "ptrTypename"
			}, {
				"": "ptrFunction"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 49
				, "value": "ptrFunction"
			}, {
				"": "ptrPointer"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 50
				, "value": "ptrPointer"
			}, {
				"": "ptrVariant"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 51
				, "value": "ptrVariant"
			}, {
				"": "ptrObject"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 52
				, "value": "ptrObject"
			}, {
				"": "varVoid"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 55
				, "value": "varVoid"
			}, {
				"": "varBool"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 56
				, "value": "varBool"
			}, {
				"": "varChar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 57
				, "value": "varChar"
			}, {
				"": "varInt8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 58
				, "value": "varInt8"
			}, {
				"": "varInt16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 59
				, "value": "varInt16"
			}, {
				"": "varInt32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 60
				, "value": "varInt32"
			}, {
				"": "varInt64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 61
				, "value": "varInt64"
			}, {
				"": "varUint8"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 62
				, "value": "varUint8"
			}, {
				"": "varUint16"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 63
				, "value": "varUint16"
			}, {
				"": "varUint32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 64
				, "value": "varUint32"
			}, {
				"": "varUint64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 65
				, "value": "varUint64"
			}, {
				"": "varFloat32"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 66
				, "value": "varFloat32"
			}, {
				"": "varFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 67
				, "value": "varFloat64"
			}, {
				"": "varTypename"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 68
				, "value": "varTypename"
			}, {
				"": "varFunction"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 69
				, "value": "varFunction"
			}, {
				"": "varPointer"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 70
				, "value": "varPointer"
			}, {
				"": "varVariant"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 71
				, "value": "varVariant"
			}, {
				"": "varObject"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 72
				, "value": "varObject"
			}, {
				"": "typVoid"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 75
				, "value": "typVoid"
			}, {
				"": "typBool"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 76
				, "value": "typBool"
			}, {
				"": "typChar"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 77
				, "value": "typChar"
			}, {
				"": "typInt8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 78
				, "value": "typInt8"
			}, {
				"": "typInt16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 79
				, "value": "typInt16"
			}, {
				"": "typInt32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 80
				, "value": "typInt32"
			}, {
				"": "typInt64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 81
				, "value": "typInt64"
			}, {
				"": "typUint8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 82
				, "value": "typUint8"
			}, {
				"": "typUint16"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 83
				, "value": "typUint16"
			}, {
				"": "typUint32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 84
				, "value": "typUint32"
			}, {
				"": "typUint64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 85
				, "value": "typUint64"
			}, {
				"": "typFloat32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 86
				, "value": "typFloat32"
			}, {
				"": "typFloat64"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 87
				, "value": "typFloat64"
			}, {
				"": "typTypename"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 88
				, "value": "typTypename"
			}, {
				"": "typFunction"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 89
				, "value": "typFunction"
			}, {
				"": "typPointer"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 90
				, "value": "typPointer"
			}, {
				"": "typVariant"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 91
				, "value": "typVariant"
			}, {
				"": "typObject"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 92
				, "value": "typObject"
			}, {
				"": "valueOfPtr"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 95
				, "value": "valueOfPtr"
			}, {
				"": "valueOfVar"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 96
				, "value": "valueOfVar"
			}, {
				"": "valueOfTyp"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 97
				, "value": "valueOfTyp"
			}, {
				"": "typeOfValue"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 99
				, "value": "typeOfValue"
			}, {
				"": "copyPtrFloat64"
				, "kind": ".variable"
				, "type": "variant"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 105
				, "value": "copyPtrFloat64"
			}, {
				"": "copyVarFloat64"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/init.reference.ci"
				, "line": 108
				, "value": "copyVarFloat64"
			}, {
				"": "variable"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 3
				, "value": "variable"
			}, {
				"": "constant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 7
				, "value": "constant"
			}, {
				"": "ComplexVal"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 9
				, "value": "ComplexVal"
			}, {
				"": "ComplexObj"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 13
				, "value": "ComplexObj"
			}, {
				"": "valInitImplicit"
				, "kind": ".variable"
				, "type": "ComplexVal"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 24
				, "value": "valInitImplicit"
			}, {
				"": "objInitImplicit"
				, "kind": ".variable"
				, "type": "ComplexObj"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 33
				, "value": "objInitImplicit"
			}, {
				"": "objInitExplicit"
				, "kind": ".variable"
				, "type": "object"
				, "file": "cmplStd/test/lang/init.variable.ci"
				, "line": 41
				, "value": "objInitExplicit"
			}, {
				"": "empty(): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 4
				, "value": "empty(): void"
			}, {
				"": "funAdd(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 7
				, "value": "funAdd(x: int32, y: int32): int32"
			}, {
				"": "funAddResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 12
				, "value": "funAddResult"
			}, {
				"": "funAddRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 15
				, "value": "funAddRef(x: int32, y: int32): int32"
			}, {
				"": "funAddRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 18
				, "value": "funAddRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 21
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "funMulResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 24
				, "value": "funMulResult"
			}, {
				"": "funMulRef(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 27
				, "value": "funMulRef(x: int32, y: int32): int32"
			}, {
				"": "funMulRefResult"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 30
				, "value": "funMulRefResult"
			}, {
				"": "funMul(x: int32, y: int32): int32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 33
				, "value": "funMul(x: int32, y: int32): int32"
			}, {
				"": "fib(n: uint32): uint32"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 38
				, "value": "fib(n: uint32): uint32"
			}, {
				"": "fibonacci_13"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/function.ci"
				, "line": 46
				, "value": "fibonacci_13"
			}, {
				"": "sizeofVoid"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 3
				, "value": "sizeofVoid"
			}, {
				"": "sizeofBool"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 4
				, "value": "sizeofBool"
			}, {
				"": "sizeofChar"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 5
				, "value": "sizeofChar"
			}, {
				"": "sizeofInt8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 6
				, "value": "sizeofInt8"
			}, {
				"": "sizeofInt16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 7
				, "value": "sizeofInt16"
			}, {
				"": "sizeofInt32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 8
				, "value": "sizeofInt32"
			}, {
				"": "sizeofInt64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 9
				, "value": "sizeofInt64"
			}, {
				"": "sizeofUint8"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 10
				, "value": "sizeofUint8"
			}, {
				"": "sizeofUint16"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 11
				, "value": "sizeofUint16"
			}, {
				"": "sizeofUint32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 12
				, "value": "sizeofUint32"
			}, {
				"": "sizeofUint64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 13
				, "value": "sizeofUint64"
			}, {
				"": "sizeofFloat32"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 14
				, "value": "sizeofFloat32"
			}, {
				"": "sizeofFloat64"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 15
				, "value": "sizeofFloat64"
			}, {
				"": "sizeofPointer"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 16
				, "value": "sizeofPointer"
			}, {
				"": "sizeofVariant"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 17
				, "value": "sizeofVariant"
			}, {
				"": "sizeofTypename"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 18
				, "value": "sizeofTypename"
			}, {
				"": "sizeofFunction"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 19
				, "value": "sizeofFunction"
			}, {
				"": "sizeofObject"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 20
				, "value": "sizeofObject"
			}, {
				"": "RecordSizeof"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 22
				, "value": "RecordSizeof"
			}, {
				"": "RecordSizeofExt"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 26
				, "value": "RecordSizeofExt"
			}, {
				"": "typeofRecord"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 30
				, "value": "typeofRecord"
			}, {
				"": "nameOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 31
				, "value": "nameOfRecord"
			}, {
				"": "offsetOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 32
				, "value": "offsetOfRecord"
			}, {
				"": "sizeOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 33
				, "value": "sizeOfRecord"
			}, {
				"": "fileOfRecord"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 34
				, "value": "fileOfRecord"
			}, {
				"": "lineOfRecord"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 35
				, "value": "lineOfRecord"
			}, {
				"": "typeofBase"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 37
				, "value": "typeofBase"
			}, {
				"": "nameOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 38
				, "value": "nameOfBase"
			}, {
				"": "offsetOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 39
				, "value": "offsetOfBase"
			}, {
				"": "sizeOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 40
				, "value": "sizeOfBase"
			}, {
				"": "fileOfBase"
				, "kind": ".variable"
				, "type": "char[*]"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 41
				, "value": "fileOfBase"
			}, {
				"": "lineOfBase"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 42
				, "value": "lineOfBase"
			}, {
				"": "typeofBase1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 44
				, "value": "typeofBase1"
			}, {
				"": "offsetOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 45
				, "value": "offsetOfBase1"
			}, {
				"": "sizeOfBase1"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 46
				, "value": "sizeOfBase1"
			}, {
				"": "typeofBase2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 48
				, "value": "typeofBase2"
			}, {
				"": "offsetOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 49
				, "value": "offsetOfBase2"
			}, {
				"": "sizeOfBase2"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/reflect.ci"
				, "line": 50
				, "value": "sizeOfBase2"
			}, {
				"": "RecordMemberTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.member.ci"
				, "line": 2
				, "value": "RecordMemberTest"
			}, {
				"": "recordMemberTest"
				, "kind": ".variable"
				, "type": "RecordMemberTest"
				, "file": "cmplStd/test/lang/init.member.ci"
				, "line": 52
				, "value": "recordMemberTest"
			}, {
				"": "RecordMethodTest"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 4
				, "value": "RecordMethodTest"
			}, {
				"": "globalFunction(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 57
				, "value": "globalFunction(this: RecordMethodTest, x: int32): void"
			}, {
				"": "recordMethodTest"
				, "kind": ".variable"
				, "type": "RecordMethodTest"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 62
				, "value": "recordMethodTest"
			}, {
				"": "RecordMethodTest.staticMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 78
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 1);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 79
			}, {
				"": "staticMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 84
				, "value": "staticMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "virtualMethod(this: RecordMethodTest, x: int32): void"
				, "kind": ".variable"
				, "type": "function"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 90
				, "value": "virtualMethod(this: RecordMethodTest, x: int32): void"
			}, {
				"": "staticMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 97
			}, {
				"": "virtualMethod(recordMethodTest, 2);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 98
			}, {
				"": "RecordMethodTest.staticMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 101
			}, {
				"": "RecordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 102
			}, {
				"": "recordMethodTest.virtualMethod(recordMethodTest, 3);"
				, "kind": ";"
				, "type": "void"
				, "file": "cmplStd/test/lang/init.method.ci"
				, "line": 103
			}, {
				"": "rgbF32"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 2
				, "value": "rgbF32"
			}, {
				"": "rgbU8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 9
				, "value": "rgbU8"
			}, {
				"": "color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 16
				, "value": "color"
			}, {
				"": "Color"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 22
				, "value": "Color"
			}, {
				"": "black"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 26
				, "value": "black"
			}, {
				"": "green"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 27
				, "value": "green"
			}, {
				"": "white"
				, "kind": ".variable"
				, "type": "rgbU8"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 28
				, "value": "white"
			}, {
				"": "cyan"
				, "kind": ".variable"
				, "type": "color"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 30
				, "value": "cyan"
			}, {
				"": "blue"
				, "kind": ".variable"
				, "type": "color"
				, "file": "cmplStd/test/lang/recUnion.ci"
				, "line": 31
				, "value": "blue"
			}, {
				"": "record_pack0"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 2
				, "value": "record_pack0"
			}, {
				"": "record_pack1"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 12
				, "value": "record_pack1"
			}, {
				"": "record_pack2"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 22
				, "value": "record_pack2"
			}, {
				"": "record_pack4"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 32
				, "value": "record_pack4"
			}, {
				"": "record_pack8"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 42
				, "value": "record_pack8"
			}, {
				"": "record_packDef"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/recPacking.ci"
				, "line": 52
				, "value": "record_packDef"
			}, {
				"": "a"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 3
				, "value": "a"
			}, {
				"": "b"
				, "kind": ".variable"
				, "type": "typename"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 4
				, "value": "b"
			}, {
				"": "shift"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 5
				, "value": "shift"
			}, {
				"": "boolA"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 7
				, "value": "boolA"
			}, {
				"": "boolB"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 8
				, "value": "boolB"
			}, {
				"": "boolAnd"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 17
				, "value": "boolAnd"
			}, {
				"": "boolIor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 18
				, "value": "boolIor"
			}, {
				"": "boolXor"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 19
				, "value": "boolXor"
			}, {
				"": "boolNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 22
				, "value": "boolNot"
			}, {
				"": "boolCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 23
				, "value": "boolCeq"
			}, {
				"": "boolCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 24
				, "value": "boolCne"
			}, {
				"": "boolClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 25
				, "value": "boolClt"
			}, {
				"": "boolCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 26
				, "value": "boolCle"
			}, {
				"": "boolCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 27
				, "value": "boolCgt"
			}, {
				"": "boolCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 28
				, "value": "boolCge"
			}, {
				"": "chrA"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 30
				, "value": "chrA"
			}, {
				"": "chrB"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 31
				, "value": "chrB"
			}, {
				"": "chrPls"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 32
				, "value": "chrPls"
			}, {
				"": "chrNeg"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 33
				, "value": "chrNeg"
			}, {
				"": "chrCmt"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 34
				, "value": "chrCmt"
			}, {
				"": "chrAdd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 35
				, "value": "chrAdd"
			}, {
				"": "chrSub"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 36
				, "value": "chrSub"
			}, {
				"": "chrMul"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 37
				, "value": "chrMul"
			}, {
				"": "chrDiv"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 38
				, "value": "chrDiv"
			}, {
				"": "chrMod"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 39
				, "value": "chrMod"
			}, {
				"": "chrAnd"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 40
				, "value": "chrAnd"
			}, {
				"": "chrIor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 41
				, "value": "chrIor"
			}, {
				"": "chrXor"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 42
				, "value": "chrXor"
			}, {
				"": "chrShl"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 43
				, "value": "chrShl"
			}, {
				"": "chrShr"
				, "kind": ".variable"
				, "type": "char"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 44
				, "value": "chrShr"
			}, {
				"": "chrNot"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 45
				, "value": "chrNot"
			}, {
				"": "chrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 46
				, "value": "chrCeq"
			}, {
				"": "chrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 47
				, "value": "chrCne"
			}, {
				"": "chrClt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 48
				, "value": "chrClt"
			}, {
				"": "chrCle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 49
				, "value": "chrCle"
			}, {
				"": "chrCgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 50
				, "value": "chrCgt"
			}, {
				"": "chrCge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 51
				, "value": "chrCge"
			}, {
				"": "i8A"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 53
				, "value": "i8A"
			}, {
				"": "i8B"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 54
				, "value": "i8B"
			}, {
				"": "i8Pls"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 55
				, "value": "i8Pls"
			}, {
				"": "i8Neg"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 56
				, "value": "i8Neg"
			}, {
				"": "i8Cmt"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 57
				, "value": "i8Cmt"
			}, {
				"": "i8Add"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 58
				, "value": "i8Add"
			}, {
				"": "i8Sub"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 59
				, "value": "i8Sub"
			}, {
				"": "i8Mul"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 60
				, "value": "i8Mul"
			}, {
				"": "i8Div"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 61
				, "value": "i8Div"
			}, {
				"": "i8Mod"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 62
				, "value": "i8Mod"
			}, {
				"": "i8And"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 63
				, "value": "i8And"
			}, {
				"": "i8Ior"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 64
				, "value": "i8Ior"
			}, {
				"": "i8Xor"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 65
				, "value": "i8Xor"
			}, {
				"": "i8Shl"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 66
				, "value": "i8Shl"
			}, {
				"": "i8Shr"
				, "kind": ".variable"
				, "type": "int8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 67
				, "value": "i8Shr"
			}, {
				"": "i8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 68
				, "value": "i8Not"
			}, {
				"": "i8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 69
				, "value": "i8Ceq"
			}, {
				"": "i8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 70
				, "value": "i8Cne"
			}, {
				"": "i8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 71
				, "value": "i8Clt"
			}, {
				"": "i8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 72
				, "value": "i8Cle"
			}, {
				"": "i8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 73
				, "value": "i8Cgt"
			}, {
				"": "i8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 74
				, "value": "i8Cge"
			}, {
				"": "u8A"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 76
				, "value": "u8A"
			}, {
				"": "u8B"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 77
				, "value": "u8B"
			}, {
				"": "u8Pls"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 78
				, "value": "u8Pls"
			}, {
				"": "u8Neg"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 79
				, "value": "u8Neg"
			}, {
				"": "u8Cmt"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 80
				, "value": "u8Cmt"
			}, {
				"": "u8Add"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 81
				, "value": "u8Add"
			}, {
				"": "u8Sub"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 82
				, "value": "u8Sub"
			}, {
				"": "u8Mul"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 83
				, "value": "u8Mul"
			}, {
				"": "u8Div"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 84
				, "value": "u8Div"
			}, {
				"": "u8Mod"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 85
				, "value": "u8Mod"
			}, {
				"": "u8And"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 86
				, "value": "u8And"
			}, {
				"": "u8Ior"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 87
				, "value": "u8Ior"
			}, {
				"": "u8Xor"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 88
				, "value": "u8Xor"
			}, {
				"": "u8Shl"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 89
				, "value": "u8Shl"
			}, {
				"": "u8Shr"
				, "kind": ".variable"
				, "type": "uint8"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 90
				, "value": "u8Shr"
			}, {
				"": "u8Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 91
				, "value": "u8Not"
			}, {
				"": "u8Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 92
				, "value": "u8Ceq"
			}, {
				"": "u8Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 93
				, "value": "u8Cne"
			}, {
				"": "u8Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 94
				, "value": "u8Clt"
			}, {
				"": "u8Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 95
				, "value": "u8Cle"
			}, {
				"": "u8Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 96
				, "value": "u8Cgt"
			}, {
				"": "u8Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 97
				, "value": "u8Cge"
			}, {
				"": "i16A"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 99
				, "value": "i16A"
			}, {
				"": "i16B"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 100
				, "value": "i16B"
			}, {
				"": "i16Pls"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 101
				, "value": "i16Pls"
			}, {
				"": "i16Neg"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 102
				, "value": "i16Neg"
			}, {
				"": "i16Cmt"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 103
				, "value": "i16Cmt"
			}, {
				"": "i16Add"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 104
				, "value": "i16Add"
			}, {
				"": "i16Sub"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 105
				, "value": "i16Sub"
			}, {
				"": "i16Mul"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 106
				, "value": "i16Mul"
			}, {
				"": "i16Div"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 107
				, "value": "i16Div"
			}, {
				"": "i16Mod"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 108
				, "value": "i16Mod"
			}, {
				"": "i16And"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 109
				, "value": "i16And"
			}, {
				"": "i16Ior"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 110
				, "value": "i16Ior"
			}, {
				"": "i16Xor"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 111
				, "value": "i16Xor"
			}, {
				"": "i16Shl"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 112
				, "value": "i16Shl"
			}, {
				"": "i16Shr"
				, "kind": ".variable"
				, "type": "int16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 113
				, "value": "i16Shr"
			}, {
				"": "i16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 114
				, "value": "i16Not"
			}, {
				"": "i16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 115
				, "value": "i16Ceq"
			}, {
				"": "i16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 116
				, "value": "i16Cne"
			}, {
				"": "i16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 117
				, "value": "i16Clt"
			}, {
				"": "i16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 118
				, "value": "i16Cle"
			}, {
				"": "i16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 119
				, "value": "i16Cgt"
			}, {
				"": "i16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 120
				, "value": "i16Cge"
			}, {
				"": "u16A"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 122
				, "value": "u16A"
			}, {
				"": "u16B"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 123
				, "value": "u16B"
			}, {
				"": "u16Pls"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 124
				, "value": "u16Pls"
			}, {
				"": "u16Neg"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 125
				, "value": "u16Neg"
			}, {
				"": "u16Cmt"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 126
				, "value": "u16Cmt"
			}, {
				"": "u16Add"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 127
				, "value": "u16Add"
			}, {
				"": "u16Sub"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 128
				, "value": "u16Sub"
			}, {
				"": "u16Mul"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 129
				, "value": "u16Mul"
			}, {
				"": "u16Div"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 130
				, "value": "u16Div"
			}, {
				"": "u16Mod"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 131
				, "value": "u16Mod"
			}, {
				"": "u16And"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 132
				, "value": "u16And"
			}, {
				"": "u16Ior"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 133
				, "value": "u16Ior"
			}, {
				"": "u16Xor"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 134
				, "value": "u16Xor"
			}, {
				"": "u16Shl"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 135
				, "value": "u16Shl"
			}, {
				"": "u16Shr"
				, "kind": ".variable"
				, "type": "uint16"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 136
				, "value": "u16Shr"
			}, {
				"": "u16Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 137
				, "value": "u16Not"
			}, {
				"": "u16Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 138
				, "value": "u16Ceq"
			}, {
				"": "u16Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 139
				, "value": "u16Cne"
			}, {
				"": "u16Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 140
				, "value": "u16Clt"
			}, {
				"": "u16Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 141
				, "value": "u16Cle"
			}, {
				"": "u16Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 142
				, "value": "u16Cgt"
			}, {
				"": "u16Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 143
				, "value": "u16Cge"
			}, {
				"": "i32A"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 145
				, "value": "i32A"
			}, {
				"": "i32B"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 146
				, "value": "i32B"
			}, {
				"": "i32Pls"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 147
				, "value": "i32Pls"
			}, {
				"": "i32Neg"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 148
				, "value": "i32Neg"
			}, {
				"": "i32Cmt"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 149
				, "value": "i32Cmt"
			}, {
				"": "i32Add"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 150
				, "value": "i32Add"
			}, {
				"": "i32Sub"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 151
				, "value": "i32Sub"
			}, {
				"": "i32Mul"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 152
				, "value": "i32Mul"
			}, {
				"": "i32Div"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 153
				, "value": "i32Div"
			}, {
				"": "i32Mod"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 154
				, "value": "i32Mod"
			}, {
				"": "i32And"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 155
				, "value": "i32And"
			}, {
				"": "i32Ior"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 156
				, "value": "i32Ior"
			}, {
				"": "i32Xor"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 157
				, "value": "i32Xor"
			}, {
				"": "i32Shl"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 158
				, "value": "i32Shl"
			}, {
				"": "i32Shr"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 159
				, "value": "i32Shr"
			}, {
				"": "i32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 160
				, "value": "i32Not"
			}, {
				"": "i32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 161
				, "value": "i32Ceq"
			}, {
				"": "i32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 162
				, "value": "i32Cne"
			}, {
				"": "i32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 163
				, "value": "i32Clt"
			}, {
				"": "i32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 164
				, "value": "i32Cle"
			}, {
				"": "i32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 165
				, "value": "i32Cgt"
			}, {
				"": "i32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 166
				, "value": "i32Cge"
			}, {
				"": "u32A"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 168
				, "value": "u32A"
			}, {
				"": "u32B"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 169
				, "value": "u32B"
			}, {
				"": "u32Pls"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 170
				, "value": "u32Pls"
			}, {
				"": "u32Neg"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 171
				, "value": "u32Neg"
			}, {
				"": "u32Cmt"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 172
				, "value": "u32Cmt"
			}, {
				"": "u32Add"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 173
				, "value": "u32Add"
			}, {
				"": "u32Sub"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 174
				, "value": "u32Sub"
			}, {
				"": "u32Mul"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 175
				, "value": "u32Mul"
			}, {
				"": "u32Div"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 176
				, "value": "u32Div"
			}, {
				"": "u32Mod"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 177
				, "value": "u32Mod"
			}, {
				"": "u32And"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 178
				, "value": "u32And"
			}, {
				"": "u32Ior"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 179
				, "value": "u32Ior"
			}, {
				"": "u32Xor"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 180
				, "value": "u32Xor"
			}, {
				"": "u32Shl"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 181
				, "value": "u32Shl"
			}, {
				"": "u32Shr"
				, "kind": ".variable"
				, "type": "uint32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 182
				, "value": "u32Shr"
			}, {
				"": "u32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 183
				, "value": "u32Not"
			}, {
				"": "u32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 184
				, "value": "u32Ceq"
			}, {
				"": "u32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 185
				, "value": "u32Cne"
			}, {
				"": "u32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 186
				, "value": "u32Clt"
			}, {
				"": "u32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 187
				, "value": "u32Cle"
			}, {
				"": "u32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 188
				, "value": "u32Cgt"
			}, {
				"": "u32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 189
				, "value": "u32Cge"
			}, {
				"": "i64A"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 191
				, "value": "i64A"
			}, {
				"": "i64B"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 192
				, "value": "i64B"
			}, {
				"": "i64Pls"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 193
				, "value": "i64Pls"
			}, {
				"": "i64Neg"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 194
				, "value": "i64Neg"
			}, {
				"": "i64Cmt"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 195
				, "value": "i64Cmt"
			}, {
				"": "i64Add"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 196
				, "value": "i64Add"
			}, {
				"": "i64Sub"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 197
				, "value": "i64Sub"
			}, {
				"": "i64Mul"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 198
				, "value": "i64Mul"
			}, {
				"": "i64Div"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 199
				, "value": "i64Div"
			}, {
				"": "i64Mod"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 200
				, "value": "i64Mod"
			}, {
				"": "i64And"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 201
				, "value": "i64And"
			}, {
				"": "i64Ior"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 202
				, "value": "i64Ior"
			}, {
				"": "i64Xor"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 203
				, "value": "i64Xor"
			}, {
				"": "i64Shl"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 204
				, "value": "i64Shl"
			}, {
				"": "i64Shr"
				, "kind": ".variable"
				, "type": "int64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 205
				, "value": "i64Shr"
			}, {
				"": "i64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 206
				, "value": "i64Not"
			}, {
				"": "i64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 207
				, "value": "i64Ceq"
			}, {
				"": "i64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 208
				, "value": "i64Cne"
			}, {
				"": "i64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 209
				, "value": "i64Clt"
			}, {
				"": "i64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 210
				, "value": "i64Cle"
			}, {
				"": "i64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 211
				, "value": "i64Cgt"
			}, {
				"": "i64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 212
				, "value": "i64Cge"
			}, {
				"": "u64A"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 214
				, "value": "u64A"
			}, {
				"": "u64B"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 215
				, "value": "u64B"
			}, {
				"": "u64Pls"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 216
				, "value": "u64Pls"
			}, {
				"": "u64Neg"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 217
				, "value": "u64Neg"
			}, {
				"": "u64Cmt"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 218
				, "value": "u64Cmt"
			}, {
				"": "u64Add"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 219
				, "value": "u64Add"
			}, {
				"": "u64Sub"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 220
				, "value": "u64Sub"
			}, {
				"": "u64Mul"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 221
				, "value": "u64Mul"
			}, {
				"": "u64Div"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 222
				, "value": "u64Div"
			}, {
				"": "u64Mod"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 223
				, "value": "u64Mod"
			}, {
				"": "u64And"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 224
				, "value": "u64And"
			}, {
				"": "u64Ior"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 225
				, "value": "u64Ior"
			}, {
				"": "u64Xor"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 226
				, "value": "u64Xor"
			}, {
				"": "u64Shl"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 227
				, "value": "u64Shl"
			}, {
				"": "u64Shr"
				, "kind": ".variable"
				, "type": "uint64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 228
				, "value": "u64Shr"
			}, {
				"": "u64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 229
				, "value": "u64Not"
			}, {
				"": "u64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 230
				, "value": "u64Ceq"
			}, {
				"": "u64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 231
				, "value": "u64Cne"
			}, {
				"": "u64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 232
				, "value": "u64Clt"
			}, {
				"": "u64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 233
				, "value": "u64Cle"
			}, {
				"": "u64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 234
				, "value": "u64Cgt"
			}, {
				"": "u64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 235
				, "value": "u64Cge"
			}, {
				"": "f32A"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 237
				, "value": "f32A"
			}, {
				"": "f32B"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 238
				, "value": "f32B"
			}, {
				"": "f32Pls"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 239
				, "value": "f32Pls"
			}, {
				"": "f32Neg"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 240
				, "value": "f32Neg"
			}, {
				"": "f32Add"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 242
				, "value": "f32Add"
			}, {
				"": "f32Sub"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 243
				, "value": "f32Sub"
			}, {
				"": "f32Mul"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 244
				, "value": "f32Mul"
			}, {
				"": "f32Div"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 245
				, "value": "f32Div"
			}, {
				"": "f32Mod"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 246
				, "value": "f32Mod"
			}, {
				"": "f32Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 252
				, "value": "f32Not"
			}, {
				"": "f32Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 253
				, "value": "f32Ceq"
			}, {
				"": "f32Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 254
				, "value": "f32Cne"
			}, {
				"": "f32Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 255
				, "value": "f32Clt"
			}, {
				"": "f32Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 256
				, "value": "f32Cle"
			}, {
				"": "f32Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 257
				, "value": "f32Cgt"
			}, {
				"": "f32Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 258
				, "value": "f32Cge"
			}, {
				"": "f64A"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 260
				, "value": "f64A"
			}, {
				"": "f64B"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 261
				, "value": "f64B"
			}, {
				"": "f64Pls"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 262
				, "value": "f64Pls"
			}, {
				"": "f64Neg"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 263
				, "value": "f64Neg"
			}, {
				"": "f64Add"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 265
				, "value": "f64Add"
			}, {
				"": "f64Sub"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 266
				, "value": "f64Sub"
			}, {
				"": "f64Mul"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 267
				, "value": "f64Mul"
			}, {
				"": "f64Div"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 268
				, "value": "f64Div"
			}, {
				"": "f64Mod"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 269
				, "value": "f64Mod"
			}, {
				"": "f64Not"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 275
				, "value": "f64Not"
			}, {
				"": "f64Ceq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 276
				, "value": "f64Ceq"
			}, {
				"": "f64Cne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 277
				, "value": "f64Cne"
			}, {
				"": "f64Clt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 278
				, "value": "f64Clt"
			}, {
				"": "f64Cle"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 279
				, "value": "f64Cle"
			}, {
				"": "f64Cgt"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 280
				, "value": "f64Cgt"
			}, {
				"": "f64Cge"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 281
				, "value": "f64Cge"
			}, {
				"": "ptrA"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 283
				, "value": "ptrA"
			}, {
				"": "ptrB"
				, "kind": ".variable"
				, "type": "pointer"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 284
				, "value": "ptrB"
			}, {
				"": "ptrCeq"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 299
				, "value": "ptrCeq"
			}, {
				"": "ptrCne"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/lang/useOperator.ci"
				, "line": 300
				, "value": "ptrCne"
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 3
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 3
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 3
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 3
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 3
					, "stmt": [{
						"": "raise(raise.debug, 1, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 4
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 7
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 7
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 7
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 7
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 7
					, "stmt": [{
						"": "raise(raise.debug, 2, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 8
					}]
				}
			}, {
				"": "static if (0 == 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 11
				, "test": {
					"": "0 == 0"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 11
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 11
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 11
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 11
					, "stmt": [{
						"": "raise(raise.debug, 3, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 12
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 14
					, "stmt": [{
						"": "raise(raise.debug, 4, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 15
					}]
				}
			}, {
				"": "static if (0 != 0)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 18
				, "test": {
					"": "0 != 0"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 18
					, "left": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 18
						, "value": "0"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 18
						, "value": "0"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 18
					, "stmt": [{
						"": "raise(raise.debug, 5, \"0 != 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 19
					}]
				}
				, "else": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 21
					, "stmt": [{
						"": "raise(raise.debug, 6, \"0 == 0\", null);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 22
					}]
				}
			}, {
				"": "{...}"
				, "kind": "{}"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 25
				, "stmt": [{
					"": "t"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 26
					, "value": "t"
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 28
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 28
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 28
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 28
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 28
						, "stmt": [{
							"": "raise(raise.debug, 7, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 29
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 32
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 32
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 32
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 32
						, "stmt": [{
							"": "raise(raise.debug, 8, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 33
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 36
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 36
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 36
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 36
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 36
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 37
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 39
						, "stmt": [{
							"": "raise(raise.debug, 10, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 40
						}]
					}
				}, {
					"": "if (t != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 43
					, "test": {
						"": "t != 0"
						, "kind": "!="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 43
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 43
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 43
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 43
						, "stmt": [{
							"": "raise(raise.debug, 11, \"t != 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 44
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 46
						, "stmt": [{
							"": "raise(raise.debug, 12, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 47
						}]
					}
				}, {
					"": "if (t == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 50
					, "test": {
						"": "t == 0"
						, "kind": "=="
						, "type": "bool"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 50
						, "left": {
							"": "t"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 50
							, "value": "t"
						}
						, "right": {
							"": "0"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 50
							, "value": "0"
						}
					}
					, "then": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 50
						, "stmt": [{
							"": "raise(raise.debug, 9, \"t == 0\", t);"
							, "kind": ";"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 51
						}]
					}
					, "else": {
						"": "{...}"
						, "kind": "{}"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 53
						, "stmt": [{
							"": "if (t == 1)"
							, "kind": "if"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 53
							, "test": {
								"": "t == 1"
								, "kind": "=="
								, "type": "bool"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 53
								, "left": {
									"": "t"
									, "kind": ".variable"
									, "type": "int32"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 53
									, "value": "t"
								}
								, "right": {
									"": "1"
									, "kind": ".literal"
									, "type": "int32"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 53
									, "value": "1"
								}
							}
							, "then": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 53
								, "stmt": [{
									"": "raise(raise.debug, 10, \"t == 1\", t);"
									, "kind": ";"
									, "type": "void"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 54
								}]
							}
							, "else": {
								"": "{...}"
								, "kind": "{}"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 56
								, "stmt": [{
									"": "if (t == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "cmplStd/test/lang/stmt.if.ci"
									, "line": 56
									, "test": {
										"": "t == 2"
										, "kind": "=="
										, "type": "bool"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 56
										, "left": {
											"": "t"
											, "kind": ".variable"
											, "type": "int32"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 56
											, "value": "t"
										}
										, "right": {
											"": "2"
											, "kind": ".literal"
											, "type": "int32"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 56
											, "value": "2"
										}
									}
									, "then": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 56
										, "stmt": [{
											"": "raise(raise.debug, 10, \"t == 2\", t);"
											, "kind": ";"
											, "type": "void"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 57
										}]
									}
									, "else": {
										"": "{...}"
										, "kind": "{}"
										, "type": "void"
										, "file": "cmplStd/test/lang/stmt.if.ci"
										, "line": 59
										, "stmt": [{
											"": "if (t == 3)"
											, "kind": "if"
											, "type": "void"
											, "file": "cmplStd/test/lang/stmt.if.ci"
											, "line": 59
											, "test": {
												"": "t == 3"
												, "kind": "=="
												, "type": "bool"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 59
												, "left": {
													"": "t"
													, "kind": ".variable"
													, "type": "int32"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 59
													, "value": "t"
												}
												, "right": {
													"": "3"
													, "kind": ".literal"
													, "type": "int32"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 59
													, "value": "3"
												}
											}
											, "then": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 59
												, "stmt": [{
													"": "raise(raise.debug, 10, \"t == 3\", t);"
													, "kind": ";"
													, "type": "void"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 60
												}]
											}
											, "else": {
												"": "{...}"
												, "kind": "{}"
												, "type": "void"
												, "file": "cmplStd/test/lang/stmt.if.ci"
												, "line": 62
												, "stmt": [{
													"": "if (t == 4)"
													, "kind": "if"
													, "type": "void"
													, "file": "cmplStd/test/lang/stmt.if.ci"
													, "line": 62
													, "test": {
														"": "t == 4"
														, "kind": "=="
														, "type": "bool"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 62
														, "left": {
															"": "t"
															, "kind": ".variable"
															, "type": "int32"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 62
															, "value": "t"
														}
														, "right": {
															"": "4"
															, "kind": ".literal"
															, "type": "int32"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 62
															, "value": "4"
														}
													}
													, "then": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 62
														, "stmt": [{
															"": "raise(raise.debug, 10, \"t == 4\", t);"
															, "kind": ";"
															, "type": "void"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 63
														}]
													}
													, "else": {
														"": "{...}"
														, "kind": "{}"
														, "type": "void"
														, "file": "cmplStd/test/lang/stmt.if.ci"
														, "line": 65
														, "stmt": [{
															"": "if (t == 5)"
															, "kind": "if"
															, "type": "void"
															, "file": "cmplStd/test/lang/stmt.if.ci"
															, "line": 65
															, "test": {
																"": "t == 5"
																, "kind": "=="
																, "type": "bool"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 65
																, "left": {
																	"": "t"
																	, "kind": ".variable"
																	, "type": "int32"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 65
																	, "value": "t"
																}
																, "right": {
																	"": "5"
																	, "kind": ".literal"
																	, "type": "int32"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 65
																	, "value": "5"
																}
															}
															, "then": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 65
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t == 5\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 66
																}]
															}
															, "else": {
																"": "{...}"
																, "kind": "{}"
																, "type": "void"
																, "file": "cmplStd/test/lang/stmt.if.ci"
																, "line": 68
																, "stmt": [{
																	"": "raise(raise.debug, 10, \"t not in (0, 1, 2, 3, 4, 5)\", t);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "cmplStd/test/lang/stmt.if.ci"
																	, "line": 69
																}]
															}
														}]
													}
												}]
											}
										}]
									}
								}]
							}
						}]
					}
				}]
			}, {
				"": "static if ((typename(int64)) == null)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 73
				, "test": {
					"": "(typename(int64)) == null"
					, "kind": "=="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 73
					, "left": {
						"": "(typename(int64))"
						, "kind": "()"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 73
						, "args": [{
							"": "typename(int64)"
							, "kind": "()"
							, "type": "typename"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 73
							, "args": [{
								"": "int64"
								, "kind": ".variable"
								, "type": "typename"
								, "file": "cmplStd/test/lang/stmt.if.ci"
								, "line": 73
								, "value": "int64"
							}]
						}]
					}
					, "right": {
						"": "null"
						, "kind": ".variable"
						, "type": "pointer"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 73
						, "value": "null"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 73
					, "stmt": [{
						"": "error(\"integer is not declared\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 74
					}]
				}
			}, {
				"": "static if (typename(int64) != typename)"
				, "kind": "static if"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.if.ci"
				, "line": 77
				, "test": {
					"": "typename(int64) != typename"
					, "kind": "!="
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 77
					, "left": {
						"": "typename(int64)"
						, "kind": "()"
						, "type": "typename"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 77
						, "args": [{
							"": "int64"
							, "kind": ".variable"
							, "type": "typename"
							, "file": "cmplStd/test/lang/stmt.if.ci"
							, "line": 77
							, "value": "int64"
						}]
					}
					, "right": {
						"": "typename"
						, "kind": ".variable"
						, "type": "typename"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 77
						, "value": "typename"
					}
				}
				, "then": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.if.ci"
					, "line": 77
					, "stmt": [{
						"": "error(\"integer is not a type\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.if.ci"
						, "line": 78
					}]
				}
			}, {
				"": "for ( ; ; )"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 3
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 3
					, "stmt": [{
						"": "debug(\"for ( ; ; )\");"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 4
					}, {
						"": "break;"
						, "kind": "break"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 5
					}]
				}
			}, {
				"": "for (i; i < 2; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 8
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "value": "i"
				}
				, "test": {
					"": "i < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "2"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 8
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 8
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 8
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 8
					, "stmt": [{
						"": "debug(\"for (int i = 0; i < 2; i += 1)\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 9
					}]
				}
			}, {
				"": "forIdx"
				, "kind": ".variable"
				, "type": "int32"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 12
				, "value": "forIdx"
			}, {
				"": "for (forIdx := 0; forIdx < 2; forIdx := forIdx + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 13
				, "init": {
					"": "forIdx := 0"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "0"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "0"
					}
				}
				, "test": {
					"": "forIdx < 2"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "2"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "2"
					}
				}
				, "step": {
					"": "forIdx := forIdx + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "left": {
						"": "forIdx"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "value": "forIdx"
					}
					, "right": {
						"": "forIdx + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 13
						, "left": {
							"": "forIdx"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 13
							, "value": "forIdx"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 13
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 13
					, "stmt": [{
						"": "debug(\"for (forIdx = 0; forIdx < 2; forIdx += 1)\", forIdx);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 14
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 17
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 17
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 17
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 17
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 17
					, "stmt": [{
						"": "if (i < 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 18
						, "test": {
							"": "i < 2"
							, "kind": "<"
							, "type": "bool"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 18
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 18
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 18
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 18
							, "stmt": [{
								"": "continue;"
								, "kind": "continue"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 19
							}]
						}
					}, {
						"": "debug(\"for with continue\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 21
					}]
				}
			}, {
				"": "for (i; i < 7; i := i + 1)"
				, "kind": "for"
				, "type": "void"
				, "file": "cmplStd/test/lang/stmt.for.ci"
				, "line": 24
				, "init": {
					"": "i"
					, "kind": ".variable"
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "value": "i"
				}
				, "test": {
					"": "i < 7"
					, "kind": "<"
					, "type": "bool"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "7"
						, "kind": ".literal"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "7"
					}
				}
				, "step": {
					"": "i := i + 1"
					, "kind": ":="
					, "type": "int32"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "left": {
						"": "i"
						, "kind": ".variable"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "value": "i"
					}
					, "right": {
						"": "i + 1"
						, "kind": "+"
						, "type": "int32"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 24
						, "left": {
							"": "i"
							, "kind": ".variable"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 24
							, "value": "i"
						}
						, "right": {
							"": "1"
							, "kind": ".literal"
							, "type": "int32"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 24
							, "value": "1"
						}
					}
				}
				, "stmt": {
					"": "{...}"
					, "kind": "{}"
					, "type": "void"
					, "file": "cmplStd/test/lang/stmt.for.ci"
					, "line": 24
					, "stmt": [{
						"": "if (i > 2)"
						, "kind": "if"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 25
						, "test": {
							"": "i > 2"
							, "kind": ">"
							, "type": "bool"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 25
							, "left": {
								"": "i"
								, "kind": ".variable"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 25
								, "value": "i"
							}
							, "right": {
								"": "2"
								, "kind": ".literal"
								, "type": "int32"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 25
								, "value": "2"
							}
						}
						, "then": {
							"": "{...}"
							, "kind": "{}"
							, "type": "void"
							, "file": "cmplStd/test/lang/stmt.for.ci"
							, "line": 25
							, "stmt": [{
								"": "break;"
								, "kind": "break"
								, "type": "void"
								, "file": "cmplStd/test/lang/stmt.for.ci"
								, "line": 26
							}]
						}
					}, {
						"": "debug(\"for with break\", i);"
						, "kind": ";"
						, "type": "void"
						, "file": "cmplStd/test/lang/stmt.for.ci"
						, "line": 28
					}]
				}
			}, {
				"": "testMathFloor_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 3
				, "value": "testMathFloor_1"
			}, {
				"": "testMathFloor_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 4
				, "value": "testMathFloor_2"
			}, {
				"": "testMathFloor_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 5
				, "value": "testMathFloor_3"
			}, {
				"": "testMathFloor_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 6
				, "value": "testMathFloor_4"
			}, {
				"": "testMathFloor_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 7
				, "value": "testMathFloor_5"
			}, {
				"": "testMathFloor_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 8
				, "value": "testMathFloor_6"
			}, {
				"": "testMathSign_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 10
				, "value": "testMathSign_1F"
			}, {
				"": "testMathSign_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 11
				, "value": "testMathSign_2F"
			}, {
				"": "testMathSign_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 12
				, "value": "testMathSign_3F"
			}, {
				"": "testMathSign_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 13
				, "value": "testMathSign_1f"
			}, {
				"": "testMathSign_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 14
				, "value": "testMathSign_2f"
			}, {
				"": "testMathSign_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 15
				, "value": "testMathSign_3f"
			}, {
				"": "testMathAbs_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 17
				, "value": "testMathAbs_1F"
			}, {
				"": "testMathAbs_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 18
				, "value": "testMathAbs_2F"
			}, {
				"": "testMathAbs_3F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 19
				, "value": "testMathAbs_3F"
			}, {
				"": "testMathAbs_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 20
				, "value": "testMathAbs_1f"
			}, {
				"": "testMathAbs_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 21
				, "value": "testMathAbs_2f"
			}, {
				"": "testMathAbs_3f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 22
				, "value": "testMathAbs_3f"
			}, {
				"": "testMathMin_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 24
				, "value": "testMathMin_1f"
			}, {
				"": "testMathMax_2f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 25
				, "value": "testMathMax_2f"
			}, {
				"": "testMathMin_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 26
				, "value": "testMathMin_1F"
			}, {
				"": "testMathMax_2F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 27
				, "value": "testMathMax_2F"
			}, {
				"": "testMathClamp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 29
				, "value": "testMathClamp_1f"
			}, {
				"": "testMathClamp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 30
				, "value": "testMathClamp_1F"
			}, {
				"": "testMathLerp_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 32
				, "value": "testMathLerp_1f"
			}, {
				"": "testMathLerp_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 33
				, "value": "testMathLerp_1F"
			}, {
				"": "testMathSmooth_1f"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 35
				, "value": "testMathSmooth_1f"
			}, {
				"": "testMathSmooth_1F"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 36
				, "value": "testMathSmooth_1F"
			}, {
				"": "testMathMin_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 38
				, "value": "testMathMin_nan"
			}, {
				"": "testMathMin_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 39
				, "value": "testMathMin_1"
			}, {
				"": "testMathMax_nan"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 40
				, "value": "testMathMax_nan"
			}, {
				"": "testMathMax_9"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 41
				, "value": "testMathMax_9"
			}, {
				"": "testMathSum_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 43
				, "value": "testMathSum_0"
			}, {
				"": "testMathSum_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 44
				, "value": "testMathSum_1"
			}, {
				"": "testMathSum_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 45
				, "value": "testMathSum_3"
			}, {
				"": "testMathSum_55"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 46
				, "value": "testMathSum_55"
			}, {
				"": "testMathEval_x"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 48
				, "value": "testMathEval_x"
			}, {
				"": "testMathEval_0"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 49
				, "value": "testMathEval_0"
			}, {
				"": "testMathEval_1"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 50
				, "value": "testMathEval_1"
			}, {
				"": "testMathEval_2"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 51
				, "value": "testMathEval_2"
			}, {
				"": "testMathEval_3"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 52
				, "value": "testMathEval_3"
			}, {
				"": "testMathEval_4"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 53
				, "value": "testMathEval_4"
			}, {
				"": "testMathEval_5"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 54
				, "value": "testMathEval_5"
			}, {
				"": "testMathEval_6"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 55
				, "value": "testMathEval_6"
			}, {
				"": "testMathSin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 57
				, "value": "testMathSin_f64"
			}, {
				"": "testMathCos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 58
				, "value": "testMathCos_f64"
			}, {
				"": "testMathTan_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 59
				, "value": "testMathTan_f64"
			}, {
				"": "testMathSinh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 60
				, "value": "testMathSinh_f64"
			}, {
				"": "testMathCosh_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 61
				, "value": "testMathCosh_f64"
			}, {
				"": "testMathAsin_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 63
				, "value": "testMathAsin_f64"
			}, {
				"": "testMathAcos_f64"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 64
				, "value": "testMathAcos_f64"
			}, {
				"": "testMathCmp_f32"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 67
				, "value": "testMathCmp_f32"
			}, {
				"": "testMathCmp_f64"
				, "kind": ".variable"
				, "type": "bool"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 68
				, "value": "testMathCmp_f64"
			}, {
				"": "testMathAbsMod_f64_0a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 70
				, "value": "testMathAbsMod_f64_0a"
			}, {
				"": "testMathAbsMod_f64_0b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 71
				, "value": "testMathAbsMod_f64_0b"
			}, {
				"": "testMathAbsMod_f64_0c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 72
				, "value": "testMathAbsMod_f64_0c"
			}, {
				"": "testMathAbsMod_f64_9a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 74
				, "value": "testMathAbsMod_f64_9a"
			}, {
				"": "testMathAbsMod_f64_9b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 75
				, "value": "testMathAbsMod_f64_9b"
			}, {
				"": "testMathAbsMod_f64_9c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 76
				, "value": "testMathAbsMod_f64_9c"
			}, {
				"": "testMathAbsMod_f64_9d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 77
				, "value": "testMathAbsMod_f64_9d"
			}, {
				"": "testMathAbsMod_f64_8a"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 79
				, "value": "testMathAbsMod_f64_8a"
			}, {
				"": "testMathAbsMod_f64_8b"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 80
				, "value": "testMathAbsMod_f64_8b"
			}, {
				"": "testMathAbsMod_f64_8c"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 81
				, "value": "testMathAbsMod_f64_8c"
			}, {
				"": "testMathAbsMod_f64_8d"
				, "kind": ".variable"
				, "type": "float64"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 82
				, "value": "testMathAbsMod_f64_8d"
			}, {
				"": "testMathAbsMod_f32_0a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 84
				, "value": "testMathAbsMod_f32_0a"
			}, {
				"": "testMathAbsMod_f32_0b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 85
				, "value": "testMathAbsMod_f32_0b"
			}, {
				"": "testMathAbsMod_f32_0c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 86
				, "value": "testMathAbsMod_f32_0c"
			}, {
				"": "testMathAbsMod_f32_9a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 88
				, "value": "testMathAbsMod_f32_9a"
			}, {
				"": "testMathAbsMod_f32_9b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 89
				, "value": "testMathAbsMod_f32_9b"
			}, {
				"": "testMathAbsMod_f32_9c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 90
				, "value": "testMathAbsMod_f32_9c"
			}, {
				"": "testMathAbsMod_f32_9d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 91
				, "value": "testMathAbsMod_f32_9d"
			}, {
				"": "testMathAbsMod_f32_8a"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 93
				, "value": "testMathAbsMod_f32_8a"
			}, {
				"": "testMathAbsMod_f32_8b"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 94
				, "value": "testMathAbsMod_f32_8b"
			}, {
				"": "testMathAbsMod_f32_8c"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 95
				, "value": "testMathAbsMod_f32_8c"
			}, {
				"": "testMathAbsMod_f32_8d"
				, "kind": ".variable"
				, "type": "float32"
				, "file": "cmplStd/test/std/test.math.ci"
				, "line": 96
				, "value": "testMathAbsMod_f32_8d"
			}]
		}]
	}
	, "asm": [{
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411388
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411393
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411398
		, "size": 4
	}, {
		"instruction": "load.c32 36"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411402
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411407
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411412
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411416
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411417
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411422
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411423
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411424
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411428
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411429
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411434
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411435
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411436
		, "size": 4
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411440
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411449
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411453
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411454
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411459
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411460
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411461
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411465
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411466
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 411471
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411472
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411473
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411477
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411478
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 411482
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411483
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411487
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411492
		, "size": 4
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411496
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411501
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411505
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411509
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 411513
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411514
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411518
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411523
		, "size": 5
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 411528
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411529
		, "size": 4
	}, {
		"instruction": "load.f32 3.140000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 411533
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 411538
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 411543
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 411544
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411548
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 411552
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411557
		, "size": 4
	}, {
		"instruction": "load.f32 500.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 411561
		, "size": 5
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 411566
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411567
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411571
		, "size": 9
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 411580
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411581
		, "size": 4
	}, {
		"instruction": "load.f64 500.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 411585
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411594
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411598
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 411603
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 411608
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411612
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411617
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411621
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411626
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411630
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411635
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411639
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411644
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411648
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411649
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411653
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411654
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 411658
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411659
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411663
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411668
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411672
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411676
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411680
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411684
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411688
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411692
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411696
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411701
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411705
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411709
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411713
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 411717
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411718
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411722
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411726
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411730
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411734
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 411738
		, "size": 1
	}, {
		"instruction": "inc.i32(-2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411739
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411743
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411747
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411752
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 411754
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411758
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 411760
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411764
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411769
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411771
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411775
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411779
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 411781
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411785
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 411787
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411791
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411795
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411797
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411801
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411805
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411809
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 411811
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411815
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 411817
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411821
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411825
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411829
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411831
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411835
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411839
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411844
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411849
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411851
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 411853
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 411854
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411858
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 411860
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411864
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411866
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411868
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411872
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411876
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411880
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411884
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411886
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 411888
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 411889
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411893
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 411895
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411899
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411901
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411903
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411907
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411911
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411915
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411919
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411923
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411927
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411929
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 411931
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 411932
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411936
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 411938
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411942
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411944
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411946
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 411950
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411954
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411958
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 411963
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411968
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411970
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 411972
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 411973
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411977
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 411979
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 411983
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 411985
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 411987
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 411991
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411995
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 411999
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412003
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412005
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 412007
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412008
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412012
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412014
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412018
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412020
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412022
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412026
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412030
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412034
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412038
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412042
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412046
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412048
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 412050
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412051
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412055
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412057
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412061
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412063
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412065
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412069
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412073
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412077
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412082
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412087
		, "size": 5
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412092
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412096
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412097
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412098
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412102
		, "size": 5
	}, {
		"instruction": "inc.i32(+6)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412107
		, "size": 4
	}, {
		"instruction": "inc.i32(+2)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412111
		, "size": 4
	}, {
		"instruction": "inc.i32(+8)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412115
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412119
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412123
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412127
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412131
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412135
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412139
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412140
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412141
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412142
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412146
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412150
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412154
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412155
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412159
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412160
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412164
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412165
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412169
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412173
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412177
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412181
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412185
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412189
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412193
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412197
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412201
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412202
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412203
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412204
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412208
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412212
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412216
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412220
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412224
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412228
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412229
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412233
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412237
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412238
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412242
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 412246
		, "size": 1
	}, {
		"instruction": "inc.i32(-4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412247
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412251
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412255
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412260
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412262
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412266
		, "size": 2
	}, {
		"instruction": "jmp +47"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412268
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412272
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412277
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412279
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412283
		, "size": 2
	}, {
		"instruction": "jmp +28"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412285
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412289
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412294
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412296
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412300
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412302
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412306
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412311
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412313
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412315
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412317
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412321
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412326
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412328
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412332
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412334
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412338
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412343
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412345
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412347
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412351
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412353
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412357
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412362
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412364
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412366
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412370
		, "size": 2
	}, {
		"instruction": "jmp +9"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412372
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412376
		, "size": 5
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412381
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412383
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412387
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412391
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412393
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412397
		, "size": 2
	}, {
		"instruction": "jmp +44"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412399
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412403
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412407
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412409
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412413
		, "size": 2
	}, {
		"instruction": "jmp +26"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412415
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412419
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412423
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412425
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412429
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412431
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412435
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412439
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412441
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412443
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412445
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412449
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412453
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412455
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412459
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412461
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412465
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412469
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412471
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412473
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412477
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412479
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412483
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412487
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412489
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412491
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412495
		, "size": 2
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412497
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412501
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412505
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412507
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412511
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412515
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412519
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412521
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412525
		, "size": 2
	}, {
		"instruction": "jmp +56"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412527
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412531
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412535
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412539
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412541
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412545
		, "size": 2
	}, {
		"instruction": "jmp +34"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412547
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412551
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412555
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412559
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412561
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412565
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412567
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412571
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412575
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412579
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412581
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412583
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412585
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412589
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412593
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412597
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412601
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412603
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412607
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412609
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412613
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412617
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412621
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412623
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412625
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412629
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412631
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412635
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412639
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412643
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412645
		, "size": 2
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412647
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412651
		, "size": 2
	}, {
		"instruction": "jmp +12"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412653
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412657
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412661
		, "size": 4
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412665
		, "size": 2
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 412667
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412671
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412675
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412680
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412685
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412690
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412695
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412697
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412699
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412700
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412704
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412706
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412710
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412712
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412714
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412718
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412720
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412722
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412723
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412727
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412729
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412733
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412735
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412737
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412741
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412743
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412745
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412746
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412750
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412752
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412756
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412758
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412760
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412764
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412768
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412773
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412778
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412780
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412782
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412783
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412787
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412789
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412793
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412795
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412797
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412801
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412806
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412808
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412810
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412811
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412815
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412817
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412821
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412823
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412825
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 412829
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412834
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412836
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412838
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412839
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412843
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412845
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412849
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412851
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412853
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412857
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412861
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412865
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412869
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412873
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412877
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412879
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412881
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412882
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412886
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412888
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412892
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412894
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412896
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412900
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412902
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412904
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412905
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412909
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412911
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412915
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412917
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412919
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412923
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412925
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412927
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412928
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412932
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412934
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412938
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412940
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412942
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 412946
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412950
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412954
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412958
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412960
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412962
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412963
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412967
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412969
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412973
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 412975
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 412977
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 412981
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412985
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412987
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 412989
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 412990
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 412994
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 412996
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413000
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413002
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413004
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413008
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413012
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413014
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413016
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413017
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413021
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413023
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413027
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413029
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413031
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413035
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413039
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413043
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413047
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413051
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413055
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413059
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413063
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413067
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413071
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413073
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413075
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413076
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413080
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413082
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413086
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413088
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413090
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413094
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413096
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413098
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413099
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413103
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413105
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413109
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413111
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413113
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413117
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413119
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413121
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413122
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413126
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413128
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413132
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413134
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413136
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413140
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413144
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413148
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413152
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413156
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413160
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413164
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413166
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413168
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413169
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413173
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413175
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413179
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413181
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413183
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413187
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413191
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413195
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413197
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413199
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413200
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413204
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413206
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413210
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413212
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413214
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413218
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413222
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413226
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413228
		, "size": 2
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 413230
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413231
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413235
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413237
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413241
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413243
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413245
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413249
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413253
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413257
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413262
		, "size": 5
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413267
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413272
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413277
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413279
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413281
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413282
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413286
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413288
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413292
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413294
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413296
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413300
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413302
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413304
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413305
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413309
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413311
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413315
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413317
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413319
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413323
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413325
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413327
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413328
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413332
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413334
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413338
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413340
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413342
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413346
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413350
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413355
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413360
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413362
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413364
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413365
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413369
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413371
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413375
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413377
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413379
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413383
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413388
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413390
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413392
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413393
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413397
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413399
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413403
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413405
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413407
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413411
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413416
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413418
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413420
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413421
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413425
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413427
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413431
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413433
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413435
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413439
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413443
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413447
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413451
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413455
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413459
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413461
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413463
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413464
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413468
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413470
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413474
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413476
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413478
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413482
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413484
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413486
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413487
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413491
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413493
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413497
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413499
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413501
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413505
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413507
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413509
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413510
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413514
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413516
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413520
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413522
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413524
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413528
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413532
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413536
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413540
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413542
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413544
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413545
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413549
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413551
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413555
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413557
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413559
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413563
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413567
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413569
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413571
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413572
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413576
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413578
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413582
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413584
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413586
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413590
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413594
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413596
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413598
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413599
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413603
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413605
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413609
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413611
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413613
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413617
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413621
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413625
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413629
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413633
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413637
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413641
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413645
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413649
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413653
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413655
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413657
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413658
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413662
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413664
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413668
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413670
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413672
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413676
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413678
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413680
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413681
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413685
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413687
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413691
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413693
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413695
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413699
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413701
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413703
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413704
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413708
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413710
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413714
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413716
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413718
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413722
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413726
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413730
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413734
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413738
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413742
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413746
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413748
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413750
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413751
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413755
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413757
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413761
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413763
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413765
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413769
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413773
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413777
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413779
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413781
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413782
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413786
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413788
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413792
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413794
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413796
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 413800
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413804
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413808
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413810
		, "size": 2
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 413812
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 413813
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413817
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 413819
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 413823
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 413825
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 413827
		, "size": 4
	}, {
		"instruction": "inc.i32(-1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 413831
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413835
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 413839
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413844
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 413848
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413853
		, "size": 4
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 413857
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413862
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 413866
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413871
		, "size": 4
	}, {
		"instruction": "load.f32 5.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 413875
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413880
		, "size": 4
	}, {
		"instruction": "load.f64 100.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413884
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413893
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413897
		, "size": 4
	}, {
		"instruction": "load.f64 1.800000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413901
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 413910
		, "size": 1
	}, {
		"instruction": "load.f64 32.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413911
		, "size": 9
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 413920
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413921
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413925
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413934
		, "size": 4
	}, {
		"instruction": "load.f64 2.718282"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 413938
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 413947
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413951
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 413955
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413956
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 413960
		, "size": 4
	}, {
		"instruction": "f64.2f32"
		, "name": "f64.2f32"
		, "code": "0x8c"
		, "offs": 413964
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413965
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413969
		, "size": 5
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 413974
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413976
		, "size": 4
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413980
		, "size": 5
	}, {
		"instruction": "b32.shl 0x02"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 413985
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413987
		, "size": 4
	}, {
		"instruction": "load.c32 31"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 413991
		, "size": 5
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 413996
		, "size": 2
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 413998
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414002
		, "size": 4
	}, {
		"instruction": "b32.shl 0x08"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 414006
		, "size": 2
	}, {
		"instruction": "load.c32 63488"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414008
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 414013
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414014
		, "size": 4
	}, {
		"instruction": "b32.shl 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 414018
		, "size": 2
	}, {
		"instruction": "load.c32 2016"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414020
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 414025
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 414026
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414027
		, "size": 4
	}, {
		"instruction": "b32.sar 0x03"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 414031
		, "size": 2
	}, {
		"instruction": "b32.and 0x1f"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 414033
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 414035
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414036
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414040
		, "size": 4
	}, {
		"instruction": "b32.shl 0x10"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 414044
		, "size": 2
	}, {
		"instruction": "load.c32 16711680"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414046
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 414051
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414052
		, "size": 4
	}, {
		"instruction": "b32.shl 0x08"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 414056
		, "size": 2
	}, {
		"instruction": "load.c32 65280"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414058
		, "size": 5
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 414063
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 414064
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414065
		, "size": 4
	}, {
		"instruction": "b32.and 0xff"
		, "name": "b32."
		, "code": "0x3f"
		, "offs": 414069
		, "size": 2
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 414071
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414072
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414076
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414080
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414085
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414090
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414094
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414098
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414102
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414107
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414112
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414116
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414120
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414124
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414125
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414130
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414134
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414138
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414142
		, "size": 5
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414147
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414152
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414156
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414160
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414164
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414169
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414174
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414178
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414182
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414186
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414187
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414192
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414196
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414200
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414204
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414209
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414214
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414218
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414222
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414226
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414231
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414236
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414240
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414244
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414248
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414249
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414254
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414258
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414262
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414266
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414271
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414276
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414280
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414284
		, "size": 4
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414288
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414293
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414298
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414302
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414306
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414310
		, "size": 1
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414311
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414316
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414320
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414324
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414328
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 414337
		, "size": 1
	}, {
		"instruction": "nfc(42)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414338
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414342
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414346
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414350
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 414359
		, "size": 1
	}, {
		"instruction": "nfc(43)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414360
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414364
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414368
		, "size": 4
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414372
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 414381
		, "size": 1
	}, {
		"instruction": "nfc(44)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414382
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414386
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414390
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414394
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 414398
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414399
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 414403
		, "size": 1
	}, {
		"instruction": "nfc(45)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414404
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414408
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414412
		, "size": 9
	}, {
		"instruction": "nfc(46)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414421
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414425
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414429
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414433
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 414437
		, "size": 1
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414438
		, "size": 9
	}, {
		"instruction": "nfc(47)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414447
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414451
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414455
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414459
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 414463
		, "size": 1
	}, {
		"instruction": "nfc(48)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414464
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414468
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 414472
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 414476
		, "size": 9
	}, {
		"instruction": "nfc(49)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414485
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414489
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414493
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414497
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 414502
		, "size": 1
	}, {
		"instruction": "nfc(34)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414503
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414507
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414511
		, "size": 4
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414515
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 414520
		, "size": 1
	}, {
		"instruction": "nfc(35)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414521
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414525
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414529
		, "size": 4
	}, {
		"instruction": "load.f32 4.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414533
		, "size": 5
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 414538
		, "size": 1
	}, {
		"instruction": "nfc(36)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414539
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414543
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414547
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414551
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 414555
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414556
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 414560
		, "size": 1
	}, {
		"instruction": "nfc(37)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414561
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414565
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414569
		, "size": 5
	}, {
		"instruction": "nfc(38)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414574
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414578
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414582
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414586
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 414590
		, "size": 1
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414591
		, "size": 5
	}, {
		"instruction": "nfc(39)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414596
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414600
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414604
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414608
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 414612
		, "size": 1
	}, {
		"instruction": "nfc(40)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414613
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414617
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414621
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 414625
		, "size": 5
	}, {
		"instruction": "nfc(41)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414630
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414634
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414638
		, "size": 4
	}, {
		"instruction": "nfc(26)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414642
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414646
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414650
		, "size": 4
	}, {
		"instruction": "nfc(27)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414654
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414658
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414662
		, "size": 4
	}, {
		"instruction": "nfc(28)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414666
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414670
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414674
		, "size": 4
	}, {
		"instruction": "nfc(29)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414678
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414682
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414686
		, "size": 4
	}, {
		"instruction": "nfc(30)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414690
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414694
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414698
		, "size": 4
	}, {
		"instruction": "nfc(31)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414702
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414706
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414710
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414714
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414715
		, "size": 5
	}, {
		"instruction": "nfc(24)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414720
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414724
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414728
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414732
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414733
		, "size": 5
	}, {
		"instruction": "nfc(25)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414738
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414742
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414746
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 414750
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414751
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414752
		, "size": 5
	}, {
		"instruction": "nfc(32)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414757
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 414761
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414762
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 414766
		, "size": 4
	}, {
		"instruction": "i32.2i64"
		, "name": "i32.2i64"
		, "code": "0x5b"
		, "offs": 414770
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 414771
		, "size": 1
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414772
		, "size": 5
	}, {
		"instruction": "nfc(33)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414777
		, "size": 4
	}, {
		"instruction": "i64.2i32"
		, "name": "i64.2i32"
		, "code": "0x6a"
		, "offs": 414781
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414782
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414786
		, "size": 5
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414791
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414796
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414800
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414804
		, "size": 5
	}, {
		"instruction": "load.c32 80"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414809
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414814
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414818
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414822
		, "size": 5
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414827
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414832
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414836
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414840
		, "size": 5
	}, {
		"instruction": "load.c32 820"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 414845
		, "size": 5
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414850
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414854
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 414858
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414867
		, "size": 4
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 414871
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 414880
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414884
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414889
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414894
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414898
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414902
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414907
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414912
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414916
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414920
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414925
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414930
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414934
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414938
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414943
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414948
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414952
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414956
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414961
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414966
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414970
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414974
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414979
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 414984
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 414988
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414992
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 414997
		, "size": 5
	}, {
		"instruction": "nfc(12)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415002
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415006
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 415010
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415019
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415023
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415028
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415032
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415037
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415041
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415046
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415051
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415055
		, "size": 4
	}, {
		"instruction": "load.i64"
		, "name": "load.i64"
		, "code": "0x29"
		, "offs": 415059
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415060
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415064
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415068
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415072
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415076
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415080
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415085
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415089
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415094
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415098
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415103
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415108
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415112
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415117
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415121
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415126
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415130
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415135
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415139
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415144
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415148
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415153
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415158
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415162
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415167
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415171
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415175
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415179
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415183
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415187
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415191
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415195
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415199
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 415203
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415207
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415211
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415215
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415219
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415224
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415228
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415233
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415237
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415242
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415246
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415251
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415255
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415260
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415264
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415269
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415273
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415278
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415282
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415287
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415291
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415296
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415300
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415305
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415309
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415314
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415318
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415323
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415327
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415332
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415336
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415341
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415345
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415350
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415354
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415359
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415363
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415368
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415372
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415377
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415381
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415386
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415391
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415395
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415400
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415405
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415409
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415414
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415419
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415423
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415428
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415433
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415437
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415442
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415447
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415451
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415456
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415461
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415465
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415470
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415475
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415479
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415484
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415489
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415493
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415498
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415503
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415507
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415512
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415517
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415521
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415526
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415531
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415535
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415540
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415545
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415549
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415554
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415559
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415563
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415568
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415573
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415577
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415582
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415587
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415591
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415596
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415601
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415605
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415610
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415615
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415619
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415624
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415629
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415633
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415638
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415642
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415647
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415651
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415656
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415660
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415665
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415669
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415674
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415678
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415683
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415687
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415692
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415696
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415701
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415705
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415710
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415714
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415719
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415723
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415728
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415732
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415737
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415741
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415746
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415750
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415755
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415759
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415764
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415768
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415773
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415777
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415782
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415786
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415791
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415795
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415800
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415804
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415809
		, "size": 5
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415814
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415818
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415823
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415827
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415832
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415836
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415841
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415845
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415849
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415853
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415857
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415858
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415862
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415867
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 415871
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415880
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 415884
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 415885
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415889
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415894
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415898
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 415902
		, "size": 9
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415911
		, "size": 4
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 415915
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 415919
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 415920
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415921
		, "size": 4
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 415925
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 415929
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415930
		, "size": 5
	}, {
		"instruction": "nfc(7)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 415935
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415939
		, "size": 4
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 415943
		, "size": 9
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415952
		, "size": 4
	}, {
		"instruction": "inc.i32(+4)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 415956
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 415960
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 415961
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 415962
		, "size": 4
	}, {
		"instruction": "inc.i32(+12)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 415966
		, "size": 4
	}, {
		"instruction": "store.i64"
		, "name": "store.i64"
		, "code": "0x2e"
		, "offs": 415970
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 415971
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415972
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 415977
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415982
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 415987
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 415988
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 415992
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 415996
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416001
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416005
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416006
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416011
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416016
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416020
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416021
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416025
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416029
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416034
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416038
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416039
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416044
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416049
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416053
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416054
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416058
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416062
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416066
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416070
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416071
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416076
		, "size": 5
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416081
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416085
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416086
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416090
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416094
		, "size": 1
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416095
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416100
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 416105
		, "size": 1
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 416106
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416110
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416114
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416119
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416123
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416127
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416132
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416136
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416140
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416145
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416149
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416153
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416158
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416162
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416166
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416171
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416175
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416179
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416184
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416188
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416192
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416197
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416201
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416205
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416210
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416214
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416218
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416223
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416227
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416231
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416236
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416240
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416244
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416249
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416253
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416257
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416262
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416266
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416270
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416275
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416279
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416283
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416288
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416292
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416296
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416301
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416305
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416309
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416314
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416318
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416322
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416327
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416331
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416335
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416340
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416344
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416348
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416353
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416357
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416361
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416365
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416369
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416373
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 416377
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416378
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416382
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416386
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 416390
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416391
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416395
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416399
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416403
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416407
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416411
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416415
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416419
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416423
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416427
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416431
		, "size": 4
	}, {
		"instruction": "nfc(5)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416435
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416439
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416443
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416447
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 416451
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416452
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416456
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416460
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 416464
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416465
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416469
		, "size": 4
	}, {
		"instruction": "nfc(3)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416473
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416477
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416481
		, "size": 4
	}, {
		"instruction": "nfc(4)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416485
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416489
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416493
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416497
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416501
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416505
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416509
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 416513
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416514
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416518
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416522
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 416526
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416527
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416531
		, "size": 4
	}, {
		"instruction": "nfc(2)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 416535
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416539
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416543
		, "size": 4
	}, {
		"instruction": "inc.i32(+40)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416547
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 416551
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416552
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416556
		, "size": 4
	}, {
		"instruction": "inc.i32(+32)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 416560
		, "size": 4
	}, {
		"instruction": "load.i32"
		, "name": "load.i32"
		, "code": "0x28"
		, "offs": 416564
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416565
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416569
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416570
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416574
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416579
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416583
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416588
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416592
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416597
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416601
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416602
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416606
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416611
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416615
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416620
		, "size": 4
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416624
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416629
		, "size": 4
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416633
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416638
		, "size": 4
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416642
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416647
		, "size": 4
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416651
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416656
		, "size": 4
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416660
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416665
		, "size": 4
	}, {
		"instruction": "load.c32 13"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416669
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416674
		, "size": 4
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416678
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416683
		, "size": 4
	}, {
		"instruction": "load.c32 15"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416687
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416692
		, "size": 4
	}, {
		"instruction": "load.c32 16"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416696
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416701
		, "size": 4
	}, {
		"instruction": "load.c32 17"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416705
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416710
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416714
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416719
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416723
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416728
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 416732
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416736
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416740
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416745
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416749
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416750
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416755
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416756
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416757
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416762
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416763
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416764
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416769
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416770
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416771
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416776
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416777
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416782
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416787
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416788
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416789
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416794
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416795
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416800
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416805
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416806
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416811
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416816
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416817
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416822
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416827
		, "size": 1
	}, {
		"instruction": "load.c32 65535"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416828
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416833
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416837
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416838
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416843
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 416844
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416845
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416850
		, "size": 1
	}, {
		"instruction": "load.c32 255"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416851
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416856
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416861
		, "size": 1
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416862
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 416867
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416871
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416876
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416881
		, "size": 1
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 416882
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416887
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416892
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416893
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416898
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416899
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416904
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 416905
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416906
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416911
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416912
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416917
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416918
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416923
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 416924
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416925
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416930
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416931
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416936
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416937
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416942
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 416943
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416944
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416949
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416950
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416955
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416956
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416957
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416962
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416963
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416968
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416969
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416974
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 416975
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416976
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 416981
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416982
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416987
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416988
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 416993
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 416994
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 416995
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 416996
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417001
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417002
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417007
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417008
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417013
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 417014
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417015
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417020
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417021
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417026
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417027
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417032
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 417033
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417034
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417035
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417040
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417041
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417046
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417047
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417052
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 417053
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417054
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417059
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417060
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417065
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417066
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417071
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 417072
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417073
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417074
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417079
		, "size": 1
	}, {
		"instruction": "load.c32 97"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417080
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417085
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417090
		, "size": 1
	}, {
		"instruction": "load.c32 98"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417091
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417096
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417101
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417102
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417107
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417108
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417113
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417114
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417119
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 417120
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417121
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417126
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417127
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417132
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 417133
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417134
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417139
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417140
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417145
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417146
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417151
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 417152
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417153
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417158
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417159
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417164
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417165
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417170
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 417171
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417172
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417177
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417178
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417183
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417184
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417189
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 417190
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417191
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417196
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417197
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417202
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417203
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417208
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 417209
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417210
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417215
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417216
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417221
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417222
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417227
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 417228
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417229
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417234
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417235
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417240
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417241
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417246
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 417247
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417248
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417253
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417254
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417259
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417260
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417265
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 417266
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417267
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417272
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417273
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417278
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417279
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417284
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 417285
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417286
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417291
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417292
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417297
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 417298
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 417302
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417303
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417308
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417309
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417314
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 417315
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 417319
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417320
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417325
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417326
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417331
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 417332
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417333
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417334
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417339
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417340
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417345
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417346
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417351
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 417352
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417353
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417358
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417359
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417364
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417365
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417370
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 417371
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417372
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417373
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417378
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417379
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417384
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417385
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417390
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 417391
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417392
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417397
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417398
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417403
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417404
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417409
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 417410
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417411
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417412
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417417
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417418
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417423
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417424
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417429
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 417430
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417431
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417436
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417437
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417442
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417443
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417448
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 417449
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417450
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417451
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417456
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417457
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417462
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417467
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417468
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417473
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417478
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417479
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417484
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417485
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417490
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417491
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417496
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 417497
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417498
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417503
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417504
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417509
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 417510
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417511
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417516
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417517
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417522
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417523
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417528
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 417529
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417530
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417535
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417536
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417541
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417542
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417547
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 417548
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417549
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417554
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417555
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417560
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417561
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417566
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 417567
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417568
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417573
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417574
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417579
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417580
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417585
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 417586
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417587
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417592
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417593
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417598
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417599
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417604
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 417605
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417606
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417611
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417612
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417617
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417618
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417623
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 417624
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417625
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417630
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417631
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417636
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417637
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417642
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 417643
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417644
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417649
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417650
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417655
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417656
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417661
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 417662
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417663
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417668
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417669
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417674
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 417675
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 417679
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417680
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417685
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417686
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417691
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 417692
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 417696
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417697
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417702
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417703
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417708
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 417709
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417710
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417711
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417716
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417717
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417722
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417723
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417728
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 417729
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417730
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417735
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417736
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417741
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417742
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417747
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 417748
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417749
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417750
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417755
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417756
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417761
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417762
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417767
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 417768
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417769
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417774
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417775
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417780
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417781
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417786
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 417787
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417788
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417789
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417794
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417795
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417800
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417801
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417806
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 417807
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417808
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417813
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417814
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417819
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417820
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417825
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 417826
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 417827
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417828
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417833
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417834
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417839
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417844
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 417845
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417850
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417855
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417856
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417861
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417862
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417867
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417868
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417873
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 417874
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417875
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417880
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417881
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417886
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 417887
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417888
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417893
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417894
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417899
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417900
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417905
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 417906
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417907
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417912
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417913
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417918
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417919
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417924
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 417925
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417926
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417931
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417932
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417937
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417938
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417943
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 417944
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417945
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417950
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417951
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417956
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417957
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417962
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 417963
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417964
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417969
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417970
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417975
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417976
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417981
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 417982
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417983
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 417988
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417989
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 417994
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 417995
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418000
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 418001
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418002
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418007
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418008
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418013
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418014
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418019
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 418020
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418021
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418026
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418027
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418032
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418033
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418038
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 418039
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418040
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418045
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418046
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418051
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 418052
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 418056
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418057
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418062
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418063
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418068
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 418069
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 418073
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418074
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418079
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418080
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418085
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 418086
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418087
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418088
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418093
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418094
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418099
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418100
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418105
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 418106
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418107
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418112
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418113
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418118
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418119
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418124
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 418125
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418126
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418127
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418132
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418133
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418138
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418139
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418144
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 418145
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418146
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418151
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418152
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418157
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418158
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418163
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 418164
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418165
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418166
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418171
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418172
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418177
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418178
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418183
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 418184
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418185
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418190
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418191
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418196
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418197
		, "size": 5
	}, {
		"instruction": "load.i8"
		, "name": "load.i8"
		, "code": "0x26"
		, "offs": 418202
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 418203
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418204
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418205
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418210
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418211
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418216
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418221
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418222
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418227
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418232
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418233
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418238
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418239
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418244
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418245
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418250
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 418251
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418252
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418257
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418258
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418263
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 418264
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418265
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418270
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418271
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418276
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418277
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418282
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 418283
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418284
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418289
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418290
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418295
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418296
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418301
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 418302
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418303
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418308
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418309
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418314
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418315
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418320
		, "size": 1
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 418321
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418322
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418327
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418328
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418333
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418334
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418339
		, "size": 1
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 418340
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418341
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418346
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418347
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418352
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418353
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418358
		, "size": 1
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 418359
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418360
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418365
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418366
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418371
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418372
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418377
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 418378
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418379
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418384
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418385
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418390
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418391
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418396
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 418397
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418398
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418403
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418404
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418409
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418410
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418415
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 418416
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418417
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418422
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418423
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418428
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 418429
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 418433
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418434
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418439
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418440
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418445
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 418446
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 418450
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418451
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418456
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418457
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418462
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 418463
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418464
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418465
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418470
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418471
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418476
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418477
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418482
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 418483
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418484
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418489
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418490
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418495
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418496
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418501
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 418502
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418503
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418504
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418509
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418510
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418515
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418516
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418521
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 418522
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418523
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418528
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418529
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418534
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418535
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418540
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 418541
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418542
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418543
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418548
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418549
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418554
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418555
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418560
		, "size": 1
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 418561
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418562
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418567
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418568
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418573
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418574
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418579
		, "size": 1
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 418580
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418581
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418582
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418587
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418588
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418593
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418598
		, "size": 1
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418599
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418604
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418609
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418610
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418615
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418616
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418621
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418622
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418627
		, "size": 1
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 418628
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418629
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418634
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418635
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418640
		, "size": 1
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 418641
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418642
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418647
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418648
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418653
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418654
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418659
		, "size": 1
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 418660
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418661
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418666
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418667
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418672
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418673
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418678
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 418679
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418680
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418685
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418686
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418691
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418692
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418697
		, "size": 1
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 418698
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418699
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418704
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418705
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418710
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418711
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418716
		, "size": 1
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 418717
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418718
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418723
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418724
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418729
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418730
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418735
		, "size": 1
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 418736
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418737
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418742
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418743
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418748
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418749
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418754
		, "size": 1
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 418755
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418756
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418761
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418762
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418767
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418768
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418773
		, "size": 1
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 418774
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418775
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418780
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418781
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418786
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418787
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418792
		, "size": 1
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 418793
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418794
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418799
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418800
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418805
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 418806
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 418810
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418811
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418816
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418817
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418822
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 418823
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 418827
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418828
		, "size": 5
	}, {
		"instruction": "store.i16"
		, "name": "store.i16"
		, "code": "0x2c"
		, "offs": 418833
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418834
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418839
		, "size": 1
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 418840
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418841
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418842
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418847
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418848
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418853
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418854
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418859
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 418860
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418861
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418866
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418867
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418872
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418873
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418878
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 418879
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418880
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418881
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418886
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418887
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418892
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418893
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418898
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 418899
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418900
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418905
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418906
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418911
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418912
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418917
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 418918
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418919
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418920
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418925
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418926
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418931
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418932
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418937
		, "size": 1
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 418938
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418939
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418944
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418945
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418950
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418951
		, "size": 5
	}, {
		"instruction": "load.i16"
		, "name": "load.i16"
		, "code": "0x27"
		, "offs": 418956
		, "size": 1
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 418957
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 418958
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 418959
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 418964
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418965
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 418970
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 418974
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 418979
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 418983
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 418987
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 418991
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 418995
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 418996
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419000
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 419004
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419005
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419009
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419013
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 419017
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419018
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419022
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419026
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 419030
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419031
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419035
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419039
		, "size": 4
	}, {
		"instruction": "mul.i32"
		, "name": "mul.i32"
		, "code": "0x53"
		, "offs": 419043
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419044
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419048
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419052
		, "size": 4
	}, {
		"instruction": "div.i32"
		, "name": "div.i32"
		, "code": "0x54"
		, "offs": 419056
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419057
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419061
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419065
		, "size": 4
	}, {
		"instruction": "mod.i32"
		, "name": "mod.i32"
		, "code": "0x55"
		, "offs": 419069
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419070
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419074
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419078
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 419082
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419083
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419087
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419091
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 419095
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419096
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419100
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419104
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 419108
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419109
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419113
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419117
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 419121
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419122
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419126
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419130
		, "size": 4
	}, {
		"instruction": "sar.b32"
		, "name": "sar.b32"
		, "code": "0x3c"
		, "offs": 419134
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419135
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419139
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 419143
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419144
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419145
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419150
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419151
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419155
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 419159
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419160
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419165
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419166
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419170
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 419174
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419175
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419176
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419181
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419182
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419186
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 419190
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419191
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419196
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419197
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419201
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 419205
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419206
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419207
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419212
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419213
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419217
		, "size": 4
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 419221
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419222
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419227
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419228
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419232
		, "size": 4
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 419236
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419237
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419238
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419243
		, "size": 1
	}, {
		"instruction": "load.c32 96"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419244
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419249
		, "size": 4
	}, {
		"instruction": "load.c32 42"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 419253
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419258
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419262
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419266
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419270
		, "size": 4
	}, {
		"instruction": "neg.i32"
		, "name": "neg.i32"
		, "code": "0x50"
		, "offs": 419274
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419275
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419279
		, "size": 4
	}, {
		"instruction": "cmt.b32"
		, "name": "cmt.b32"
		, "code": "0x30"
		, "offs": 419283
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419284
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419288
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419292
		, "size": 4
	}, {
		"instruction": "add.i32"
		, "name": "add.i32"
		, "code": "0x51"
		, "offs": 419296
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419297
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419301
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419305
		, "size": 4
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 419309
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419310
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419314
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419318
		, "size": 4
	}, {
		"instruction": "mul.u32"
		, "name": "mul.u32"
		, "code": "0x33"
		, "offs": 419322
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419323
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419327
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419331
		, "size": 4
	}, {
		"instruction": "div.u32"
		, "name": "div.u32"
		, "code": "0x34"
		, "offs": 419335
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419336
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419340
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419344
		, "size": 4
	}, {
		"instruction": "mod.u32"
		, "name": "mod.u32"
		, "code": "0x35"
		, "offs": 419348
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419349
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419353
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419357
		, "size": 4
	}, {
		"instruction": "and.b32"
		, "name": "and.b32"
		, "code": "0x31"
		, "offs": 419361
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419362
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419366
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419370
		, "size": 4
	}, {
		"instruction": "or.b32"
		, "name": "or.b32"
		, "code": "0x32"
		, "offs": 419374
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419375
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419379
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419383
		, "size": 4
	}, {
		"instruction": "xor.b32"
		, "name": "xor.b32"
		, "code": "0x36"
		, "offs": 419387
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419388
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419392
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419396
		, "size": 4
	}, {
		"instruction": "shl.b32"
		, "name": "shl.b32"
		, "code": "0x3a"
		, "offs": 419400
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419401
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419405
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419409
		, "size": 4
	}, {
		"instruction": "shr.b32"
		, "name": "shr.b32"
		, "code": "0x3b"
		, "offs": 419413
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 419414
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419418
		, "size": 4
	}, {
		"instruction": "i32.2bool"
		, "name": "i32.2bool"
		, "code": "0x5a"
		, "offs": 419422
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419423
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419424
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419429
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419430
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419434
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 419438
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419439
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419444
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419445
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419449
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 419453
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419454
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419455
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419460
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419461
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419465
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 419469
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419470
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419475
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419476
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419480
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 419484
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419485
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419486
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419491
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419492
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419496
		, "size": 4
	}, {
		"instruction": "cgt.u32"
		, "name": "cgt.u32"
		, "code": "0x39"
		, "offs": 419500
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419501
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419506
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419507
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419511
		, "size": 4
	}, {
		"instruction": "clt.u32"
		, "name": "clt.u32"
		, "code": "0x38"
		, "offs": 419515
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419516
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419517
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419522
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 419523
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419532
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 419536
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419545
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419549
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419553
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419557
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 419561
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419562
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419566
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 419570
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419571
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419575
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419579
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 419583
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419584
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419588
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419592
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 419596
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419597
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419601
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419605
		, "size": 4
	}, {
		"instruction": "mul.i64"
		, "name": "mul.i64"
		, "code": "0x63"
		, "offs": 419609
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419610
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419614
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419618
		, "size": 4
	}, {
		"instruction": "div.i64"
		, "name": "div.i64"
		, "code": "0x64"
		, "offs": 419622
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419623
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419627
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419631
		, "size": 4
	}, {
		"instruction": "mod.i64"
		, "name": "mod.i64"
		, "code": "0x65"
		, "offs": 419635
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419636
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419640
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419644
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 419648
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419649
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419653
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419657
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 419661
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419662
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419666
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419670
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 419674
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419675
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419679
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419683
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 419687
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419688
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419692
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419696
		, "size": 4
	}, {
		"instruction": "sar.b64"
		, "name": "sar.b64"
		, "code": "0x4c"
		, "offs": 419700
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419701
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419705
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 419709
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419710
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419711
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419716
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419717
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419721
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 419725
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419726
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419731
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419732
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419736
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 419740
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419741
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419742
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419747
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419748
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419752
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 419756
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419757
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419762
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419763
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419767
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 419771
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419772
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419773
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419778
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419779
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419783
		, "size": 4
	}, {
		"instruction": "cgt.i64"
		, "name": "cgt.i64"
		, "code": "0x69"
		, "offs": 419787
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419788
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419793
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419794
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419798
		, "size": 4
	}, {
		"instruction": "clt.i64"
		, "name": "clt.i64"
		, "code": "0x68"
		, "offs": 419802
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419803
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419804
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 419809
		, "size": 1
	}, {
		"instruction": "load.c64 96"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 419810
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419819
		, "size": 4
	}, {
		"instruction": "load.c64 42"
		, "name": "load.c64"
		, "code": "0x1d"
		, "offs": 419823
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419832
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419836
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419840
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419844
		, "size": 4
	}, {
		"instruction": "neg.i64"
		, "name": "neg.i64"
		, "code": "0x60"
		, "offs": 419848
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419849
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419853
		, "size": 4
	}, {
		"instruction": "cmt.b64"
		, "name": "cmt.b64"
		, "code": "0x40"
		, "offs": 419857
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419858
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419862
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419866
		, "size": 4
	}, {
		"instruction": "add.i64"
		, "name": "add.i64"
		, "code": "0x61"
		, "offs": 419870
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419871
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419875
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419879
		, "size": 4
	}, {
		"instruction": "sub.i64"
		, "name": "sub.i64"
		, "code": "0x62"
		, "offs": 419883
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419884
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419888
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419892
		, "size": 4
	}, {
		"instruction": "mul.u64"
		, "name": "mul.u64"
		, "code": "0x43"
		, "offs": 419896
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419897
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419901
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419905
		, "size": 4
	}, {
		"instruction": "div.u64"
		, "name": "div.u64"
		, "code": "0x44"
		, "offs": 419909
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419910
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419914
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419918
		, "size": 4
	}, {
		"instruction": "mod.u64"
		, "name": "mod.u64"
		, "code": "0x45"
		, "offs": 419922
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419923
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419927
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419931
		, "size": 4
	}, {
		"instruction": "and.b64"
		, "name": "and.b64"
		, "code": "0x41"
		, "offs": 419935
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419936
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419940
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419944
		, "size": 4
	}, {
		"instruction": "or.b64"
		, "name": "or.b64"
		, "code": "0x42"
		, "offs": 419948
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419949
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419953
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419957
		, "size": 4
	}, {
		"instruction": "xor.b64"
		, "name": "xor.b64"
		, "code": "0x46"
		, "offs": 419961
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419962
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419966
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419970
		, "size": 4
	}, {
		"instruction": "shl.b64"
		, "name": "shl.b64"
		, "code": "0x4a"
		, "offs": 419974
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419975
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419979
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 419983
		, "size": 4
	}, {
		"instruction": "shr.b64"
		, "name": "shr.b64"
		, "code": "0x4b"
		, "offs": 419987
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 419988
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 419992
		, "size": 4
	}, {
		"instruction": "i64.2bool"
		, "name": "i64.2bool"
		, "code": "0x6b"
		, "offs": 419996
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 419997
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 419998
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420003
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420004
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420008
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 420012
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420013
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420018
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420019
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420023
		, "size": 4
	}, {
		"instruction": "ceq.i64"
		, "name": "ceq.i64"
		, "code": "0x67"
		, "offs": 420027
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420028
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420029
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420034
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420035
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420039
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 420043
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420044
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420049
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420050
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420054
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 420058
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420059
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420060
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420065
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420066
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420070
		, "size": 4
	}, {
		"instruction": "cgt.u64"
		, "name": "cgt.u64"
		, "code": "0x49"
		, "offs": 420074
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420075
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420080
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420081
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420085
		, "size": 4
	}, {
		"instruction": "clt.u64"
		, "name": "clt.u64"
		, "code": "0x48"
		, "offs": 420089
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420090
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420091
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420096
		, "size": 1
	}, {
		"instruction": "load.f32 96.300003"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 420097
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420102
		, "size": 4
	}, {
		"instruction": "load.f32 42.139999"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 420106
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420111
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420115
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420119
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420123
		, "size": 4
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 420127
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420128
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420132
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420136
		, "size": 4
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 420140
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420141
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420145
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420149
		, "size": 4
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 420153
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420154
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420158
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420162
		, "size": 4
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 420166
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420167
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420171
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420175
		, "size": 4
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 420179
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420180
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420184
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420188
		, "size": 4
	}, {
		"instruction": "mod.f32"
		, "name": "mod.f32"
		, "code": "0x75"
		, "offs": 420192
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420193
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420197
		, "size": 4
	}, {
		"instruction": "f32.2bool"
		, "name": "f32.2bool"
		, "code": "0x7c"
		, "offs": 420201
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420202
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420203
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420208
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420209
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420213
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 420217
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420218
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420223
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420224
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420228
		, "size": 4
	}, {
		"instruction": "ceq.f32"
		, "name": "ceq.f32"
		, "code": "0x77"
		, "offs": 420232
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420233
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420234
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420239
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420240
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420244
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 420248
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420249
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420254
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420255
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420259
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 420263
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420264
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420265
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420270
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420271
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420275
		, "size": 4
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 420279
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420280
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420285
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420286
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420290
		, "size": 4
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 420294
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420295
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420296
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420301
		, "size": 1
	}, {
		"instruction": "load.f64 96.300000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420302
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420311
		, "size": 4
	}, {
		"instruction": "load.f64 42.140000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420315
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420324
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420328
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420332
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420336
		, "size": 4
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 420340
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420341
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420345
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420349
		, "size": 4
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 420353
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420354
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420358
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420362
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 420366
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420367
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420371
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420375
		, "size": 4
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 420379
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420380
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420384
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420388
		, "size": 4
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 420392
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420393
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420397
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420401
		, "size": 4
	}, {
		"instruction": "mod.f64"
		, "name": "mod.f64"
		, "code": "0x85"
		, "offs": 420405
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420406
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420410
		, "size": 4
	}, {
		"instruction": "f64.2bool"
		, "name": "f64.2bool"
		, "code": "0x8d"
		, "offs": 420414
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420415
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420416
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420421
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420422
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420426
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 420430
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420431
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420436
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420437
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420441
		, "size": 4
	}, {
		"instruction": "ceq.f64"
		, "name": "ceq.f64"
		, "code": "0x87"
		, "offs": 420445
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420446
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420447
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420452
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420453
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420457
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 420461
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420462
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420467
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420468
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420472
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 420476
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420477
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420478
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420483
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420484
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420488
		, "size": 4
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 420492
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420493
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420498
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420499
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 420503
		, "size": 4
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 420507
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420508
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420509
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420514
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420515
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420520
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420524
		, "size": 5
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420529
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420533
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420537
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420541
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420542
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420547
		, "size": 1
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420548
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 420552
		, "size": 4
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 420556
		, "size": 1
	}, {
		"instruction": "not.b32"
		, "name": "not.b32"
		, "code": "0x0b"
		, "offs": 420557
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420558
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 420563
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420564
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420565
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420569
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 420570
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420574
		, "size": 1
	}, {
		"instruction": "load.f64 3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420575
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420584
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 420589
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420590
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420594
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420598
		, "size": 1
	}, {
		"instruction": "load.f64 3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420599
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420608
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 420613
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420614
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420618
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420622
		, "size": 1
	}, {
		"instruction": "load.f64 3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420623
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420632
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 420637
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420638
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420642
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420646
		, "size": 1
	}, {
		"instruction": "load.f64 -3.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420647
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420656
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 420661
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420662
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420666
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420670
		, "size": 1
	}, {
		"instruction": "load.f64 -3.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420671
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420680
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 420685
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420686
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420690
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420694
		, "size": 1
	}, {
		"instruction": "load.f64 -3.600000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420695
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 420704
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 420709
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420710
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420714
		, "size": 4
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420718
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420727
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420729
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 420730
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420731
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420733
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 420734
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 420735
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 420736
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420738
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 420742
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420743
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420747
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420748
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420750
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 420751
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420752
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420754
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 420755
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 420756
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 420757
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420759
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 420763
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420764
		, "size": 4
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420768
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420777
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420779
		, "size": 1
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 420780
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(1)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420781
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420783
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 420784
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 420785
		, "size": 1
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 420786
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 420788
		, "size": 4
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 420792
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420793
		, "size": 4
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 420797
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420802
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420804
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 420805
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420806
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420808
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 420809
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 420810
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 420811
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 420813
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420814
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420818
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420819
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420821
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 420822
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420823
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420825
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 420826
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 420827
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 420828
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 420830
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420831
		, "size": 4
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 420835
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420840
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420842
		, "size": 1
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 420843
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420844
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420846
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 420847
		, "size": 1
	}, {
		"instruction": "sub.i32"
		, "name": "sub.i32"
		, "code": "0x52"
		, "offs": 420848
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 420849
		, "size": 2
	}, {
		"instruction": "i32.2f64"
		, "name": "i32.2f64"
		, "code": "0x5d"
		, "offs": 420851
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420852
		, "size": 4
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420856
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420865
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420867
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 420868
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420869
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420873
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 420875
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420876
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420880
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 420882
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420884
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420888
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420889
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420891
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 420892
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420893
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420897
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 420899
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420900
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420904
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 420906
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420908
		, "size": 4
	}, {
		"instruction": "load.f64 -0.900000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 420912
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420921
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 420923
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 420924
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420925
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420929
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 420931
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420932
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 420936
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 420938
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420940
		, "size": 4
	}, {
		"instruction": "load.f32 0.200000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 420944
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420949
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420951
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 420952
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420953
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420957
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 420959
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420960
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420964
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 420966
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 420968
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420969
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420973
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420974
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 420976
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 420977
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 420978
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420982
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 420984
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 420985
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 420989
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 420991
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 420993
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 420994
		, "size": 4
	}, {
		"instruction": "load.f32 -0.900000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 420998
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421003
		, "size": 2
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421005
		, "size": 1
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 421006
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 421007
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421011
		, "size": 2
	}, {
		"instruction": "neg.f32"
		, "name": "neg.f32"
		, "code": "0x70"
		, "offs": 421013
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 421014
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421018
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 421020
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 421022
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421023
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421027
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421032
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421037
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421039
		, "size": 2
	}, {
		"instruction": "clt.f32"
		, "name": "clt.f32"
		, "code": "0x78"
		, "offs": 421041
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 421042
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421046
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 421048
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421052
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 421054
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421056
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 421060
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421061
		, "size": 4
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421065
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421070
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421075
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421077
		, "size": 2
	}, {
		"instruction": "cgt.f32"
		, "name": "cgt.f32"
		, "code": "0x79"
		, "offs": 421079
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 421080
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421084
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 421086
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421090
		, "size": 2
	}, {
		"instruction": "set.x32 sp(2)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 421092
		, "size": 2
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421094
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 421098
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421099
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421103
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421112
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421121
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421123
		, "size": 2
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 421125
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 421126
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421130
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 421132
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421136
		, "size": 2
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 421138
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421140
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421144
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421148
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421157
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421166
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421168
		, "size": 2
	}, {
		"instruction": "cgt.f64"
		, "name": "cgt.f64"
		, "code": "0x89"
		, "offs": 421170
		, "size": 1
	}, {
		"instruction": "jz +10"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 421171
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421175
		, "size": 2
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 421177
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421181
		, "size": 2
	}, {
		"instruction": "set.x64 sp(4)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 421183
		, "size": 2
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421185
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421189
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421193
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421194
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421199
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421200
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421205
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421210
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421211
		, "size": 4
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 421215
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421216
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421220
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421221
		, "size": 9
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421230
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421231
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421240
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421245
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421246
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421250
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421254
		, "size": 1
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421255
		, "size": 2
	}, {
		"instruction": "load.f32 0.500000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421257
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421262
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421267
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 421269
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 421270
		, "size": 1
	}, {
		"instruction": "add.f32"
		, "name": "add.f32"
		, "code": "0x71"
		, "offs": 421271
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 421272
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 421274
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421275
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421279
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421280
		, "size": 2
	}, {
		"instruction": "load.f64 0.500000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421282
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421291
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421300
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 421302
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 421303
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 421304
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 421305
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421307
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421311
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421312
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421313
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(2)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421318
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 421320
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421321
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421326
		, "size": 2
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 421328
		, "size": 1
	}, {
		"instruction": "div.f32"
		, "name": "div.f32"
		, "code": "0x74"
		, "offs": 421329
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421330
		, "size": 1
	}, {
		"instruction": "load.f32 1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421331
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421336
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421341
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421342
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421346
		, "size": 2
	}, {
		"instruction": "dup.x32 sp(1)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421348
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 421350
		, "size": 1
	}, {
		"instruction": "load.f32 3.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421351
		, "size": 5
	}, {
		"instruction": "load.f32 2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 421356
		, "size": 5
	}, {
		"instruction": "dup.x32 sp(3)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 421361
		, "size": 2
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 421363
		, "size": 1
	}, {
		"instruction": "sub.f32"
		, "name": "sub.f32"
		, "code": "0x72"
		, "offs": 421364
		, "size": 1
	}, {
		"instruction": "mul.f32"
		, "name": "mul.f32"
		, "code": "0x73"
		, "offs": 421365
		, "size": 1
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 421366
		, "size": 2
	}, {
		"instruction": "set.x32 sp(1)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 421368
		, "size": 2
	}, {
		"instruction": "f32.2f64"
		, "name": "f32.2f64"
		, "code": "0x7d"
		, "offs": 421370
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421371
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 421375
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421376
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421385
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 421387
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421388
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421397
		, "size": 2
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 421399
		, "size": 1
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 421400
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421401
		, "size": 1
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421402
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421411
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421416
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421417
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421421
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421423
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 421425
		, "size": 1
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421426
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421435
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421444
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 421446
		, "size": 1
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 421447
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 421448
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 421449
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 421451
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421453
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421457
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421458
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421462
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421463
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421465
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421470
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421471
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421474
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421478
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421482
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421491
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421500
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421509
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421518
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421527
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421536
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421545
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421554
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 421563
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421568
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421572
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421573
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421575
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421580
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421581
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421584
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421588
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421592
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421593
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421597
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421598
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421600
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421605
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421606
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421609
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421613
		, "size": 4
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421617
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421626
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421635
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421644
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421653
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421662
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421671
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421680
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421689
		, "size": 9
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 421698
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421703
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421707
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421708
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421710
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421715
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(22, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421716
		, "size": 3
	}, {
		"instruction": "inc.sp(-88)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421719
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421723
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421727
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421728
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421732
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421733
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421735
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421740
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(4, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421741
		, "size": 3
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421744
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421748
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421752
		, "size": 9
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 421761
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421766
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421770
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421771
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421773
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421778
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421779
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421782
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421786
		, "size": 4
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421790
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421799
		, "size": 9
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 421808
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421813
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421817
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421818
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421820
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421825
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(8, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421826
		, "size": 3
	}, {
		"instruction": "inc.sp(-32)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421829
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421833
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421837
		, "size": 9
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421846
		, "size": 9
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421855
		, "size": 9
	}, {
		"instruction": "load.f64 7.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421864
		, "size": 9
	}, {
		"instruction": "load.f64 6.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421873
		, "size": 9
	}, {
		"instruction": "load.f64 5.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421882
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421891
		, "size": 9
	}, {
		"instruction": "load.f64 3.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421900
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421909
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421918
		, "size": 9
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 421927
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421932
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421936
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421937
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421939
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421944
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(24, 2)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421945
		, "size": 3
	}, {
		"instruction": "inc.sp(-96)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421948
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421952
		, "size": 4
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421956
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421965
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 421969
		, "size": 1
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 421970
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 421974
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 421975
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 421979
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 421981
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 421986
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(6, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 421987
		, "size": 3
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 421990
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 421994
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 421998
		, "size": 9
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422007
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422011
		, "size": 9
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 422020
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422024
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 422033
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 422034
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422035
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 422039
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422043
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422052
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422054
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422063
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422065
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 422074
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 422075
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 422076
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 422077
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 422078
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422080
		, "size": 4
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 422084
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422088
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422097
		, "size": 2
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422099
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422101
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(2)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422110
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422112
		, "size": 9
	}, {
		"instruction": "dup.x64 sp(6)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422121
		, "size": 2
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422123
		, "size": 9
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 422132
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 422133
		, "size": 1
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 422134
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 422135
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 422136
		, "size": 2
	}, {
		"instruction": "mul.f64"
		, "name": "mul.f64"
		, "code": "0x83"
		, "offs": 422138
		, "size": 1
	}, {
		"instruction": "add.f64"
		, "name": "add.f64"
		, "code": "0x81"
		, "offs": 422139
		, "size": 1
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 422140
		, "size": 2
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422142
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422146
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422155
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422164
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422173
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422182
		, "size": 9
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 422191
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 422196
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422200
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 422201
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422205
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422207
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422212
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(16, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 422213
		, "size": 3
	}, {
		"instruction": "inc.sp(-64)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422216
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422220
		, "size": 4
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422224
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422233
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422242
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422251
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422260
		, "size": 9
	}, {
		"instruction": "load.f64 1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422269
		, "size": 9
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 422278
		, "size": 5
	}, {
		"instruction": "load.sp(+4)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 422283
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422287
		, "size": 1
	}, {
		"instruction": "load.m64 <?>"
		, "name": "load.m64"
		, "code": "0x21"
		, "offs": 422288
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(4)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422292
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422294
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422299
		, "size": 1
	}, {
		"instruction": "mov.x64 sp(18, 4)"
		, "name": "mov.x64"
		, "code": "0x17"
		, "offs": 422300
		, "size": 3
	}, {
		"instruction": "inc.sp(-72)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422303
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422307
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422311
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422312
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422321
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 422330
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 422331
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422332
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422337
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422338
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422342
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422346
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422347
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422356
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 422365
		, "size": 1
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422366
		, "size": 2
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422368
		, "size": 1
	}, {
		"instruction": "clt.f64"
		, "name": "clt.f64"
		, "code": "0x88"
		, "offs": 422369
		, "size": 1
	}, {
		"instruction": "jz +11"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 422370
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422374
		, "size": 2
	}, {
		"instruction": "neg.f64"
		, "name": "neg.f64"
		, "code": "0x80"
		, "offs": 422376
		, "size": 1
	}, {
		"instruction": "jmp +6"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 422377
		, "size": 4
	}, {
		"instruction": "dup.x64 sp(0)"
		, "name": "dup.x64"
		, "code": "0x11"
		, "offs": 422381
		, "size": 2
	}, {
		"instruction": "set.x64 sp(2)"
		, "name": "set.x64"
		, "code": "0x14"
		, "offs": 422383
		, "size": 2
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 422385
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422390
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422395
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422396
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422400
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422404
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422405
		, "size": 9
	}, {
		"instruction": "load.f64 4.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422414
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 422423
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422424
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422429
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422430
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422434
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422438
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422439
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422448
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 422457
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422458
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422463
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422464
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422468
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422472
		, "size": 1
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422473
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422482
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 422491
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422492
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422497
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422498
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422502
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422506
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422507
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422516
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422521
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422522
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422526
		, "size": 4
	}, {
		"instruction": "load.f64 3.141593"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422530
		, "size": 9
	}, {
		"instruction": "load.f64 2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422539
		, "size": 9
	}, {
		"instruction": "div.f64"
		, "name": "div.f64"
		, "code": "0x84"
		, "offs": 422548
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422549
		, "size": 1
	}, {
		"instruction": "load.f64 0.200000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422550
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422559
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422564
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422565
		, "size": 4
	}, {
		"instruction": "sub.f64"
		, "name": "sub.f64"
		, "code": "0x82"
		, "offs": 422569
		, "size": 1
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422570
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 422574
		, "size": 1
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 422575
		, "size": 5
	}, {
		"instruction": "load.f32 0.000012"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 422580
		, "size": 5
	}, {
		"instruction": "load.f32 0.000010"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 422585
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422590
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422595
		, "size": 1
	}, {
		"instruction": "inc.sp(-12)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422596
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 422600
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 422601
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422602
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 422607
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 422608
		, "size": 1
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422609
		, "size": 9
	}, {
		"instruction": "load.f64 0.000012"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422618
		, "size": 9
	}, {
		"instruction": "load.f64 0.000010"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422627
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422636
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422641
		, "size": 1
	}, {
		"instruction": "inc.sp(-24)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422642
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 422646
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 422647
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422648
		, "size": 5
	}, {
		"instruction": "store.i8"
		, "name": "store.i8"
		, "code": "0x2b"
		, "offs": 422653
		, "size": 1
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422654
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422655
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422664
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422673
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422678
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422679
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422683
		, "size": 4
	}, {
		"instruction": "load.z128"
		, "name": "load.z128"
		, "code": "0x1b"
		, "offs": 422687
		, "size": 1
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422688
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422697
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422702
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422703
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422707
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422711
		, "size": 1
	}, {
		"instruction": "load.f64 -10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422712
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422721
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422730
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422735
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422736
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422740
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422744
		, "size": 1
	}, {
		"instruction": "load.f64 19.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422745
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422754
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422763
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422768
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422769
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422773
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422777
		, "size": 1
	}, {
		"instruction": "load.f64 9.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422778
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422787
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422796
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422801
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422802
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422806
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422810
		, "size": 1
	}, {
		"instruction": "load.f64 -1.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422811
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422820
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422829
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422834
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422835
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422839
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422843
		, "size": 1
	}, {
		"instruction": "load.f64 -11.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422844
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422853
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422862
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422867
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422868
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422872
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422876
		, "size": 1
	}, {
		"instruction": "load.f64 18.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422877
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422886
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422895
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422900
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422901
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422905
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422909
		, "size": 1
	}, {
		"instruction": "load.f64 8.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422910
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422919
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422928
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422933
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422934
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422938
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422942
		, "size": 1
	}, {
		"instruction": "load.f64 -2.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422943
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422952
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422961
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422966
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 422967
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 422971
		, "size": 4
	}, {
		"instruction": "load.z64"
		, "name": "load.z64"
		, "code": "0x1a"
		, "offs": 422975
		, "size": 1
	}, {
		"instruction": "load.f64 -12.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422976
		, "size": 9
	}, {
		"instruction": "load.f64 10.000000"
		, "name": "load.f64"
		, "code": "0x8f"
		, "offs": 422985
		, "size": 9
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 422994
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 422999
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423000
		, "size": 4
	}, {
		"instruction": "store.m64 <?>"
		, "name": "store.m64"
		, "code": "0x23"
		, "offs": 423004
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423008
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423009
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423014
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423019
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423024
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423025
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423029
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423033
		, "size": 1
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423034
		, "size": 1
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423035
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423040
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423045
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423046
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423050
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423054
		, "size": 1
	}, {
		"instruction": "load.f32 -10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423055
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423060
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423065
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423070
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423071
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423075
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423079
		, "size": 1
	}, {
		"instruction": "load.f32 19.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423080
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423085
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423090
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423095
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423096
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423100
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423104
		, "size": 1
	}, {
		"instruction": "load.f32 9.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423105
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423110
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423115
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423120
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423121
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423125
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423129
		, "size": 1
	}, {
		"instruction": "load.f32 -1.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423130
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423135
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423140
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423145
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423146
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423150
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423154
		, "size": 1
	}, {
		"instruction": "load.f32 -11.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423155
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423160
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423165
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423170
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423171
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423175
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423179
		, "size": 1
	}, {
		"instruction": "load.f32 18.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423180
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423185
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423190
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423195
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423196
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423200
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423204
		, "size": 1
	}, {
		"instruction": "load.f32 8.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423205
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423210
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423215
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423220
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423221
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423225
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423229
		, "size": 1
	}, {
		"instruction": "load.f32 -2.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423230
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423235
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423240
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423245
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423246
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423250
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423254
		, "size": 1
	}, {
		"instruction": "load.f32 -12.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423255
		, "size": 5
	}, {
		"instruction": "load.f32 10.000000"
		, "name": "load.f32"
		, "code": "0x7f"
		, "offs": 423260
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423265
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423270
		, "size": 1
	}, {
		"instruction": "inc.sp(-8)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423271
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 423275
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423279
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423283
		, "size": 1
	}, {
		"instruction": "load.c32 1024"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423284
		, "size": 5
	}, {
		"instruction": "nfc(14)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423289
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423293
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423297
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423301
		, "size": 4
	}, {
		"instruction": "load.c32 160"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423305
		, "size": 5
	}, {
		"instruction": "nfc(15)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423310
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423314
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423318
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423322
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423323
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423327
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423331
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423335
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423336
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423340
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423344
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423348
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423349
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423353
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423357
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423361
		, "size": 1
	}, {
		"instruction": "nfc(13)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423362
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423366
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423370
		, "size": 5
	}, {
		"instruction": "load.c32 26"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423375
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423380
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423385
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423386
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423391
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423396
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423401
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423405
		, "size": 5
	}, {
		"instruction": "load.c32 27"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423410
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423415
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423420
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423421
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423426
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423431
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423436
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423440
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423445
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423450
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423455
		, "size": 4
	}, {
		"instruction": "nfc(16)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423459
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423463
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423467
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423472
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423473
		, "size": 5
	}, {
		"instruction": "nfc(6)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423478
		, "size": 4
	}, {
		"instruction": "nfc(14)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423482
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423486
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423490
		, "size": 5
	}, {
		"instruction": "load.c32 32"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423495
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423500
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423505
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423506
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423511
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423516
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423521
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423525
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423530
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423535
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423540
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423541
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423546
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423551
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423556
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 423560
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423564
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 423569
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423571
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423576
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423577
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 423581
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423585
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 423590
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423592
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423596
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423597
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 423601
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423605
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423610
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423615
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423616
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 423620
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423624
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423629
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423634
		, "size": 1
	}, {
		"instruction": "inc.sp(-20)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423635
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 423639
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423643
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 423648
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423650
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423655
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423656
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 423660
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423664
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 423669
		, "size": 2
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423671
		, "size": 5
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423676
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423677
		, "size": 4
	}, {
		"instruction": "load.m128 <?>"
		, "name": "load.m128"
		, "code": "0x22"
		, "offs": 423681
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423685
		, "size": 5
	}, {
		"instruction": "set.x32 sp(4)"
		, "name": "set.x32"
		, "code": "0x13"
		, "offs": 423690
		, "size": 2
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423692
		, "size": 4
	}, {
		"instruction": "call"
		, "name": "call"
		, "code": "0x02"
		, "offs": 423696
		, "size": 1
	}, {
		"instruction": "inc.sp(-16)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 423697
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423701
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423706
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423711
		, "size": 5
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423716
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423721
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423726
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423731
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423736
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423740
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423745
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423750
		, "size": 5
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423755
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423760
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423765
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423770
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423775
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423779
		, "size": 5
	}, {
		"instruction": "load.c32 22"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423784
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423789
		, "size": 5
	}, {
		"instruction": "load.c32 6"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423794
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423799
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423804
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423809
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423814
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423818
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423822
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 423823
		, "size": 1
	}, {
		"instruction": "jz +43"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 423824
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423828
		, "size": 5
	}, {
		"instruction": "load.c32 29"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423833
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423838
		, "size": 5
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423843
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423848
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423853
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423858
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423863
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423867
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423871
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 423872
		, "size": 1
	}, {
		"instruction": "jnz +43"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 423873
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423877
		, "size": 5
	}, {
		"instruction": "load.c32 33"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423882
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423887
		, "size": 5
	}, {
		"instruction": "load.c32 8"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423892
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423897
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423902
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423907
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423912
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 423916
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 423920
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 423921
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 423922
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423926
		, "size": 5
	}, {
		"instruction": "load.c32 37"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423931
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423936
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423941
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423946
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423951
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423956
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 423961
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 423965
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423969
		, "size": 5
	}, {
		"instruction": "load.c32 40"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423974
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423979
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 423984
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423989
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423994
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 423999
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424004
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424008
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424012
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 424013
		, "size": 1
	}, {
		"instruction": "jnz +47"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 424014
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424018
		, "size": 5
	}, {
		"instruction": "load.c32 44"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424023
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424028
		, "size": 5
	}, {
		"instruction": "load.c32 11"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424033
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424038
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424043
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424048
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424053
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424057
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424061
		, "size": 5
	}, {
		"instruction": "load.c32 47"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424066
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424071
		, "size": 5
	}, {
		"instruction": "load.c32 12"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424076
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424081
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424086
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424091
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424096
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424100
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424104
		, "size": 1
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 424105
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 424106
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424110
		, "size": 5
	}, {
		"instruction": "load.c32 51"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424115
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424120
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424125
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424130
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424135
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424140
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424145
		, "size": 4
	}, {
		"instruction": "jmp +328"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424149
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424153
		, "size": 4
	}, {
		"instruction": "load.c32 1"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424157
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 424162
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 424163
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424167
		, "size": 5
	}, {
		"instruction": "load.c32 54"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424172
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424177
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424182
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424187
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424192
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424197
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424202
		, "size": 4
	}, {
		"instruction": "jmp +271"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424206
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424210
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424214
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 424219
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 424220
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424224
		, "size": 5
	}, {
		"instruction": "load.c32 57"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424229
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424234
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424239
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424244
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424249
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424254
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424259
		, "size": 4
	}, {
		"instruction": "jmp +214"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424263
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424267
		, "size": 4
	}, {
		"instruction": "load.c32 3"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424271
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 424276
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 424277
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424281
		, "size": 5
	}, {
		"instruction": "load.c32 60"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424286
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424291
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424296
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424301
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424306
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424311
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424316
		, "size": 4
	}, {
		"instruction": "jmp +157"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424320
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424324
		, "size": 4
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424328
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 424333
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 424334
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424338
		, "size": 5
	}, {
		"instruction": "load.c32 63"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424343
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424348
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424353
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424358
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424363
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424368
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424373
		, "size": 4
	}, {
		"instruction": "jmp +100"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424377
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424381
		, "size": 4
	}, {
		"instruction": "load.c32 5"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424385
		, "size": 5
	}, {
		"instruction": "ceq.i32"
		, "name": "ceq.i32"
		, "code": "0x57"
		, "offs": 424390
		, "size": 1
	}, {
		"instruction": "jz +47"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 424391
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424395
		, "size": 5
	}, {
		"instruction": "load.c32 66"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424400
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424405
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424410
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424415
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424420
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424425
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424430
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424434
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424438
		, "size": 5
	}, {
		"instruction": "load.c32 69"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424443
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424448
		, "size": 5
	}, {
		"instruction": "load.c32 10"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424453
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424458
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424463
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424468
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424473
		, "size": 4
	}, {
		"instruction": "jmp +43"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424477
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424481
		, "size": 5
	}, {
		"instruction": "load.c32 4"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424486
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424491
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424496
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424497
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424502
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424507
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424512
		, "size": 4
	}, {
		"instruction": "jmp +8"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424516
		, "size": 4
	}, {
		"instruction": "jmp -39"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424520
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424524
		, "size": 1
	}, {
		"instruction": "jmp +42"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424525
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424529
		, "size": 5
	}, {
		"instruction": "load.c32 9"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424534
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424539
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424544
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424545
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424550
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 424555
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424559
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 424563
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 424567
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424569
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 424574
		, "size": 1
	}, {
		"instruction": "jnz -46"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 424575
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 424579
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424583
		, "size": 1
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 424584
		, "size": 4
	}, {
		"instruction": "jmp +51"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424588
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424592
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424597
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424602
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424607
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424608
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424613
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424618
		, "size": 5
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424623
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424627
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 424631
		, "size": 4
	}, {
		"instruction": "store.m32 <?>"
		, "name": "store.m32"
		, "code": "0x24"
		, "offs": 424635
		, "size": 4
	}, {
		"instruction": "load.m32 <?>"
		, "name": "load.m32"
		, "code": "0x20"
		, "offs": 424639
		, "size": 4
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424643
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 424648
		, "size": 1
	}, {
		"instruction": "jnz -57"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 424649
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424653
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424654
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 424658
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424660
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 424665
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 424666
		, "size": 4
	}, {
		"instruction": "jmp +38"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424670
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424674
		, "size": 5
	}, {
		"instruction": "load.c32 21"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424679
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424684
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424689
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424690
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424695
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 424700
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424704
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 424708
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 424712
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424714
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 424719
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 424720
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 424724
		, "size": 4
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424728
		, "size": 1
	}, {
		"instruction": "jmp +58"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424729
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 424733
		, "size": 2
	}, {
		"instruction": "load.c32 2"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424735
		, "size": 5
	}, {
		"instruction": "cgt.i32"
		, "name": "cgt.i32"
		, "code": "0x59"
		, "offs": 424740
		, "size": 1
	}, {
		"instruction": "jz +8"
		, "name": "jz"
		, "code": "0x06"
		, "offs": 424741
		, "size": 4
	}, {
		"instruction": "jmp +54"
		, "name": "jmp"
		, "code": "0x04"
		, "offs": 424745
		, "size": 4
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424749
		, "size": 5
	}, {
		"instruction": "load.c32 28"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424754
		, "size": 5
	}, {
		"instruction": "load.c32 14"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424759
		, "size": 5
	}, {
		"instruction": "load.z32"
		, "name": "load.z32"
		, "code": "0x19"
		, "offs": 424764
		, "size": 1
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424765
		, "size": 5
	}, {
		"instruction": "load.ref <?>"
		, "name": "load.ref"
		, "code": "0x1f"
		, "offs": 424770
		, "size": 5
	}, {
		"instruction": "load.sp(+24)"
		, "name": "load.sp"
		, "code": "0x0a"
		, "offs": 424775
		, "size": 4
	}, {
		"instruction": "nfc(11)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424779
		, "size": 4
	}, {
		"instruction": "inc.i32(+1)"
		, "name": "inc.i32"
		, "code": "0x0c"
		, "offs": 424783
		, "size": 4
	}, {
		"instruction": "dup.x32 sp(0)"
		, "name": "dup.x32"
		, "code": "0x10"
		, "offs": 424787
		, "size": 2
	}, {
		"instruction": "load.c32 7"
		, "name": "load.c32"
		, "code": "0x1c"
		, "offs": 424789
		, "size": 5
	}, {
		"instruction": "clt.i32"
		, "name": "clt.i32"
		, "code": "0x58"
		, "offs": 424794
		, "size": 1
	}, {
		"instruction": "jnz -62"
		, "name": "jnz"
		, "code": "0x05"
		, "offs": 424795
		, "size": 4
	}, {
		"instruction": "inc.sp(-4)"
		, "name": "inc.sp"
		, "code": "0x09"
		, "offs": 424799
		, "size": 4
	}, {
		"instruction": "nfc(0)"
		, "name": "nfc"
		, "code": "0x01"
		, "offs": 424803
		, "size": 4
	}]
}]
, "profile": {
	"callTreeData": ["ctTickIndex", "ctHeapIndex", "ctFunIndex"]
	, "callTree": [
2128304,0,411388,
 2128321,0,48640,
 2128348,0,-1,
 2128375,0,42336,
 2128395,0,-1,
 2128414,0,42336,
 2128434,0,-1,
 2128453,0,42336,
 2128473,0,-1,
 2128492,0,43192,
 2128511,0,-1,
 2128530,0,43192,
 2128549,0,-1,
 2128581,0,43192,
 2128601,0,-1,
 2128619,0,42336,
 2128638,0,-1,
 2128656,0,42336,
 2128675,0,-1,
 2128693,0,42336,
 2128711,0,-1,
 2128729,0,43192,
 2128747,0,-1,
 2128763,0,43192,
 2128779,0,-1,
 2128796,0,43192,
 2128818,0,-1,
 2128837,0,53240,
 2128869,0,-1,
 2128887,0,53768,
 2128905,0,-1,
 2128923,0,54296,
 2128945,0,-1,
 2128963,0,54824,
 2128981,0,-1,
 2128998,0,55352,
 2129017,0,-1,
 2129035,0,56040,
 2129053,0,-1,
 2129072,0,56568,
 2129090,0,-1,
 2129107,0,57256,
 2129128,0,-1,
 2129145,0,48640,
 2129161,0,-1,
 2129178,0,49176,
 2129198,0,-1,
 2129217,0,49712,
 2129235,0,-1,
 2129251,0,50248,
 2129271,0,-1,
 2129289,0,50784,
 2129306,0,-1,
 2129323,0,51480,
 2129339,0,-1,
 2129359,0,52016,
 2129376,0,-1,
 2129393,0,52712,
 2129410,0,-1,
 2129426,0,43728,
 2129442,0,-1,
 2129459,0,44264,
 2129475,0,-1,
 2129495,0,44800,
 2129514,0,-1,
 2129532,0,45336,
 2129550,0,-1,
 2129566,0,45872,
 2129583,0,-1,
 2129600,0,46408,
 2129616,0,-1,
 2129633,0,42336,
 2129651,0,-1,
 2129669,0,43192,
 2129687,0,-1,
 2129706,0,47256,
 2129723,0,-1,
 2129756,0,48104,
 2129774,0,-1,
 2129791,0,35264,
 2129813,1024,-1,
 2129831,1024,35264,
 2129850,1104,-1,
 2129871,1104,35264,
 2129898,1264,-1,
 2129917,1264,35264,
 2129936,2096,-1,
 2129957,2096,34560,
  2129997,2096,407024,
  2130019,2096,-1,
  2130038,2096,24280,
  2130057,2096,-1,
 2130077,2096,-1,
 2130095,2096,34560,
 2130139,2096,-1,
 2130157,2096,34560,
  2130180,2096,407032,
   2130198,2096,407032,
    2130216,2096,407032,
     2130234,2096,407032,
      2130251,2096,407032,
       2130269,2096,407032,
        2130287,2096,407032,
         2130305,2096,407032,
          2130323,2096,407032,
           2130341,2096,407032,
            2130359,2096,407032,
             2130376,2096,407032,
              2130394,2096,407032,
               2130411,2096,407032,
                2130429,2096,407032,
                 2130446,2096,407032,
                  2130464,2096,407032,
                   2130483,2096,407032,
                    2130502,2096,407032,
                     2130519,2096,407032,
                      2130543,2096,407032,
                       2130568,2096,407032,
                        2130589,2096,407032,
                         2130605,2096,407032,
                          2130633,2096,407032,
                           2130658,2096,407032,
                            2130683,2096,407032,
                             2130703,2096,407032,
                              2130722,2096,407032,
                               2130740,2096,407032,
                                2130758,2096,407032,
                                 2130776,2096,407032,
                                  2130793,2096,407032,
                                   2130818,2096,407032,
                                    2130844,2096,407032,
                                     2130865,2096,407032,
                                      2130883,2096,407032,
                                       2130901,2096,407032,
                                        2130920,2096,407032,
                                         2130938,2096,407032,
                                          2130956,2096,407032,
                                           2130974,2096,407032,
                                            2130992,2096,407032,
                                             2131016,2096,407032,
                                              2131039,2096,407032,
                                               2131058,2096,407032,
                                                2131077,2096,407032,
                                                 2131095,2096,407032,
                                                  2131114,2096,407032,
                                                   2131132,2096,407032,
                                                    2131150,2096,407032,
                                                     2131167,2096,407032,
                                                      2131189,2096,407032,
                                                       2131208,2096,407032,
                                                        2131226,2096,407032,
                                                         2131244,2096,407032,
                                                          2131265,2096,407032,
                                                           2131284,2096,407032,
                                                            2131302,2096,407032,
                                                             2131337,2096,407032,
                                                              2131356,2096,407032,
                                                               2131374,2096,407032,
                                                                2131392,2096,407032,
                                                                 2131410,2096,407032,
                                                                  2131428,2096,407032,
                                                                   2131445,2096,407032,
                                                                    2131469,2096,407032,
                                                                     2131510,2096,407032,
                                                                      2131531,2096,407032,
                                                                       2131551,2096,407032,
                                                                        2131571,2096,407032,
                                                                         2131593,2096,407032,
                                                                          2131614,2096,407032,
                                                                           2131634,2096,407032,
                                                                            2131653,2096,407032,
                                                                             2131673,2096,407032,
                                                                              2131693,2096,407032,
                                                                               2131713,2096,407032,
                                                                                2131733,2096,407032,
                                                                                 2131752,2096,407032,
                                                                                  2131768,2096,407032,
                                                                                   2131787,2096,407032,
                                                                                    2131807,2096,407032,
                                                                                     2131827,2096,407032,
                                                                                      2131846,2096,407032,
                                                                                       2131866,2096,407032,
                                                                                        2131887,2096,407032,
                                                                                         2131909,2096,407032,
                                                                                          2131930,2096,407032,
                                                                                           2131950,2096,407032,
                                                                                            2131970,2096,407032,
                                                                                             2131989,2096,407032,
                                                                                              2132009,2096,407032,
                                                                                               2132029,2096,407032,
                                                                                                2132049,2096,407032,
                                                                                                 2132069,2096,407032,
                                                                                                  2132091,2096,407032,
                                                                                                   2132105,2096,407032,
                                                                                                    2132119,2096,407032,
                                                                                                     2132132,2096,407032,
                                                                                                      2132145,2096,407032,
                                                                                                       2132158,2096,407032,
                                                                                                        2132176,2096,407032,
                                                                                                         2132193,2096,407032,
                                                                                                          2132207,2096,407032,
                                                                                                           2132230,2096,407032,
                                                                                                            2132247,2096,407032,
                                                                                                             2132267,2096,407032,
                                                                                                              2132286,2096,407032,
                                                                                                               2132311,2096,407032,
                                                                                                                2132332,2096,407032,
                                                                                                                 2132357,2096,407032,
                                                                                                                  2132384,2096,407032,
                                                                                                                   2132407,2096,407032,
                                                                                                                    2132437,2096,407032,
                                                                                                                     2132466,2096,407032,
                                                                                                                      2132492,2096,407032,
                                                                                                                       2132514,2096,407032,
                                                                                                                        2132540,2096,407032,
                                                                                                                         2132564,2096,407032,
                                                                                                                          2132585,2096,407032,
                                                                                                                           2132607,2096,407032,
                                                                                                                            2132628,2096,407032,
                                                                                                                             2132649,2096,407032,
                                                                                                                              2132674,2096,407032,
                                                                                                                               2132705,2096,407032,
                                                                                                                                2132733,2096,407032,
                                                                                                                                 2132755,2096,407032,
                                                                                                                                 2132776,2096,-1,
                                                                                                                                2132811,2096,-1,
                                                                                                                               2132836,2096,-1,
                                                                                                                              2132858,2096,-1,
                                                                                                                             2132879,2096,-1,
                                                                                                                            2132901,2096,-1,
                                                                                                                           2132965,2096,-1,
                                                                                                                          2132994,2096,-1,
                                                                                                                         2133017,2096,-1,
                                                                                                                        2133040,2096,-1,
                                                                                                                       2133062,2096,-1,
                                                                                                                      2133083,2096,-1,
                                                                                                                     2133104,2096,-1,
                                                                                                                    2133125,2096,-1,
                                                                                                                   2133145,2096,-1,
                                                                                                                  2133174,2096,-1,
                                                                                                                 2133211,2096,-1,
                                                                                                                2133246,2096,-1,
                                                                                                               2133269,2096,-1,
                                                                                                              2133290,2096,-1,
                                                                                                             2133324,2096,-1,
                                                                                                            2133348,2096,-1,
                                                                                                           2133374,2096,-1,
                                                                                                          2133399,2096,-1,
                                                                                                         2133421,2096,-1,
                                                                                                        2133452,2096,-1,
                                                                                                       2133474,2096,-1,
                                                                                                      2133496,2096,-1,
                                                                                                     2133520,2096,-1,
                                                                                                    2133543,2096,-1,
                                                                                                   2133565,2096,-1,
                                                                                                  2133588,2096,-1,
                                                                                                 2133610,2096,-1,
                                                                                                2133632,2096,-1,
                                                                                               2133654,2096,-1,
                                                                                              2133694,2096,-1,
                                                                                             2133731,2096,-1,
                                                                                            2133757,2096,-1,
                                                                                           2133779,2096,-1,
                                                                                          2133824,2096,-1,
                                                                                         2133838,2096,-1,
                                                                                        2133860,2096,-1,
                                                                                       2133881,2096,-1,
                                                                                      2133902,2096,-1,
                                                                                     2133937,2096,-1,
                                                                                    2133967,2096,-1,
                                                                                   2133995,2096,-1,
                                                                                  2134016,2096,-1,
                                                                                 2134037,2096,-1,
                                                                                2134063,2096,-1,
                                                                               2134086,2096,-1,
                                                                              2134108,2096,-1,
                                                                             2134130,2096,-1,
                                                                            2134154,2096,-1,
                                                                           2134183,2096,-1,
                                                                          2134224,2096,-1,
                                                                         2134249,2096,-1,
                                                                        2134271,2096,-1,
                                                                       2134292,2096,-1,
                                                                      2134314,2096,-1,
                                                                     2134335,2096,-1,
                                                                    2134381,2096,-1,
                                                                   2134407,2096,-1,
                                                                  2134429,2096,-1,
                                                                 2134462,2096,-1,
                                                                2134491,2096,-1,
                                                               2134515,2096,-1,
                                                              2134536,2096,-1,
                                                             2134562,2096,-1,
                                                            2134583,2096,-1,
                                                           2134605,2096,-1,
                                                          2134626,2096,-1,
                                                         2134646,2096,-1,
                                                        2134667,2096,-1,
                                                       2134701,2096,-1,
                                                      2134723,2096,-1,
                                                     2134758,2096,-1,
                                                    2134781,2096,-1,
                                                   2134803,2096,-1,
                                                  2134823,2096,-1,
                                                 2134843,2096,-1,
                                                2134863,2096,-1,
                                               2134883,2096,-1,
                                              2134906,2096,-1,
                                             2134929,2096,-1,
                                            2134953,2096,-1,
                                           2134974,2096,-1,
                                          2134995,2096,-1,
                                         2135017,2096,-1,
                                        2135060,2096,-1,
                                       2135083,2096,-1,
                                      2135105,2096,-1,
                                     2135126,2096,-1,
                                    2135148,2096,-1,
                                   2135169,2096,-1,
                                  2135190,2096,-1,
                                 2135211,2096,-1,
                                2135232,2096,-1,
                               2135253,2096,-1,
                              2135274,2096,-1,
                             2135298,2096,-1,
                            2135319,2096,-1,
                           2135340,2096,-1,
                          2135361,2096,-1,
                         2135382,2096,-1,
                        2135402,2096,-1,
                       2135426,2096,-1,
                      2135452,2096,-1,
                     2135474,2096,-1,
                    2135495,2096,-1,
                   2135514,2096,-1,
                  2135535,2096,-1,
                 2135559,2096,-1,
                2135581,2096,-1,
               2135602,2096,-1,
              2135623,2096,-1,
             2135635,2096,-1,
            2135647,2096,-1,
           2135662,2096,-1,
          2135676,2096,-1,
         2135688,2096,-1,
        2135699,2096,-1,
       2135711,2096,-1,
      2135723,2096,-1,
     2135735,2096,-1,
    2135747,2096,-1,
   2135759,2096,-1,
  2135771,2096,-1,
 2135783,2096,-1,
 2135795,2096,34560,
  2135822,2096,407056,
  2135835,2096,-1,
 2135846,2096,-1,
 2135858,2096,34560,
  2135876,2096,407160,
  2135888,2096,-1,
 2135900,2096,-1,
 2135911,2096,34560,
  2135928,2096,407144,
  2135940,2096,-1,
 2135956,2096,-1,
 2135972,2096,34560,
  2135992,2096,407072,
   2136006,2096,32176,
   2136184,2096,-1,
  2136199,2096,-1,
 2136218,2096,-1,
 2136233,2096,28696,
 2136253,2128,-1,
 2136266,2128,28696,
 2136284,2160,-1,
 2136297,2160,407936,
 2136310,2160,-1,
 2136323,2160,407936,
 2136335,2160,-1,
 2136350,2160,408000,
 2136372,2160,-1,
 2136391,2160,408000,
 2136409,2160,-1,
 2136427,2160,408008,
  2136445,2160,408008,
   2136463,2160,408008,
    2136480,2160,408008,
     2136496,2160,408008,
      2136522,2160,408008,
       2136543,2160,408008,
        2136560,2160,408008,
         2136578,2160,408008,
          2136596,2160,408008,
           2136613,2160,408008,
            2136631,2160,408008,
             2136648,2160,408008,
             2136666,2160,-1,
             2136697,2160,408008,
             2136727,2160,-1,
            2136747,2160,-1,
            2136765,2160,408008,
            2136784,2160,-1,
           2136802,2160,-1,
           2136820,2160,408008,
            2136838,2160,408008,
            2136857,2160,-1,
            2136875,2160,408008,
            2136900,2160,-1,
           2136925,2160,-1,
          2136946,2160,-1,
          2136964,2160,408008,
           2136982,2160,408008,
            2137000,2160,408008,
            2137019,2160,-1,
            2137037,2160,408008,
            2137056,2160,-1,
           2137075,2160,-1,
           2137105,2160,408008,
           2137127,2160,-1,
          2137147,2160,-1,
         2137165,2160,-1,
         2137182,2160,408008,
          2137198,2160,408008,
           2137215,2160,408008,
            2137232,2160,408008,
            2137248,2160,-1,
            2137264,2160,408008,
            2137281,2160,-1,
           2137298,2160,-1,
           2137314,2160,408008,
           2137331,2160,-1,
          2137349,2160,-1,
          2137366,2160,408008,
           2137384,2160,408008,
           2137415,2160,-1,
           2137437,2160,408008,
           2137455,2160,-1,
          2137473,2160,-1,
         2137491,2160,-1,
        2137509,2160,-1,
        2137527,2160,408008,
         2137552,2160,408008,
          2137570,2160,408008,
           2137588,2160,408008,
            2137604,2160,408008,
            2137622,2160,-1,
            2137639,2160,408008,
            2137657,2160,-1,
           2137675,2160,-1,
           2137708,2160,408008,
           2137725,2160,-1,
          2137745,2160,-1,
          2137763,2160,408008,
           2137780,2160,408008,
           2137798,2160,-1,
           2137815,2160,408008,
           2137835,2160,-1,
          2137853,2160,-1,
         2137871,2160,-1,
         2137888,2160,408008,
          2137904,2160,408008,
           2137920,2160,408008,
           2137936,2160,-1,
           2137952,2160,408008,
           2137969,2160,-1,
          2137984,2160,-1,
          2138002,2160,408008,
          2138021,2160,-1,
         2138045,2160,-1,
        2138063,2160,-1,
       2138079,2160,-1,
       2138095,2160,408008,
        2138117,2160,408008,
         2138132,2160,408008,
          2138159,2160,408008,
           2138178,2160,408008,
            2138191,2160,408008,
            2138205,2160,-1,
            2138218,2160,408008,
            2138231,2160,-1,
           2138247,2160,-1,
           2138265,2160,408008,
           2138280,2160,-1,
          2138296,2160,-1,
          2138321,2160,408008,
           2138341,2160,408008,
           2138361,2160,-1,
           2138381,2160,408008,
           2138399,2160,-1,
          2138418,2160,-1,
         2138437,2160,-1,
         2138455,2160,408008,
          2138474,2160,408008,
           2138492,2160,408008,
           2138510,2160,-1,
           2138528,2160,408008,
           2138554,2160,-1,
          2138573,2160,-1,
          2138591,2160,408008,
          2138610,2160,-1,
         2138628,2160,-1,
        2138646,2160,-1,
        2138664,2160,408008,
         2138682,2160,408008,
          2138700,2160,408008,
           2138718,2160,408008,
           2138743,2160,-1,
           2138769,2160,408008,
           2138788,2160,-1,
          2138806,2160,-1,
          2138824,2160,408008,
          2138842,2160,-1,
         2138861,2160,-1,
         2138875,2160,408008,
          2138894,2160,408008,
          2138912,2160,-1,
          2138938,2160,408008,
          2138955,2160,-1,
         2138980,2160,-1,
        2138998,2160,-1,
       2139020,2160,-1,
      2139040,2160,-1,
      2139058,2160,408008,
       2139076,2160,408008,
        2139094,2160,408008,
         2139113,2160,408008,
          2139132,2160,408008,
           2139150,2160,408008,
            2139180,2160,408008,
            2139199,2160,-1,
            2139217,2160,408008,
            2139235,2160,-1,
           2139253,2160,-1,
           2139271,2160,408008,
           2139289,2160,-1,
          2139308,2160,-1,
          2139324,2160,408008,
           2139340,2160,408008,
           2139360,2160,-1,
           2139379,2160,408008,
           2139397,2160,-1,
          2139415,2160,-1,
         2139433,2160,-1,
         2139451,2160,408008,
          2139468,2160,408008,
           2139486,2160,408008,
           2139502,2160,-1,
           2139518,2160,408008,
           2139535,2160,-1,
          2139553,2160,-1,
          2139571,2160,408008,
          2139590,2160,-1,
         2139607,2160,-1,
        2139625,2160,-1,
        2139643,2160,408008,
         2139659,2160,408008,
          2139675,2160,408008,
           2139692,2160,408008,
           2139708,2160,-1,
           2139724,2160,408008,
           2139741,2160,-1,
          2139758,2160,-1,
          2139775,2160,408008,
          2139791,2160,-1,
         2139808,2160,-1,
         2139825,2160,408008,
          2139841,2160,408008,
          2139858,2160,-1,
          2139874,2160,408008,
          2139891,2160,-1,
         2139909,2160,-1,
        2139926,2160,-1,
       2139943,2160,-1,
       2139960,2160,408008,
        2139977,2160,408008,
         2139995,2160,408008,
          2140012,2160,408008,
           2140030,2160,408008,
           2140047,2160,-1,
           2140064,2160,408008,
           2140082,2160,-1,
          2140099,2160,-1,
          2140117,2160,408008,
          2140135,2160,-1,
         2140153,2160,-1,
         2140170,2160,408008,
          2140188,2160,408008,
          2140210,2160,-1,
          2140230,2160,408008,
          2140249,2160,-1,
         2140267,2160,-1,
        2140302,2160,-1,
        2140320,2160,408008,
         2140339,2160,408008,
          2140357,2160,408008,
          2140375,2160,-1,
          2140393,2160,408008,
          2140406,2160,-1,
         2140419,2160,-1,
         2140432,2160,408008,
         2140449,2160,-1,
        2140464,2160,-1,
       2140477,2160,-1,
      2140490,2160,-1,
     2140502,2160,-1,
     2140515,2160,408008,
      2140527,2160,408008,
       2140540,2160,408008,
        2140552,2160,408008,
         2140564,2160,408008,
          2140577,2160,408008,
           2140589,2160,408008,
            2140601,2160,408008,
            2140613,2160,-1,
            2140626,2160,408008,
            2140638,2160,-1,
           2140650,2160,-1,
           2140663,2160,408008,
           2140675,2160,-1,
          2140687,2160,-1,
          2140699,2160,408008,
           2140711,2160,408008,
           2140723,2160,-1,
           2140735,2160,408008,
           2140748,2160,-1,
          2140760,2160,-1,
         2140772,2160,-1,
         2140784,2160,408008,
          2140797,2160,408008,
           2140809,2160,408008,
           2140821,2160,-1,
           2140833,2160,408008,
           2140845,2160,-1,
          2140859,2160,-1,
          2140886,2160,408008,
          2140915,2160,-1,
         2140932,2160,-1,
        2140949,2160,-1,
        2140967,2160,408008,
         2140984,2160,408008,
          2141002,2160,408008,
           2141020,2160,408008,
           2141041,2160,-1,
           2141066,2160,408008,
           2141085,2160,-1,
          2141102,2160,-1,
          2141119,2160,408008,
          2141143,2160,-1,
         2141161,2160,-1,
         2141179,2160,408008,
          2141196,2160,408008,
          2141214,2160,-1,
          2141236,2160,408008,
          2141255,2160,-1,
         2141269,2160,-1,
        2141282,2160,-1,
       2141294,2160,-1,
       2141307,2160,408008,
        2141319,2160,408008,
         2141335,2160,408008,
          2141352,2160,408008,
           2141365,2160,408008,
           2141379,2160,-1,
           2141393,2160,408008,
           2141406,2160,-1,
          2141420,2160,-1,
          2141433,2160,408008,
          2141447,2160,-1,
         2141460,2160,-1,
         2141473,2160,408008,
          2141486,2160,408008,
          2141500,2160,-1,
          2141513,2160,408008,
          2141526,2160,-1,
         2141539,2160,-1,
        2141552,2160,-1,
        2141565,2160,408008,
         2141578,2160,408008,
          2141591,2160,408008,
          2141604,2160,-1,
          2141618,2160,408008,
          2141631,2160,-1,
         2141644,2160,-1,
         2141660,2160,408008,
         2141676,2160,-1,
        2141689,2160,-1,
       2141701,2160,-1,
      2141714,2160,-1,
      2141726,2160,408008,
       2141753,2160,408008,
        2141777,2160,408008,
         2141803,2160,408008,
          2141822,2160,408008,
           2141841,2160,408008,
           2141858,2160,-1,
           2141877,2160,408008,
           2141895,2160,-1,
          2141913,2160,-1,
          2141931,2160,408008,
          2141948,2160,-1,
         2141964,2160,-1,
         2141982,2160,408008,
          2141998,2160,408008,
          2142017,2160,-1,
          2142048,2160,408008,
          2142070,2160,-1,
         2142090,2160,-1,
        2142120,2160,-1,
        2142141,2160,408008,
         2142172,2160,408008,
          2142194,2160,408008,
          2142214,2160,-1,
          2142234,2160,408008,
          2142254,2160,-1,
         2142274,2160,-1,
         2142293,2160,408008,
         2142313,2160,-1,
        2142332,2160,-1,
       2142351,2160,-1,
       2142370,2160,408008,
        2142389,2160,408008,
         2142408,2160,408008,
          2142457,2160,408008,
          2142496,2160,-1,
          2142513,2160,408008,
          2142552,2160,-1,
         2142570,2160,-1,
         2142588,2160,408008,
         2142606,2160,-1,
        2142627,2160,-1,
        2142649,2160,408008,
         2142671,2160,408008,
         2142693,2160,-1,
         2142715,2160,408008,
         2142749,2160,-1,
        2142844,2160,-1,
       2142864,2160,-1,
      2142882,2160,-1,
     2142897,2160,-1,
    2142929,2160,-1,
    2142951,2160,408008,
     2142993,2160,408008,
      2143027,2160,408008,
       2143062,2160,408008,
        2143095,2160,408008,
         2143115,2160,408008,
          2143135,2160,408008,
           2143154,2160,408008,
            2143174,2160,408008,
            2143193,2160,-1,
            2143213,2160,408008,
            2143232,2160,-1,
           2143251,2160,-1,
           2143271,2160,408008,
           2143290,2160,-1,
          2143309,2160,-1,
          2143329,2160,408008,
           2143348,2160,408008,
           2143368,2160,-1,
           2143382,2160,408008,
           2143401,2160,-1,
          2143419,2160,-1,
         2143437,2160,-1,
         2143455,2160,408008,
          2143473,2160,408008,
           2143492,2160,408008,
           2143510,2160,-1,
           2143528,2160,408008,
           2143546,2160,-1,
          2143565,2160,-1,
          2143583,2160,408008,
          2143601,2160,-1,
         2143619,2160,-1,
        2143637,2160,-1,
        2143656,2160,408008,
         2143674,2160,408008,
          2143693,2160,408008,
           2143711,2160,408008,
           2143730,2160,-1,
           2143748,2160,408008,
           2143767,2160,-1,
          2143786,2160,-1,
          2143805,2160,408008,
          2143823,2160,-1,
         2143842,2160,-1,
         2143886,2160,408008,
          2143911,2160,408008,
          2143934,2160,-1,
          2143954,2160,408008,
          2143974,2160,-1,
         2143994,2160,-1,
        2144013,2160,-1,
       2144052,2160,-1,
       2144085,2160,408008,
        2144105,2160,408008,
         2144124,2160,408008,
          2144143,2160,408008,
           2144162,2160,408008,
           2144182,2160,-1,
           2144201,2160,408008,
           2144221,2160,-1,
          2144247,2160,-1,
          2144270,2160,408008,
          2144289,2160,-1,
         2144308,2160,-1,
         2144326,2160,408008,
          2144344,2160,408008,
          2144362,2160,-1,
          2144380,2160,408008,
          2144398,2160,-1,
         2144416,2160,-1,
        2144433,2160,-1,
        2144451,2160,408008,
         2144469,2160,408008,
          2144487,2160,408008,
          2144505,2160,-1,
          2144522,2160,408008,
          2144541,2160,-1,
         2144558,2160,-1,
         2144576,2160,408008,
         2144593,2160,-1,
        2144611,2160,-1,
       2144628,2160,-1,
      2144646,2160,-1,
      2144663,2160,408008,
       2144681,2160,408008,
        2144699,2160,408008,
         2144716,2160,408008,
          2144734,2160,408008,
           2144751,2160,408008,
           2144769,2160,-1,
           2144786,2160,408008,
           2144804,2160,-1,
          2144821,2160,-1,
          2144839,2160,408008,
          2144857,2160,-1,
         2144874,2160,-1,
         2144892,2160,408008,
          2144909,2160,408008,
          2144927,2160,-1,
          2144940,2160,408008,
          2144957,2160,-1,
         2144976,2160,-1,
        2144992,2160,-1,
        2145006,2160,408008,
         2145022,2160,408008,
          2145040,2160,408008,
          2145053,2160,-1,
          2145066,2160,408008,
          2145078,2160,-1,
         2145091,2160,-1,
         2145103,2160,408008,
         2145115,2160,-1,
        2145127,2160,-1,
       2145143,2160,-1,
       2145157,2160,408008,
        2145169,2160,408008,
         2145181,2160,408008,
          2145193,2160,408008,
          2145205,2160,-1,
          2145217,2160,408008,
          2145229,2160,-1,
         2145240,2160,-1,
         2145252,2160,408008,
         2145264,2160,-1,
        2145275,2160,-1,
        2145287,2160,408008,
         2145298,2160,408008,
         2145310,2160,-1,
         2145321,2160,408008,
         2145333,2160,-1,
        2145344,2160,-1,
       2145356,2160,-1,
      2145368,2160,-1,
     2145381,2160,-1,
     2145392,2160,408008,
      2145404,2160,408008,
       2145415,2160,408008,
        2145427,2160,408008,
         2145439,2160,408008,
          2145485,2160,408008,
           2145498,2160,408008,
           2145511,2160,-1,
           2145523,2160,408008,
           2145535,2160,-1,
          2145547,2160,-1,
          2145560,2160,408008,
          2145572,2160,-1,
         2145584,2160,-1,
         2145595,2160,408008,
          2145607,2160,408008,
          2145619,2160,-1,
          2145631,2160,408008,
          2145643,2160,-1,
         2145658,2160,-1,
        2145674,2160,-1,
        2145688,2160,408008,
         2145701,2160,408008,
          2145714,2160,408008,
          2145726,2160,-1,
          2145739,2160,408008,
          2145751,2160,-1,
         2145764,2160,-1,
         2145778,2160,408008,
         2145795,2160,-1,
        2145814,2160,-1,
       2145832,2160,-1,
       2145846,2160,408008,
        2145860,2160,408008,
         2145872,2160,408008,
          2145884,2160,408008,
          2145905,2160,-1,
          2145918,2160,408008,
          2145931,2160,-1,
         2145943,2160,-1,
         2145955,2160,408008,
         2145967,2160,-1,
        2145979,2160,-1,
        2145991,2160,408008,
         2146003,2160,408008,
         2146018,2160,-1,
         2146033,2160,408008,
         2146046,2160,-1,
        2146059,2160,-1,
       2146071,2160,-1,
      2146083,2160,-1,
      2146095,2160,408008,
       2146106,2160,408008,
        2146118,2160,408008,
         2146130,2160,408008,
          2146142,2160,408008,
          2146154,2160,-1,
          2146165,2160,408008,
          2146177,2160,-1,
         2146189,2160,-1,
         2146201,2160,408008,
         2146213,2160,-1,
        2146224,2160,-1,
        2146236,2160,408008,
         2146248,2160,408008,
         2146259,2160,-1,
         2146271,2160,408008,
         2146283,2160,-1,
        2146295,2160,-1,
       2146307,2160,-1,
       2146318,2160,408008,
        2146330,2160,408008,
         2146342,2160,408008,
         2146353,2160,-1,
         2146365,2160,408008,
         2146377,2160,-1,
        2146388,2160,-1,
        2146400,2160,408008,
        2146415,2160,-1,
       2146431,2160,-1,
      2146443,2160,-1,
     2146456,2160,-1,
    2146468,2160,-1,
   2146480,2160,-1,
   2146491,2160,408008,
    2146507,2160,408008,
     2146523,2160,408008,
      2146536,2160,408008,
       2146548,2160,408008,
        2146561,2160,408008,
         2146573,2160,408008,
          2146585,2160,408008,
           2146597,2160,408008,
            2146609,2160,408008,
            2146620,2160,-1,
            2146632,2160,408008,
            2146644,2160,-1,
           2146656,2160,-1,
           2146667,2160,408008,
           2146679,2160,-1,
          2146691,2160,-1,
          2146706,2160,408008,
           2146724,2160,408008,
           2146738,2160,-1,
           2146751,2160,408008,
           2146763,2160,-1,
          2146775,2160,-1,
         2146790,2160,-1,
         2146804,2160,408008,
          2146816,2160,408008,
           2146828,2160,408008,
           2146840,2160,-1,
           2146852,2160,408008,
           2146864,2160,-1,
          2146876,2160,-1,
          2146888,2160,408008,
          2146900,2160,-1,
         2146912,2160,-1,
        2146924,2160,-1,
        2146935,2160,408008,
         2146947,2160,408008,
          2146959,2160,408008,
           2146974,2160,408008,
           2146990,2160,-1,
           2147002,2160,408008,
           2147018,2160,-1,
          2147032,2160,-1,
          2147044,2160,408008,
          2147056,2160,-1,
         2147068,2160,-1,
         2147080,2160,408008,
          2147091,2160,408008,
          2147103,2160,-1,
          2147115,2160,408008,
          2147127,2160,-1,
         2147138,2160,-1,
        2147150,2160,-1,
       2147163,2160,-1,
       2147175,2160,408008,
        2147187,2160,408008,
         2147199,2160,408008,
          2147211,2160,408008,
           2147222,2160,408008,
           2147238,2160,-1,
           2147254,2160,408008,
           2147267,2160,-1,
          2147279,2160,-1,
          2147292,2160,408008,
          2147308,2160,-1,
         2147321,2160,-1,
         2147334,2160,408008,
          2147357,2160,408008,
          2147370,2160,-1,
          2147385,2160,408008,
          2147402,2160,-1,
         2147417,2160,-1,
        2147432,2160,-1,
        2147447,2160,408008,
         2147461,2160,408008,
          2147474,2160,408008,
          2147487,2160,-1,
          2147500,2160,408008,
          2147513,2160,-1,
         2147527,2160,-1,
         2147544,2160,408008,
         2147560,2160,-1,
        2147573,2160,-1,
       2147586,2160,-1,
      2147598,2160,-1,
      2147611,2160,408008,
       2147623,2160,408008,
        2147636,2160,408008,
         2147648,2160,408008,
          2147660,2160,408008,
           2147672,2160,408008,
           2147684,2160,-1,
           2147696,2160,408008,
           2147710,2160,-1,
          2147726,2160,-1,
          2147743,2160,408008,
          2147764,2160,-1,
         2147783,2160,-1,
         2147800,2160,408008,
          2147815,2160,408008,
          2147829,2160,-1,
          2147842,2160,408008,
          2147856,2160,-1,
         2147870,2160,-1,
        2147883,2160,-1,
        2147899,2160,408008,
         2147915,2160,408008,
          2147929,2160,408008,
          2147942,2160,-1,
          2147955,2160,408008,
          2147971,2160,-1,
         2147986,2160,-1,
         2148002,2160,408008,
         2148020,2160,-1,
        2148036,2160,-1,
       2148049,2160,-1,
       2148062,2160,408008,
        2148074,2160,408008,
         2148087,2160,408008,
          2148099,2160,408008,
          2148115,2160,-1,
          2148131,2160,408008,
          2148145,2160,-1,
         2148159,2160,-1,
         2148173,2160,408008,
         2148186,2160,-1,
        2148200,2160,-1,
        2148213,2160,408008,
         2148227,2160,408008,
         2148241,2160,-1,
         2148255,2160,408008,
         2148269,2160,-1,
        2148282,2160,-1,
       2148296,2160,-1,
      2148309,2160,-1,
     2148323,2160,-1,
     2148336,2160,408008,
      2148350,2160,408008,
       2148363,2160,408008,
        2148376,2160,408008,
         2148389,2160,408008,
          2148403,2160,408008,
           2148416,2160,408008,
           2148430,2160,-1,
           2148443,2160,408008,
           2148457,2160,-1,
          2148470,2160,-1,
          2148484,2160,408008,
          2148497,2160,-1,
         2148511,2160,-1,
         2148524,2160,408008,
          2148537,2160,408008,
          2148551,2160,-1,
          2148564,2160,408008,
          2148578,2160,-1,
         2148591,2160,-1,
        2148605,2160,-1,
        2148618,2160,408008,
         2148631,2160,408008,
          2148645,2160,408008,
          2148661,2160,-1,
          2148676,2160,408008,
          2148693,2160,-1,
         2148736,2160,-1,
         2148760,2160,408008,
         2148782,2160,-1,
        2148808,2160,-1,
       2148831,2160,-1,
       2148854,2160,408008,
        2148876,2160,408008,
         2148898,2160,408008,
          2148920,2160,408008,
          2148942,2160,-1,
          2148964,2160,408008,
          2148986,2160,-1,
         2149008,2160,-1,
         2149030,2160,408008,
         2149052,2160,-1,
        2149074,2160,-1,
        2149096,2160,408008,
         2149118,2160,408008,
         2149140,2160,-1,
         2149161,2160,408008,
         2149183,2160,-1,
        2149205,2160,-1,
       2149227,2160,-1,
      2149249,2160,-1,
      2149271,2160,408008,
       2149293,2160,408008,
        2149315,2160,408008,
         2149336,2160,408008,
          2149358,2160,408008,
          2149380,2160,-1,
          2149402,2160,408008,
          2149424,2160,-1,
         2149446,2160,-1,
         2149467,2160,408008,
         2149489,2160,-1,
        2149511,2160,-1,
        2149533,2160,408008,
         2149560,2160,408008,
         2149585,2160,-1,
         2149598,2160,408008,
         2149611,2160,-1,
        2149625,2160,-1,
       2149639,2160,-1,
       2149652,2160,408008,
        2149664,2160,408008,
         2149676,2160,408008,
         2149688,2160,-1,
         2149700,2160,408008,
         2149712,2160,-1,
        2149724,2160,-1,
        2149736,2160,408008,
        2149758,2160,-1,
       2149770,2160,-1,
      2149782,2160,-1,
     2149794,2160,-1,
    2149806,2160,-1,
    2149818,2160,408008,
     2149830,2160,408008,
      2149841,2160,408008,
       2149854,2160,408008,
        2149865,2160,408008,
         2149877,2160,408008,
          2149889,2160,408008,
           2149901,2160,408008,
           2149913,2160,-1,
           2149924,2160,408008,
           2149936,2160,-1,
          2149948,2160,-1,
          2149960,2160,408008,
          2149972,2160,-1,
         2149984,2160,-1,
         2149995,2160,408008,
          2150007,2160,408008,
          2150019,2160,-1,
          2150031,2160,408008,
          2150042,2160,-1,
         2150054,2160,-1,
        2150068,2160,-1,
        2150081,2160,408008,
         2150093,2160,408008,
          2150105,2160,408008,
          2150120,2160,-1,
          2150146,2160,408008,
          2150169,2160,-1,
         2150192,2160,-1,
         2150214,2160,408008,
         2150236,2160,-1,
        2150257,2160,-1,
       2150279,2160,-1,
       2150302,2160,408008,
        2150326,2160,408008,
         2150349,2160,408008,
          2150370,2160,408008,
          2150396,2160,-1,
          2150418,2160,408008,
          2150440,2160,-1,
         2150461,2160,-1,
         2150483,2160,408008,
         2150505,2160,-1,
        2150527,2160,-1,
        2150549,2160,408008,
         2150571,2160,408008,
         2150593,2160,-1,
         2150615,2160,408008,
         2150637,2160,-1,
        2150659,2160,-1,
       2150681,2160,-1,
      2150702,2160,-1,
      2150723,2160,408008,
       2150745,2160,408008,
        2150767,2160,408008,
         2150789,2160,408008,
          2150811,2160,408008,
          2150832,2160,-1,
          2150853,2160,408008,
          2150874,2160,-1,
         2150899,2160,-1,
         2150923,2160,408008,
         2150963,2160,-1,
        2150987,2160,-1,
        2151027,2160,408008,
         2151051,2160,408008,
         2151072,2160,-1,
         2151093,2160,408008,
         2151113,2160,-1,
        2151137,2160,-1,
       2151178,2160,-1,
       2151201,2160,408008,
        2151250,2160,408008,
         2151271,2160,408008,
         2151294,2160,-1,
         2151315,2160,408008,
         2151335,2160,-1,
        2151362,2160,-1,
        2151389,2160,408008,
        2151409,2160,-1,
       2151435,2160,-1,
      2151455,2160,-1,
     2151494,2160,-1,
     2151519,2160,408008,
      2151567,2160,408008,
       2151589,2160,408008,
        2151609,2160,408008,
         2151638,2160,408008,
          2151662,2160,408008,
          2151683,2160,-1,
          2151711,2160,408008,
          2151731,2160,-1,
         2151758,2160,-1,
         2151778,2160,408008,
         2151799,2160,-1,
        2151820,2160,-1,
        2151840,2160,408008,
         2151868,2160,408008,
         2151892,2160,-1,
         2151913,2160,408008,
         2151964,2160,-1,
        2152000,2160,-1,
       2152034,2160,-1,
       2152056,2160,408008,
        2152076,2160,408008,
         2152097,2160,408008,
         2152118,2160,-1,
         2152146,2160,408008,
         2152173,2160,-1,
        2152193,2160,-1,
        2152213,2160,408008,
        2152234,2160,-1,
       2152261,2160,-1,
      2152282,2160,-1,
      2152302,2160,408008,
       2152323,2160,408008,
        2152344,2160,408008,
         2152365,2160,408008,
         2152385,2160,-1,
         2152406,2160,408008,
         2152426,2160,-1,
        2152446,2160,-1,
        2152467,2160,408008,
        2152487,2160,-1,
       2152508,2160,-1,
       2152528,2160,408008,
        2152549,2160,408008,
        2152569,2160,-1,
        2152590,2160,408008,
        2152610,2160,-1,
       2152630,2160,-1,
      2152650,2160,-1,
     2152670,2160,-1,
    2152690,2160,-1,
   2152710,2160,-1,
  2152731,2160,-1,
  2152754,2160,408008,
   2152776,2160,408008,
    2152796,2160,408008,
     2152820,2160,408008,
      2152847,2160,408008,
       2152870,2160,408008,
        2152890,2160,408008,
         2152911,2160,408008,
          2152932,2160,408008,
           2152952,2160,408008,
            2152994,2160,408008,
            2153014,2160,-1,
            2153034,2160,408008,
            2153054,2160,-1,
           2153074,2160,-1,
           2153094,2160,408008,
           2153114,2160,-1,
          2153134,2160,-1,
          2153154,2160,408008,
           2153174,2160,408008,
           2153194,2160,-1,
           2153214,2160,408008,
           2153234,2160,-1,
          2153254,2160,-1,
         2153274,2160,-1,
         2153293,2160,408008,
          2153313,2160,408008,
           2153333,2160,408008,
           2153353,2160,-1,
           2153373,2160,408008,
           2153401,2160,-1,
          2153421,2160,-1,
          2153441,2160,408008,
          2153461,2160,-1,
         2153480,2160,-1,
        2153500,2160,-1,
        2153520,2160,408008,
         2153547,2160,408008,
          2153568,2160,408008,
           2153588,2160,408008,
           2153608,2160,-1,
           2153635,2160,408008,
           2153654,2160,-1,
          2153674,2160,-1,
          2153694,2160,408008,
          2153734,2160,-1,
         2153756,2160,-1,
         2153775,2160,408008,
          2153796,2160,408008,
          2153816,2160,-1,
          2153843,2160,408008,
          2153869,2160,-1,
         2153889,2160,-1,
        2153909,2160,-1,
       2153929,2160,-1,
       2153948,2160,408008,
        2153970,2160,408008,
         2153990,2160,408008,
          2154023,2160,408008,
           2154046,2160,408008,
           2154067,2160,-1,
           2154088,2160,408008,
           2154109,2160,-1,
          2154130,2160,-1,
          2154151,2160,408008,
          2154171,2160,-1,
         2154192,2160,-1,
         2154221,2160,408008,
          2154242,2160,408008,
          2154262,2160,-1,
          2154291,2160,408008,
          2154311,2160,-1,
         2154331,2160,-1,
        2154351,2160,-1,
        2154371,2160,408008,
         2154399,2160,408008,
          2154420,2160,408008,
          2154440,2160,-1,
          2154460,2160,408008,
          2154480,2160,-1,
         2154501,2160,-1,
         2154556,2160,408008,
         2154578,2160,-1,
        2154604,2160,-1,
       2154627,2160,-1,
      2154656,2160,-1,
      2154677,2160,408008,
       2154698,2160,408008,
        2154718,2160,408008,
         2154738,2160,408008,
          2154758,2160,408008,
           2154778,2160,408008,
           2154799,2160,-1,
           2154819,2160,408008,
           2154839,2160,-1,
          2154859,2160,-1,
          2154879,2160,408008,
          2154906,2160,-1,
         2154926,2160,-1,
         2154947,2160,408008,
          2154967,2160,408008,
          2154987,2160,-1,
          2155007,2160,408008,
          2155034,2160,-1,
         2155054,2160,-1,
        2155074,2160,-1,
        2155101,2160,408008,
         2155121,2160,408008,
          2155147,2160,408008,
          2155167,2160,-1,
          2155188,2160,408008,
          2155208,2160,-1,
         2155228,2160,-1,
         2155247,2160,408008,
         2155268,2160,-1,
        2155288,2160,-1,
       2155307,2160,-1,
       2155327,2160,408008,
        2155347,2160,408008,
         2155367,2160,408008,
          2155387,2160,408008,
          2155433,2160,-1,
          2155456,2160,408008,
          2155480,2160,-1,
         2155501,2160,-1,
         2155521,2160,408008,
         2155542,2160,-1,
        2155562,2160,-1,
        2155582,2160,408008,
         2155602,2160,408008,
         2155629,2160,-1,
         2155656,2160,408008,
         2155676,2160,-1,
        2155703,2160,-1,
       2155723,2160,-1,
      2155750,2160,-1,
     2155770,2160,-1,
     2155790,2160,408008,
      2155809,2160,408008,
       2155829,2160,408008,
        2155849,2160,408008,
         2155869,2160,408008,
          2155888,2160,408008,
           2155908,2160,408008,
           2155928,2160,-1,
           2155948,2160,408008,
           2155969,2160,-1,
          2155989,2160,-1,
          2156009,2160,408008,
          2156029,2160,-1,
         2156049,2160,-1,
         2156069,2160,408008,
          2156089,2160,408008,
          2156109,2160,-1,
          2156149,2160,408008,
          2156170,2160,-1,
         2156191,2160,-1,
        2156211,2160,-1,
        2156237,2160,408008,
         2156258,2160,408008,
          2156292,2160,408008,
          2156314,2160,-1,
          2156343,2160,408008,
          2156386,2160,-1,
         2156424,2160,-1,
         2156461,2160,408008,
         2156483,2160,-1,
        2156504,2160,-1,
       2156529,2160,-1,
       2156570,2160,408008,
        2156609,2160,408008,
         2156633,2160,408008,
          2156655,2160,408008,
          2156693,2160,-1,
          2156729,2160,408008,
          2156753,2160,-1,
         2156781,2160,-1,
         2156823,2160,408008,
         2156864,2160,-1,
        2156902,2160,-1,
        2156926,2160,408008,
         2156979,2160,408008,
         2157017,2160,-1,
         2157054,2160,408008,
         2157078,2160,-1,
        2157104,2160,-1,
       2157129,2160,-1,
      2157157,2160,-1,
      2157181,2160,408008,
       2157205,2160,408008,
        2157232,2160,408008,
         2157260,2160,408008,
          2157285,2160,408008,
          2157310,2160,-1,
          2157333,2160,408008,
          2157359,2160,-1,
         2157383,2160,-1,
         2157410,2160,408008,
         2157434,2160,-1,
        2157460,2160,-1,
        2157485,2160,408008,
         2157510,2160,408008,
         2157539,2160,-1,
         2157568,2160,408008,
         2157595,2160,-1,
        2157619,2160,-1,
       2157643,2160,-1,
       2157666,2160,408008,
        2157692,2160,408008,
         2157715,2160,408008,
         2157745,2160,-1,
         2157781,2160,408008,
         2157812,2160,-1,
        2157840,2160,-1,
        2157864,2160,408008,
        2157885,2160,-1,
       2157907,2160,-1,
      2157943,2160,-1,
     2157971,2160,-1,
    2157999,2160,-1,
    2158021,2160,408008,
     2158043,2160,408008,
      2158065,2160,408008,
       2158090,2160,408008,
        2158112,2160,408008,
         2158137,2160,408008,
          2158162,2160,408008,
           2158207,2160,408008,
           2158235,2160,-1,
           2158269,2160,408008,
           2158295,2160,-1,
          2158324,2160,-1,
          2158362,2160,408008,
          2158391,2160,-1,
         2158415,2160,-1,
         2158451,2160,408008,
          2158475,2160,408008,
          2158509,2160,-1,
          2158531,2160,408008,
          2158554,2160,-1,
         2158579,2160,-1,
        2158601,2160,-1,
        2158628,2160,408008,
         2158652,2160,408008,
          2158677,2160,408008,
          2158701,2160,-1,
          2158770,2160,408008,
          2158833,2160,-1,
         2158872,2160,-1,
         2158908,2160,408008,
         2158969,2160,-1,
        2159010,2160,-1,
       2159060,2160,-1,
       2159094,2160,408008,
        2159120,2160,408008,
         2159148,2160,408008,
          2159174,2160,408008,
          2159196,2160,-1,
          2159231,2160,408008,
          2159256,2160,-1,
         2159289,2160,-1,
         2159317,2160,408008,
         2159340,2160,-1,
        2159362,2160,-1,
        2159383,2160,408008,
         2159411,2160,408008,
         2159450,2160,-1,
         2159475,2160,408008,
         2159512,2160,-1,
        2159552,2160,-1,
       2159587,2160,-1,
      2159622,2160,-1,
      2159644,2160,408008,
       2159666,2160,408008,
        2159687,2160,408008,
         2159708,2160,408008,
          2159745,2160,408008,
          2159781,2160,-1,
          2159811,2160,408008,
          2159836,2160,-1,
         2159866,2160,-1,
         2159891,2160,408008,
         2159913,2160,-1,
        2159938,2160,-1,
        2159960,2160,408008,
         2159984,2160,408008,
         2160008,2160,-1,
         2160032,2160,408008,
         2160055,2160,-1,
        2160094,2160,-1,
       2160121,2160,-1,
       2160143,2160,408008,
        2160169,2160,408008,
         2160194,2160,408008,
         2160215,2160,-1,
         2160236,2160,408008,
         2160257,2160,-1,
        2160292,2160,-1,
        2160328,2160,408008,
        2160353,2160,-1,
       2160379,2160,-1,
      2160407,2160,-1,
     2160430,2160,-1,
     2160486,2160,408008,
      2160514,2160,408008,
       2160543,2160,408008,
        2160567,2160,408008,
         2160594,2160,408008,
          2160618,2160,408008,
          2160644,2160,-1,
          2160667,2160,408008,
          2160691,2160,-1,
         2160714,2160,-1,
         2160738,2160,408008,
         2160761,2160,-1,
        2160805,2160,-1,
        2160855,2160,408008,
         2160904,2160,408008,
         2160970,2160,-1,
         2161020,2160,408008,
         2161065,2160,-1,
        2161094,2160,-1,
       2161138,2160,-1,
       2161171,2160,408008,
        2161196,2160,408008,
         2161220,2160,408008,
         2161243,2160,-1,
         2161265,2160,408008,
         2161293,2160,-1,
        2161317,2160,-1,
        2161338,2160,408008,
        2161365,2160,-1,
       2161398,2160,-1,
      2161420,2160,-1,
      2161444,2160,408008,
       2161472,2160,408008,
        2161494,2160,408008,
         2161515,2160,408008,
         2161537,2160,-1,
         2161558,2160,408008,
         2161579,2160,-1,
        2161608,2160,-1,
        2161637,2160,408008,
        2161677,2160,-1,
       2161701,2160,-1,
       2161728,2160,408008,
        2161751,2160,408008,
        2161776,2160,-1,
        2161799,2160,408008,
        2161821,2160,-1,
       2161843,2160,-1,
      2161870,2160,-1,
     2161899,2160,-1,
    2161921,2160,-1,
   2161993,2160,-1,
   2162019,2160,408008,
    2162042,2160,408008,
     2162064,2160,408008,
      2162090,2160,408008,
       2162117,2160,408008,
        2162147,2160,408008,
         2162171,2160,408008,
          2162193,2160,408008,
           2162223,2160,408008,
           2162252,2160,-1,
           2162283,2160,408008,
           2162317,2160,-1,
          2162345,2160,-1,
          2162371,2160,408008,
          2162406,2160,-1,
         2162436,2160,-1,
         2162469,2160,408008,
          2162499,2160,408008,
          2162524,2160,-1,
          2162554,2160,408008,
          2162586,2160,-1,
         2162618,2160,-1,
        2162647,2160,-1,
        2162676,2160,408008,
         2162712,2160,408008,
          2162739,2160,408008,
          2162767,2160,-1,
          2162795,2160,408008,
          2162829,2160,-1,
         2162872,2160,-1,
         2162898,2160,408008,
         2162928,2160,-1,
        2162953,2160,-1,
       2162975,2160,-1,
       2162997,2160,408008,
        2163019,2160,408008,
         2163043,2160,408008,
          2163079,2160,408008,
          2163122,2160,-1,
          2163147,2160,408008,
          2163172,2160,-1,
         2163195,2160,-1,
         2163221,2160,408008,
         2163245,2160,-1,
        2163267,2160,-1,
        2163292,2160,408008,
         2163317,2160,408008,
         2163339,2160,-1,
         2163370,2160,408008,
         2163404,2160,-1,
        2163439,2160,-1,
       2163482,2160,-1,
      2163516,2160,-1,
      2163556,2160,408008,
       2163590,2160,408008,
        2163603,2160,408008,
         2163616,2160,408008,
          2163629,2160,408008,
          2163641,2160,-1,
          2163654,2160,408008,
          2163667,2160,-1,
         2163680,2160,-1,
         2163693,2160,408008,
         2163706,2160,-1,
        2163718,2160,-1,
        2163731,2160,408008,
         2163743,2160,408008,
         2163755,2160,-1,
         2163768,2160,408008,
         2163783,2160,-1,
        2163799,2160,-1,
       2163814,2160,-1,
       2163827,2160,408008,
        2163840,2160,408008,
         2163853,2160,408008,
         2163865,2160,-1,
         2163877,2160,408008,
         2163890,2160,-1,
        2163902,2160,-1,
        2163914,2160,408008,
        2163929,2160,-1,
       2163943,2160,-1,
      2163955,2160,-1,
     2163967,2160,-1,
     2163979,2160,408008,
      2163991,2160,408008,
       2164005,2160,408008,
        2164019,2160,408008,
         2164032,2160,408008,
          2164044,2160,408008,
          2164057,2160,-1,
          2164069,2160,408008,
          2164081,2160,-1,
         2164093,2160,-1,
         2164106,2160,408008,
         2164118,2160,-1,
        2164130,2160,-1,
        2164142,2160,408008,
         2164181,2160,408008,
         2164200,2160,-1,
         2164221,2160,408008,
         2164240,2160,-1,
        2164258,2160,-1,
       2164276,2160,-1,
       2164293,2160,408008,
        2164311,2160,408008,
         2164328,2160,408008,
         2164346,2160,-1,
         2164363,2160,408008,
         2164380,2160,-1,
        2164398,2160,-1,
        2164415,2160,408008,
        2164433,2160,-1,
       2164450,2160,-1,
      2164467,2160,-1,
      2164484,2160,408008,
       2164502,2160,408008,
        2164519,2160,408008,
         2164537,2160,408008,
         2164554,2160,-1,
         2164571,2160,408008,
         2164589,2160,-1,
        2164606,2160,-1,
        2164623,2160,408008,
        2164640,2160,-1,
       2164658,2160,-1,
       2164675,2160,408008,
        2164692,2160,408008,
        2164710,2160,-1,
        2164727,2160,408008,
        2164744,2160,-1,
       2164761,2160,-1,
      2164778,2160,-1,
     2164796,2160,-1,
    2164813,2160,-1,
    2164847,2160,408008,
     2164865,2160,408008,
      2164882,2160,408008,
       2164900,2160,408008,
        2164917,2160,408008,
         2164935,2160,408008,
          2164952,2160,408008,
          2164969,2160,-1,
          2164986,2160,408008,
          2165003,2160,-1,
         2165020,2160,-1,
         2165037,2160,408008,
         2165055,2160,-1,
        2165072,2160,-1,
        2165090,2160,408008,
         2165107,2160,408008,
         2165125,2160,-1,
         2165142,2160,408008,
         2165159,2160,-1,
        2165176,2160,-1,
       2165194,2160,-1,
       2165211,2160,408008,
        2165228,2160,408008,
         2165245,2160,408008,
         2165263,2160,-1,
         2165281,2160,408008,
         2165298,2160,-1,
        2165315,2160,-1,
        2165332,2160,408008,
        2165350,2160,-1,
       2165367,2160,-1,
      2165384,2160,-1,
      2165400,2160,408008,
       2165418,2160,408008,
        2165436,2160,408008,
         2165453,2160,408008,
         2165470,2160,-1,
         2165487,2160,408008,
         2165505,2160,-1,
        2165522,2160,-1,
        2165539,2160,408008,
        2165556,2160,-1,
       2165574,2160,-1,
       2165591,2160,408008,
        2165609,2160,408008,
        2165626,2160,-1,
        2165643,2160,408008,
        2165661,2160,-1,
       2165678,2160,-1,
      2165695,2160,-1,
     2165712,2160,-1,
     2165729,2160,408008,
      2165749,2160,408008,
       2165767,2160,408008,
        2165784,2160,408008,
         2165801,2160,408008,
         2165818,2160,-1,
         2165835,2160,408008,
         2165853,2160,-1,
        2165870,2160,-1,
        2165887,2160,408008,
        2165904,2160,-1,
       2165921,2160,-1,
       2165938,2160,408008,
        2165956,2160,408008,
        2165974,2160,-1,
        2165991,2160,408008,
        2166008,2160,-1,
       2166025,2160,-1,
      2166042,2160,-1,
      2166059,2160,408008,
       2166076,2160,408008,
        2166093,2160,408008,
        2166110,2160,-1,
        2166127,2160,408008,
        2166144,2160,-1,
       2166162,2160,-1,
       2166179,2160,408008,
       2166196,2160,-1,
      2166213,2160,-1,
     2166236,2160,-1,
    2166258,2160,-1,
   2166276,2160,-1,
  2166295,2160,-1,
 2166313,2160,-1,
 2166356,2160,27992,
 2166375,2160,-1,
 2166394,2160,27992,
 2166413,2160,-1,
 2166431,2160,27992,
 2166448,2160,-1,
 2166466,2160,27992,
 2166484,2160,-1,
 2166502,2160,27992,
 2166521,2160,-1,
 2166539,2160,27992,
 2166557,2160,-1,
 2166575,2160,27992,
 2166593,2160,-1,
 2166611,2160,27992,
 2166629,2160,-1,
 2166647,2160,27992,
 2166665,2160,-1,
 2166683,2160,27992,
 2166701,2160,-1,
 2166719,2160,27992,
 2166737,2160,-1,
 2166754,2160,27992,
 2166772,2160,-1,
 2166794,2160,27992,
 2166816,2160,-1,
 2166834,2160,27992,
 2166853,2160,-1,
 2166871,2160,27992,
 2166889,2160,-1,
 2166906,2160,27992,
 2166924,2160,-1,
 2166941,2160,27992,
 2166959,2160,-1,
 2166976,2160,27992,
 2166994,2160,-1,
 2167012,2160,27464,
 2167052,2160,-1,
 2167072,2160,26392,
 2167097,2160,-1,
 2167117,2160,26928,
 2167141,2160,-1,
 2167159,2160,25856,
 2167183,2160,-1,
 2167216,2160,27464,
 2167240,2160,-1,
 2167258,2160,26392,
 2167282,2160,-1,
 2167300,2160,26928,
 2167324,2160,-1,
 2167343,2160,25856,
 2167366,2160,-1,
 2167385,2160,25856,
 2167402,2160,-1,
 2167435,2160,400352,
  2167454,2160,400264,
  2167474,2160,-1,
 2167493,2160,-1,
 2167518,2160,400352,
  2167545,2160,400264,
  2167569,2160,-1,
 2167594,2160,-1,
 2167615,2160,400352,
  2167639,2160,400264,
  2167661,2160,-1,
 2167681,2160,-1,
 2167701,2160,400352,
  2167721,2160,400264,
   2167740,2160,400264,
   2167759,2160,-1,
  2167778,2160,-1,
 2167798,2160,-1,
 2167817,2160,400352,
  2167836,2160,400264,
   2167856,2160,400264,
   2167875,2160,-1,
  2167894,2160,-1,
 2167931,2160,-1,
 2167945,2160,400352,
  2167959,2160,400264,
   2167973,2160,400264,
   2167987,2160,-1,
  2168000,2160,-1,
 2168014,2160,-1,
 2168029,2160,400440,
 2168043,2160,-1,
 2168056,2160,400472,
 2168070,2160,-1,
 2168084,2160,400440,
 2168098,2160,-1,
 2168112,2160,400472,
 2168125,2160,-1,
 2168139,2160,400504,
 2168152,2160,-1,
 2168167,2160,400504,
 2168190,2160,-1,
 2168208,2160,400584,
 2168225,2160,-1,
 2168257,2160,400584,
 2168280,2160,-1,
 2168299,2160,400664,
 2168318,2160,-1,
 2168337,2160,400664,
 2168361,2160,-1,
 2168382,2160,400664,
 2168401,2160,-1,
 2168421,2160,400664,
 2168438,2160,-1,
 2168461,2160,400728,
 2168486,2160,-1,
 2168509,2160,400728,
 2168530,2160,-1,
 2168549,2160,400728,
 2168569,2160,-1,
 2168588,2160,400904,
 2168608,2160,-1,
 2168626,2160,400904,
 2168646,2160,-1,
 2168664,2160,401240,
  2168682,2160,400264,
  2168701,2160,-1,
 2168720,2160,-1,
 2168737,2160,401624,
  2168755,2160,55352,
  2168774,2160,-1,
  2168791,2160,55352,
  2168808,2160,-1,
 2168826,2160,-1,
 2168843,2160,401872,
  2168866,2160,55352,
  2168885,2160,-1,
  2168904,2160,55352,
  2168923,2160,-1,
 2168941,2160,-1,
 2168960,2160,401952,
  2168980,2160,56568,
  2169000,2160,-1,
  2169031,2160,57256,
  2169064,2160,-1,
 2169086,2160,-1,
 2169107,2160,401952,
  2169127,2160,56568,
  2169146,2160,-1,
  2169163,2160,57256,
  2169184,2160,-1,
 2169203,2160,-1,
 2169225,2160,400776,
 2169253,2160,-1,
 2169278,2160,400840,
 2169299,2160,-1,
 2169317,2160,400408,
 2169335,2160,-1,
 2169353,2160,400408,
 2169372,2160,-1,
 2169389,2160,400408,
 2169407,2160,-1,
 2169425,2160,400408,
 2169450,2160,-1,
 2169475,2160,400408,
 2169495,2160,-1,
 2169514,2160,400408,
 2169532,2160,-1,
 2169549,2160,400408,
 2169567,2160,-1,
 2169585,2160,400408,
 2169603,2160,-1,
 2169620,2160,400408,
 2169645,2160,-1,
 2169669,2160,400408,
 2169693,2160,-1,
 2169711,2160,400408,
 2169729,2160,-1,
 2169747,2160,400376,
 2169766,2160,-1,
 2169784,2160,400376,
 2169802,2160,-1,
 2169820,2160,400376,
 2169844,2160,-1,
 2169869,2160,400376,
 2169895,2160,-1,
 2169913,2160,400376,
 2169931,2160,-1,
 2169949,2160,400376,
 2169967,2160,-1,
 2169985,2160,400376,
 2170003,2160,-1,
 2170021,2160,400376,
 2170047,2160,-1,
 2170071,2160,400376,
 2170090,2160,-1,
 2170109,2160,400376,
 2170127,2160,-1,
 2170144,2160,400376,
 2170162,2160,-1,
 2170180,2160,36128,
 2170198,2160,-1,
 2170216,2160,36992,
 2170241,2160,-1,
 2170260,2160,35264,
 2170285,1136,-1,
 2170304,1136,35264,
 2170322,1056,-1,
 2170339,1056,35264,
 2170357,896,-1,
 2170375,896,35264,
 2170392,64,-1,
 2170410,64,32176,
 2170463,64,-1,
 2170482,64,32176,
 2170519,64,-1,
 2170538,64,27992,
 2170554,64,-1,
 2170578,64,37848,
 2170597,64,-1,
 2170620,64,27992,
 2170639,64,-1,
 2170656,64,36128,
 2170674,64,-1,
 2170692,64,32176,
 2170729,64,-1,
 2170747,64,32176,
 2170781,64,-1,
 2170806,64,408440,
  2170824,64,32176,
  2170932,64,-1,
 2170951,64,-1,
 2170967,64,408488,
  2170985,64,32176,
  2171071,64,-1,
 2171090,64,-1,
 2171106,64,408624,
  2171123,64,32176,
  2171155,64,-1,
  2171174,64,408440,
   2171197,64,32176,
   2171314,64,-1,
  2171332,64,-1,
 2171351,64,-1,
 2171369,64,408696,
  2171387,64,32176,
  2171417,64,-1,
  2171433,64,408488,
   2171463,64,32176,
   2171592,64,-1,
  2171611,64,-1,
 2171630,64,-1,
 2171647,64,408440,
  2171666,64,32176,
  2171749,64,-1,
 2171768,64,-1,
 2171786,64,408488,
  2171802,64,32176,
  2171926,64,-1,
 2171948,64,-1,
 2171967,64,408488,
  2171999,64,32176,
  2172091,64,-1,
 2172114,64,-1,
 2172134,64,32176,
 2172181,64,-1,
 2172197,64,32176,
 2172241,64,-1,
 2172265,64,32176,
 2172313,64,-1,
 2172333,64,32176,
 2172381,64,-1,
 2172398,64,32176,
 2172445,64,-1,
 2172462,64,32176,
 2172508,64,-1,
 2172523,64,32176,
 2172569,64,-1,
 2172587,64,32176,
 2172615,64,-1,
 2172630,64,32176,
 2172665,64,-1,
 2172680,64,32176,
 2172716,64,-1,
 2172732,64,32176,
 2172767,64,-1,
 2172782,64,32176,
 2172821,64,-1,
 2172837,64,32176,
 2172873,64,-1,
 2172888,64,32176,
 2172922,64,-1,
 2172938,64,32176,
 2172973,64,-1,
 2172989,64,32176,
 2173023,64,-1,
 2173038,64,32176,
 2173078,64,-1,
 2173095,64,32176,
 2173129,64,-1,
 2173143,64,32176,
 2173175,64,-1,
 2173188,64,32176,
 2173219,64,-1,
 2173231,64,24280,
 2173244,64,-1,
2173256,64,-1
	]
	, "functions": [{
		"": "halt(): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "halt"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 24280
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 31
		, "total": 31
		, "fails": 0
	}, {
		"": "typename.base(type: typename): typename"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "base"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 25856
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 64
		, "total": 64
		, "fails": 0
	}, {
		"": "typename.file(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "file"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26392
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 49
		, "total": 49
		, "fails": 0
	}, {
		"": "typename.line(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "line"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 26928
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 47
		, "total": 47
		, "fails": 0
	}, {
		"": "typename.name(type: typename): .cstr"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "name"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": ".cstr"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27464
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 63
		, "total": 63
		, "fails": 0
	}, {
		"": "typename.size(type: typename): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "size"
		, "owner": "typename"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 27992
		, "static": true
		, "const": true
		, "hits": 20
		, "time": 359
		, "total": 359
		, "fails": 0
	}, {
		"": "object.create(type: typename): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "create"
		, "owner": "object"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "type"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "type"
			, "type": "typename"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 28696
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 38
		, "total": 38
		, "fails": 0
	}, {
		"": "raise(file: char[*], line: int32, level: int32, trace: int32, message: char[*], inspect: variant): void"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "raise"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "void"
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "file"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "file"
			, "type": "char[*]"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": true
		}, {
			"": "line"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "line"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "level"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "level"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "trace"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "trace"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "message"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "message"
			, "type": "char[*]"
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": true
		}, {
			"": "inspect"
			, "kind": "variable"
			, "cast": "var"
			, "name": "inspect"
			, "type": "variant"
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": true
		}]
		, "size": 0
		, "offs": 32176
		, "static": true
		, "const": true
		, "hits": 34
		, "time": 1912
		, "total": 1912
		, "fails": 0
	}, {
		"": "tryExec(args: pointer, action(args: pointer): void): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tryExec"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "action(args: pointer): void"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "action"
			, "type": "function"
			, "args": [{
				"": ".result"
				, "kind": "variable"
				, "cast": "void"
				, "name": ".result"
				, "type": "void"
				, "size": 0
				, "offs": 0
				, "static": false
				, "const": false
			}, {
				"": "args"
				, "kind": "variable"
				, "cast": "ref"
				, "name": "args"
				, "type": "pointer"
				, "size": 4
				, "offs": 4
				, "static": false
				, "const": false
			}]
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 34560
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 6171
		, "total": 6171
		, "fails": 0
	}, {
		"": "pointer.alloc(ptr: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "alloc"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 35264
		, "static": true
		, "const": true
		, "hits": 8
		, "time": 164
		, "total": 164
		, "fails": 0
	}, {
		"": "pointer.fill(dst: pointer, value: uint8, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "fill"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "value"
			, "type": "uint8"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 36128
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 36
		, "total": 36
		, "fails": 0
	}, {
		"": "pointer.copy(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "copy"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 36992
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 25
		, "total": 25
		, "fails": 0
	}, {
		"": "pointer.move(dst: pointer, src: pointer, size: int32): pointer"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "move"
		, "owner": "pointer"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "dst"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "dst"
			, "type": "pointer"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "src"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "src"
			, "type": "pointer"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "size"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "size"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 37848
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 19
		, "total": 19
		, "fails": 0
	}, {
		"": "uint32.zxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 42336
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 133
		, "total": 133
		, "fails": 0
	}, {
		"": "uint32.sxt(value: int32, offs: int32, count: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43192
		, "static": true
		, "const": true
		, "hits": 7
		, "time": 131
		, "total": 131
		, "fails": 0
	}, {
		"": "uint32.pop(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pop"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 43728
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 16
		, "total": 16
		, "fails": 0
	}, {
		"": "uint32.swap(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "swap"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44264
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 16
		, "total": 16
		, "fails": 0
	}, {
		"": "uint32.bsr(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsr"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 44800
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 19
		, "total": 19
		, "fails": 0
	}, {
		"": "uint32.bsf(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "bsf"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45336
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 17
		, "total": 17
		, "fails": 0
	}, {
		"": "uint32.hib(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "hib"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 45872
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 17
		, "total": 17
		, "fails": 0
	}, {
		"": "uint32.lob(value: int32): int32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "lob"
		, "owner": "uint32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "value"
			, "type": "int32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 46408
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 16
		, "total": 16
		, "fails": 0
	}, {
		"": "uint64.zxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "zxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 47256
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 17
		, "total": 17
		, "fails": 0
	}, {
		"": "uint64.sxt(value: int64, offs: int32, count: int32): int64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sxt"
		, "owner": "uint64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "value"
			, "kind": "variable"
			, "cast": "i64"
			, "name": "value"
			, "type": "int64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "offs"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "offs"
			, "type": "int32"
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "count"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "count"
			, "type": "int32"
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48104
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 18
		, "total": 18
		, "fails": 0
	}, {
		"": "float32.sin(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 48640
		, "static": true
		, "const": true
		, "hits": 2
		, "time": 43
		, "total": 43
		, "fails": 0
	}, {
		"": "float32.cos(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49176
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 20
		, "total": 20
		, "fails": 0
	}, {
		"": "float32.tan(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 49712
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 17
		, "total": 17
		, "fails": 0
	}, {
		"": "float32.log(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50248
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 19
		, "total": 19
		, "fails": 0
	}, {
		"": "float32.exp(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 50784
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 16
		, "total": 16
		, "fails": 0
	}, {
		"": "float32.pow(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 51480
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 16
		, "total": 16
		, "fails": 0
	}, {
		"": "float32.sqrt(x: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 52016
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 17
		, "total": 17
		, "fails": 0
	}, {
		"": "float32.atan2(x: float32, y: float32): float32"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float32"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "x"
			, "type": "float32"
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "y"
			, "type": "float32"
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 52712
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 17
		, "total": 17
		, "fails": 0
	}, {
		"": "float64.sin(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sin"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53240
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 32
		, "total": 32
		, "fails": 0
	}, {
		"": "float64.cos(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "cos"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 53768
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 18
		, "total": 18
		, "fails": 0
	}, {
		"": "float64.tan(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 54296
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 21
		, "total": 21
		, "fails": 0
	}, {
		"": "float64.log(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "log"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 54824
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 18
		, "total": 18
		, "fails": 0
	}, {
		"": "float64.exp(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "exp"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 55352
		, "static": true
		, "const": true
		, "hits": 5
		, "time": 94
		, "total": 94
		, "fails": 0
	}, {
		"": "float64.pow(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "pow"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 56040
		, "static": true
		, "const": true
		, "hits": 1
		, "time": 18
		, "total": 18
		, "fails": 0
	}, {
		"": "float64.sqrt(x: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "sqrt"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 56568
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 57
		, "total": 57
		, "fails": 0
	}, {
		"": "float64.atan2(x: float64, y: float64): float64"
		, "kind": "inline"
		, "cast": "inline"
		, "name": "atan2"
		, "owner": "float64"
		, "type": "function"
		, "args": [{
			"": ".result"
			, "kind": "inline"
			, "cast": "inline"
			, "name": ".result"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "y"
			, "type": "float64"
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 0
		, "offs": 57256
		, "static": true
		, "const": true
		, "hits": 3
		, "time": 75
		, "total": 75
		, "fails": 0
	}, {
		"": "Math.modf(x: float64, intPart: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "modf"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 22
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "intPart"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "intPart"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 22
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 86
		, "offs": 400264
		, "static": true
		, "const": false
		, "hits": 10
		, "time": 241
		, "total": 241
		, "fails": 0
	}, {
		"": "Math.floor(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "floor"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 47
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 47
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 400352
		, "static": true
		, "const": false
		, "hits": 6
		, "time": 256
		, "total": 478
		, "fails": 0
	}, {
		"": "Math.absMod(val: float32, mod: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 82
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "val"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "mod"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 82
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 400376
		, "static": true
		, "const": false
		, "hits": 11
		, "time": 223
		, "total": 223
		, "fails": 0
	}, {
		"": "Math.absMod(val: float64, mod: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "absMod"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 90
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "val"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "val"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "mod"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "mod"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 90
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 27
		, "offs": 400408
		, "static": true
		, "const": false
		, "hits": 11
		, "time": 221
		, "total": 221
		, "fails": 0
	}, {
		"": "Math.clamp(t: float32, a: float32, b: float32): float32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 164
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f32"
			, "name": ".result"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "t"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 164
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 400440
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 27
		, "total": 27
		, "fails": 0
	}, {
		"": "Math.clamp(t: float64, a: float64, b: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "clamp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 175
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 175
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "t"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "t"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 175
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 175
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 175
			, "size": 8
			, "offs": 32
			, "static": false
			, "const": false
		}]
		, "size": 30
		, "offs": 400472
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 26
		, "total": 26
		, "fails": 0
	}, {
		"": "Math.min(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "min"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 206
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 206
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 206
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 400504
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 36
		, "total": 36
		, "fails": 0
	}, {
		"": "Math.max(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "max"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 220
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 220
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 220
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 79
		, "offs": 400584
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 39
		, "total": 39
		, "fails": 0
	}, {
		"": "Math.sum(data: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sum"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 234
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 234
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "data"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "data"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 234
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 40
		, "offs": 400664
		, "static": true
		, "const": false
		, "hits": 4
		, "time": 78
		, "total": 78
		, "fails": 0
	}, {
		"": "Math.eval(x: float64, polynomial: float64[]): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "eval"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 260
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 260
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 260
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "polynomial"
			, "kind": "variable"
			, "cast": "arr"
			, "name": "polynomial"
			, "type": "float64[]"
			, "file": "cmplStd/lib/math.ci"
			, "line": 260
			, "size": 8
			, "offs": 24
			, "static": false
			, "const": false
		}]
		, "size": 47
		, "offs": 400728
		, "static": true
		, "const": false
		, "hits": 3
		, "time": 64
		, "total": 64
		, "fails": 0
	}, {
		"": "Math.cmp(a: float32, b: float32, eps: float32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 269
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 269
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "a"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 269
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "b"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 269
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f32"
			, "name": "eps"
			, "type": "float32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 269
			, "size": 4
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 400776
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 28
		, "total": 28
		, "fails": 0
	}, {
		"": "Math.cmp(a: float64, b: float64, eps: float64): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cmp"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 284
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 284
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "a"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "a"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 284
			, "size": 8
			, "offs": 12
			, "static": false
			, "const": false
		}, {
			"": "b"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "b"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 284
			, "size": 8
			, "offs": 20
			, "static": false
			, "const": false
		}, {
			"": "eps"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "eps"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 284
			, "size": 8
			, "offs": 28
			, "static": false
			, "const": false
		}]
		, "size": 57
		, "offs": 400840
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 20
		, "total": 20
		, "fails": 0
	}, {
		"": "Math.sinCos(arg: float64, quad: int32): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinCos"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 299
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 299
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 299
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "quad"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "quad"
			, "type": "int32"
			, "file": "cmplStd/lib/math.ci"
			, "line": 299
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 335
		, "offs": 400904
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 40
		, "total": 40
		, "fails": 0
	}, {
		"": "Math.tan(arg: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "tan"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 356
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 356
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "arg"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "arg"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 356
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 378
		, "offs": 401240
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 37
		, "total": 56
		, "fails": 0
	}, {
		"": "Math.sinh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "sinh"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 413
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 413
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 413
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 241
		, "offs": 401624
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 53
		, "total": 89
		, "fails": 0
	}, {
		"": "Math.cosh(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "cosh"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 452
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 452
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 452
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 75
		, "offs": 401872
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 59
		, "total": 98
		, "fails": 0
	}, {
		"": "Math.asin(x: float64): float64"
		, "kind": "function"
		, "cast": "inline"
		, "name": "asin"
		, "owner": "Math"
		, "type": "function"
		, "file": "cmplStd/lib/math.ci"
		, "line": 467
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "f64"
			, "name": ".result"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 467
			, "size": 8
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "f64"
			, "name": "x"
			, "type": "float64"
			, "file": "cmplStd/lib/math.ci"
			, "line": 467
			, "size": 8
			, "offs": 16
			, "static": false
			, "const": false
		}]
		, "size": 173
		, "offs": 401952
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 129
		, "total": 222
		, "fails": 0
	}, {
		"": "noError(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "noError"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 11
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 11
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 11
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 1
		, "offs": 407024
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 21
		, "total": 21
		, "fails": 0
	}, {
		"": "stackOverflow(ptr: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "stackOverflow"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 14
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 14
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "ptr"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "ptr"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 14
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 24
		, "offs": 407032
		, "static": true
		, "const": false
		, "hits": 128
		, "time": 5591
		, "total": 5591
		, "fails": 128
	}, {
		"": "divisionByZero(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "divisionByZero"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 20
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 20
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 20
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 12
		, "offs": 407056
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 13
		, "total": 13
		, "fails": 1
	}, {
		"": "abortExecution(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "abortExecution"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 24
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 24
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 24
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 68
		, "offs": 407072
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 28
		, "total": 206
		, "fails": 1
	}, {
		"": "invalidMemoryAccess(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidMemoryAccess"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 38
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 13
		, "offs": 407144
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 12
		, "total": 12
		, "fails": 1
	}, {
		"": "invalidInstruction(args: pointer): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "invalidInstruction"
		, "type": "function"
		, "file": "cmplStd/test/std/tryExec.ci"
		, "line": 43
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 43
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "args"
			, "kind": "variable"
			, "cast": "ref"
			, "name": "args"
			, "type": "pointer"
			, "file": "cmplStd/test/std/tryExec.ci"
			, "line": 43
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 2
		, "offs": 407160
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 13
		, "total": 13
		, "fails": 1
	}, {
		"": "funAdd(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funAdd"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 7
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 7
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 407936
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 24
		, "total": 24
		, "fails": 0
	}, {
		"": "funMul(x: int32, y: int32): int32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "funMul"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 33
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "i32"
			, "name": ".result"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}, {
			"": "y"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "y"
			, "type": "int32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 33
			, "size": 4
			, "offs": 12
			, "static": false
			, "const": false
		}]
		, "size": 8
		, "offs": 408000
		, "static": true
		, "const": false
		, "hits": 2
		, "time": 41
		, "total": 41
		, "fails": 0
	}, {
		"": "fib(n: uint32): uint32"
		, "kind": "function"
		, "cast": "inline"
		, "name": "fib"
		, "type": "function"
		, "file": "cmplStd/test/lang/function.ci"
		, "line": 38
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "u32"
			, "name": ".result"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}, {
			"": "n"
			, "kind": "variable"
			, "cast": "u32"
			, "name": "n"
			, "type": "uint32"
			, "file": "cmplStd/test/lang/function.ci"
			, "line": 38
			, "size": 4
			, "offs": 8
			, "static": false
			, "const": false
		}]
		, "size": 54
		, "offs": 408008
		, "static": true
		, "const": false
		, "hits": 753
		, "time": 29886
		, "total": 29886
		, "fails": 0
	}, {
		"": "RecordMethodTest.staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 10
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 10
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 408440
		, "static": true
		, "const": false
		, "hits": 3
		, "time": 117
		, "total": 424
		, "fails": 0
	}, {
		"": "RecordMethodTest.virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "owner": "RecordMethodTest"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 40
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 40
			, "size": 4
			, "offs": 4
			, "static": false
			, "const": false
		}]
		, "size": 39
		, "offs": 408488
		, "static": true
		, "const": false
		, "hits": 4
		, "time": 175
		, "total": 608
		, "fails": 0
	}, {
		"": "staticMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "staticMethod"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 84
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 84
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 66
		, "offs": 408624
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 54
		, "total": 245
		, "fails": 0
	}, {
		"": "virtualMethod(this: RecordMethodTest, x: int32): void"
		, "kind": "function"
		, "cast": "inline"
		, "name": "virtualMethod"
		, "type": "function"
		, "file": "cmplStd/test/lang/init.method.ci"
		, "line": 90
		, "args": [{
			"": ".result"
			, "kind": "variable"
			, "cast": "void"
			, "name": ".result"
			, "type": "void"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 0
			, "offs": 0
			, "static": false
			, "const": false
		}, {
			"": "this"
			, "kind": "variable"
			, "cast": "val"
			, "name": "this"
			, "type": "RecordMethodTest"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 16
			, "offs": 16
			, "static": false
			, "const": false
		}, {
			"": "x"
			, "kind": "variable"
			, "cast": "i32"
			, "name": "x"
			, "type": "int32"
			, "file": "cmplStd/test/lang/init.method.ci"
			, "line": 90
			, "size": 4
			, "offs": 20
			, "static": false
			, "const": false
		}]
		, "size": 63
		, "offs": 408696
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 53
		, "total": 261
		, "fails": 0
	}, {
		"": ".main"
		, "kind": "function"
		, "cast": "inline"
		, "name": ".main"
		, "type": "function"
		, "size": 13419
		, "offs": 411388
		, "static": true
		, "const": false
		, "hits": 1
		, "time": 3328
		, "total": 44953
		, "fails": 0
	}]
	, "statements": [{
	}]
	, "ticksPerSec": 1000000
	, "functionCount": 115
	, "statementCount": 1237
}
}

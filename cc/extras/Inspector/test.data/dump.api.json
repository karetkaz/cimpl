{
"symbols": [{
	"proto": "typename"
	, "kind": ".rec"
	, "name": "typename"
	, "type": "typename"
	, "cast": ".ref"
	, "size": 0
	, "offs": 8
	, "const": true
	, "static": true
}, {
	"proto": "typename.line"
	, "kind": ".ref"
	, "name": "line"
	, "declaredIn": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 16
	, "const": true
	, "static": false
}, {
	"proto": "typename.size"
	, "kind": ".ref"
	, "name": "size"
	, "declaredIn": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 24
	, "const": true
	, "static": false
}, {
	"proto": "typename.offset"
	, "kind": ".ref"
	, "name": "offset"
	, "declaredIn": "typename"
	, "type": "int32"
	, "size": 4
	, "offs": 32
	, "const": true
	, "static": false
}, {
	"proto": "typename.file"
	, "kind": ".def"
	, "name": "file"
	, "declaredIn": "typename"
	, "type": "string"
	, "size": 56
	, "offs": 260328
	, "const": false
	, "static": false
	, "ast": {
		"proto": "emit(libc(1))"
		, "kind": "(?)"
		, "type": "string"
		, "args": [{
			"proto": "libc(1)"
			, "kind": ".ref"
			, "type": "libc(1)"
			, "value": "libc(1)"
		}]
	}
}, {
	"proto": "typename.name"
	, "kind": ".def"
	, "name": "name"
	, "declaredIn": "typename"
	, "type": "string"
	, "size": 56
	, "offs": 260384
	, "const": false
	, "static": false
	, "ast": {
		"proto": "emit(libc(2))"
		, "kind": "(?)"
		, "type": "string"
		, "args": [{
			"proto": "libc(2)"
			, "kind": ".ref"
			, "type": "libc(2)"
			, "value": "libc(2)"
		}]
	}
}, {
	"proto": "typename.base(type: typename)"
	, "kind": ".def"
	, "name": "base"
	, "declaredIn": "typename"
	, "type": "typename"
	, "args": [{
		"proto": "typename.base.type"
		, "kind": ".ref"
		, "name": "type"
		, "declaredIn": "typename.base(type: typename)"
		, "type": "typename"
		, "cast": ".ref"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260440
	, "const": false
	, "static": false
	, "ast": {
		"proto": "emit(libc(3), type)"
		, "kind": "(?)"
		, "type": "typename"
		, "args": [{
			"proto": "type"
			, "kind": ".ref"
			, "type": "typename"
			, "cast": ".ref"
			, "value": "type"
		}, {
			"proto": "libc(3)"
			, "kind": ".ref"
			, "type": "libc(3)"
			, "value": "libc(3)"
		}]
	}
}, {
	"proto": "void"
	, "kind": ".rec"
	, "name": "void"
	, "type": "typename"
	, "cast": ".vid"
	, "size": 0
	, "offs": 176
	, "const": true
	, "static": true
}, {
	"proto": "bool"
	, "kind": ".rec"
	, "name": "bool"
	, "type": "typename"
	, "cast": ".bit"
	, "size": 4
	, "offs": 336
	, "const": true
	, "static": true
}, {
	"proto": "int8"
	, "kind": ".rec"
	, "name": "int8"
	, "type": "typename"
	, "cast": ".i32"
	, "size": 1
	, "offs": 496
	, "const": true
	, "static": true
}, {
	"proto": "int16"
	, "kind": ".rec"
	, "name": "int16"
	, "type": "typename"
	, "cast": ".i32"
	, "size": 2
	, "offs": 656
	, "const": true
	, "static": true
}, {
	"proto": "int32"
	, "kind": ".rec"
	, "name": "int32"
	, "type": "typename"
	, "cast": ".i32"
	, "size": 4
	, "offs": 816
	, "const": true
	, "static": true
}, {
	"proto": "int64"
	, "kind": ".rec"
	, "name": "int64"
	, "type": "typename"
	, "cast": ".i64"
	, "size": 8
	, "offs": 976
	, "const": true
	, "static": true
}, {
	"proto": "int64.Not(Value: int64)"
	, "kind": ".def"
	, "name": "Not"
	, "declaredIn": "int64"
	, "type": "int64"
	, "args": [{
		"proto": "int64.Not.Value"
		, "kind": ".def"
		, "name": "Value"
		, "declaredIn": "int64.Not(Value: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261168
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(16), Value)"
		, "kind": "(?)"
		, "type": "int64"
		, "args": [{
			"proto": "Value"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Value"
		}, {
			"proto": "libc(16)"
			, "kind": ".ref"
			, "type": "libc(16)"
			, "value": "libc(16)"
		}]
	}
}, {
	"proto": "int64.And(Lhs: int64, Rhs: int64)"
	, "kind": ".def"
	, "name": "And"
	, "declaredIn": "int64"
	, "type": "int64"
	, "args": [{
		"proto": "int64.And.Lhs"
		, "kind": ".def"
		, "name": "Lhs"
		, "declaredIn": "int64.And(Lhs: int64, Rhs: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "int64.And.Rhs"
		, "kind": ".def"
		, "name": "Rhs"
		, "declaredIn": "int64.And(Lhs: int64, Rhs: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261224
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(17), Lhs, Rhs)"
		, "kind": "(?)"
		, "type": "int64"
		, "args": [{
			"proto": "Rhs"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Rhs"
		}, {
			"proto": "Lhs"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Lhs"
		}, {
			"proto": "libc(17)"
			, "kind": ".ref"
			, "type": "libc(17)"
			, "value": "libc(17)"
		}]
	}
}, {
	"proto": "int64.Or(Lhs: int64, Rhs: int64)"
	, "kind": ".def"
	, "name": "Or"
	, "declaredIn": "int64"
	, "type": "int64"
	, "args": [{
		"proto": "int64.Or.Lhs"
		, "kind": ".def"
		, "name": "Lhs"
		, "declaredIn": "int64.Or(Lhs: int64, Rhs: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "int64.Or.Rhs"
		, "kind": ".def"
		, "name": "Rhs"
		, "declaredIn": "int64.Or(Lhs: int64, Rhs: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261280
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(18), Lhs, Rhs)"
		, "kind": "(?)"
		, "type": "int64"
		, "args": [{
			"proto": "Rhs"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Rhs"
		}, {
			"proto": "Lhs"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Lhs"
		}, {
			"proto": "libc(18)"
			, "kind": ".ref"
			, "type": "libc(18)"
			, "value": "libc(18)"
		}]
	}
}, {
	"proto": "int64.Xor(Lhs: int64, Rhs: int64)"
	, "kind": ".def"
	, "name": "Xor"
	, "declaredIn": "int64"
	, "type": "int64"
	, "args": [{
		"proto": "int64.Xor.Lhs"
		, "kind": ".def"
		, "name": "Lhs"
		, "declaredIn": "int64.Xor(Lhs: int64, Rhs: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "int64.Xor.Rhs"
		, "kind": ".def"
		, "name": "Rhs"
		, "declaredIn": "int64.Xor(Lhs: int64, Rhs: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261336
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(19), Lhs, Rhs)"
		, "kind": "(?)"
		, "type": "int64"
		, "args": [{
			"proto": "Rhs"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Rhs"
		}, {
			"proto": "Lhs"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Lhs"
		}, {
			"proto": "libc(19)"
			, "kind": ".ref"
			, "type": "libc(19)"
			, "value": "libc(19)"
		}]
	}
}, {
	"proto": "int64.Shl(Value: int64, Count: int32)"
	, "kind": ".def"
	, "name": "Shl"
	, "declaredIn": "int64"
	, "type": "int64"
	, "args": [{
		"proto": "int64.Shl.Value"
		, "kind": ".def"
		, "name": "Value"
		, "declaredIn": "int64.Shl(Value: int64, Count: int32)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "int64.Shl.Count"
		, "kind": ".def"
		, "name": "Count"
		, "declaredIn": "int64.Shl(Value: int64, Count: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261392
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(20), Value, Count)"
		, "kind": "(?)"
		, "type": "int64"
		, "args": [{
			"proto": "Count"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "Count"
		}, {
			"proto": "Value"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Value"
		}, {
			"proto": "libc(20)"
			, "kind": ".ref"
			, "type": "libc(20)"
			, "value": "libc(20)"
		}]
	}
}, {
	"proto": "int64.Shr(Value: int64, Count: int32)"
	, "kind": ".def"
	, "name": "Shr"
	, "declaredIn": "int64"
	, "type": "int64"
	, "args": [{
		"proto": "int64.Shr.Value"
		, "kind": ".def"
		, "name": "Value"
		, "declaredIn": "int64.Shr(Value: int64, Count: int32)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "int64.Shr.Count"
		, "kind": ".def"
		, "name": "Count"
		, "declaredIn": "int64.Shr(Value: int64, Count: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261448
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(21), Value, Count)"
		, "kind": "(?)"
		, "type": "int64"
		, "args": [{
			"proto": "Count"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "Count"
		}, {
			"proto": "Value"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Value"
		}, {
			"proto": "libc(21)"
			, "kind": ".ref"
			, "type": "libc(21)"
			, "value": "libc(21)"
		}]
	}
}, {
	"proto": "int64.Sar(Value: int64, Count: int32)"
	, "kind": ".def"
	, "name": "Sar"
	, "declaredIn": "int64"
	, "type": "int64"
	, "args": [{
		"proto": "int64.Sar.Value"
		, "kind": ".def"
		, "name": "Value"
		, "declaredIn": "int64.Sar(Value: int64, Count: int32)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "int64.Sar.Count"
		, "kind": ".def"
		, "name": "Count"
		, "declaredIn": "int64.Sar(Value: int64, Count: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261504
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(22), Value, Count)"
		, "kind": "(?)"
		, "type": "int64"
		, "args": [{
			"proto": "Count"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "Count"
		}, {
			"proto": "Value"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "Value"
		}, {
			"proto": "libc(22)"
			, "kind": ".ref"
			, "type": "libc(22)"
			, "value": "libc(22)"
		}]
	}
}, {
	"proto": "uint8"
	, "kind": ".rec"
	, "name": "uint8"
	, "type": "typename"
	, "cast": ".u32"
	, "size": 1
	, "offs": 1136
	, "const": true
	, "static": true
}, {
	"proto": "uint16"
	, "kind": ".rec"
	, "name": "uint16"
	, "type": "typename"
	, "cast": ".u32"
	, "size": 2
	, "offs": 1296
	, "const": true
	, "static": true
}, {
	"proto": "uint32"
	, "kind": ".rec"
	, "name": "uint32"
	, "type": "typename"
	, "cast": ".u32"
	, "size": 4
	, "offs": 1456
	, "const": true
	, "static": true
}, {
	"proto": "float32"
	, "kind": ".rec"
	, "name": "float32"
	, "type": "typename"
	, "cast": ".f32"
	, "size": 4
	, "offs": 1616
	, "const": true
	, "static": true
}, {
	"proto": "float32.sin(x: float32)"
	, "kind": ".def"
	, "name": "sin"
	, "declaredIn": "float32"
	, "type": "float32"
	, "args": [{
		"proto": "float32.sin.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float32.sin(x: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262008
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(31), x)"
		, "kind": "(?)"
		, "type": "float32"
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "x"
		}, {
			"proto": "libc(31)"
			, "kind": ".ref"
			, "type": "libc(31)"
			, "value": "libc(31)"
		}]
	}
}, {
	"proto": "float32.cos(x: float32)"
	, "kind": ".def"
	, "name": "cos"
	, "declaredIn": "float32"
	, "type": "float32"
	, "args": [{
		"proto": "float32.cos.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float32.cos(x: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262064
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(32), x)"
		, "kind": "(?)"
		, "type": "float32"
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "x"
		}, {
			"proto": "libc(32)"
			, "kind": ".ref"
			, "type": "libc(32)"
			, "value": "libc(32)"
		}]
	}
}, {
	"proto": "float32.tan(x: float32)"
	, "kind": ".def"
	, "name": "tan"
	, "declaredIn": "float32"
	, "type": "float32"
	, "args": [{
		"proto": "float32.tan.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float32.tan(x: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262120
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(33), x)"
		, "kind": "(?)"
		, "type": "float32"
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "x"
		}, {
			"proto": "libc(33)"
			, "kind": ".ref"
			, "type": "libc(33)"
			, "value": "libc(33)"
		}]
	}
}, {
	"proto": "float32.log(x: float32)"
	, "kind": ".def"
	, "name": "log"
	, "declaredIn": "float32"
	, "type": "float32"
	, "args": [{
		"proto": "float32.log.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float32.log(x: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262176
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(34), x)"
		, "kind": "(?)"
		, "type": "float32"
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "x"
		}, {
			"proto": "libc(34)"
			, "kind": ".ref"
			, "type": "libc(34)"
			, "value": "libc(34)"
		}]
	}
}, {
	"proto": "float32.exp(x: float32)"
	, "kind": ".def"
	, "name": "exp"
	, "declaredIn": "float32"
	, "type": "float32"
	, "args": [{
		"proto": "float32.exp.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float32.exp(x: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262232
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(35), x)"
		, "kind": "(?)"
		, "type": "float32"
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "x"
		}, {
			"proto": "libc(35)"
			, "kind": ".ref"
			, "type": "libc(35)"
			, "value": "libc(35)"
		}]
	}
}, {
	"proto": "float32.pow(x: float32, y: float32)"
	, "kind": ".def"
	, "name": "pow"
	, "declaredIn": "float32"
	, "type": "float32"
	, "args": [{
		"proto": "float32.pow.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float32.pow(x: float32, y: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}, {
		"proto": "float32.pow.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "float32.pow(x: float32, y: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262288
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(36), x, y)"
		, "kind": "(?)"
		, "type": "float32"
		, "args": [{
			"proto": "y"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "x"
		}, {
			"proto": "libc(36)"
			, "kind": ".ref"
			, "type": "libc(36)"
			, "value": "libc(36)"
		}]
	}
}, {
	"proto": "float32.sqrt(x: float32)"
	, "kind": ".def"
	, "name": "sqrt"
	, "declaredIn": "float32"
	, "type": "float32"
	, "args": [{
		"proto": "float32.sqrt.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float32.sqrt(x: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262344
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(37), x)"
		, "kind": "(?)"
		, "type": "float32"
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "x"
		}, {
			"proto": "libc(37)"
			, "kind": ".ref"
			, "type": "libc(37)"
			, "value": "libc(37)"
		}]
	}
}, {
	"proto": "float32.atan2(x: float32, y: float32)"
	, "kind": ".def"
	, "name": "atan2"
	, "declaredIn": "float32"
	, "type": "float32"
	, "args": [{
		"proto": "float32.atan2.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float32.atan2(x: float32, y: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}, {
		"proto": "float32.atan2.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "float32.atan2(x: float32, y: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262400
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(38), x, y)"
		, "kind": "(?)"
		, "type": "float32"
		, "args": [{
			"proto": "y"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "value": "x"
		}, {
			"proto": "libc(38)"
			, "kind": ".ref"
			, "type": "libc(38)"
			, "value": "libc(38)"
		}]
	}
}, {
	"proto": "float64"
	, "kind": ".rec"
	, "name": "float64"
	, "type": "typename"
	, "cast": ".f64"
	, "size": 8
	, "offs": 1776
	, "const": true
	, "static": true
}, {
	"proto": "float64.sin(x: float64)"
	, "kind": ".def"
	, "name": "sin"
	, "declaredIn": "float64"
	, "type": "float64"
	, "args": [{
		"proto": "float64.sin.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float64.sin(x: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261560
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(23), x)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1173
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "x"
		}, {
			"proto": "libc(23)"
			, "kind": ".ref"
			, "type": "libc(23)"
			, "value": "libc(23)"
		}]
	}
}, {
	"proto": "float64.cos(x: float64)"
	, "kind": ".def"
	, "name": "cos"
	, "declaredIn": "float64"
	, "type": "float64"
	, "args": [{
		"proto": "float64.cos.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float64.cos(x: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261616
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(24), x)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1173
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "x"
		}, {
			"proto": "libc(24)"
			, "kind": ".ref"
			, "type": "libc(24)"
			, "value": "libc(24)"
		}]
	}
}, {
	"proto": "float64.tan(x: float64)"
	, "kind": ".def"
	, "name": "tan"
	, "declaredIn": "float64"
	, "type": "float64"
	, "args": [{
		"proto": "float64.tan.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float64.tan(x: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261672
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(25), x)"
		, "kind": "(?)"
		, "type": "float64"
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "x"
		}, {
			"proto": "libc(25)"
			, "kind": ".ref"
			, "type": "libc(25)"
			, "value": "libc(25)"
		}]
	}
}, {
	"proto": "float64.log(x: float64)"
	, "kind": ".def"
	, "name": "log"
	, "declaredIn": "float64"
	, "type": "float64"
	, "args": [{
		"proto": "float64.log.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float64.log(x: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261728
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(26), x)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1171
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "x"
		}, {
			"proto": "libc(26)"
			, "kind": ".ref"
			, "type": "libc(26)"
			, "value": "libc(26)"
		}]
	}
}, {
	"proto": "float64.exp(x: float64)"
	, "kind": ".def"
	, "name": "exp"
	, "declaredIn": "float64"
	, "type": "float64"
	, "args": [{
		"proto": "float64.exp.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float64.exp(x: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261784
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(27), x)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1172
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "x"
		}, {
			"proto": "libc(27)"
			, "kind": ".ref"
			, "type": "libc(27)"
			, "value": "libc(27)"
		}]
	}
}, {
	"proto": "float64.pow(x: float64, y: float64)"
	, "kind": ".def"
	, "name": "pow"
	, "declaredIn": "float64"
	, "type": "float64"
	, "args": [{
		"proto": "float64.pow.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float64.pow(x: float64, y: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "float64.pow.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "float64.pow(x: float64, y: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261840
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(28), x, y)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1172
		, "args": [{
			"proto": "y"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "x"
		}, {
			"proto": "libc(28)"
			, "kind": ".ref"
			, "type": "libc(28)"
			, "value": "libc(28)"
		}]
	}
}, {
	"proto": "float64.sqrt(x: float64)"
	, "kind": ".def"
	, "name": "sqrt"
	, "declaredIn": "float64"
	, "type": "float64"
	, "args": [{
		"proto": "float64.sqrt.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float64.sqrt(x: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261896
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(29), x)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1169
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "x"
		}, {
			"proto": "libc(29)"
			, "kind": ".ref"
			, "type": "libc(29)"
			, "value": "libc(29)"
		}]
	}
}, {
	"proto": "float64.atan2(x: float64, y: float64)"
	, "kind": ".def"
	, "name": "atan2"
	, "declaredIn": "float64"
	, "type": "float64"
	, "args": [{
		"proto": "float64.atan2.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "float64.atan2(x: float64, y: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "float64.atan2.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "float64.atan2(x: float64, y: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261952
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(30), x, y)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1170
		, "args": [{
			"proto": "y"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "value": "x"
		}, {
			"proto": "libc(30)"
			, "kind": ".ref"
			, "type": "libc(30)"
			, "value": "libc(30)"
		}]
	}
}, {
	"proto": "char"
	, "kind": ".rec"
	, "name": "char"
	, "type": "typename"
	, "cast": ".u32"
	, "size": 1
	, "offs": 1936
	, "const": true
	, "static": true
}, {
	"proto": "pointer"
	, "kind": ".rec"
	, "name": "pointer"
	, "type": "typename"
	, "cast": ".ref"
	, "size": 4
	, "offs": 2096
	, "const": true
	, "static": true
}, {
	"proto": "null"
	, "kind": ".ref"
	, "name": "null"
	, "type": "pointer"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
}, {
	"proto": "variant"
	, "kind": ".rec"
	, "name": "variant"
	, "type": "typename"
	, "cast": ".rec"
	, "size": 8
	, "offs": 2416
	, "const": true
	, "static": true
}, {
	"proto": "object"
	, "kind": ".rec"
	, "name": "object"
	, "type": "typename"
	, "cast": ".ref"
	, "size": 8
	, "offs": 2576
	, "const": true
	, "static": true
}, {
	"proto": "int"
	, "kind": ".def"
	, "name": "int"
	, "type": "int32"
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
}, {
	"proto": "byte"
	, "kind": ".def"
	, "name": "byte"
	, "type": "int8"
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
}, {
	"proto": "long"
	, "kind": ".def"
	, "name": "long"
	, "type": "int64"
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
}, {
	"proto": "float"
	, "kind": ".def"
	, "name": "float"
	, "type": "float32"
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
}, {
	"proto": "double"
	, "kind": ".def"
	, "name": "double"
	, "type": "float64"
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
}, {
	"proto": "true"
	, "kind": ".def"
	, "name": "true"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "1"
	}
}, {
	"proto": "false"
	, "kind": ".def"
	, "name": "false"
	, "type": "bool"
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "0"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "0"
	}
}, {
	"proto": "string"
	, "kind": ".arr"
	, "name": "string"
	, "type": "char"
	, "cast": ".ref"
	, "size": 4
	, "offs": 3856
	, "const": true
	, "static": true
	, "ast": {
		"proto": "-1"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "-1"
	}
}, {
	"proto": "emit"
	, "kind": "emit"
	, "name": "emit"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
}, {
	"proto": "emit.nop"
	, "kind": "emit"
	, "name": "nop"
	, "declaredIn": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
}, {
	"proto": "emit.not"
	, "kind": "emit"
	, "name": "not"
	, "declaredIn": "emit"
	, "type": "bool"
	, "size": 0
	, "offs": 55
	, "const": false
	, "static": true
}, {
	"proto": "emit.set(1)"
	, "kind": "emit"
	, "name": "set(1)"
	, "declaredIn": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 21
	, "const": false
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "1"
	}
}, {
	"proto": "emit.join(1)"
	, "kind": "emit"
	, "name": "join(1)"
	, "declaredIn": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 8
	, "const": false
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "1"
	}
}, {
	"proto": "emit.call"
	, "kind": "emit"
	, "name": "call"
	, "declaredIn": "emit"
	, "type": "void"
	, "size": 0
	, "offs": 2
	, "const": false
	, "static": true
}, {
	"proto": "emit.p4x"
	, "kind": ".rec"
	, "name": "p4x"
	, "declaredIn": "emit"
	, "type": "typename"
	, "cast": ".rec"
	, "size": 16
	, "offs": 4976
	, "const": true
	, "static": true
}, {
	"proto": "emit.p4x.dp3"
	, "kind": "emit"
	, "name": "dp3"
	, "declaredIn": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 138
	, "const": false
	, "static": true
}, {
	"proto": "emit.p4x.dp4"
	, "kind": "emit"
	, "name": "dp4"
	, "declaredIn": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 139
	, "const": false
	, "static": true
}, {
	"proto": "emit.p4x.dph"
	, "kind": "emit"
	, "name": "dph"
	, "declaredIn": "emit.p4x"
	, "type": "float32"
	, "size": 0
	, "offs": 140
	, "const": false
	, "static": true
}, {
	"proto": "emit.p4x.xxxx(0)"
	, "kind": "emit"
	, "name": "xxxx(0)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "0"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "0"
	}
}, {
	"proto": "emit.p4x.yxxx(1)"
	, "kind": "emit"
	, "name": "yxxx(1)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "1"
	}
}, {
	"proto": "emit.p4x.zxxx(2)"
	, "kind": "emit"
	, "name": "zxxx(2)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "2"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "2"
	}
}, {
	"proto": "emit.p4x.wxxx(3)"
	, "kind": "emit"
	, "name": "wxxx(3)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "3"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "3"
	}
}, {
	"proto": "emit.p4x.xyxx(4)"
	, "kind": "emit"
	, "name": "xyxx(4)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "4"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "4"
	}
}, {
	"proto": "emit.p4x.yyxx(5)"
	, "kind": "emit"
	, "name": "yyxx(5)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "5"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "5"
	}
}, {
	"proto": "emit.p4x.zyxx(6)"
	, "kind": "emit"
	, "name": "zyxx(6)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "6"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "6"
	}
}, {
	"proto": "emit.p4x.wyxx(7)"
	, "kind": "emit"
	, "name": "wyxx(7)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "7"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "7"
	}
}, {
	"proto": "emit.p4x.xzxx(8)"
	, "kind": "emit"
	, "name": "xzxx(8)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "8"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "8"
	}
}, {
	"proto": "emit.p4x.yzxx(9)"
	, "kind": "emit"
	, "name": "yzxx(9)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "9"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "9"
	}
}, {
	"proto": "emit.p4x.zzxx(10)"
	, "kind": "emit"
	, "name": "zzxx(10)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "10"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "10"
	}
}, {
	"proto": "emit.p4x.wzxx(11)"
	, "kind": "emit"
	, "name": "wzxx(11)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "11"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "11"
	}
}, {
	"proto": "emit.p4x.xwxx(12)"
	, "kind": "emit"
	, "name": "xwxx(12)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "12"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "12"
	}
}, {
	"proto": "emit.p4x.ywxx(13)"
	, "kind": "emit"
	, "name": "ywxx(13)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "13"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "13"
	}
}, {
	"proto": "emit.p4x.zwxx(14)"
	, "kind": "emit"
	, "name": "zwxx(14)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "14"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "14"
	}
}, {
	"proto": "emit.p4x.wwxx(15)"
	, "kind": "emit"
	, "name": "wwxx(15)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "15"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "15"
	}
}, {
	"proto": "emit.p4x.xxyx(16)"
	, "kind": "emit"
	, "name": "xxyx(16)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "16"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "16"
	}
}, {
	"proto": "emit.p4x.yxyx(17)"
	, "kind": "emit"
	, "name": "yxyx(17)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "17"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "17"
	}
}, {
	"proto": "emit.p4x.zxyx(18)"
	, "kind": "emit"
	, "name": "zxyx(18)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "18"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "18"
	}
}, {
	"proto": "emit.p4x.wxyx(19)"
	, "kind": "emit"
	, "name": "wxyx(19)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "19"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "19"
	}
}, {
	"proto": "emit.p4x.xyyx(20)"
	, "kind": "emit"
	, "name": "xyyx(20)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "20"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "20"
	}
}, {
	"proto": "emit.p4x.yyyx(21)"
	, "kind": "emit"
	, "name": "yyyx(21)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "21"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "21"
	}
}, {
	"proto": "emit.p4x.zyyx(22)"
	, "kind": "emit"
	, "name": "zyyx(22)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "22"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "22"
	}
}, {
	"proto": "emit.p4x.wyyx(23)"
	, "kind": "emit"
	, "name": "wyyx(23)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "23"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "23"
	}
}, {
	"proto": "emit.p4x.xzyx(24)"
	, "kind": "emit"
	, "name": "xzyx(24)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "24"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "24"
	}
}, {
	"proto": "emit.p4x.yzyx(25)"
	, "kind": "emit"
	, "name": "yzyx(25)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "25"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "25"
	}
}, {
	"proto": "emit.p4x.zzyx(26)"
	, "kind": "emit"
	, "name": "zzyx(26)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "26"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "26"
	}
}, {
	"proto": "emit.p4x.wzyx(27)"
	, "kind": "emit"
	, "name": "wzyx(27)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "27"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "27"
	}
}, {
	"proto": "emit.p4x.xwyx(28)"
	, "kind": "emit"
	, "name": "xwyx(28)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "28"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "28"
	}
}, {
	"proto": "emit.p4x.ywyx(29)"
	, "kind": "emit"
	, "name": "ywyx(29)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "29"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "29"
	}
}, {
	"proto": "emit.p4x.zwyx(30)"
	, "kind": "emit"
	, "name": "zwyx(30)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "30"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "30"
	}
}, {
	"proto": "emit.p4x.wwyx(31)"
	, "kind": "emit"
	, "name": "wwyx(31)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "31"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "31"
	}
}, {
	"proto": "emit.p4x.xxzx(32)"
	, "kind": "emit"
	, "name": "xxzx(32)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "32"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "32"
	}
}, {
	"proto": "emit.p4x.yxzx(33)"
	, "kind": "emit"
	, "name": "yxzx(33)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "33"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "33"
	}
}, {
	"proto": "emit.p4x.zxzx(34)"
	, "kind": "emit"
	, "name": "zxzx(34)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "34"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "34"
	}
}, {
	"proto": "emit.p4x.wxzx(35)"
	, "kind": "emit"
	, "name": "wxzx(35)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "35"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "35"
	}
}, {
	"proto": "emit.p4x.xyzx(36)"
	, "kind": "emit"
	, "name": "xyzx(36)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "36"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "36"
	}
}, {
	"proto": "emit.p4x.yyzx(37)"
	, "kind": "emit"
	, "name": "yyzx(37)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "37"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "37"
	}
}, {
	"proto": "emit.p4x.zyzx(38)"
	, "kind": "emit"
	, "name": "zyzx(38)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "38"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "38"
	}
}, {
	"proto": "emit.p4x.wyzx(39)"
	, "kind": "emit"
	, "name": "wyzx(39)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "39"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "39"
	}
}, {
	"proto": "emit.p4x.xzzx(40)"
	, "kind": "emit"
	, "name": "xzzx(40)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "40"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "40"
	}
}, {
	"proto": "emit.p4x.yzzx(41)"
	, "kind": "emit"
	, "name": "yzzx(41)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "41"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "41"
	}
}, {
	"proto": "emit.p4x.zzzx(42)"
	, "kind": "emit"
	, "name": "zzzx(42)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "42"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "42"
	}
}, {
	"proto": "emit.p4x.wzzx(43)"
	, "kind": "emit"
	, "name": "wzzx(43)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "43"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "43"
	}
}, {
	"proto": "emit.p4x.xwzx(44)"
	, "kind": "emit"
	, "name": "xwzx(44)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "44"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "44"
	}
}, {
	"proto": "emit.p4x.ywzx(45)"
	, "kind": "emit"
	, "name": "ywzx(45)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "45"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "45"
	}
}, {
	"proto": "emit.p4x.zwzx(46)"
	, "kind": "emit"
	, "name": "zwzx(46)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "46"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "46"
	}
}, {
	"proto": "emit.p4x.wwzx(47)"
	, "kind": "emit"
	, "name": "wwzx(47)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "47"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "47"
	}
}, {
	"proto": "emit.p4x.xxwx(48)"
	, "kind": "emit"
	, "name": "xxwx(48)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "48"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "48"
	}
}, {
	"proto": "emit.p4x.yxwx(49)"
	, "kind": "emit"
	, "name": "yxwx(49)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "49"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "49"
	}
}, {
	"proto": "emit.p4x.zxwx(50)"
	, "kind": "emit"
	, "name": "zxwx(50)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "50"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "50"
	}
}, {
	"proto": "emit.p4x.wxwx(51)"
	, "kind": "emit"
	, "name": "wxwx(51)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "51"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "51"
	}
}, {
	"proto": "emit.p4x.xywx(52)"
	, "kind": "emit"
	, "name": "xywx(52)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "52"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "52"
	}
}, {
	"proto": "emit.p4x.yywx(53)"
	, "kind": "emit"
	, "name": "yywx(53)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "53"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "53"
	}
}, {
	"proto": "emit.p4x.zywx(54)"
	, "kind": "emit"
	, "name": "zywx(54)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "54"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "54"
	}
}, {
	"proto": "emit.p4x.wywx(55)"
	, "kind": "emit"
	, "name": "wywx(55)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "55"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "55"
	}
}, {
	"proto": "emit.p4x.xzwx(56)"
	, "kind": "emit"
	, "name": "xzwx(56)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "56"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "56"
	}
}, {
	"proto": "emit.p4x.yzwx(57)"
	, "kind": "emit"
	, "name": "yzwx(57)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "57"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "57"
	}
}, {
	"proto": "emit.p4x.zzwx(58)"
	, "kind": "emit"
	, "name": "zzwx(58)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "58"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "58"
	}
}, {
	"proto": "emit.p4x.wzwx(59)"
	, "kind": "emit"
	, "name": "wzwx(59)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "59"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "59"
	}
}, {
	"proto": "emit.p4x.xwwx(60)"
	, "kind": "emit"
	, "name": "xwwx(60)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "60"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "60"
	}
}, {
	"proto": "emit.p4x.ywwx(61)"
	, "kind": "emit"
	, "name": "ywwx(61)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "61"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "61"
	}
}, {
	"proto": "emit.p4x.zwwx(62)"
	, "kind": "emit"
	, "name": "zwwx(62)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "62"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "62"
	}
}, {
	"proto": "emit.p4x.wwwx(63)"
	, "kind": "emit"
	, "name": "wwwx(63)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "63"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "63"
	}
}, {
	"proto": "emit.p4x.xxxy(64)"
	, "kind": "emit"
	, "name": "xxxy(64)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "64"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "64"
	}
}, {
	"proto": "emit.p4x.yxxy(65)"
	, "kind": "emit"
	, "name": "yxxy(65)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "65"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "65"
	}
}, {
	"proto": "emit.p4x.zxxy(66)"
	, "kind": "emit"
	, "name": "zxxy(66)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "66"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "66"
	}
}, {
	"proto": "emit.p4x.wxxy(67)"
	, "kind": "emit"
	, "name": "wxxy(67)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "67"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "67"
	}
}, {
	"proto": "emit.p4x.xyxy(68)"
	, "kind": "emit"
	, "name": "xyxy(68)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "68"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "68"
	}
}, {
	"proto": "emit.p4x.yyxy(69)"
	, "kind": "emit"
	, "name": "yyxy(69)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "69"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "69"
	}
}, {
	"proto": "emit.p4x.zyxy(70)"
	, "kind": "emit"
	, "name": "zyxy(70)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "70"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "70"
	}
}, {
	"proto": "emit.p4x.wyxy(71)"
	, "kind": "emit"
	, "name": "wyxy(71)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "71"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "71"
	}
}, {
	"proto": "emit.p4x.xzxy(72)"
	, "kind": "emit"
	, "name": "xzxy(72)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "72"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "72"
	}
}, {
	"proto": "emit.p4x.yzxy(73)"
	, "kind": "emit"
	, "name": "yzxy(73)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "73"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "73"
	}
}, {
	"proto": "emit.p4x.zzxy(74)"
	, "kind": "emit"
	, "name": "zzxy(74)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "74"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "74"
	}
}, {
	"proto": "emit.p4x.wzxy(75)"
	, "kind": "emit"
	, "name": "wzxy(75)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "75"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "75"
	}
}, {
	"proto": "emit.p4x.xwxy(76)"
	, "kind": "emit"
	, "name": "xwxy(76)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "76"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "76"
	}
}, {
	"proto": "emit.p4x.ywxy(77)"
	, "kind": "emit"
	, "name": "ywxy(77)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "77"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "77"
	}
}, {
	"proto": "emit.p4x.zwxy(78)"
	, "kind": "emit"
	, "name": "zwxy(78)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "78"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "78"
	}
}, {
	"proto": "emit.p4x.wwxy(79)"
	, "kind": "emit"
	, "name": "wwxy(79)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "79"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "79"
	}
}, {
	"proto": "emit.p4x.xxyy(80)"
	, "kind": "emit"
	, "name": "xxyy(80)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "80"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "80"
	}
}, {
	"proto": "emit.p4x.yxyy(81)"
	, "kind": "emit"
	, "name": "yxyy(81)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "81"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "81"
	}
}, {
	"proto": "emit.p4x.zxyy(82)"
	, "kind": "emit"
	, "name": "zxyy(82)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "82"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "82"
	}
}, {
	"proto": "emit.p4x.wxyy(83)"
	, "kind": "emit"
	, "name": "wxyy(83)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "83"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "83"
	}
}, {
	"proto": "emit.p4x.xyyy(84)"
	, "kind": "emit"
	, "name": "xyyy(84)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "84"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "84"
	}
}, {
	"proto": "emit.p4x.yyyy(85)"
	, "kind": "emit"
	, "name": "yyyy(85)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "85"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "85"
	}
}, {
	"proto": "emit.p4x.zyyy(86)"
	, "kind": "emit"
	, "name": "zyyy(86)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "86"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "86"
	}
}, {
	"proto": "emit.p4x.wyyy(87)"
	, "kind": "emit"
	, "name": "wyyy(87)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "87"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "87"
	}
}, {
	"proto": "emit.p4x.xzyy(88)"
	, "kind": "emit"
	, "name": "xzyy(88)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "88"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "88"
	}
}, {
	"proto": "emit.p4x.yzyy(89)"
	, "kind": "emit"
	, "name": "yzyy(89)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "89"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "89"
	}
}, {
	"proto": "emit.p4x.zzyy(90)"
	, "kind": "emit"
	, "name": "zzyy(90)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "90"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "90"
	}
}, {
	"proto": "emit.p4x.wzyy(91)"
	, "kind": "emit"
	, "name": "wzyy(91)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "91"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "91"
	}
}, {
	"proto": "emit.p4x.xwyy(92)"
	, "kind": "emit"
	, "name": "xwyy(92)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "92"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "92"
	}
}, {
	"proto": "emit.p4x.ywyy(93)"
	, "kind": "emit"
	, "name": "ywyy(93)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "93"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "93"
	}
}, {
	"proto": "emit.p4x.zwyy(94)"
	, "kind": "emit"
	, "name": "zwyy(94)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "94"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "94"
	}
}, {
	"proto": "emit.p4x.wwyy(95)"
	, "kind": "emit"
	, "name": "wwyy(95)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "95"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "95"
	}
}, {
	"proto": "emit.p4x.xxzy(96)"
	, "kind": "emit"
	, "name": "xxzy(96)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "96"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "96"
	}
}, {
	"proto": "emit.p4x.yxzy(97)"
	, "kind": "emit"
	, "name": "yxzy(97)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "97"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "97"
	}
}, {
	"proto": "emit.p4x.zxzy(98)"
	, "kind": "emit"
	, "name": "zxzy(98)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "98"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "98"
	}
}, {
	"proto": "emit.p4x.wxzy(99)"
	, "kind": "emit"
	, "name": "wxzy(99)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "99"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "99"
	}
}, {
	"proto": "emit.p4x.xyzy(100)"
	, "kind": "emit"
	, "name": "xyzy(100)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "100"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "100"
	}
}, {
	"proto": "emit.p4x.yyzy(101)"
	, "kind": "emit"
	, "name": "yyzy(101)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "101"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "101"
	}
}, {
	"proto": "emit.p4x.zyzy(102)"
	, "kind": "emit"
	, "name": "zyzy(102)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "102"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "102"
	}
}, {
	"proto": "emit.p4x.wyzy(103)"
	, "kind": "emit"
	, "name": "wyzy(103)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "103"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "103"
	}
}, {
	"proto": "emit.p4x.xzzy(104)"
	, "kind": "emit"
	, "name": "xzzy(104)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "104"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "104"
	}
}, {
	"proto": "emit.p4x.yzzy(105)"
	, "kind": "emit"
	, "name": "yzzy(105)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "105"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "105"
	}
}, {
	"proto": "emit.p4x.zzzy(106)"
	, "kind": "emit"
	, "name": "zzzy(106)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "106"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "106"
	}
}, {
	"proto": "emit.p4x.wzzy(107)"
	, "kind": "emit"
	, "name": "wzzy(107)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "107"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "107"
	}
}, {
	"proto": "emit.p4x.xwzy(108)"
	, "kind": "emit"
	, "name": "xwzy(108)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "108"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "108"
	}
}, {
	"proto": "emit.p4x.ywzy(109)"
	, "kind": "emit"
	, "name": "ywzy(109)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "109"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "109"
	}
}, {
	"proto": "emit.p4x.zwzy(110)"
	, "kind": "emit"
	, "name": "zwzy(110)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "110"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "110"
	}
}, {
	"proto": "emit.p4x.wwzy(111)"
	, "kind": "emit"
	, "name": "wwzy(111)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "111"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "111"
	}
}, {
	"proto": "emit.p4x.xxwy(112)"
	, "kind": "emit"
	, "name": "xxwy(112)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "112"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "112"
	}
}, {
	"proto": "emit.p4x.yxwy(113)"
	, "kind": "emit"
	, "name": "yxwy(113)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "113"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "113"
	}
}, {
	"proto": "emit.p4x.zxwy(114)"
	, "kind": "emit"
	, "name": "zxwy(114)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "114"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "114"
	}
}, {
	"proto": "emit.p4x.wxwy(115)"
	, "kind": "emit"
	, "name": "wxwy(115)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "115"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "115"
	}
}, {
	"proto": "emit.p4x.xywy(116)"
	, "kind": "emit"
	, "name": "xywy(116)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "116"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "116"
	}
}, {
	"proto": "emit.p4x.yywy(117)"
	, "kind": "emit"
	, "name": "yywy(117)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "117"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "117"
	}
}, {
	"proto": "emit.p4x.zywy(118)"
	, "kind": "emit"
	, "name": "zywy(118)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "118"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "118"
	}
}, {
	"proto": "emit.p4x.wywy(119)"
	, "kind": "emit"
	, "name": "wywy(119)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "119"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "119"
	}
}, {
	"proto": "emit.p4x.xzwy(120)"
	, "kind": "emit"
	, "name": "xzwy(120)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "120"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "120"
	}
}, {
	"proto": "emit.p4x.yzwy(121)"
	, "kind": "emit"
	, "name": "yzwy(121)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "121"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "121"
	}
}, {
	"proto": "emit.p4x.zzwy(122)"
	, "kind": "emit"
	, "name": "zzwy(122)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "122"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "122"
	}
}, {
	"proto": "emit.p4x.wzwy(123)"
	, "kind": "emit"
	, "name": "wzwy(123)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "123"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "123"
	}
}, {
	"proto": "emit.p4x.xwwy(124)"
	, "kind": "emit"
	, "name": "xwwy(124)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "124"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "124"
	}
}, {
	"proto": "emit.p4x.ywwy(125)"
	, "kind": "emit"
	, "name": "ywwy(125)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "125"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "125"
	}
}, {
	"proto": "emit.p4x.zwwy(126)"
	, "kind": "emit"
	, "name": "zwwy(126)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "126"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "126"
	}
}, {
	"proto": "emit.p4x.wwwy(127)"
	, "kind": "emit"
	, "name": "wwwy(127)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "127"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "127"
	}
}, {
	"proto": "emit.p4x.xxxz(128)"
	, "kind": "emit"
	, "name": "xxxz(128)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "128"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "128"
	}
}, {
	"proto": "emit.p4x.yxxz(129)"
	, "kind": "emit"
	, "name": "yxxz(129)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "129"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "129"
	}
}, {
	"proto": "emit.p4x.zxxz(130)"
	, "kind": "emit"
	, "name": "zxxz(130)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "130"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "130"
	}
}, {
	"proto": "emit.p4x.wxxz(131)"
	, "kind": "emit"
	, "name": "wxxz(131)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "131"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "131"
	}
}, {
	"proto": "emit.p4x.xyxz(132)"
	, "kind": "emit"
	, "name": "xyxz(132)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "132"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "132"
	}
}, {
	"proto": "emit.p4x.yyxz(133)"
	, "kind": "emit"
	, "name": "yyxz(133)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "133"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "133"
	}
}, {
	"proto": "emit.p4x.zyxz(134)"
	, "kind": "emit"
	, "name": "zyxz(134)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "134"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "134"
	}
}, {
	"proto": "emit.p4x.wyxz(135)"
	, "kind": "emit"
	, "name": "wyxz(135)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "135"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "135"
	}
}, {
	"proto": "emit.p4x.xzxz(136)"
	, "kind": "emit"
	, "name": "xzxz(136)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "136"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "136"
	}
}, {
	"proto": "emit.p4x.yzxz(137)"
	, "kind": "emit"
	, "name": "yzxz(137)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "137"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "137"
	}
}, {
	"proto": "emit.p4x.zzxz(138)"
	, "kind": "emit"
	, "name": "zzxz(138)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "138"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "138"
	}
}, {
	"proto": "emit.p4x.wzxz(139)"
	, "kind": "emit"
	, "name": "wzxz(139)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "139"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "139"
	}
}, {
	"proto": "emit.p4x.xwxz(140)"
	, "kind": "emit"
	, "name": "xwxz(140)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "140"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "140"
	}
}, {
	"proto": "emit.p4x.ywxz(141)"
	, "kind": "emit"
	, "name": "ywxz(141)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "141"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "141"
	}
}, {
	"proto": "emit.p4x.zwxz(142)"
	, "kind": "emit"
	, "name": "zwxz(142)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "142"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "142"
	}
}, {
	"proto": "emit.p4x.wwxz(143)"
	, "kind": "emit"
	, "name": "wwxz(143)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "143"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "143"
	}
}, {
	"proto": "emit.p4x.xxyz(144)"
	, "kind": "emit"
	, "name": "xxyz(144)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "144"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "144"
	}
}, {
	"proto": "emit.p4x.yxyz(145)"
	, "kind": "emit"
	, "name": "yxyz(145)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "145"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "145"
	}
}, {
	"proto": "emit.p4x.zxyz(146)"
	, "kind": "emit"
	, "name": "zxyz(146)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "146"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "146"
	}
}, {
	"proto": "emit.p4x.wxyz(147)"
	, "kind": "emit"
	, "name": "wxyz(147)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "147"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "147"
	}
}, {
	"proto": "emit.p4x.xyyz(148)"
	, "kind": "emit"
	, "name": "xyyz(148)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "148"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "148"
	}
}, {
	"proto": "emit.p4x.yyyz(149)"
	, "kind": "emit"
	, "name": "yyyz(149)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "149"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "149"
	}
}, {
	"proto": "emit.p4x.zyyz(150)"
	, "kind": "emit"
	, "name": "zyyz(150)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "150"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "150"
	}
}, {
	"proto": "emit.p4x.wyyz(151)"
	, "kind": "emit"
	, "name": "wyyz(151)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "151"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "151"
	}
}, {
	"proto": "emit.p4x.xzyz(152)"
	, "kind": "emit"
	, "name": "xzyz(152)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "152"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "152"
	}
}, {
	"proto": "emit.p4x.yzyz(153)"
	, "kind": "emit"
	, "name": "yzyz(153)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "153"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "153"
	}
}, {
	"proto": "emit.p4x.zzyz(154)"
	, "kind": "emit"
	, "name": "zzyz(154)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "154"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "154"
	}
}, {
	"proto": "emit.p4x.wzyz(155)"
	, "kind": "emit"
	, "name": "wzyz(155)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "155"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "155"
	}
}, {
	"proto": "emit.p4x.xwyz(156)"
	, "kind": "emit"
	, "name": "xwyz(156)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "156"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "156"
	}
}, {
	"proto": "emit.p4x.ywyz(157)"
	, "kind": "emit"
	, "name": "ywyz(157)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "157"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "157"
	}
}, {
	"proto": "emit.p4x.zwyz(158)"
	, "kind": "emit"
	, "name": "zwyz(158)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "158"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "158"
	}
}, {
	"proto": "emit.p4x.wwyz(159)"
	, "kind": "emit"
	, "name": "wwyz(159)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "159"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "159"
	}
}, {
	"proto": "emit.p4x.xxzz(160)"
	, "kind": "emit"
	, "name": "xxzz(160)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "160"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "160"
	}
}, {
	"proto": "emit.p4x.yxzz(161)"
	, "kind": "emit"
	, "name": "yxzz(161)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "161"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "161"
	}
}, {
	"proto": "emit.p4x.zxzz(162)"
	, "kind": "emit"
	, "name": "zxzz(162)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "162"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "162"
	}
}, {
	"proto": "emit.p4x.wxzz(163)"
	, "kind": "emit"
	, "name": "wxzz(163)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "163"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "163"
	}
}, {
	"proto": "emit.p4x.xyzz(164)"
	, "kind": "emit"
	, "name": "xyzz(164)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "164"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "164"
	}
}, {
	"proto": "emit.p4x.yyzz(165)"
	, "kind": "emit"
	, "name": "yyzz(165)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "165"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "165"
	}
}, {
	"proto": "emit.p4x.zyzz(166)"
	, "kind": "emit"
	, "name": "zyzz(166)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "166"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "166"
	}
}, {
	"proto": "emit.p4x.wyzz(167)"
	, "kind": "emit"
	, "name": "wyzz(167)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "167"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "167"
	}
}, {
	"proto": "emit.p4x.xzzz(168)"
	, "kind": "emit"
	, "name": "xzzz(168)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "168"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "168"
	}
}, {
	"proto": "emit.p4x.yzzz(169)"
	, "kind": "emit"
	, "name": "yzzz(169)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "169"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "169"
	}
}, {
	"proto": "emit.p4x.zzzz(170)"
	, "kind": "emit"
	, "name": "zzzz(170)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "170"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "170"
	}
}, {
	"proto": "emit.p4x.wzzz(171)"
	, "kind": "emit"
	, "name": "wzzz(171)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "171"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "171"
	}
}, {
	"proto": "emit.p4x.xwzz(172)"
	, "kind": "emit"
	, "name": "xwzz(172)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "172"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "172"
	}
}, {
	"proto": "emit.p4x.ywzz(173)"
	, "kind": "emit"
	, "name": "ywzz(173)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "173"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "173"
	}
}, {
	"proto": "emit.p4x.zwzz(174)"
	, "kind": "emit"
	, "name": "zwzz(174)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "174"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "174"
	}
}, {
	"proto": "emit.p4x.wwzz(175)"
	, "kind": "emit"
	, "name": "wwzz(175)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "175"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "175"
	}
}, {
	"proto": "emit.p4x.xxwz(176)"
	, "kind": "emit"
	, "name": "xxwz(176)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "176"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "176"
	}
}, {
	"proto": "emit.p4x.yxwz(177)"
	, "kind": "emit"
	, "name": "yxwz(177)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "177"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "177"
	}
}, {
	"proto": "emit.p4x.zxwz(178)"
	, "kind": "emit"
	, "name": "zxwz(178)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "178"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "178"
	}
}, {
	"proto": "emit.p4x.wxwz(179)"
	, "kind": "emit"
	, "name": "wxwz(179)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "179"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "179"
	}
}, {
	"proto": "emit.p4x.xywz(180)"
	, "kind": "emit"
	, "name": "xywz(180)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "180"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "180"
	}
}, {
	"proto": "emit.p4x.yywz(181)"
	, "kind": "emit"
	, "name": "yywz(181)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "181"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "181"
	}
}, {
	"proto": "emit.p4x.zywz(182)"
	, "kind": "emit"
	, "name": "zywz(182)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "182"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "182"
	}
}, {
	"proto": "emit.p4x.wywz(183)"
	, "kind": "emit"
	, "name": "wywz(183)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "183"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "183"
	}
}, {
	"proto": "emit.p4x.xzwz(184)"
	, "kind": "emit"
	, "name": "xzwz(184)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "184"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "184"
	}
}, {
	"proto": "emit.p4x.yzwz(185)"
	, "kind": "emit"
	, "name": "yzwz(185)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "185"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "185"
	}
}, {
	"proto": "emit.p4x.zzwz(186)"
	, "kind": "emit"
	, "name": "zzwz(186)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "186"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "186"
	}
}, {
	"proto": "emit.p4x.wzwz(187)"
	, "kind": "emit"
	, "name": "wzwz(187)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "187"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "187"
	}
}, {
	"proto": "emit.p4x.xwwz(188)"
	, "kind": "emit"
	, "name": "xwwz(188)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "188"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "188"
	}
}, {
	"proto": "emit.p4x.ywwz(189)"
	, "kind": "emit"
	, "name": "ywwz(189)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "189"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "189"
	}
}, {
	"proto": "emit.p4x.zwwz(190)"
	, "kind": "emit"
	, "name": "zwwz(190)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "190"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "190"
	}
}, {
	"proto": "emit.p4x.wwwz(191)"
	, "kind": "emit"
	, "name": "wwwz(191)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "191"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "191"
	}
}, {
	"proto": "emit.p4x.xxxw(192)"
	, "kind": "emit"
	, "name": "xxxw(192)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "192"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "192"
	}
}, {
	"proto": "emit.p4x.yxxw(193)"
	, "kind": "emit"
	, "name": "yxxw(193)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "193"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "193"
	}
}, {
	"proto": "emit.p4x.zxxw(194)"
	, "kind": "emit"
	, "name": "zxxw(194)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "194"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "194"
	}
}, {
	"proto": "emit.p4x.wxxw(195)"
	, "kind": "emit"
	, "name": "wxxw(195)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "195"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "195"
	}
}, {
	"proto": "emit.p4x.xyxw(196)"
	, "kind": "emit"
	, "name": "xyxw(196)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "196"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "196"
	}
}, {
	"proto": "emit.p4x.yyxw(197)"
	, "kind": "emit"
	, "name": "yyxw(197)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "197"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "197"
	}
}, {
	"proto": "emit.p4x.zyxw(198)"
	, "kind": "emit"
	, "name": "zyxw(198)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "198"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "198"
	}
}, {
	"proto": "emit.p4x.wyxw(199)"
	, "kind": "emit"
	, "name": "wyxw(199)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "199"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "199"
	}
}, {
	"proto": "emit.p4x.xzxw(200)"
	, "kind": "emit"
	, "name": "xzxw(200)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "200"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "200"
	}
}, {
	"proto": "emit.p4x.yzxw(201)"
	, "kind": "emit"
	, "name": "yzxw(201)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "201"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "201"
	}
}, {
	"proto": "emit.p4x.zzxw(202)"
	, "kind": "emit"
	, "name": "zzxw(202)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "202"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "202"
	}
}, {
	"proto": "emit.p4x.wzxw(203)"
	, "kind": "emit"
	, "name": "wzxw(203)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "203"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "203"
	}
}, {
	"proto": "emit.p4x.xwxw(204)"
	, "kind": "emit"
	, "name": "xwxw(204)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "204"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "204"
	}
}, {
	"proto": "emit.p4x.ywxw(205)"
	, "kind": "emit"
	, "name": "ywxw(205)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "205"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "205"
	}
}, {
	"proto": "emit.p4x.zwxw(206)"
	, "kind": "emit"
	, "name": "zwxw(206)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "206"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "206"
	}
}, {
	"proto": "emit.p4x.wwxw(207)"
	, "kind": "emit"
	, "name": "wwxw(207)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "207"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "207"
	}
}, {
	"proto": "emit.p4x.xxyw(208)"
	, "kind": "emit"
	, "name": "xxyw(208)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "208"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "208"
	}
}, {
	"proto": "emit.p4x.yxyw(209)"
	, "kind": "emit"
	, "name": "yxyw(209)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "209"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "209"
	}
}, {
	"proto": "emit.p4x.zxyw(210)"
	, "kind": "emit"
	, "name": "zxyw(210)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "210"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "210"
	}
}, {
	"proto": "emit.p4x.wxyw(211)"
	, "kind": "emit"
	, "name": "wxyw(211)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "211"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "211"
	}
}, {
	"proto": "emit.p4x.xyyw(212)"
	, "kind": "emit"
	, "name": "xyyw(212)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "212"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "212"
	}
}, {
	"proto": "emit.p4x.yyyw(213)"
	, "kind": "emit"
	, "name": "yyyw(213)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "213"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "213"
	}
}, {
	"proto": "emit.p4x.zyyw(214)"
	, "kind": "emit"
	, "name": "zyyw(214)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "214"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "214"
	}
}, {
	"proto": "emit.p4x.wyyw(215)"
	, "kind": "emit"
	, "name": "wyyw(215)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "215"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "215"
	}
}, {
	"proto": "emit.p4x.xzyw(216)"
	, "kind": "emit"
	, "name": "xzyw(216)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "216"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "216"
	}
}, {
	"proto": "emit.p4x.yzyw(217)"
	, "kind": "emit"
	, "name": "yzyw(217)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "217"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "217"
	}
}, {
	"proto": "emit.p4x.zzyw(218)"
	, "kind": "emit"
	, "name": "zzyw(218)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "218"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "218"
	}
}, {
	"proto": "emit.p4x.wzyw(219)"
	, "kind": "emit"
	, "name": "wzyw(219)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "219"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "219"
	}
}, {
	"proto": "emit.p4x.xwyw(220)"
	, "kind": "emit"
	, "name": "xwyw(220)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "220"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "220"
	}
}, {
	"proto": "emit.p4x.ywyw(221)"
	, "kind": "emit"
	, "name": "ywyw(221)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "221"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "221"
	}
}, {
	"proto": "emit.p4x.zwyw(222)"
	, "kind": "emit"
	, "name": "zwyw(222)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "222"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "222"
	}
}, {
	"proto": "emit.p4x.wwyw(223)"
	, "kind": "emit"
	, "name": "wwyw(223)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "223"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "223"
	}
}, {
	"proto": "emit.p4x.xxzw(224)"
	, "kind": "emit"
	, "name": "xxzw(224)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "224"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "224"
	}
}, {
	"proto": "emit.p4x.yxzw(225)"
	, "kind": "emit"
	, "name": "yxzw(225)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "225"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "225"
	}
}, {
	"proto": "emit.p4x.zxzw(226)"
	, "kind": "emit"
	, "name": "zxzw(226)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "226"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "226"
	}
}, {
	"proto": "emit.p4x.wxzw(227)"
	, "kind": "emit"
	, "name": "wxzw(227)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "227"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "227"
	}
}, {
	"proto": "emit.p4x.xyzw(228)"
	, "kind": "emit"
	, "name": "xyzw(228)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "228"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "228"
	}
}, {
	"proto": "emit.p4x.yyzw(229)"
	, "kind": "emit"
	, "name": "yyzw(229)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "229"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "229"
	}
}, {
	"proto": "emit.p4x.zyzw(230)"
	, "kind": "emit"
	, "name": "zyzw(230)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "230"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "230"
	}
}, {
	"proto": "emit.p4x.wyzw(231)"
	, "kind": "emit"
	, "name": "wyzw(231)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "231"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "231"
	}
}, {
	"proto": "emit.p4x.xzzw(232)"
	, "kind": "emit"
	, "name": "xzzw(232)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "232"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "232"
	}
}, {
	"proto": "emit.p4x.yzzw(233)"
	, "kind": "emit"
	, "name": "yzzw(233)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "233"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "233"
	}
}, {
	"proto": "emit.p4x.zzzw(234)"
	, "kind": "emit"
	, "name": "zzzw(234)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "234"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "234"
	}
}, {
	"proto": "emit.p4x.wzzw(235)"
	, "kind": "emit"
	, "name": "wzzw(235)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "235"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "235"
	}
}, {
	"proto": "emit.p4x.xwzw(236)"
	, "kind": "emit"
	, "name": "xwzw(236)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "236"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "236"
	}
}, {
	"proto": "emit.p4x.ywzw(237)"
	, "kind": "emit"
	, "name": "ywzw(237)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "237"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "237"
	}
}, {
	"proto": "emit.p4x.zwzw(238)"
	, "kind": "emit"
	, "name": "zwzw(238)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "238"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "238"
	}
}, {
	"proto": "emit.p4x.wwzw(239)"
	, "kind": "emit"
	, "name": "wwzw(239)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "239"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "239"
	}
}, {
	"proto": "emit.p4x.xxww(240)"
	, "kind": "emit"
	, "name": "xxww(240)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "240"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "240"
	}
}, {
	"proto": "emit.p4x.yxww(241)"
	, "kind": "emit"
	, "name": "yxww(241)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "241"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "241"
	}
}, {
	"proto": "emit.p4x.zxww(242)"
	, "kind": "emit"
	, "name": "zxww(242)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "242"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "242"
	}
}, {
	"proto": "emit.p4x.wxww(243)"
	, "kind": "emit"
	, "name": "wxww(243)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "243"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "243"
	}
}, {
	"proto": "emit.p4x.xyww(244)"
	, "kind": "emit"
	, "name": "xyww(244)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "244"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "244"
	}
}, {
	"proto": "emit.p4x.yyww(245)"
	, "kind": "emit"
	, "name": "yyww(245)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "245"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "245"
	}
}, {
	"proto": "emit.p4x.zyww(246)"
	, "kind": "emit"
	, "name": "zyww(246)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "246"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "246"
	}
}, {
	"proto": "emit.p4x.wyww(247)"
	, "kind": "emit"
	, "name": "wyww(247)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "247"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "247"
	}
}, {
	"proto": "emit.p4x.xzww(248)"
	, "kind": "emit"
	, "name": "xzww(248)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "248"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "248"
	}
}, {
	"proto": "emit.p4x.yzww(249)"
	, "kind": "emit"
	, "name": "yzww(249)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "249"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "249"
	}
}, {
	"proto": "emit.p4x.zzww(250)"
	, "kind": "emit"
	, "name": "zzww(250)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "250"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "250"
	}
}, {
	"proto": "emit.p4x.wzww(251)"
	, "kind": "emit"
	, "name": "wzww(251)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "251"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "251"
	}
}, {
	"proto": "emit.p4x.xwww(252)"
	, "kind": "emit"
	, "name": "xwww(252)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "252"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "252"
	}
}, {
	"proto": "emit.p4x.ywww(253)"
	, "kind": "emit"
	, "name": "ywww(253)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "253"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "253"
	}
}, {
	"proto": "emit.p4x.zwww(254)"
	, "kind": "emit"
	, "name": "zwww(254)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "254"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "254"
	}
}, {
	"proto": "emit.p4x.wwww(255)"
	, "kind": "emit"
	, "name": "wwww(255)"
	, "declaredIn": "emit.p4x"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 141
	, "const": false
	, "static": true
	, "ast": {
		"proto": "255"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "255"
	}
}, {
	"proto": "emit.dupp"
	, "kind": ".rec"
	, "name": "dupp"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 5136
	, "const": true
	, "static": true
}, {
	"proto": "emit.dupp.x1(0)"
	, "kind": "emit"
	, "name": "x1(0)"
	, "declaredIn": "emit.dupp"
	, "type": "int32"
	, "size": 0
	, "offs": 18
	, "const": false
	, "static": true
	, "ast": {
		"proto": "0"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "0"
	}
}, {
	"proto": "emit.dupp.x2(0)"
	, "kind": "emit"
	, "name": "x2(0)"
	, "declaredIn": "emit.dupp"
	, "type": "int64"
	, "size": 0
	, "offs": 19
	, "const": false
	, "static": true
	, "ast": {
		"proto": "0"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "0"
	}
}, {
	"proto": "emit.dupp.x4(0)"
	, "kind": "emit"
	, "name": "x4(0)"
	, "declaredIn": "emit.dupp"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 20
	, "const": false
	, "static": true
	, "ast": {
		"proto": "0"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "0"
	}
}, {
	"proto": "emit.load"
	, "kind": ".rec"
	, "name": "load"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 5776
	, "const": true
	, "static": true
}, {
	"proto": "emit.load.z32"
	, "kind": "emit"
	, "name": "z32"
	, "declaredIn": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 24
	, "const": false
	, "static": true
}, {
	"proto": "emit.load.z64"
	, "kind": "emit"
	, "name": "z64"
	, "declaredIn": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 25
	, "const": false
	, "static": true
}, {
	"proto": "emit.load.z128"
	, "kind": "emit"
	, "name": "z128"
	, "declaredIn": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 26
	, "const": false
	, "static": true
}, {
	"proto": "emit.load.i8"
	, "kind": "emit"
	, "name": "i8"
	, "declaredIn": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 32
	, "const": false
	, "static": true
}, {
	"proto": "emit.load.i16"
	, "kind": "emit"
	, "name": "i16"
	, "declaredIn": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 33
	, "const": false
	, "static": true
}, {
	"proto": "emit.load.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.load"
	, "type": "int32"
	, "size": 0
	, "offs": 34
	, "const": false
	, "static": true
}, {
	"proto": "emit.load.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.load"
	, "type": "int64"
	, "size": 0
	, "offs": 35
	, "const": false
	, "static": true
}, {
	"proto": "emit.load.i128"
	, "kind": "emit"
	, "name": "i128"
	, "declaredIn": "emit.load"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 36
	, "const": false
	, "static": true
}, {
	"proto": "emit.store"
	, "kind": ".rec"
	, "name": "store"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 7216
	, "const": true
	, "static": true
}, {
	"proto": "emit.store.i8"
	, "kind": "emit"
	, "name": "i8"
	, "declaredIn": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 37
	, "const": false
	, "static": true
}, {
	"proto": "emit.store.i16"
	, "kind": "emit"
	, "name": "i16"
	, "declaredIn": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 38
	, "const": false
	, "static": true
}, {
	"proto": "emit.store.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 39
	, "const": false
	, "static": true
}, {
	"proto": "emit.store.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 40
	, "const": false
	, "static": true
}, {
	"proto": "emit.store.i128"
	, "kind": "emit"
	, "name": "i128"
	, "declaredIn": "emit.store"
	, "type": "void"
	, "size": 0
	, "offs": 41
	, "const": false
	, "static": true
}, {
	"proto": "emit.cmt"
	, "kind": ".rec"
	, "name": "cmt"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 8136
	, "const": true
	, "static": true
}, {
	"proto": "emit.cmt.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.cmt"
	, "type": "uint32"
	, "size": 0
	, "offs": 48
	, "const": false
	, "static": true
}, {
	"proto": "emit.and"
	, "kind": ".rec"
	, "name": "and"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 8456
	, "const": true
	, "static": true
}, {
	"proto": "emit.and.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.and"
	, "type": "uint32"
	, "size": 0
	, "offs": 49
	, "const": false
	, "static": true
}, {
	"proto": "emit.or"
	, "kind": ".rec"
	, "name": "or"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 8768
	, "const": true
	, "static": true
}, {
	"proto": "emit.or.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.or"
	, "type": "uint32"
	, "size": 0
	, "offs": 50
	, "const": false
	, "static": true
}, {
	"proto": "emit.xor"
	, "kind": ".rec"
	, "name": "xor"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 9080
	, "const": true
	, "static": true
}, {
	"proto": "emit.xor.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.xor"
	, "type": "uint32"
	, "size": 0
	, "offs": 54
	, "const": false
	, "static": true
}, {
	"proto": "emit.shl"
	, "kind": ".rec"
	, "name": "shl"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 9392
	, "const": true
	, "static": true
}, {
	"proto": "emit.shl.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.shl"
	, "type": "uint32"
	, "size": 0
	, "offs": 58
	, "const": false
	, "static": true
}, {
	"proto": "emit.shr"
	, "kind": ".rec"
	, "name": "shr"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 9704
	, "const": true
	, "static": true
}, {
	"proto": "emit.shr.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.shr"
	, "type": "uint32"
	, "size": 0
	, "offs": 59
	, "const": false
	, "static": true
}, {
	"proto": "emit.shr.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.shr"
	, "type": "int32"
	, "size": 0
	, "offs": 60
	, "const": false
	, "static": true
}, {
	"proto": "emit.neg"
	, "kind": ".rec"
	, "name": "neg"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 10168
	, "const": true
	, "static": true
}, {
	"proto": "emit.neg.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.neg"
	, "type": "int32"
	, "size": 0
	, "offs": 64
	, "const": false
	, "static": true
}, {
	"proto": "emit.neg.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.neg"
	, "type": "int64"
	, "size": 0
	, "offs": 80
	, "const": false
	, "static": true
}, {
	"proto": "emit.neg.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.neg"
	, "type": "float32"
	, "size": 0
	, "offs": 96
	, "const": false
	, "static": true
}, {
	"proto": "emit.neg.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.neg"
	, "type": "float64"
	, "size": 0
	, "offs": 112
	, "const": false
	, "static": true
}, {
	"proto": "emit.neg.p4f"
	, "kind": "emit"
	, "name": "p4f"
	, "declaredIn": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 128
	, "const": false
	, "static": true
}, {
	"proto": "emit.neg.p2d"
	, "kind": "emit"
	, "name": "p2d"
	, "declaredIn": "emit.neg"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 144
	, "const": false
	, "static": true
}, {
	"proto": "emit.add"
	, "kind": ".rec"
	, "name": "add"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 11272
	, "const": true
	, "static": true
}, {
	"proto": "emit.add.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.add"
	, "type": "int32"
	, "size": 0
	, "offs": 65
	, "const": false
	, "static": true
}, {
	"proto": "emit.add.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.add"
	, "type": "int64"
	, "size": 0
	, "offs": 81
	, "const": false
	, "static": true
}, {
	"proto": "emit.add.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.add"
	, "type": "float32"
	, "size": 0
	, "offs": 97
	, "const": false
	, "static": true
}, {
	"proto": "emit.add.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.add"
	, "type": "float64"
	, "size": 0
	, "offs": 113
	, "const": false
	, "static": true
}, {
	"proto": "emit.add.p4f"
	, "kind": "emit"
	, "name": "p4f"
	, "declaredIn": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 129
	, "const": false
	, "static": true
}, {
	"proto": "emit.add.p2d"
	, "kind": "emit"
	, "name": "p2d"
	, "declaredIn": "emit.add"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 145
	, "const": false
	, "static": true
}, {
	"proto": "emit.sub"
	, "kind": ".rec"
	, "name": "sub"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 12344
	, "const": true
	, "static": true
}, {
	"proto": "emit.sub.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.sub"
	, "type": "int32"
	, "size": 0
	, "offs": 66
	, "const": false
	, "static": true
}, {
	"proto": "emit.sub.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.sub"
	, "type": "int64"
	, "size": 0
	, "offs": 82
	, "const": false
	, "static": true
}, {
	"proto": "emit.sub.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.sub"
	, "type": "float32"
	, "size": 0
	, "offs": 98
	, "const": false
	, "static": true
}, {
	"proto": "emit.sub.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.sub"
	, "type": "float64"
	, "size": 0
	, "offs": 114
	, "const": false
	, "static": true
}, {
	"proto": "emit.sub.p4f"
	, "kind": "emit"
	, "name": "p4f"
	, "declaredIn": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 130
	, "const": false
	, "static": true
}, {
	"proto": "emit.sub.p2d"
	, "kind": "emit"
	, "name": "p2d"
	, "declaredIn": "emit.sub"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 146
	, "const": false
	, "static": true
}, {
	"proto": "emit.mul"
	, "kind": ".rec"
	, "name": "mul"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 13416
	, "const": true
	, "static": true
}, {
	"proto": "emit.mul.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.mul"
	, "type": "uint32"
	, "size": 0
	, "offs": 51
	, "const": false
	, "static": true
}, {
	"proto": "emit.mul.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.mul"
	, "type": "int32"
	, "size": 0
	, "offs": 67
	, "const": false
	, "static": true
}, {
	"proto": "emit.mul.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.mul"
	, "type": "int64"
	, "size": 0
	, "offs": 83
	, "const": false
	, "static": true
}, {
	"proto": "emit.mul.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.mul"
	, "type": "float32"
	, "size": 0
	, "offs": 99
	, "const": false
	, "static": true
}, {
	"proto": "emit.mul.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.mul"
	, "type": "float64"
	, "size": 0
	, "offs": 115
	, "const": false
	, "static": true
}, {
	"proto": "emit.mul.p4f"
	, "kind": "emit"
	, "name": "p4f"
	, "declaredIn": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 131
	, "const": false
	, "static": true
}, {
	"proto": "emit.mul.p2d"
	, "kind": "emit"
	, "name": "p2d"
	, "declaredIn": "emit.mul"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 147
	, "const": false
	, "static": true
}, {
	"proto": "emit.div"
	, "kind": ".rec"
	, "name": "div"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 14640
	, "const": true
	, "static": true
}, {
	"proto": "emit.div.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.div"
	, "type": "uint32"
	, "size": 0
	, "offs": 52
	, "const": false
	, "static": true
}, {
	"proto": "emit.div.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.div"
	, "type": "int32"
	, "size": 0
	, "offs": 68
	, "const": false
	, "static": true
}, {
	"proto": "emit.div.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.div"
	, "type": "int64"
	, "size": 0
	, "offs": 84
	, "const": false
	, "static": true
}, {
	"proto": "emit.div.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.div"
	, "type": "float32"
	, "size": 0
	, "offs": 100
	, "const": false
	, "static": true
}, {
	"proto": "emit.div.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.div"
	, "type": "float64"
	, "size": 0
	, "offs": 116
	, "const": false
	, "static": true
}, {
	"proto": "emit.div.p4f"
	, "kind": "emit"
	, "name": "p4f"
	, "declaredIn": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 132
	, "const": false
	, "static": true
}, {
	"proto": "emit.div.p2d"
	, "kind": "emit"
	, "name": "p2d"
	, "declaredIn": "emit.div"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 148
	, "const": false
	, "static": true
}, {
	"proto": "emit.mod"
	, "kind": ".rec"
	, "name": "mod"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 15864
	, "const": true
	, "static": true
}, {
	"proto": "emit.mod.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.mod"
	, "type": "uint32"
	, "size": 0
	, "offs": 53
	, "const": false
	, "static": true
}, {
	"proto": "emit.mod.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.mod"
	, "type": "int32"
	, "size": 0
	, "offs": 69
	, "const": false
	, "static": true
}, {
	"proto": "emit.mod.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.mod"
	, "type": "int64"
	, "size": 0
	, "offs": 85
	, "const": false
	, "static": true
}, {
	"proto": "emit.mod.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.mod"
	, "type": "float32"
	, "size": 0
	, "offs": 101
	, "const": false
	, "static": true
}, {
	"proto": "emit.mod.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.mod"
	, "type": "float64"
	, "size": 0
	, "offs": 117
	, "const": false
	, "static": true
}, {
	"proto": "emit.ceq"
	, "kind": ".rec"
	, "name": "ceq"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 16784
	, "const": true
	, "static": true
}, {
	"proto": "emit.ceq.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 71
	, "const": false
	, "static": true
}, {
	"proto": "emit.ceq.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 87
	, "const": false
	, "static": true
}, {
	"proto": "emit.ceq.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 103
	, "const": false
	, "static": true
}, {
	"proto": "emit.ceq.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 119
	, "const": false
	, "static": true
}, {
	"proto": "emit.ceq.p4f"
	, "kind": "emit"
	, "name": "p4f"
	, "declaredIn": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 135
	, "const": false
	, "static": true
}, {
	"proto": "emit.ceq.p2d"
	, "kind": "emit"
	, "name": "p2d"
	, "declaredIn": "emit.ceq"
	, "type": "bool"
	, "size": 0
	, "offs": 151
	, "const": false
	, "static": true
}, {
	"proto": "emit.clt"
	, "kind": ".rec"
	, "name": "clt"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 17856
	, "const": true
	, "static": true
}, {
	"proto": "emit.clt.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 56
	, "const": false
	, "static": true
}, {
	"proto": "emit.clt.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 72
	, "const": false
	, "static": true
}, {
	"proto": "emit.clt.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 88
	, "const": false
	, "static": true
}, {
	"proto": "emit.clt.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 104
	, "const": false
	, "static": true
}, {
	"proto": "emit.clt.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.clt"
	, "type": "bool"
	, "size": 0
	, "offs": 120
	, "const": false
	, "static": true
}, {
	"proto": "emit.cgt"
	, "kind": ".rec"
	, "name": "cgt"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 18776
	, "const": true
	, "static": true
}, {
	"proto": "emit.cgt.u32"
	, "kind": "emit"
	, "name": "u32"
	, "declaredIn": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 57
	, "const": false
	, "static": true
}, {
	"proto": "emit.cgt.i32"
	, "kind": "emit"
	, "name": "i32"
	, "declaredIn": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 73
	, "const": false
	, "static": true
}, {
	"proto": "emit.cgt.i64"
	, "kind": "emit"
	, "name": "i64"
	, "declaredIn": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 89
	, "const": false
	, "static": true
}, {
	"proto": "emit.cgt.f32"
	, "kind": "emit"
	, "name": "f32"
	, "declaredIn": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 105
	, "const": false
	, "static": true
}, {
	"proto": "emit.cgt.f64"
	, "kind": "emit"
	, "name": "f64"
	, "declaredIn": "emit.cgt"
	, "type": "bool"
	, "size": 0
	, "offs": 121
	, "const": false
	, "static": true
}, {
	"proto": "emit.min"
	, "kind": ".rec"
	, "name": "min"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 19696
	, "const": true
	, "static": true
}, {
	"proto": "emit.min.p4f"
	, "kind": "emit"
	, "name": "p4f"
	, "declaredIn": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 136
	, "const": false
	, "static": true
}, {
	"proto": "emit.min.p2d"
	, "kind": "emit"
	, "name": "p2d"
	, "declaredIn": "emit.min"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 152
	, "const": false
	, "static": true
}, {
	"proto": "emit.max"
	, "kind": ".rec"
	, "name": "max"
	, "declaredIn": "emit"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 20160
	, "const": true
	, "static": true
}, {
	"proto": "emit.max.p4f"
	, "kind": "emit"
	, "name": "p4f"
	, "declaredIn": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 137
	, "const": false
	, "static": true
}, {
	"proto": "emit.max.p2d"
	, "kind": "emit"
	, "name": "p2d"
	, "declaredIn": "emit.max"
	, "type": "emit.p4x"
	, "size": 0
	, "offs": 153
	, "const": false
	, "static": true
}, {
	"proto": "Halt(Code: int32)"
	, "kind": ".def"
	, "name": "Halt"
	, "type": "void"
	, "args": [{
		"proto": "Halt.Code"
		, "kind": ".def"
		, "name": "Code"
		, "declaredIn": "Halt(Code: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260272
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(0), Code)"
		, "kind": "(?)"
		, "type": "void"
		, "args": [{
			"proto": "Code"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "Code"
		}, {
			"proto": "libc(0)"
			, "kind": ".ref"
			, "type": "libc(0)"
			, "value": "libc(0)"
		}]
	}
}, {
	"proto": "CLOCKS_PER_SEC"
	, "kind": ".def"
	, "name": "CLOCKS_PER_SEC"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "1000000"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "1000000"
	}
}, {
	"proto": "RAND_MAX"
	, "kind": ".def"
	, "name": "RAND_MAX"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "2147483647"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "2147483647"
	}
}, {
	"proto": "raise(level: int32, message: string, inspect: variant, maxTrace: int32)"
	, "kind": ".def"
	, "name": "raise"
	, "type": "void"
	, "args": [{
		"proto": "raise.level"
		, "kind": ".def"
		, "name": "level"
		, "declaredIn": "raise(level: int32, message: string, inspect: variant, maxTrace: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "raise.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "raise(level: int32, message: string, inspect: variant, maxTrace: int32)"
		, "type": "string"
		, "cast": ".ref"
		, "size": 4
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "raise.inspect"
		, "kind": ".def"
		, "name": "inspect"
		, "declaredIn": "raise(level: int32, message: string, inspect: variant, maxTrace: int32)"
		, "type": "variant"
		, "cast": ".rec"
		, "size": 8
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "raise.maxTrace"
		, "kind": ".def"
		, "name": "maxTrace"
		, "declaredIn": "raise(level: int32, message: string, inspect: variant, maxTrace: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260496
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(4), level, message, inspect, maxTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "args": [{
			"proto": "maxTrace"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "maxTrace"
		}, {
			"proto": "inspect"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "value": "inspect"
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "value": "message"
		}, {
			"proto": "level"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "level"
		}, {
			"proto": "libc(4)"
			, "kind": ".ref"
			, "type": "libc(4)"
			, "value": "libc(4)"
		}]
	}
}, {
	"proto": "raise"
	, "kind": ".rec"
	, "name": "raise"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 64792
	, "const": true
	, "static": true
}, {
	"proto": "raise.error"
	, "kind": ".def"
	, "name": "error"
	, "declaredIn": "raise"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "-1"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "-1"
	}
}, {
	"proto": "raise.skip"
	, "kind": ".def"
	, "name": "skip"
	, "declaredIn": "raise"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "0"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "0"
	}
}, {
	"proto": "raise.warn"
	, "kind": ".def"
	, "name": "warn"
	, "declaredIn": "raise"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "1"
	}
}, {
	"proto": "raise.info"
	, "kind": ".def"
	, "name": "info"
	, "declaredIn": "raise"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "2"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "2"
	}
}, {
	"proto": "raise.debug"
	, "kind": ".def"
	, "name": "debug"
	, "declaredIn": "raise"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "3"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "3"
	}
}, {
	"proto": "raise.verbose"
	, "kind": ".def"
	, "name": "verbose"
	, "declaredIn": "raise"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "4"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "4"
	}
}, {
	"proto": "raise.noTrace"
	, "kind": ".def"
	, "name": "noTrace"
	, "declaredIn": "raise"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "0"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "0"
	}
}, {
	"proto": "raise.defTrace"
	, "kind": ".def"
	, "name": "defTrace"
	, "declaredIn": "raise"
	, "type": "int32"
	, "cast": ".i64"
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "128"
		, "kind": ".i64"
		, "type": "int32"
		, "value": "128"
	}
}, {
	"proto": "tryExec(args: pointer, action(args: pointer): void)"
	, "kind": ".def"
	, "name": "tryExec"
	, "type": "int32"
	, "args": [{
		"proto": "tryExec.args"
		, "kind": ".ref"
		, "name": "args"
		, "declaredIn": "tryExec(args: pointer, action(args: pointer): void)"
		, "type": "pointer"
		, "cast": ".ref"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}, {
		"proto": "tryExec.action(args: pointer)"
		, "kind": ".ref"
		, "name": "action"
		, "declaredIn": "tryExec(args: pointer, action(args: pointer): void)"
		, "type": "void"
		, "args": [{
			"proto": "tryExec.action.args"
			, "kind": ".ref"
			, "name": "args"
			, "declaredIn": "tryExec.action(args: pointer)"
			, "type": "pointer"
			, "cast": ".ref"
			, "size": 4
			, "offs": 0
			, "const": false
			, "static": false
		}]
		, "cast": ".ref"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260552
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(5), args, action)"
		, "kind": "(?)"
		, "type": "int32"
		, "args": [{
			"proto": "action"
			, "kind": ".ref"
			, "type": "void"
			, "cast": ".ref"
			, "value": "action"
		}, {
			"proto": "args"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "value": "args"
		}, {
			"proto": "libc(5)"
			, "kind": ".ref"
			, "type": "libc(5)"
			, "value": "libc(5)"
		}]
	}
}, {
	"proto": "memmgr(ptr: pointer, size: int32)"
	, "kind": ".def"
	, "name": "memmgr"
	, "type": "pointer"
	, "args": [{
		"proto": "memmgr.ptr"
		, "kind": ".ref"
		, "name": "ptr"
		, "declaredIn": "memmgr(ptr: pointer, size: int32)"
		, "type": "pointer"
		, "cast": ".ref"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}, {
		"proto": "memmgr.size"
		, "kind": ".def"
		, "name": "size"
		, "declaredIn": "memmgr(ptr: pointer, size: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260608
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(6), ptr, size)"
		, "kind": "(?)"
		, "type": "pointer"
		, "args": [{
			"proto": "size"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "size"
		}, {
			"proto": "ptr"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "value": "ptr"
		}, {
			"proto": "libc(6)"
			, "kind": ".ref"
			, "type": "libc(6)"
			, "value": "libc(6)"
		}]
	}
}, {
	"proto": "memset(dest: pointer, value: int32, size: int32)"
	, "kind": ".def"
	, "name": "memset"
	, "type": "pointer"
	, "args": [{
		"proto": "memset.dest"
		, "kind": ".ref"
		, "name": "dest"
		, "declaredIn": "memset(dest: pointer, value: int32, size: int32)"
		, "type": "pointer"
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "memset.value"
		, "kind": ".def"
		, "name": "value"
		, "declaredIn": "memset(dest: pointer, value: int32, size: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}, {
		"proto": "memset.size"
		, "kind": ".def"
		, "name": "size"
		, "declaredIn": "memset(dest: pointer, value: int32, size: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260664
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(7), dest, value, size)"
		, "kind": "(?)"
		, "type": "pointer"
		, "args": [{
			"proto": "size"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "size"
		}, {
			"proto": "value"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "value"
		}, {
			"proto": "dest"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "value": "dest"
		}, {
			"proto": "libc(7)"
			, "kind": ".ref"
			, "type": "libc(7)"
			, "value": "libc(7)"
		}]
	}
}, {
	"proto": "memcpy(dest: pointer, src: pointer, size: int32)"
	, "kind": ".def"
	, "name": "memcpy"
	, "type": "pointer"
	, "args": [{
		"proto": "memcpy.dest"
		, "kind": ".ref"
		, "name": "dest"
		, "declaredIn": "memcpy(dest: pointer, src: pointer, size: int32)"
		, "type": "pointer"
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "memcpy.src"
		, "kind": ".ref"
		, "name": "src"
		, "declaredIn": "memcpy(dest: pointer, src: pointer, size: int32)"
		, "type": "pointer"
		, "cast": ".ref"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}, {
		"proto": "memcpy.size"
		, "kind": ".def"
		, "name": "size"
		, "declaredIn": "memcpy(dest: pointer, src: pointer, size: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260720
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(8), dest, src, size)"
		, "kind": "(?)"
		, "type": "pointer"
		, "args": [{
			"proto": "size"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "size"
		}, {
			"proto": "src"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "value": "src"
		}, {
			"proto": "dest"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "value": "dest"
		}, {
			"proto": "libc(8)"
			, "kind": ".ref"
			, "type": "libc(8)"
			, "value": "libc(8)"
		}]
	}
}, {
	"proto": "System"
	, "kind": ".rec"
	, "name": "System"
	, "type": "void"
	, "cast": ".vid"
	, "size": 0
	, "offs": 69200
	, "const": true
	, "static": true
}, {
	"proto": "System.exit(code: int32)"
	, "kind": ".def"
	, "name": "exit"
	, "declaredIn": "System"
	, "type": "void"
	, "args": [{
		"proto": "System.exit.code"
		, "kind": ".def"
		, "name": "code"
		, "declaredIn": "System.exit(code: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260776
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(9), code)"
		, "kind": "(?)"
		, "type": "void"
		, "args": [{
			"proto": "code"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "code"
		}, {
			"proto": "libc(9)"
			, "kind": ".ref"
			, "type": "libc(9)"
			, "value": "libc(9)"
		}]
	}
}, {
	"proto": "System.srand(seed: int32)"
	, "kind": ".def"
	, "name": "srand"
	, "declaredIn": "System"
	, "type": "void"
	, "args": [{
		"proto": "System.srand.seed"
		, "kind": ".def"
		, "name": "seed"
		, "declaredIn": "System.srand(seed: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260832
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(10), seed)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 500
		, "args": [{
			"proto": "seed"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "value": "seed"
		}, {
			"proto": "libc(10)"
			, "kind": ".ref"
			, "type": "libc(10)"
			, "value": "libc(10)"
		}]
	}
}, {
	"proto": "System.rand()"
	, "kind": ".def"
	, "name": "rand"
	, "declaredIn": "System"
	, "type": "int32"
	, "args": [{
		"proto": ""
		, "kind": ".def"
		, "name": ""
		, "type": "void"
		, "cast": ".vid"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260888
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(11))"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 533
		, "args": [{
			"proto": "libc(11)"
			, "kind": ".ref"
			, "type": "libc(11)"
			, "value": "libc(11)"
		}]
	}
}, {
	"proto": "System.time()"
	, "kind": ".def"
	, "name": "time"
	, "declaredIn": "System"
	, "type": "int32"
	, "args": [{
		"proto": ""
		, "kind": ".def"
		, "name": ""
		, "type": "void"
		, "cast": ".vid"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 260944
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(12))"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 500
		, "args": [{
			"proto": "libc(12)"
			, "kind": ".ref"
			, "type": "libc(12)"
			, "value": "libc(12)"
		}]
	}
}, {
	"proto": "System.clock()"
	, "kind": ".def"
	, "name": "clock"
	, "declaredIn": "System"
	, "type": "int32"
	, "args": [{
		"proto": ""
		, "kind": ".def"
		, "name": ""
		, "type": "void"
		, "cast": ".vid"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261000
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(13))"
		, "kind": "(?)"
		, "type": "int32"
		, "args": [{
			"proto": "libc(13)"
			, "kind": ".ref"
			, "type": "libc(13)"
			, "value": "libc(13)"
		}]
	}
}, {
	"proto": "System.millis()"
	, "kind": ".def"
	, "name": "millis"
	, "declaredIn": "System"
	, "type": "int64"
	, "args": [{
		"proto": ""
		, "kind": ".def"
		, "name": ""
		, "type": "void"
		, "cast": ".vid"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261056
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(14))"
		, "kind": "(?)"
		, "type": "int64"
		, "args": [{
			"proto": "libc(14)"
			, "kind": ".ref"
			, "type": "libc(14)"
			, "value": "libc(14)"
		}]
	}
}, {
	"proto": "System.sleep(millis: int64)"
	, "kind": ".def"
	, "name": "sleep"
	, "declaredIn": "System"
	, "type": "void"
	, "args": [{
		"proto": "System.sleep.millis"
		, "kind": ".def"
		, "name": "millis"
		, "declaredIn": "System.sleep(millis: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 261112
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(15), millis)"
		, "kind": "(?)"
		, "type": "void"
		, "args": [{
			"proto": "millis"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "value": "millis"
		}, {
			"proto": "libc(15)"
			, "kind": ".ref"
			, "type": "libc(15)"
			, "value": "libc(15)"
		}]
	}
}, {
	"proto": "rand(min: int32, max: int32)"
	, "kind": ".def"
	, "name": "rand"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 5
	, "args": [{
		"proto": "rand.min"
		, "kind": ".ref"
		, "name": "min"
		, "declaredIn": "rand(min: int32, max: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 5
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "rand.max"
		, "kind": ".def"
		, "name": "max"
		, "declaredIn": "rand(min: int32, max: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 5
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "int32(min + (System.rand() % (max - min)))"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 5
		, "args": [{
			"proto": "(min + (System.rand() % (max - min)))"
			, "kind": "+"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 5
			, "lval": {
				"proto": "min"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 5
				, "value": "min"
			}
			, "rval": {
				"proto": "(System.rand() % (max - min))"
				, "kind": "%"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 5
				, "lval": {
					"proto": "System.rand()"
					, "kind": "(?)"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 5
					, "args": [{
					}]
				}
				, "rval": {
					"proto": "(max - min)"
					, "kind": "(?)"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 5
					, "args": [{
						"proto": "(max - min)"
						, "kind": "-"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 5
						, "lval": {
							"proto": "max"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 5
							, "value": "max"
						}
						, "rval": {
							"proto": "min"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 5
							, "value": "min"
						}
					}]
				}
			}
		}]
	}
}, {
	"proto": "rand(min: float64, max: float64)"
	, "kind": ".def"
	, "name": "rand"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 6
	, "args": [{
		"proto": "rand.min"
		, "kind": ".ref"
		, "name": "min"
		, "declaredIn": "rand(min: float64, max: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 6
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "rand.max"
		, "kind": ".def"
		, "name": "max"
		, "declaredIn": "rand(min: float64, max: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 6
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64(min + ((System.rand() / float64(RAND_MAX)) * (max - min)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 6
		, "args": [{
			"proto": "(min + ((System.rand() / float64(RAND_MAX)) * (max - min)))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 6
			, "lval": {
				"proto": "min"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 6
				, "value": "min"
			}
			, "rval": {
				"proto": "((System.rand() / float64(RAND_MAX)) * (max - min))"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 6
				, "lval": {
					"proto": "(System.rand() / float64(RAND_MAX))"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 6
					, "args": [{
						"proto": "(System.rand() / float64(RAND_MAX))"
						, "kind": "/"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 6
						, "lval": {
							"proto": "System.rand()"
							, "kind": "(?)"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 6
							, "args": [{
							}]
						}
						, "rval": {
							"proto": "float64(RAND_MAX)"
							, "kind": "(?)"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 6
							, "args": [{
								"proto": "RAND_MAX"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 6
								, "value": "RAND_MAX"
							}]
						}
					}]
				}
				, "rval": {
					"proto": "(max - min)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 6
					, "args": [{
						"proto": "(max - min)"
						, "kind": "-"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 6
						, "lval": {
							"proto": "max"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 6
							, "value": "max"
						}
						, "rval": {
							"proto": "min"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 6
							, "value": "min"
						}
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math"
	, "kind": ".rec"
	, "name": "Math"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 11
	, "cast": ".vid"
	, "size": 0
	, "offs": 85128
	, "const": true
	, "static": true
}, {
	"proto": "Math.pi"
	, "kind": ".def"
	, "name": "pi"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 15
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "3.141593"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 15
		, "value": "3.141593"
	}
}, {
	"proto": "Math.e"
	, "kind": ".def"
	, "name": "e"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 16
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "2.718282"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 16
		, "value": "2.718282"
	}
}, {
	"proto": "Math.ln2"
	, "kind": ".def"
	, "name": "ln2"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 17
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "0.693147"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 17
		, "value": "0.693147"
	}
}, {
	"proto": "Math.log2E"
	, "kind": ".def"
	, "name": "log2E"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 18
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1.442695"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 18
		, "value": "1.442695"
	}
}, {
	"proto": "Math.ln10"
	, "kind": ".def"
	, "name": "ln10"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 19
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "2.302585"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 19
		, "value": "2.302585"
	}
}, {
	"proto": "Math.log10E"
	, "kind": ".def"
	, "name": "log10E"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 20
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "0.434294"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 20
		, "value": "0.434294"
	}
}, {
	"proto": "Math.phi"
	, "kind": ".def"
	, "name": "phi"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 21
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1.618034"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 21
		, "value": "1.618034"
	}
}, {
	"proto": "Math.sqrt2"
	, "kind": ".def"
	, "name": "sqrt2"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 22
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1.414214"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 22
		, "value": "1.414214"
	}
}, {
	"proto": "Math.sqrtE"
	, "kind": ".def"
	, "name": "sqrtE"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 23
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1.648721"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 23
		, "value": "1.648721"
	}
}, {
	"proto": "Math.sqrtPi"
	, "kind": ".def"
	, "name": "sqrtPi"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 24
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1.772454"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 24
		, "value": "1.772454"
	}
}, {
	"proto": "Math.sqrtPhi"
	, "kind": ".def"
	, "name": "sqrtPhi"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 25
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1.272020"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 25
		, "value": "1.272020"
	}
}, {
	"proto": "Math.nan"
	, "kind": ".def"
	, "name": "nan"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 26
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "-nan"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 26
		, "value": "-nan"
	}
}, {
	"proto": "Math.inf"
	, "kind": ".def"
	, "name": "inf"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 27
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "inf"
		, "kind": ".f64"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 27
		, "value": "inf"
	}
}, {
	"proto": "Math.modf(x: float64, intPart: float64)"
	, "kind": ".ref"
	, "name": "modf"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 30
	, "args": [{
		"proto": "Math.modf.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.modf(x: float64, intPart: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 30
		, "cast": ".f64"
		, "size": 8
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "Math.modf.intPart"
		, "kind": ".ref"
		, "name": "intPart"
		, "declaredIn": "Math.modf(x: float64, intPart: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 30
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 103
	, "offs": 263296
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 30
		, "stmt": [{
			"proto": "if (x < 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 31
			, "test": {
				"proto": "(x < 1)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 31
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 31
					, "value": "x"
				}
				, "rval": {
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 31
					, "value": "1"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 31
				, "stmt": [{
					"proto": "if (x < 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 32
					, "test": {
						"proto": "(x < 0)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 32
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 32
							, "value": "x"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 32
							, "value": "0"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 32
						, "stmt": [{
							"proto": "result := (-modf((-x), intPart));"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 33
							, "stmt": {
								"proto": "(result := (-modf((-x), intPart)))"
								, "kind": ":="
								, "type": "float64"
								, "file": "stdlib.cvx"
								, "line": 33
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 33
									, "value": "result"
								}
								, "rval": {
									"proto": "(-modf((-x), intPart))"
									, "kind": "-"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 33
									, "rval": {
										"proto": "modf((-x), intPart)"
										, "kind": "(?)"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 33
										, "args": [{
											"proto": "intPart"
											, "kind": ".ref"
											, "type": "float64"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 33
											, "value": "intPart"
										}, {
											"proto": "(-x)"
											, "kind": "-"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 33
											, "rval": {
												"proto": "x"
												, "kind": ".ref"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 33
												, "value": "x"
											}
										}]
									}
								}
							}
						}, {
							"proto": "intPart := (-intPart);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 34
							, "stmt": {
								"proto": "(intPart := (-intPart))"
								, "kind": ":="
								, "type": "float64"
								, "file": "stdlib.cvx"
								, "line": 34
								, "lval": {
									"proto": "intPart"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 34
									, "value": "intPart"
								}
								, "rval": {
									"proto": "(-intPart)"
									, "kind": "-"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 34
									, "rval": {
										"proto": "intPart"
										, "kind": ".ref"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 34
										, "value": "intPart"
									}
								}
							}
						}, {
							"proto": "return;"
							, "kind": "return"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 35
						}]
					}
				}, {
					"proto": "result := x;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 37
					, "stmt": {
						"proto": "(result := x)"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 37
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 37
							, "value": "result"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 37
							, "value": "x"
						}
					}
				}, {
					"proto": "intPart := 0;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 38
					, "stmt": {
						"proto": "(intPart := 0)"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 38
						, "lval": {
							"proto": "intPart"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 38
							, "value": "intPart"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 38
							, "value": "0"
						}
					}
				}, {
					"proto": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 39
				}]
			}
		}, {
			"proto": "result := (x % 1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 41
			, "stmt": {
				"proto": "(result := (x % 1))"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 41
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 41
					, "value": "result"
				}
				, "rval": {
					"proto": "(x % 1)"
					, "kind": "%"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 41
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 41
						, "value": "x"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 41
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "intPart := (x - result);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 42
			, "stmt": {
				"proto": "(intPart := (x - result))"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 42
				, "lval": {
					"proto": "intPart"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 42
					, "value": "intPart"
				}
				, "rval": {
					"proto": "(x - result)"
					, "kind": "-"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 42
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 42
						, "value": "x"
					}
					, "rval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 42
						, "value": "result"
					}
				}
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 43
		}]
	}
	, "instructions": [{
		"instruction": "dup.x2 sp(1)"
		, "offset": 263296
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 263298
	}, {
		"instruction": "f64.clt"
		, "offset": 263307
	}, {
		"instruction": "jz +67"
		, "offset": 263308
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 263312
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 263314
	}, {
		"instruction": "f64.clt"
		, "offset": 263323
	}, {
		"instruction": "jz +34"
		, "offset": 263324
	}, {
		"instruction": "stack 8"
		, "offset": 263328
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 263332
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 263334
	}, {
		"instruction": "f64.neg"
		, "offset": 263336
	}, {
		"instruction": "load.ref .040480"
		, "offset": 263337
	}, {
		"instruction": "call"
		, "offset": 263342
	}, {
		"instruction": "stack -12"
		, "offset": 263343
	}, {
		"instruction": "f64.neg"
		, "offset": 263347
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 263348
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263350
	}, {
		"instruction": "load.i64"
		, "offset": 263352
	}, {
		"instruction": "f64.neg"
		, "offset": 263353
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 263354
	}, {
		"instruction": "store.i64"
		, "offset": 263356
	}, {
		"instruction": "ret"
		, "offset": 263357
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 263358
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 263360
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 263362
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 263371
	}, {
		"instruction": "store.i64"
		, "offset": 263373
	}, {
		"instruction": "ret"
		, "offset": 263374
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 263375
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 263377
	}, {
		"instruction": "f64.mod"
		, "offset": 263386
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 263387
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 263389
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 263391
	}, {
		"instruction": "f64.sub"
		, "offset": 263393
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 263394
	}, {
		"instruction": "store.i64"
		, "offset": 263396
	}, {
		"instruction": "ret"
		, "offset": 263397
	}, {
		"instruction": "ret"
		, "offset": 263398
	}]
}, {
	"proto": "Math.isNan(x: float64)"
	, "kind": ".def"
	, "name": "isNan"
	, "declaredIn": "Math"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 46
	, "args": [{
		"proto": "Math.isNan.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.isNan(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 46
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "bool(x != x)"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 46
		, "args": [{
			"proto": "(x != x)"
			, "kind": "!="
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 46
			, "lval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 46
				, "value": "x"
			}
			, "rval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 46
				, "value": "x"
			}
		}]
	}
}, {
	"proto": "Math.isNan(x: float32)"
	, "kind": ".def"
	, "name": "isNan"
	, "declaredIn": "Math"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 47
	, "args": [{
		"proto": "Math.isNan.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.isNan(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 47
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "bool(x != x)"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 47
		, "args": [{
			"proto": "(x != x)"
			, "kind": "!="
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 47
			, "lval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 47
				, "value": "x"
			}
			, "rval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 47
				, "value": "x"
			}
		}]
	}
}, {
	"proto": "Math.isInf(x: float64)"
	, "kind": ".def"
	, "name": "isInf"
	, "declaredIn": "Math"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 49
	, "args": [{
		"proto": "Math.isInf.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.isInf(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 49
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "bool((x != 0) && (x == (2 * x)))"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 49
		, "args": [{
			"proto": "((x != 0) && (x == (2 * x)))"
			, "kind": "&&"
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 49
			, "lval": {
				"proto": "(x != 0)"
				, "kind": "!="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 49
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 49
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 49
					, "value": "0"
				}
			}
			, "rval": {
				"proto": "(x == (2 * x))"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 49
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 49
					, "value": "x"
				}
				, "rval": {
					"proto": "(2 * x)"
					, "kind": "*"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 49
					, "lval": {
						"proto": "2"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 49
						, "value": "2"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 49
						, "value": "x"
					}
				}
			}
		}]
	}
}, {
	"proto": "Math.isInf(x: float32)"
	, "kind": ".def"
	, "name": "isInf"
	, "declaredIn": "Math"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 50
	, "args": [{
		"proto": "Math.isInf.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.isInf(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 50
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "bool((x != 0) && (x == (2 * x)))"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 50
		, "args": [{
			"proto": "((x != 0) && (x == (2 * x)))"
			, "kind": "&&"
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 50
			, "lval": {
				"proto": "(x != 0)"
				, "kind": "!="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 50
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 50
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 50
					, "value": "0"
				}
			}
			, "rval": {
				"proto": "(x == (2 * x))"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 50
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 50
					, "value": "x"
				}
				, "rval": {
					"proto": "(2 * x)"
					, "kind": "*"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 50
					, "lval": {
						"proto": "2"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 50
						, "value": "2"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 50
						, "value": "x"
					}
				}
			}
		}]
	}
}, {
	"proto": "Math.isFinite(x: float64)"
	, "kind": ".def"
	, "name": "isFinite"
	, "declaredIn": "Math"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 53
	, "args": [{
		"proto": "Math.isFinite.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.isFinite(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 53
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "bool((x - x) == 0)"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 53
		, "args": [{
			"proto": "((x - x) == 0)"
			, "kind": "=="
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 53
			, "lval": {
				"proto": "(x - x)"
				, "kind": "-"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 53
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 53
					, "value": "x"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 53
					, "value": "x"
				}
			}
			, "rval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 53
				, "value": "0"
			}
		}]
	}
}, {
	"proto": "Math.isFinite(x: float32)"
	, "kind": ".def"
	, "name": "isFinite"
	, "declaredIn": "Math"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 54
	, "args": [{
		"proto": "Math.isFinite.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.isFinite(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 54
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "bool((x - x) == 0)"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 54
		, "args": [{
			"proto": "((x - x) == 0)"
			, "kind": "=="
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 54
			, "lval": {
				"proto": "(x - x)"
				, "kind": "-"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 54
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 54
					, "value": "x"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 54
					, "value": "x"
				}
			}
			, "rval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 54
				, "value": "0"
			}
		}]
	}
}, {
	"proto": "Math.abs(x: int32)"
	, "kind": ".def"
	, "name": "abs"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 57
	, "args": [{
		"proto": "Math.abs.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.abs(x: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 57
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x < 0 ? -x : x)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 57
		, "args": [{
			"proto": "x < 0 ? -x : x"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 57
			, "test": {
				"proto": "(x < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 57
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 57
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 57
					, "value": "0"
				}
			}
			, "lval": {
				"proto": "(-x)"
				, "kind": "-"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 57
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 57
					, "value": "x"
				}
			}
			, "rval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 57
				, "value": "x"
			}
		}]
	}
}, {
	"proto": "Math.abs(x: int64)"
	, "kind": ".def"
	, "name": "abs"
	, "declaredIn": "Math"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 58
	, "args": [{
		"proto": "Math.abs.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.abs(x: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 58
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x < 0 ? -x : x)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 58
		, "args": [{
			"proto": "x < 0 ? -x : x"
			, "kind": "?:"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 58
			, "test": {
				"proto": "(x < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 58
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "int64"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 58
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 58
					, "value": "0"
				}
			}
			, "lval": {
				"proto": "(-x)"
				, "kind": "-"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 58
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "int64"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 58
					, "value": "x"
				}
			}
			, "rval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 58
				, "value": "x"
			}
		}]
	}
}, {
	"proto": "Math.abs(x: uint32)"
	, "kind": ".def"
	, "name": "abs"
	, "declaredIn": "Math"
	, "type": "uint32"
	, "file": "stdlib.cvx"
	, "line": 59
	, "args": [{
		"proto": "Math.abs.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.abs(x: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 59
		, "cast": ".u32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "x"
		, "kind": ".ref"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 59
		, "value": "x"
	}
}, {
	"proto": "Math.abs(x: float32)"
	, "kind": ".def"
	, "name": "abs"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 60
	, "args": [{
		"proto": "Math.abs.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.abs(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 60
		, "cast": ".f32"
		, "size": 4
		, "offs": 24
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x < 0 ? -x : x)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 70
		, "args": [{
			"proto": "x < 0 ? -x : x"
			, "kind": "?:"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 60
			, "test": {
				"proto": "(x < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 60
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 60
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 60
					, "value": "0"
				}
			}
			, "lval": {
				"proto": "(-x)"
				, "kind": "-"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 60
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 60
					, "value": "x"
				}
			}
			, "rval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 60
				, "value": "x"
			}
		}]
	}
}, {
	"proto": "Math.abs(x: float64)"
	, "kind": ".def"
	, "name": "abs"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 61
	, "args": [{
		"proto": "Math.abs.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.abs(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 61
		, "cast": ".f64"
		, "size": 8
		, "offs": 68
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x < 0 ? -x : x)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1122
		, "args": [{
			"proto": "x < 0 ? -x : x"
			, "kind": "?:"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 61
			, "test": {
				"proto": "(x < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 61
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 61
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 61
					, "value": "0"
				}
			}
			, "lval": {
				"proto": "(-x)"
				, "kind": "-"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 61
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 61
					, "value": "x"
				}
			}
			, "rval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 61
				, "value": "x"
			}
		}]
	}
}, {
	"proto": "Math.sign(x: int32)"
	, "kind": ".def"
	, "name": "sign"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 63
	, "args": [{
		"proto": "Math.sign.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.sign(x: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 63
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x ? x < 0 ? -1 : 1 : 0)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 63
		, "args": [{
			"proto": "x ? x < 0 ? -1 : 1 : 0"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 63
			, "test": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 63
				, "value": "x"
			}
			, "lval": {
				"proto": "x < 0 ? -1 : 1"
				, "kind": "?:"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 63
				, "test": {
					"proto": "(x < 0)"
					, "kind": "<"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 63
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 63
						, "value": "x"
					}
					, "rval": {
						"proto": "0"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 63
						, "value": "0"
					}
				}
				, "lval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 63
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 63
						, "value": "1"
					}
				}
				, "rval": {
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 63
					, "value": "1"
				}
			}
			, "rval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 63
				, "value": "0"
			}
		}]
	}
}, {
	"proto": "Math.sign(x: int64)"
	, "kind": ".def"
	, "name": "sign"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 64
	, "args": [{
		"proto": "Math.sign.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.sign(x: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 64
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x ? x < 0 ? -1 : 1 : 0)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 64
		, "args": [{
			"proto": "x ? x < 0 ? -1 : 1 : 0"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 64
			, "test": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 64
				, "value": "x"
			}
			, "lval": {
				"proto": "x < 0 ? -1 : 1"
				, "kind": "?:"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 64
				, "test": {
					"proto": "(x < 0)"
					, "kind": "<"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 64
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "int64"
						, "cast": ".i64"
						, "file": "stdlib.cvx"
						, "line": 64
						, "value": "x"
					}
					, "rval": {
						"proto": "0"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i64"
						, "file": "stdlib.cvx"
						, "line": 64
						, "value": "0"
					}
				}
				, "lval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 64
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 64
						, "value": "1"
					}
				}
				, "rval": {
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 64
					, "value": "1"
				}
			}
			, "rval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 64
				, "value": "0"
			}
		}]
	}
}, {
	"proto": "Math.sign(x: uint32)"
	, "kind": ".def"
	, "name": "sign"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 65
	, "args": [{
		"proto": "Math.sign.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.sign(x: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 65
		, "cast": ".u32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x ? 1 : 0)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 65
		, "args": [{
			"proto": "x ? 1 : 0"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 65
			, "test": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "uint32"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 65
				, "value": "x"
			}
			, "lval": {
				"proto": "1"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 65
				, "value": "1"
			}
			, "rval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 65
				, "value": "0"
			}
		}]
	}
}, {
	"proto": "Math.sign(x: float32)"
	, "kind": ".def"
	, "name": "sign"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 66
	, "args": [{
		"proto": "Math.sign.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.sign(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 66
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x ? x < 0 ? -1 : 1 : 0)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 66
		, "args": [{
			"proto": "x ? x < 0 ? -1 : 1 : 0"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 66
			, "test": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 66
				, "value": "x"
			}
			, "lval": {
				"proto": "x < 0 ? -1 : 1"
				, "kind": "?:"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 66
				, "test": {
					"proto": "(x < 0)"
					, "kind": "<"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 66
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 66
						, "value": "x"
					}
					, "rval": {
						"proto": "0"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 66
						, "value": "0"
					}
				}
				, "lval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 66
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 66
						, "value": "1"
					}
				}
				, "rval": {
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 66
					, "value": "1"
				}
			}
			, "rval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 66
				, "value": "0"
			}
		}]
	}
}, {
	"proto": "Math.sign(x: float64)"
	, "kind": ".def"
	, "name": "sign"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 67
	, "args": [{
		"proto": "Math.sign.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.sign(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 67
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(x ? x < 0 ? -1 : 1 : 0)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 67
		, "args": [{
			"proto": "x ? x < 0 ? -1 : 1 : 0"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 67
			, "test": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 67
				, "value": "x"
			}
			, "lval": {
				"proto": "x < 0 ? -1 : 1"
				, "kind": "?:"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 67
				, "test": {
					"proto": "(x < 0)"
					, "kind": "<"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 67
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 67
						, "value": "x"
					}
					, "rval": {
						"proto": "0"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 67
						, "value": "0"
					}
				}
				, "lval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 67
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 67
						, "value": "1"
					}
				}
				, "rval": {
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 67
					, "value": "1"
				}
			}
			, "rval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 67
				, "value": "0"
			}
		}]
	}
}, {
	"proto": "Math.mod(x: float32, y: float32)"
	, "kind": ".ref"
	, "name": "mod"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 69
	, "args": [{
		"proto": "Math.mod.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.mod(x: float32, y: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 69
		, "cast": ".f32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "Math.mod.y"
		, "kind": ".ref"
		, "name": "y"
		, "declaredIn": "Math.mod(x: float32, y: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 69
		, "cast": ".f32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".f32"
	, "size": 59
	, "offs": 263399
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 69
		, "stmt": [{
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 70
			, "stmt": {
				"proto": "(result := x >= 0 ? x % y : ((x % y) + abs(y)) % y)"
				, "kind": ":="
				, "type": "float32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "value": "result"
				}
				, "rval": {
					"proto": "x >= 0 ? x % y : ((x % y) + abs(y)) % y"
					, "kind": "?:"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 70
					, "test": {
						"proto": "(x >= 0)"
						, "kind": ">="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 70
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 70
							, "value": "x"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 70
							, "value": "0"
						}
					}
					, "lval": {
						"proto": "(x % y)"
						, "kind": "%"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 70
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 70
							, "value": "x"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 70
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "(((x % y) + abs(y)) % y)"
						, "kind": "%"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 70
						, "lval": {
							"proto": "((x % y) + abs(y))"
							, "kind": "(?)"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 70
							, "args": [{
								"proto": "((x % y) + abs(y))"
								, "kind": "+"
								, "type": "float32"
								, "cast": ".f32"
								, "file": "stdlib.cvx"
								, "line": 70
								, "lval": {
									"proto": "(x % y)"
									, "kind": "%"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 70
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 70
										, "value": "x"
									}
									, "rval": {
										"proto": "y"
										, "kind": ".ref"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 70
										, "value": "y"
									}
								}
								, "rval": {
									"proto": "abs(y)"
									, "kind": "(?)"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 70
									, "args": [{
										"proto": "y"
										, "kind": ".ref"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 70
										, "value": "y"
									}]
								}
							}]
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 70
							, "value": "y"
						}
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 263399
	}, {
		"instruction": "load.f32 0.000000"
		, "offset": 263401
	}, {
		"instruction": "f32.clt"
		, "offset": 263406
	}, {
		"instruction": "jnz +13"
		, "offset": 263407
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 263411
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263413
	}, {
		"instruction": "f32.mod"
		, "offset": 263415
	}, {
		"instruction": "jmp +38"
		, "offset": 263416
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 263420
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263422
	}, {
		"instruction": "f32.mod"
		, "offset": 263424
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263425
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 263427
	}, {
		"instruction": "load.f32 0.000000"
		, "offset": 263429
	}, {
		"instruction": "f32.clt"
		, "offset": 263434
	}, {
		"instruction": "jz +11"
		, "offset": 263435
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 263439
	}, {
		"instruction": "f32.neg"
		, "offset": 263441
	}, {
		"instruction": "jmp +6"
		, "offset": 263442
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 263446
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 263448
	}, {
		"instruction": "f32.add"
		, "offset": 263450
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263451
	}, {
		"instruction": "f32.mod"
		, "offset": 263453
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 263454
	}, {
		"instruction": "ret"
		, "offset": 263456
	}, {
		"instruction": "ret"
		, "offset": 263457
	}]
}, {
	"proto": "Math.floor(x: float64)"
	, "kind": ".ref"
	, "name": "floor"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 73
	, "args": [{
		"proto": "Math.floor.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.floor(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 73
		, "cast": ".f64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 30
	, "offs": 263458
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 73
		, "stmt": [{
			"proto": "modf(x, (&result));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 74
			, "stmt": {
				"proto": "modf(x, (&result))"
				, "kind": "(?)"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 74
				, "args": [{
					"proto": "(&result)"
					, "kind": "&"
					, "type": "float64"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 74
					, "rval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 74
						, "value": "result"
					}
				}, {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 74
					, "value": "x"
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 75
		}]
	}
	, "instructions": [{
		"instruction": "stack 8"
		, "offset": 263458
	}, {
		"instruction": "ldsp 20"
		, "offset": 263462
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 263466
	}, {
		"instruction": "load.ref .040480"
		, "offset": 263468
	}, {
		"instruction": "call"
		, "offset": 263473
	}, {
		"instruction": "stack -12"
		, "offset": 263474
	}, {
		"instruction": "stack -8"
		, "offset": 263478
	}, {
		"instruction": "ret"
		, "offset": 263482
	}, {
		"instruction": "stack -8"
		, "offset": 263483
	}, {
		"instruction": "ret"
		, "offset": 263487
	}]
}, {
	"proto": "Math.floor(x: float32)"
	, "kind": ".def"
	, "name": "floor"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 77
	, "args": [{
		"proto": "Math.floor.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.floor(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 77
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float32(floor(float64(x)))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 77
		, "args": [{
			"proto": "floor(float64(x))"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 77
			, "args": [{
				"proto": "float64(x)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 77
				, "args": [{
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 77
					, "value": "x"
				}]
			}]
		}]
	}
}, {
	"proto": "Math.ceil(x: float64)"
	, "kind": ".def"
	, "name": "ceil"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 79
	, "args": [{
		"proto": "Math.ceil.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.ceil(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 79
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(-floor(-x))"
		, "kind": "-"
		, "type": "float64"
		, "cast": ".f64"
		, "file": "stdlib.cvx"
		, "line": 79
		, "rval": {
			"proto": "floor(-x)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 79
			, "args": [{
				"proto": "(-x)"
				, "kind": "-"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 79
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 79
					, "value": "x"
				}
			}]
		}
	}
}, {
	"proto": "Math.ceil(x: float32)"
	, "kind": ".def"
	, "name": "ceil"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 80
	, "args": [{
		"proto": "Math.ceil.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.ceil(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 80
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float32(ceil(float64(-x)))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 80
		, "args": [{
			"proto": "ceil(float64(-x))"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 80
			, "args": [{
				"proto": "float64(-x)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 80
				, "args": [{
					"proto": "(-x)"
					, "kind": "-"
					, "type": "float32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 80
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 80
						, "value": "x"
					}
				}]
			}]
		}]
	}
}, {
	"proto": "Math.round(x: float64)"
	, "kind": ".def"
	, "name": "round"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 82
	, "args": [{
		"proto": "Math.round.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.round(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 82
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "floor(x + 0.500000)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 82
		, "args": [{
			"proto": "(x + 0.500000)"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 82
			, "lval": {
				"proto": "x"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 82
				, "value": "x"
			}
			, "rval": {
				"proto": "0.500000"
				, "kind": ".f64"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 82
				, "value": "0.500000"
			}
		}]
	}
}, {
	"proto": "Math.round(x: float32)"
	, "kind": ".def"
	, "name": "round"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 83
	, "args": [{
		"proto": "Math.round.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.round(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 83
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float32(round(float64(x)))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 83
		, "args": [{
			"proto": "round(float64(x))"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 83
			, "args": [{
				"proto": "float64(x)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 83
				, "args": [{
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 83
					, "value": "x"
				}]
			}]
		}]
	}
}, {
	"proto": "Math.max(a: int32, b: int32)"
	, "kind": ".def"
	, "name": "max"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 85
	, "args": [{
		"proto": "Math.max.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.max(a: int32, b: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 85
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.max.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.max(a: int32, b: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 85
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a > b ? a : b)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 85
		, "args": [{
			"proto": "a > b ? a : b"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 85
			, "test": {
				"proto": "(a > b)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 85
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 85
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 85
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 85
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 85
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.max(a: int64, b: int64)"
	, "kind": ".def"
	, "name": "max"
	, "declaredIn": "Math"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 86
	, "args": [{
		"proto": "Math.max.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.max(a: int64, b: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 86
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.max.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.max(a: int64, b: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 86
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a > b ? a : b)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 86
		, "args": [{
			"proto": "a > b ? a : b"
			, "kind": "?:"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 86
			, "test": {
				"proto": "(a > b)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 86
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "int64"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 86
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "int64"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 86
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 86
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 86
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.max(a: uint32, b: uint32)"
	, "kind": ".def"
	, "name": "max"
	, "declaredIn": "Math"
	, "type": "uint32"
	, "file": "stdlib.cvx"
	, "line": 87
	, "args": [{
		"proto": "Math.max.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.max(a: uint32, b: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 87
		, "cast": ".u32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.max.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.max(a: uint32, b: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 87
		, "cast": ".u32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a > b ? a : b)"
		, "kind": "(?)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 87
		, "args": [{
			"proto": "a > b ? a : b"
			, "kind": "?:"
			, "type": "uint32"
			, "cast": ".u32"
			, "file": "stdlib.cvx"
			, "line": 87
			, "test": {
				"proto": "(a > b)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 87
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 87
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 87
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 87
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 87
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.max(a: float32, b: float32)"
	, "kind": ".def"
	, "name": "max"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 88
	, "args": [{
		"proto": "Math.max.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.max(a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 88
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.max.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.max(a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 88
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a > b ? a : b)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 88
		, "args": [{
			"proto": "a > b ? a : b"
			, "kind": "?:"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 88
			, "test": {
				"proto": "(a > b)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 88
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 88
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 88
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 88
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 88
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.max(a: float64, b: float64)"
	, "kind": ".def"
	, "name": "max"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 89
	, "args": [{
		"proto": "Math.max.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.max(a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 89
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.max.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.max(a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 89
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a > b ? a : b)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 89
		, "args": [{
			"proto": "a > b ? a : b"
			, "kind": "?:"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 89
			, "test": {
				"proto": "(a > b)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 89
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 89
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 89
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 89
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 89
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.min(a: int32, b: int32)"
	, "kind": ".def"
	, "name": "min"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 91
	, "args": [{
		"proto": "Math.min.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.min(a: int32, b: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 91
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.min.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.min(a: int32, b: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 91
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a < b ? a : b)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 91
		, "args": [{
			"proto": "a < b ? a : b"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 91
			, "test": {
				"proto": "(a < b)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 91
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 91
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 91
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 91
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 91
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.min(a: int64, b: int64)"
	, "kind": ".def"
	, "name": "min"
	, "declaredIn": "Math"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 92
	, "args": [{
		"proto": "Math.min.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.min(a: int64, b: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 92
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.min.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.min(a: int64, b: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 92
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a < b ? a : b)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 92
		, "args": [{
			"proto": "a < b ? a : b"
			, "kind": "?:"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 92
			, "test": {
				"proto": "(a < b)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 92
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "int64"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 92
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "int64"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 92
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 92
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 92
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.min(a: uint32, b: uint32)"
	, "kind": ".def"
	, "name": "min"
	, "declaredIn": "Math"
	, "type": "uint32"
	, "file": "stdlib.cvx"
	, "line": 93
	, "args": [{
		"proto": "Math.min.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.min(a: uint32, b: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 93
		, "cast": ".u32"
		, "size": 4
		, "offs": 24
		, "const": false
		, "static": false
	}, {
		"proto": "Math.min.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.min(a: uint32, b: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 93
		, "cast": ".u32"
		, "size": 4
		, "offs": 28
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a < b ? a : b)"
		, "kind": "(?)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1442
		, "args": [{
			"proto": "a < b ? a : b"
			, "kind": "?:"
			, "type": "uint32"
			, "cast": ".u32"
			, "file": "stdlib.cvx"
			, "line": 93
			, "test": {
				"proto": "(a < b)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 93
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 93
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 93
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 93
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 93
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.min(a: float32, b: float32)"
	, "kind": ".def"
	, "name": "min"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 94
	, "args": [{
		"proto": "Math.min.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.min(a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 94
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.min.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.min(a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 94
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a < b ? a : b)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 94
		, "args": [{
			"proto": "a < b ? a : b"
			, "kind": "?:"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 94
			, "test": {
				"proto": "(a < b)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 94
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 94
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 94
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 94
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 94
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.min(a: float64, b: float64)"
	, "kind": ".def"
	, "name": "min"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 95
	, "args": [{
		"proto": "Math.min.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.min(a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 95
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.min.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.min(a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 95
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a < b ? a : b)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 95
		, "args": [{
			"proto": "a < b ? a : b"
			, "kind": "?:"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 95
			, "test": {
				"proto": "(a < b)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 95
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 95
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 95
					, "value": "b"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 95
				, "value": "a"
			}
			, "rval": {
				"proto": "b"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 95
				, "value": "b"
			}
		}]
	}
}, {
	"proto": "Math.clamp(t: int32, a: int32, b: int32)"
	, "kind": ".def"
	, "name": "clamp"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 98
	, "args": [{
		"proto": "Math.clamp.t"
		, "kind": ".ref"
		, "name": "t"
		, "declaredIn": "Math.clamp(t: int32, a: int32, b: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 98
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.clamp.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.clamp(t: int32, a: int32, b: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 98
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.clamp.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.clamp(t: int32, a: int32, b: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 98
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(t < a ? a : t > b ? b : t)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 98
		, "args": [{
			"proto": "t < a ? a : t > b ? b : t"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 98
			, "test": {
				"proto": "(t < a)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 98
				, "lval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 98
					, "value": "t"
				}
				, "rval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 98
					, "value": "a"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 98
				, "value": "a"
			}
			, "rval": {
				"proto": "t > b ? b : t"
				, "kind": "?:"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 98
				, "test": {
					"proto": "(t > b)"
					, "kind": ">"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 98
					, "lval": {
						"proto": "t"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 98
						, "value": "t"
					}
					, "rval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 98
						, "value": "b"
					}
				}
				, "lval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 98
					, "value": "b"
				}
				, "rval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 98
					, "value": "t"
				}
			}
		}]
	}
}, {
	"proto": "Math.clamp(t: float32, a: float32, b: float32)"
	, "kind": ".def"
	, "name": "clamp"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 99
	, "args": [{
		"proto": "Math.clamp.t"
		, "kind": ".ref"
		, "name": "t"
		, "declaredIn": "Math.clamp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 99
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.clamp.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.clamp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 99
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.clamp.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.clamp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 99
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(t < a ? a : t > b ? b : t)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 99
		, "args": [{
			"proto": "t < a ? a : t > b ? b : t"
			, "kind": "?:"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 99
			, "test": {
				"proto": "(t < a)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 99
				, "lval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 99
					, "value": "t"
				}
				, "rval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 99
					, "value": "a"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 99
				, "value": "a"
			}
			, "rval": {
				"proto": "t > b ? b : t"
				, "kind": "?:"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 99
				, "test": {
					"proto": "(t > b)"
					, "kind": ">"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 99
					, "lval": {
						"proto": "t"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 99
						, "value": "t"
					}
					, "rval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 99
						, "value": "b"
					}
				}
				, "lval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 99
					, "value": "b"
				}
				, "rval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 99
					, "value": "t"
				}
			}
		}]
	}
}, {
	"proto": "Math.clamp(t: float64, a: float64, b: float64)"
	, "kind": ".def"
	, "name": "clamp"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 100
	, "args": [{
		"proto": "Math.clamp.t"
		, "kind": ".ref"
		, "name": "t"
		, "declaredIn": "Math.clamp(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 100
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.clamp.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.clamp(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 100
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.clamp.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.clamp(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 100
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(t < a ? a : t > b ? b : t)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 100
		, "args": [{
			"proto": "t < a ? a : t > b ? b : t"
			, "kind": "?:"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 100
			, "test": {
				"proto": "(t < a)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 100
				, "lval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 100
					, "value": "t"
				}
				, "rval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 100
					, "value": "a"
				}
			}
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 100
				, "value": "a"
			}
			, "rval": {
				"proto": "t > b ? b : t"
				, "kind": "?:"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 100
				, "test": {
					"proto": "(t > b)"
					, "kind": ">"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 100
					, "lval": {
						"proto": "t"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 100
						, "value": "t"
					}
					, "rval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 100
						, "value": "b"
					}
				}
				, "lval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 100
					, "value": "b"
				}
				, "rval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 100
					, "value": "t"
				}
			}
		}]
	}
}, {
	"proto": "Math.lerp(t: float32, a: float32, b: float32)"
	, "kind": ".def"
	, "name": "lerp"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 102
	, "args": [{
		"proto": "Math.lerp.t"
		, "kind": ".def"
		, "name": "t"
		, "declaredIn": "Math.lerp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 102
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.lerp.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.lerp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 102
		, "cast": ".f32"
		, "size": 4
		, "offs": 132
		, "const": false
		, "static": false
	}, {
		"proto": "Math.lerp.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "Math.lerp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 102
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a + (t * (b - a)))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 685
		, "args": [{
			"proto": "(a + (t * (b - a)))"
			, "kind": "+"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 102
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 102
				, "value": "a"
			}
			, "rval": {
				"proto": "(t * (b - a))"
				, "kind": "*"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 102
				, "lval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 102
					, "value": "t"
				}
				, "rval": {
					"proto": "(b - a)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 102
					, "args": [{
						"proto": "(b - a)"
						, "kind": "-"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 102
						, "lval": {
							"proto": "b"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 102
							, "value": "b"
						}
						, "rval": {
							"proto": "a"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 102
							, "value": "a"
						}
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math.lerp(t: float64, a: float64, b: float64)"
	, "kind": ".def"
	, "name": "lerp"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 103
	, "args": [{
		"proto": "Math.lerp.t"
		, "kind": ".def"
		, "name": "t"
		, "declaredIn": "Math.lerp(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 103
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.lerp.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.lerp(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 103
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.lerp.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "Math.lerp(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 103
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a + (t * (b - a)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 103
		, "args": [{
			"proto": "(a + (t * (b - a)))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 103
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 103
				, "value": "a"
			}
			, "rval": {
				"proto": "(t * (b - a))"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 103
				, "lval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 103
					, "value": "t"
				}
				, "rval": {
					"proto": "(b - a)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 103
					, "args": [{
						"proto": "(b - a)"
						, "kind": "-"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 103
						, "lval": {
							"proto": "b"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 103
							, "value": "b"
						}
						, "rval": {
							"proto": "a"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 103
							, "value": "a"
						}
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math.smooth(t: float32)"
	, "kind": ".def"
	, "name": "smooth"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 105
	, "args": [{
		"proto": "Math.smooth.t"
		, "kind": ".ref"
		, "name": "t"
		, "declaredIn": "Math.smooth(t: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 105
		, "cast": ".f32"
		, "size": 4
		, "offs": 104
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(t * t * (3 - (2 * t)))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 654
		, "args": [{
			"proto": "(t * t * (3 - (2 * t)))"
			, "kind": "*"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 105
			, "lval": {
				"proto": "(t * t)"
				, "kind": "*"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 105
				, "lval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 105
					, "value": "t"
				}
				, "rval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 105
					, "value": "t"
				}
			}
			, "rval": {
				"proto": "(3 - (2 * t))"
				, "kind": "(?)"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 105
				, "args": [{
					"proto": "(3 - (2 * t))"
					, "kind": "-"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 105
					, "lval": {
						"proto": "3"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 105
						, "value": "3"
					}
					, "rval": {
						"proto": "(2 * t)"
						, "kind": "*"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 105
						, "lval": {
							"proto": "2"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 105
							, "value": "2"
						}
						, "rval": {
							"proto": "t"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 105
							, "value": "t"
						}
					}
				}]
			}
		}]
	}
}, {
	"proto": "Math.smooth(t: float64)"
	, "kind": ".def"
	, "name": "smooth"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 106
	, "args": [{
		"proto": "Math.smooth.t"
		, "kind": ".ref"
		, "name": "t"
		, "declaredIn": "Math.smooth(t: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 106
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(t * t * (3 - (2 * t)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 106
		, "args": [{
			"proto": "(t * t * (3 - (2 * t)))"
			, "kind": "*"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 106
			, "lval": {
				"proto": "(t * t)"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 106
				, "lval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 106
					, "value": "t"
				}
				, "rval": {
					"proto": "t"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 106
					, "value": "t"
				}
			}
			, "rval": {
				"proto": "(3 - (2 * t))"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 106
				, "args": [{
					"proto": "(3 - (2 * t))"
					, "kind": "-"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 106
					, "lval": {
						"proto": "3"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 106
						, "value": "3"
					}
					, "rval": {
						"proto": "(2 * t)"
						, "kind": "*"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 106
						, "lval": {
							"proto": "2"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 106
							, "value": "2"
						}
						, "rval": {
							"proto": "t"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 106
							, "value": "t"
						}
					}
				}]
			}
		}]
	}
}, {
	"proto": "Math.smooth(t: float32, a: float32, b: float32)"
	, "kind": ".def"
	, "name": "smooth"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 107
	, "args": [{
		"proto": "Math.smooth.t"
		, "kind": ".def"
		, "name": "t"
		, "declaredIn": "Math.smooth(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 107
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.smooth.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.smooth(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 107
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.smooth.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "Math.smooth(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 107
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "smooth(clamp(((t - a) / (b - a)), float32(0), float32(1)))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 107
		, "args": [{
			"proto": "clamp(((t - a) / (b - a)), float32(0), float32(1))"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 107
			, "args": [{
				"proto": "float32(1)"
				, "kind": "(?)"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 107
				, "args": [{
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 107
					, "value": "1"
				}]
			}, {
				"proto": "float32(0)"
				, "kind": "(?)"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 107
				, "args": [{
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 107
					, "value": "0"
				}]
			}, {
				"proto": "((t - a) / (b - a))"
				, "kind": "/"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 107
				, "lval": {
					"proto": "(t - a)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 107
					, "args": [{
						"proto": "(t - a)"
						, "kind": "-"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 107
						, "lval": {
							"proto": "t"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 107
							, "value": "t"
						}
						, "rval": {
							"proto": "a"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 107
							, "value": "a"
						}
					}]
				}
				, "rval": {
					"proto": "(b - a)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 107
					, "args": [{
						"proto": "(b - a)"
						, "kind": "-"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 107
						, "lval": {
							"proto": "b"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 107
							, "value": "b"
						}
						, "rval": {
							"proto": "a"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 107
							, "value": "a"
						}
					}]
				}
			}]
		}]
	}
}, {
	"proto": "Math.smooth(t: float64, a: float64, b: float64)"
	, "kind": ".def"
	, "name": "smooth"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 108
	, "args": [{
		"proto": "Math.smooth.t"
		, "kind": ".def"
		, "name": "t"
		, "declaredIn": "Math.smooth(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 108
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.smooth.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.smooth(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 108
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.smooth.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "Math.smooth(t: float64, a: float64, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 108
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "smooth(clamp(((t - a) / (b - a)), float64(0), float64(1)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 108
		, "args": [{
			"proto": "clamp(((t - a) / (b - a)), float64(0), float64(1))"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 108
			, "args": [{
				"proto": "float64(1)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 108
				, "args": [{
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 108
					, "value": "1"
				}]
			}, {
				"proto": "float64(0)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 108
				, "args": [{
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 108
					, "value": "0"
				}]
			}, {
				"proto": "((t - a) / (b - a))"
				, "kind": "/"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 108
				, "lval": {
					"proto": "(t - a)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 108
					, "args": [{
						"proto": "(t - a)"
						, "kind": "-"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 108
						, "lval": {
							"proto": "t"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 108
							, "value": "t"
						}
						, "rval": {
							"proto": "a"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 108
							, "value": "a"
						}
					}]
				}
				, "rval": {
					"proto": "(b - a)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 108
					, "args": [{
						"proto": "(b - a)"
						, "kind": "-"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 108
						, "lval": {
							"proto": "b"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 108
							, "value": "b"
						}
						, "rval": {
							"proto": "a"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 108
							, "value": "a"
						}
					}]
				}
			}]
		}]
	}
}, {
	"proto": "Math.absMod(val: int32, mod: int32)"
	, "kind": ".def"
	, "name": "absMod"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 110
	, "args": [{
		"proto": "Math.absMod.val"
		, "kind": ".ref"
		, "name": "val"
		, "declaredIn": "Math.absMod(val: int32, mod: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 110
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.absMod.mod"
		, "kind": ".ref"
		, "name": "mod"
		, "declaredIn": "Math.absMod(val: int32, mod: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 110
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "((val < 0 ? val + mod : val) % mod)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 110
		, "args": [{
			"proto": "((val < 0 ? val + mod : val) % mod)"
			, "kind": "%"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 110
			, "lval": {
				"proto": "(val < 0 ? val + mod : val)"
				, "kind": "(?)"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 110
				, "args": [{
					"proto": "val < 0 ? val + mod : val"
					, "kind": "?:"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 110
					, "test": {
						"proto": "(val < 0)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 110
						, "lval": {
							"proto": "val"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 110
							, "value": "val"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 110
							, "value": "0"
						}
					}
					, "lval": {
						"proto": "(val + mod)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 110
						, "lval": {
							"proto": "val"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 110
							, "value": "val"
						}
						, "rval": {
							"proto": "mod"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 110
							, "value": "mod"
						}
					}
					, "rval": {
						"proto": "val"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 110
						, "value": "val"
					}
				}]
			}
			, "rval": {
				"proto": "mod"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 110
				, "value": "mod"
			}
		}]
	}
}, {
	"proto": "Math.absMod(val: float32, mod: float32)"
	, "kind": ".def"
	, "name": "absMod"
	, "declaredIn": "Math"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 111
	, "args": [{
		"proto": "Math.absMod.val"
		, "kind": ".ref"
		, "name": "val"
		, "declaredIn": "Math.absMod(val: float32, mod: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 111
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.absMod.mod"
		, "kind": ".ref"
		, "name": "mod"
		, "declaredIn": "Math.absMod(val: float32, mod: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 111
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "((val < 0 ? val + mod : val) % mod)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 111
		, "args": [{
			"proto": "((val < 0 ? val + mod : val) % mod)"
			, "kind": "%"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 111
			, "lval": {
				"proto": "(val < 0 ? val + mod : val)"
				, "kind": "(?)"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 111
				, "args": [{
					"proto": "val < 0 ? val + mod : val"
					, "kind": "?:"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 111
					, "test": {
						"proto": "(val < 0)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 111
						, "lval": {
							"proto": "val"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 111
							, "value": "val"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 111
							, "value": "0"
						}
					}
					, "lval": {
						"proto": "(val + mod)"
						, "kind": "+"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 111
						, "lval": {
							"proto": "val"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 111
							, "value": "val"
						}
						, "rval": {
							"proto": "mod"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 111
							, "value": "mod"
						}
					}
					, "rval": {
						"proto": "val"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 111
						, "value": "val"
					}
				}]
			}
			, "rval": {
				"proto": "mod"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 111
				, "value": "mod"
			}
		}]
	}
}, {
	"proto": "Math.absMod(val: float64, mod: float64)"
	, "kind": ".def"
	, "name": "absMod"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 112
	, "args": [{
		"proto": "Math.absMod.val"
		, "kind": ".ref"
		, "name": "val"
		, "declaredIn": "Math.absMod(val: float64, mod: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 112
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.absMod.mod"
		, "kind": ".ref"
		, "name": "mod"
		, "declaredIn": "Math.absMod(val: float64, mod: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 112
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "((val < 0 ? val + mod : val) % mod)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 112
		, "args": [{
			"proto": "((val < 0 ? val + mod : val) % mod)"
			, "kind": "%"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 112
			, "lval": {
				"proto": "(val < 0 ? val + mod : val)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 112
				, "args": [{
					"proto": "val < 0 ? val + mod : val"
					, "kind": "?:"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 112
					, "test": {
						"proto": "(val < 0)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 112
						, "lval": {
							"proto": "val"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 112
							, "value": "val"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 112
							, "value": "0"
						}
					}
					, "lval": {
						"proto": "(val + mod)"
						, "kind": "+"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 112
						, "lval": {
							"proto": "val"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 112
							, "value": "val"
						}
						, "rval": {
							"proto": "mod"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 112
							, "value": "mod"
						}
					}
					, "rval": {
						"proto": "val"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 112
						, "value": "val"
					}
				}]
			}
			, "rval": {
				"proto": "mod"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 112
				, "value": "mod"
			}
		}]
	}
}, {
	"proto": "Math.nz(val1: float64, val2: float64)"
	, "kind": ".def"
	, "name": "nz"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 116
	, "args": [{
		"proto": "Math.nz.val1"
		, "kind": ".ref"
		, "name": "val1"
		, "declaredIn": "Math.nz(val1: float64, val2: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 116
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.nz.val2"
		, "kind": ".def"
		, "name": "val2"
		, "declaredIn": "Math.nz(val1: float64, val2: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 116
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64(val1 ? val1 : val2)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 116
		, "args": [{
			"proto": "val1 ? val1 : val2"
			, "kind": "?:"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 116
			, "test": {
				"proto": "val1"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 116
				, "value": "val1"
			}
			, "lval": {
				"proto": "val1"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 116
				, "value": "val1"
			}
			, "rval": {
				"proto": "val2"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 116
				, "value": "val2"
			}
		}]
	}
}, {
	"proto": "Math.hypot(x: float64, y: float64)"
	, "kind": ".def"
	, "name": "hypot"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 118
	, "args": [{
		"proto": "Math.hypot.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.hypot(x: float64, y: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 118
		, "cast": ".f64"
		, "size": 8
		, "offs": 60
		, "const": false
		, "static": false
	}, {
		"proto": "Math.hypot.y"
		, "kind": ".ref"
		, "name": "y"
		, "declaredIn": "Math.hypot(x: float64, y: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 118
		, "cast": ".f64"
		, "size": 8
		, "offs": 68
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64.sqrt((x * x) + (y * y))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1169
		, "args": [{
			"proto": "((x * x) + (y * y))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 118
			, "lval": {
				"proto": "(x * x)"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 118
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 118
					, "value": "x"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 118
					, "value": "x"
				}
			}
			, "rval": {
				"proto": "(y * y)"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 118
				, "lval": {
					"proto": "y"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 118
					, "value": "y"
				}
				, "rval": {
					"proto": "y"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 118
					, "value": "y"
				}
			}
		}]
	}
}, {
	"proto": "Math.eval(x: float64, a0: float64, a1: float64)"
	, "kind": ".def"
	, "name": "eval"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 121
	, "args": [{
		"proto": "Math.eval.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 121
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a0"
		, "kind": ".def"
		, "name": "a0"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 121
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a1"
		, "kind": ".def"
		, "name": "a1"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 121
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a0 + (x * a1))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 121
		, "args": [{
			"proto": "(a0 + (x * a1))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 121
			, "lval": {
				"proto": "a0"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 121
				, "value": "a0"
			}
			, "rval": {
				"proto": "(x * a1)"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 121
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 121
					, "value": "x"
				}
				, "rval": {
					"proto": "a1"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 121
					, "value": "a1"
				}
			}
		}]
	}
}, {
	"proto": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64)"
	, "kind": ".def"
	, "name": "eval"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 122
	, "args": [{
		"proto": "Math.eval.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 122
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a0"
		, "kind": ".def"
		, "name": "a0"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 122
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a1"
		, "kind": ".def"
		, "name": "a1"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 122
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a2"
		, "kind": ".def"
		, "name": "a2"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 122
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a0 + (x * eval(x, a1, a2)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 122
		, "args": [{
			"proto": "(a0 + (x * eval(x, a1, a2)))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 122
			, "lval": {
				"proto": "a0"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 122
				, "value": "a0"
			}
			, "rval": {
				"proto": "(x * eval(x, a1, a2))"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 122
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 122
					, "value": "x"
				}
				, "rval": {
					"proto": "eval(x, a1, a2)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 122
					, "args": [{
						"proto": "a2"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 122
						, "value": "a2"
					}, {
						"proto": "a1"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 122
						, "value": "a1"
					}, {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 122
						, "value": "x"
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64)"
	, "kind": ".def"
	, "name": "eval"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 123
	, "args": [{
		"proto": "Math.eval.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 123
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a0"
		, "kind": ".def"
		, "name": "a0"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 123
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a1"
		, "kind": ".def"
		, "name": "a1"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 123
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a2"
		, "kind": ".def"
		, "name": "a2"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 123
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a3"
		, "kind": ".def"
		, "name": "a3"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 123
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a0 + (x * eval(x, a1, a2, a3)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 123
		, "args": [{
			"proto": "(a0 + (x * eval(x, a1, a2, a3)))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 123
			, "lval": {
				"proto": "a0"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 123
				, "value": "a0"
			}
			, "rval": {
				"proto": "(x * eval(x, a1, a2, a3))"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 123
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 123
					, "value": "x"
				}
				, "rval": {
					"proto": "eval(x, a1, a2, a3)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 123
					, "args": [{
						"proto": "a3"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 123
						, "value": "a3"
					}, {
						"proto": "a2"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 123
						, "value": "a2"
					}, {
						"proto": "a1"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 123
						, "value": "a1"
					}, {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 123
						, "value": "x"
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64)"
	, "kind": ".def"
	, "name": "eval"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 124
	, "args": [{
		"proto": "Math.eval.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 124
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a0"
		, "kind": ".def"
		, "name": "a0"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 124
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a1"
		, "kind": ".def"
		, "name": "a1"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 124
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a2"
		, "kind": ".def"
		, "name": "a2"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 124
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a3"
		, "kind": ".def"
		, "name": "a3"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 124
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a4"
		, "kind": ".def"
		, "name": "a4"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 124
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a0 + (x * eval(x, a1, a2, a3, a4)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 124
		, "args": [{
			"proto": "(a0 + (x * eval(x, a1, a2, a3, a4)))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 124
			, "lval": {
				"proto": "a0"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 124
				, "value": "a0"
			}
			, "rval": {
				"proto": "(x * eval(x, a1, a2, a3, a4))"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 124
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 124
					, "value": "x"
				}
				, "rval": {
					"proto": "eval(x, a1, a2, a3, a4)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 124
					, "args": [{
						"proto": "a4"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 124
						, "value": "a4"
					}, {
						"proto": "a3"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 124
						, "value": "a3"
					}, {
						"proto": "a2"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 124
						, "value": "a2"
					}, {
						"proto": "a1"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 124
						, "value": "a1"
					}, {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 124
						, "value": "x"
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64)"
	, "kind": ".def"
	, "name": "eval"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 125
	, "args": [{
		"proto": "Math.eval.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 125
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a0"
		, "kind": ".def"
		, "name": "a0"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 125
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a1"
		, "kind": ".def"
		, "name": "a1"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 125
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a2"
		, "kind": ".def"
		, "name": "a2"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 125
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a3"
		, "kind": ".def"
		, "name": "a3"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 125
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a4"
		, "kind": ".def"
		, "name": "a4"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 125
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a5"
		, "kind": ".def"
		, "name": "a5"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 125
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a0 + (x * eval(x, a1, a2, a3, a4, a5)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 125
		, "args": [{
			"proto": "(a0 + (x * eval(x, a1, a2, a3, a4, a5)))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 125
			, "lval": {
				"proto": "a0"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 125
				, "value": "a0"
			}
			, "rval": {
				"proto": "(x * eval(x, a1, a2, a3, a4, a5))"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 125
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 125
					, "value": "x"
				}
				, "rval": {
					"proto": "eval(x, a1, a2, a3, a4, a5)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 125
					, "args": [{
						"proto": "a5"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 125
						, "value": "a5"
					}, {
						"proto": "a4"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 125
						, "value": "a4"
					}, {
						"proto": "a3"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 125
						, "value": "a3"
					}, {
						"proto": "a2"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 125
						, "value": "a2"
					}, {
						"proto": "a1"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 125
						, "value": "a1"
					}, {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 125
						, "value": "x"
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
	, "kind": ".def"
	, "name": "eval"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 126
	, "args": [{
		"proto": "Math.eval.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a0"
		, "kind": ".def"
		, "name": "a0"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a1"
		, "kind": ".def"
		, "name": "a1"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a2"
		, "kind": ".def"
		, "name": "a2"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a3"
		, "kind": ".def"
		, "name": "a3"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a4"
		, "kind": ".def"
		, "name": "a4"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a5"
		, "kind": ".def"
		, "name": "a5"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a6"
		, "kind": ".def"
		, "name": "a6"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a0 + (x * eval(x, a1, a2, a3, a4, a5, a6)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 126
		, "args": [{
			"proto": "(a0 + (x * eval(x, a1, a2, a3, a4, a5, a6)))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 126
			, "lval": {
				"proto": "a0"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 126
				, "value": "a0"
			}
			, "rval": {
				"proto": "(x * eval(x, a1, a2, a3, a4, a5, a6))"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 126
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 126
					, "value": "x"
				}
				, "rval": {
					"proto": "eval(x, a1, a2, a3, a4, a5, a6)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 126
					, "args": [{
						"proto": "a6"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 126
						, "value": "a6"
					}, {
						"proto": "a5"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 126
						, "value": "a5"
					}, {
						"proto": "a4"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 126
						, "value": "a4"
					}, {
						"proto": "a3"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 126
						, "value": "a3"
					}, {
						"proto": "a2"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 126
						, "value": "a2"
					}, {
						"proto": "a1"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 126
						, "value": "a1"
					}, {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 126
						, "value": "x"
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
	, "kind": ".def"
	, "name": "eval"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 127
	, "args": [{
		"proto": "Math.eval.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a0"
		, "kind": ".def"
		, "name": "a0"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a1"
		, "kind": ".def"
		, "name": "a1"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a2"
		, "kind": ".def"
		, "name": "a2"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a3"
		, "kind": ".def"
		, "name": "a3"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a4"
		, "kind": ".def"
		, "name": "a4"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a5"
		, "kind": ".def"
		, "name": "a5"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a6"
		, "kind": ".def"
		, "name": "a6"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Math.eval.a7"
		, "kind": ".def"
		, "name": "a7"
		, "declaredIn": "Math.eval(x: float64, a0: float64, a1: float64, a2: float64, a3: float64, a4: float64, a5: float64, a6: float64, a7: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "(a0 + (x * eval(x, a1, a2, a3, a4, a5, a6, a7)))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 127
		, "args": [{
			"proto": "(a0 + (x * eval(x, a1, a2, a3, a4, a5, a6, a7)))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 127
			, "lval": {
				"proto": "a0"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 127
				, "value": "a0"
			}
			, "rval": {
				"proto": "(x * eval(x, a1, a2, a3, a4, a5, a6, a7))"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 127
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 127
					, "value": "x"
				}
				, "rval": {
					"proto": "eval(x, a1, a2, a3, a4, a5, a6, a7)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 127
					, "args": [{
						"proto": "a7"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 127
						, "value": "a7"
					}, {
						"proto": "a6"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 127
						, "value": "a6"
					}, {
						"proto": "a5"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 127
						, "value": "a5"
					}, {
						"proto": "a4"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 127
						, "value": "a4"
					}, {
						"proto": "a3"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 127
						, "value": "a3"
					}, {
						"proto": "a2"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 127
						, "value": "a2"
					}, {
						"proto": "a1"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 127
						, "value": "a1"
					}, {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 127
						, "value": "x"
					}]
				}
			}
		}]
	}
}, {
	"proto": "Math.Min(data: float64[])"
	, "kind": ".ref"
	, "name": "Min"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 195
	, "args": [{
		"proto": "Math.Min.data"
		, "kind": ".ref"
		, "name": "data"
		, "declaredIn": "Math.Min(data: float64[])"
		, "type": "float64[]"
		, "file": "stdlib.cvx"
		, "line": 195
		, "cast": ".arr"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 60
	, "offs": 263488
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 195
		, "stmt": [{
			"proto": "result := data[0];"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 199
			, "stmt": {
				"proto": "(result := data[0])"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 199
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 199
					, "value": "result"
				}
				, "rval": {
					"proto": "data[0]"
					, "kind": "[?]"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 199
					, "lval": {
						"proto": "data"
						, "kind": ".ref"
						, "type": "float64[]"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 199
						, "value": "data"
					}
					, "rval": {
						"proto": "0"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i64"
						, "file": "stdlib.cvx"
						, "line": 199
						, "value": "0"
					}
				}
			}
		}, {
			"proto": "for (i; i < data.length; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 200
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 200
				, "value": "i"
			}
			, "test": {
				"proto": "(i < data.length)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 200
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 200
					, "value": "i"
				}
				, "rval": {
					"proto": "data.length"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 200
					, "lval": {
						"proto": "data"
						, "kind": ".ref"
						, "type": "float64[]"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 200
						, "value": "data"
					}
					, "rval": {
						"proto": "length"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 200
						, "value": "length"
					}
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 200
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 200
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 200
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 200
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 200
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 200
				, "stmt": [{
					"proto": "if (result > data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 201
					, "test": {
						"proto": "(result > data[i])"
						, "kind": ">"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 201
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 201
							, "value": "result"
						}
						, "rval": {
							"proto": "data[i]"
							, "kind": "[?]"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 201
							, "lval": {
								"proto": "data"
								, "kind": ".ref"
								, "type": "float64[]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 201
								, "value": "data"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 201
								, "value": "i"
							}
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 201
						, "stmt": [{
							"proto": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 202
							, "stmt": {
								"proto": "(result := data[i])"
								, "kind": ":="
								, "type": "float64"
								, "file": "stdlib.cvx"
								, "line": 202
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 202
									, "value": "result"
								}
								, "rval": {
									"proto": "data[i]"
									, "kind": "[?]"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 202
									, "lval": {
										"proto": "data"
										, "kind": ".ref"
										, "type": "float64[]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 202
										, "value": "data"
									}
									, "rval": {
										"proto": "i"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 202
										, "value": "i"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 205
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 263488
	}, {
		"instruction": "load.i64"
		, "offset": 263490
	}, {
		"instruction": "set.x2 sp(5)"
		, "offset": 263491
	}, {
		"instruction": "load.c32 1"
		, "offset": 263493
	}, {
		"instruction": "jmp +35"
		, "offset": 263498
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 263502
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 263504
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263506
	}, {
		"instruction": "mad 8"
		, "offset": 263508
	}, {
		"instruction": "load.i64"
		, "offset": 263512
	}, {
		"instruction": "f64.cgt"
		, "offset": 263513
	}, {
		"instruction": "jz +15"
		, "offset": 263514
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 263518
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 263520
	}, {
		"instruction": "mad 8"
		, "offset": 263522
	}, {
		"instruction": "load.i64"
		, "offset": 263526
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 263527
	}, {
		"instruction": "inc 1"
		, "offset": 263529
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 263533
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 263535
	}, {
		"instruction": "i32.clt"
		, "offset": 263537
	}, {
		"instruction": "jnz -36"
		, "offset": 263538
	}, {
		"instruction": "stack -4"
		, "offset": 263542
	}, {
		"instruction": "ret"
		, "offset": 263546
	}, {
		"instruction": "ret"
		, "offset": 263547
	}]
}, {
	"proto": "Math.Max(data: float64[])"
	, "kind": ".ref"
	, "name": "Max"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 207
	, "args": [{
		"proto": "Math.Max.data"
		, "kind": ".ref"
		, "name": "data"
		, "declaredIn": "Math.Max(data: float64[])"
		, "type": "float64[]"
		, "file": "stdlib.cvx"
		, "line": 207
		, "cast": ".arr"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 60
	, "offs": 263548
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 207
		, "stmt": [{
			"proto": "result := data[0];"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 211
			, "stmt": {
				"proto": "(result := data[0])"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 211
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 211
					, "value": "result"
				}
				, "rval": {
					"proto": "data[0]"
					, "kind": "[?]"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 211
					, "lval": {
						"proto": "data"
						, "kind": ".ref"
						, "type": "float64[]"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 211
						, "value": "data"
					}
					, "rval": {
						"proto": "0"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i64"
						, "file": "stdlib.cvx"
						, "line": 211
						, "value": "0"
					}
				}
			}
		}, {
			"proto": "for (i; i < data.length; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 212
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 212
				, "value": "i"
			}
			, "test": {
				"proto": "(i < data.length)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 212
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 212
					, "value": "i"
				}
				, "rval": {
					"proto": "data.length"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 212
					, "lval": {
						"proto": "data"
						, "kind": ".ref"
						, "type": "float64[]"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 212
						, "value": "data"
					}
					, "rval": {
						"proto": "length"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 212
						, "value": "length"
					}
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 212
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 212
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 212
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 212
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 212
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 212
				, "stmt": [{
					"proto": "if (result < data[i])"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 213
					, "test": {
						"proto": "(result < data[i])"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 213
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 213
							, "value": "result"
						}
						, "rval": {
							"proto": "data[i]"
							, "kind": "[?]"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 213
							, "lval": {
								"proto": "data"
								, "kind": ".ref"
								, "type": "float64[]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 213
								, "value": "data"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 213
								, "value": "i"
							}
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 213
						, "stmt": [{
							"proto": "result := data[i];"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 214
							, "stmt": {
								"proto": "(result := data[i])"
								, "kind": ":="
								, "type": "float64"
								, "file": "stdlib.cvx"
								, "line": 214
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 214
									, "value": "result"
								}
								, "rval": {
									"proto": "data[i]"
									, "kind": "[?]"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 214
									, "lval": {
										"proto": "data"
										, "kind": ".ref"
										, "type": "float64[]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 214
										, "value": "data"
									}
									, "rval": {
										"proto": "i"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 214
										, "value": "i"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 217
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 263548
	}, {
		"instruction": "load.i64"
		, "offset": 263550
	}, {
		"instruction": "set.x2 sp(5)"
		, "offset": 263551
	}, {
		"instruction": "load.c32 1"
		, "offset": 263553
	}, {
		"instruction": "jmp +35"
		, "offset": 263558
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 263562
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 263564
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263566
	}, {
		"instruction": "mad 8"
		, "offset": 263568
	}, {
		"instruction": "load.i64"
		, "offset": 263572
	}, {
		"instruction": "f64.clt"
		, "offset": 263573
	}, {
		"instruction": "jz +15"
		, "offset": 263574
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 263578
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 263580
	}, {
		"instruction": "mad 8"
		, "offset": 263582
	}, {
		"instruction": "load.i64"
		, "offset": 263586
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 263587
	}, {
		"instruction": "inc 1"
		, "offset": 263589
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 263593
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 263595
	}, {
		"instruction": "i32.clt"
		, "offset": 263597
	}, {
		"instruction": "jnz -36"
		, "offset": 263598
	}, {
		"instruction": "stack -4"
		, "offset": 263602
	}, {
		"instruction": "ret"
		, "offset": 263606
	}, {
		"instruction": "ret"
		, "offset": 263607
	}]
}, {
	"proto": "Math.Sum(data: float64[])"
	, "kind": ".ref"
	, "name": "Sum"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 219
	, "args": [{
		"proto": "Math.Sum.data"
		, "kind": ".ref"
		, "name": "data"
		, "declaredIn": "Math.Sum(data: float64[])"
		, "type": "float64[]"
		, "file": "stdlib.cvx"
		, "line": 219
		, "cast": ".arr"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 53
	, "offs": 263608
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 219
		, "stmt": [{
			"proto": "result := 0;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 220
			, "stmt": {
				"proto": "(result := 0)"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 220
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 220
					, "value": "result"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 220
					, "value": "0"
				}
			}
		}, {
			"proto": "for (i; i < data.length; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 221
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 221
				, "value": "i"
			}
			, "test": {
				"proto": "(i < data.length)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 221
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 221
					, "value": "i"
				}
				, "rval": {
					"proto": "data.length"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 221
					, "lval": {
						"proto": "data"
						, "kind": ".ref"
						, "type": "float64[]"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 221
						, "value": "data"
					}
					, "rval": {
						"proto": "length"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 221
						, "value": "length"
					}
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 221
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 221
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 221
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 221
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 221
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 221
				, "stmt": [{
					"proto": "result := (result + data[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 222
					, "stmt": {
						"proto": "(result := (result + data[i]))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 222
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 222
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + data[i])"
							, "kind": "+"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 222
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 222
								, "value": "result"
							}
							, "rval": {
								"proto": "data[i]"
								, "kind": "[?]"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 222
								, "lval": {
									"proto": "data"
									, "kind": ".ref"
									, "type": "float64[]"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 222
									, "value": "data"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i64"
									, "file": "stdlib.cvx"
									, "line": 222
									, "value": "i"
								}
							}
						}
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 224
		}]
	}
	, "instructions": [{
		"instruction": "load.f64 0.000000"
		, "offset": 263608
	}, {
		"instruction": "set.x2 sp(5)"
		, "offset": 263617
	}, {
		"instruction": "load.c32 0"
		, "offset": 263619
	}, {
		"instruction": "jmp +22"
		, "offset": 263624
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 263628
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 263630
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263632
	}, {
		"instruction": "mad 8"
		, "offset": 263634
	}, {
		"instruction": "load.i64"
		, "offset": 263638
	}, {
		"instruction": "f64.add"
		, "offset": 263639
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 263640
	}, {
		"instruction": "inc 1"
		, "offset": 263642
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 263646
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 263648
	}, {
		"instruction": "i32.clt"
		, "offset": 263650
	}, {
		"instruction": "jnz -23"
		, "offset": 263651
	}, {
		"instruction": "stack -4"
		, "offset": 263655
	}, {
		"instruction": "ret"
		, "offset": 263659
	}, {
		"instruction": "ret"
		, "offset": 263660
	}]
}, {
	"proto": "Math.Mean(data: float64[])"
	, "kind": ".ref"
	, "name": "Mean"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 226
	, "args": [{
		"proto": "Math.Mean.data"
		, "kind": ".ref"
		, "name": "data"
		, "declaredIn": "Math.Mean(data: float64[])"
		, "type": "float64[]"
		, "file": "stdlib.cvx"
		, "line": 226
		, "cast": ".arr"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 24
	, "offs": 263661
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 226
		, "stmt": [{
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 227
			, "stmt": {
				"proto": "(result := (Sum(data) / data.length))"
				, "kind": ":="
				, "type": "float64"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "value": "result"
				}
				, "rval": {
					"proto": "(Sum(data) / data.length)"
					, "kind": "/"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 227
					, "lval": {
						"proto": "Sum(data)"
						, "kind": "(?)"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 227
						, "args": [{
							"proto": "data"
							, "kind": ".ref"
							, "type": "float64[]"
							, "cast": ".arr"
							, "file": "stdlib.cvx"
							, "line": 227
							, "value": "data"
						}]
					}
					, "rval": {
						"proto": "data.length"
						, "kind": "."
						, "type": "int32"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 227
						, "lval": {
							"proto": "data"
							, "kind": ".ref"
							, "type": "float64[]"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 227
							, "value": "data"
						}
						, "rval": {
							"proto": "length"
							, "kind": ".ref"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 227
							, "value": "length"
						}
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "stack 8"
		, "offset": 263661
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 263665
	}, {
		"instruction": "load.ref .0405b8"
		, "offset": 263667
	}, {
		"instruction": "call"
		, "offset": 263672
	}, {
		"instruction": "stack -8"
		, "offset": 263673
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 263677
	}, {
		"instruction": "i32.2f64"
		, "offset": 263679
	}, {
		"instruction": "f64.div"
		, "offset": 263680
	}, {
		"instruction": "set.x2 sp(5)"
		, "offset": 263681
	}, {
		"instruction": "ret"
		, "offset": 263683
	}, {
		"instruction": "ret"
		, "offset": 263684
	}]
}, {
	"proto": "Math.Cmp(a: float32, b: float32, eps: float32)"
	, "kind": ".ref"
	, "name": "Cmp"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 230
	, "args": [{
		"proto": "Math.Cmp.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.Cmp(a: float32, b: float32, eps: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 230
		, "cast": ".f32"
		, "size": 4
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "Math.Cmp.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.Cmp(a: float32, b: float32, eps: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 230
		, "cast": ".f32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "Math.Cmp.eps"
		, "kind": ".ref"
		, "name": "eps"
		, "declaredIn": "Math.Cmp(a: float32, b: float32, eps: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 230
		, "cast": ".f32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 62
	, "offs": 263685
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 230
		, "stmt": [{
			"proto": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 231
			, "test": {
				"proto": "(a < b)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 231
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 231
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 231
					, "value": "b"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 231
				, "stmt": [{
					"proto": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 232
					, "test": {
						"proto": "(eps < (b - a))"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 232
						, "lval": {
							"proto": "eps"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 232
							, "value": "eps"
						}
						, "rval": {
							"proto": "(b - a)"
							, "kind": "(?)"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 232
							, "args": [{
								"proto": "(b - a)"
								, "kind": "-"
								, "type": "float32"
								, "cast": ".f32"
								, "file": "stdlib.cvx"
								, "line": 232
								, "lval": {
									"proto": "b"
									, "kind": ".ref"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 232
									, "value": "b"
								}
								, "rval": {
									"proto": "a"
									, "kind": ".ref"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 232
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"proto": "return;"
						, "kind": "return"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 233
						, "stmt": {
							"proto": "(result := (-1))"
							, "kind": ":="
							, "type": "int32"
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "value": "result"
							}
							, "rval": {
								"proto": "(-1)"
								, "kind": "-"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 233
								, "rval": {
									"proto": "1"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 233
									, "value": "1"
								}
							}
						}
					}
				}]
			}
			, "else": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 235
				, "stmt": [{
					"proto": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 236
					, "test": {
						"proto": "(eps < (a - b))"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 236
						, "lval": {
							"proto": "eps"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 236
							, "value": "eps"
						}
						, "rval": {
							"proto": "(a - b)"
							, "kind": "(?)"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 236
							, "args": [{
								"proto": "(a - b)"
								, "kind": "-"
								, "type": "float32"
								, "cast": ".f32"
								, "file": "stdlib.cvx"
								, "line": 236
								, "lval": {
									"proto": "a"
									, "kind": ".ref"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 236
									, "value": "a"
								}
								, "rval": {
									"proto": "b"
									, "kind": ".ref"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 236
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"proto": "return;"
						, "kind": "return"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 237
						, "stmt": {
							"proto": "(result := (+1))"
							, "kind": ":="
							, "type": "int32"
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "value": "result"
							}
							, "rval": {
								"proto": "(+1)"
								, "kind": "+"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 237
								, "rval": {
									"proto": "1"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 237
									, "value": "1"
								}
							}
						}
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 239
			, "stmt": {
				"proto": "(result := 0)"
				, "kind": ":="
				, "type": "int32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "value": "result"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 239
					, "value": "0"
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 263685
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263687
	}, {
		"instruction": "f32.clt"
		, "offset": 263689
	}, {
		"instruction": "jz +28"
		, "offset": 263690
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263694
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263696
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263698
	}, {
		"instruction": "f32.sub"
		, "offset": 263700
	}, {
		"instruction": "f32.clt"
		, "offset": 263701
	}, {
		"instruction": "jz +12"
		, "offset": 263702
	}, {
		"instruction": "load.c32 -1"
		, "offset": 263706
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 263711
	}, {
		"instruction": "ret"
		, "offset": 263713
	}, {
		"instruction": "jmp +24"
		, "offset": 263714
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 263718
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 263720
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 263722
	}, {
		"instruction": "f32.sub"
		, "offset": 263724
	}, {
		"instruction": "f32.clt"
		, "offset": 263725
	}, {
		"instruction": "jz +12"
		, "offset": 263726
	}, {
		"instruction": "load.c32 1"
		, "offset": 263730
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 263735
	}, {
		"instruction": "ret"
		, "offset": 263737
	}, {
		"instruction": "load.c32 0"
		, "offset": 263738
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 263743
	}, {
		"instruction": "ret"
		, "offset": 263745
	}, {
		"instruction": "ret"
		, "offset": 263746
	}]
}, {
	"proto": "Math.Cmp(a: float64, b: float64, eps: float64)"
	, "kind": ".ref"
	, "name": "Cmp"
	, "declaredIn": "Math"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 241
	, "args": [{
		"proto": "Math.Cmp.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "Math.Cmp(a: float64, b: float64, eps: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 241
		, "cast": ".f64"
		, "size": 8
		, "offs": 28
		, "const": false
		, "static": false
	}, {
		"proto": "Math.Cmp.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "Math.Cmp(a: float64, b: float64, eps: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 241
		, "cast": ".f64"
		, "size": 8
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "Math.Cmp.eps"
		, "kind": ".ref"
		, "name": "eps"
		, "declaredIn": "Math.Cmp(a: float64, b: float64, eps: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 241
		, "cast": ".f64"
		, "size": 8
		, "offs": 12
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 62
	, "offs": 263747
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 241
		, "stmt": [{
			"proto": "if (a < b)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 242
			, "test": {
				"proto": "(a < b)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 242
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 242
					, "value": "a"
				}
				, "rval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 242
					, "value": "b"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 242
				, "stmt": [{
					"proto": "if (eps < (b - a))"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 243
					, "test": {
						"proto": "(eps < (b - a))"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 243
						, "lval": {
							"proto": "eps"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 243
							, "value": "eps"
						}
						, "rval": {
							"proto": "(b - a)"
							, "kind": "(?)"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 243
							, "args": [{
								"proto": "(b - a)"
								, "kind": "-"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 243
								, "lval": {
									"proto": "b"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 243
									, "value": "b"
								}
								, "rval": {
									"proto": "a"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 243
									, "value": "a"
								}
							}]
						}
					}
					, "then": {
						"proto": "return;"
						, "kind": "return"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 244
						, "stmt": {
							"proto": "(result := (-1))"
							, "kind": ":="
							, "type": "int32"
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "value": "result"
							}
							, "rval": {
								"proto": "(-1)"
								, "kind": "-"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 244
								, "rval": {
									"proto": "1"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 244
									, "value": "1"
								}
							}
						}
					}
				}]
			}
			, "else": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 246
				, "stmt": [{
					"proto": "if (eps < (a - b))"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 247
					, "test": {
						"proto": "(eps < (a - b))"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 247
						, "lval": {
							"proto": "eps"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 247
							, "value": "eps"
						}
						, "rval": {
							"proto": "(a - b)"
							, "kind": "(?)"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 247
							, "args": [{
								"proto": "(a - b)"
								, "kind": "-"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 247
								, "lval": {
									"proto": "a"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 247
									, "value": "a"
								}
								, "rval": {
									"proto": "b"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 247
									, "value": "b"
								}
							}]
						}
					}
					, "then": {
						"proto": "return;"
						, "kind": "return"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 248
						, "stmt": {
							"proto": "(result := (+1))"
							, "kind": ":="
							, "type": "int32"
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "value": "result"
							}
							, "rval": {
								"proto": "(+1)"
								, "kind": "+"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 248
								, "rval": {
									"proto": "1"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 248
									, "value": "1"
								}
							}
						}
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 250
			, "stmt": {
				"proto": "(result := 0)"
				, "kind": ":="
				, "type": "int32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "value": "result"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 250
					, "value": "0"
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x2 sp(1)"
		, "offset": 263747
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 263749
	}, {
		"instruction": "f64.clt"
		, "offset": 263751
	}, {
		"instruction": "jz +28"
		, "offset": 263752
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 263756
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 263758
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 263760
	}, {
		"instruction": "f64.sub"
		, "offset": 263762
	}, {
		"instruction": "f64.clt"
		, "offset": 263763
	}, {
		"instruction": "jz +12"
		, "offset": 263764
	}, {
		"instruction": "load.c32 -1"
		, "offset": 263768
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 263773
	}, {
		"instruction": "ret"
		, "offset": 263775
	}, {
		"instruction": "jmp +24"
		, "offset": 263776
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 263780
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 263782
	}, {
		"instruction": "dup.x2 sp(7)"
		, "offset": 263784
	}, {
		"instruction": "f64.sub"
		, "offset": 263786
	}, {
		"instruction": "f64.clt"
		, "offset": 263787
	}, {
		"instruction": "jz +12"
		, "offset": 263788
	}, {
		"instruction": "load.c32 1"
		, "offset": 263792
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 263797
	}, {
		"instruction": "ret"
		, "offset": 263799
	}, {
		"instruction": "load.c32 0"
		, "offset": 263800
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 263805
	}, {
		"instruction": "ret"
		, "offset": 263807
	}, {
		"instruction": "ret"
		, "offset": 263808
	}]
}, {
	"proto": "Math.sincos(arg: float64, quad: int32)"
	, "kind": ".ref"
	, "name": "sincos"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 253
	, "args": [{
		"proto": "Math.sincos.arg"
		, "kind": ".ref"
		, "name": "arg"
		, "declaredIn": "Math.sincos(arg: float64, quad: int32)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 253
		, "cast": ".f64"
		, "size": 8
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "Math.sincos.quad"
		, "kind": ".ref"
		, "name": "quad"
		, "declaredIn": "Math.sincos(arg: float64, quad: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 253
		, "cast": ".i32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 377
	, "offs": 263809
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 253
		, "stmt": [{
			"proto": "float64"
			, "kind": ".ref"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 254
			, "value": "float64"
		}, {
			"proto": "x"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 267
			, "value": "x"
		}, {
			"proto": "if (x < 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 268
			, "test": {
				"proto": "(x < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 268
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 268
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 268
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 268
				, "stmt": [{
					"proto": "x := (-x);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 269
					, "stmt": {
						"proto": "(x := (-x))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 269
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 269
							, "value": "x"
						}
						, "rval": {
							"proto": "(-x)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 269
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 269
								, "value": "x"
							}
						}
					}
				}, {
					"proto": "quad := (quad + 2);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 270
					, "stmt": {
						"proto": "(quad := (quad + 2))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 270
						, "lval": {
							"proto": "quad"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 270
							, "value": "quad"
						}
						, "rval": {
							"proto": "(quad + 2)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 270
							, "lval": {
								"proto": "quad"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 270
								, "value": "quad"
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 270
								, "value": "2"
							}
						}
					}
				}]
			}
		}, {
			"proto": "y"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 273
			, "value": "y"
		}, {
			"proto": "x := (x * 1 / PIO2);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 274
			, "stmt": {
				"proto": "(x := (x * 1 / PIO2))"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 274
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 274
					, "value": "x"
				}
				, "rval": {
					"proto": "(x * 1 / PIO2)"
					, "kind": "*"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 274
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 274
						, "value": "x"
					}
					, "rval": {
						"proto": "(1 / PIO2)"
						, "kind": "/"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 274
						, "lval": {
							"proto": "1"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 274
							, "value": "1"
						}
						, "rval": {
							"proto": "PIO2"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 274
							, "value": "PIO2"
						}
					}
				}
			}
		}, {
			"proto": "if (x > 32764)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 275
			, "test": {
				"proto": "(x > 32764)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 275
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 275
					, "value": "x"
				}
				, "rval": {
					"proto": "32764"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 275
					, "value": "32764"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 275
				, "stmt": [{
					"proto": "e"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 276
					, "value": "e"
				}, {
					"proto": "f"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 277
					, "value": "f"
				}, {
					"proto": "y := modf(x, (&e));"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 278
					, "stmt": {
						"proto": "(y := modf(x, (&e)))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 278
						, "lval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 278
							, "value": "y"
						}
						, "rval": {
							"proto": "modf(x, (&e))"
							, "kind": "(?)"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 278
							, "args": [{
								"proto": "(&e)"
								, "kind": "&"
								, "type": "float64"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 278
								, "rval": {
									"proto": "e"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 278
									, "value": "e"
								}
							}, {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 278
								, "value": "x"
							}]
						}
					}
				}, {
					"proto": "e := (e + quad);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 279
					, "stmt": {
						"proto": "(e := (e + quad))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 279
						, "lval": {
							"proto": "e"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 279
							, "value": "e"
						}
						, "rval": {
							"proto": "(e + quad)"
							, "kind": "+"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 279
							, "lval": {
								"proto": "e"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 279
								, "value": "e"
							}
							, "rval": {
								"proto": "quad"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 279
								, "value": "quad"
							}
						}
					}
				}, {
					"proto": "modf((0.250000 * e), (&f));"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 280
					, "stmt": {
						"proto": "modf((0.250000 * e), (&f))"
						, "kind": "(?)"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 280
						, "args": [{
							"proto": "(&f)"
							, "kind": "&"
							, "type": "float64"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 280
							, "rval": {
								"proto": "f"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 280
								, "value": "f"
							}
						}, {
							"proto": "(0.250000 * e)"
							, "kind": "*"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 280
							, "lval": {
								"proto": "0.250000"
								, "kind": ".f64"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 280
								, "value": "0.250000"
							}
							, "rval": {
								"proto": "e"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 280
								, "value": "e"
							}
						}]
					}
				}, {
					"proto": "quad := (e - (4 * f));"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 281
					, "stmt": {
						"proto": "(quad := (e - (4 * f)))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 281
						, "lval": {
							"proto": "quad"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 281
							, "value": "quad"
						}
						, "rval": {
							"proto": "(e - (4 * f))"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 281
							, "lval": {
								"proto": "e"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 281
								, "value": "e"
							}
							, "rval": {
								"proto": "(4 * f)"
								, "kind": "*"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 281
								, "lval": {
									"proto": "4"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 281
									, "value": "4"
								}
								, "rval": {
									"proto": "f"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 281
									, "value": "f"
								}
							}
						}
					}
				}]
			}
			, "else": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 283
				, "stmt": [{
					"proto": "k"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 284
					, "value": "k"
				}, {
					"proto": "y := (x - k);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 285
					, "stmt": {
						"proto": "(y := (x - k))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 285
						, "lval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 285
							, "value": "y"
						}
						, "rval": {
							"proto": "(x - k)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 285
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 285
								, "value": "x"
							}
							, "rval": {
								"proto": "k"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 285
								, "value": "k"
							}
						}
					}
				}, {
					"proto": "quad := (quad + k);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 286
					, "stmt": {
						"proto": "(quad := (quad + k))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 286
						, "lval": {
							"proto": "quad"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 286
							, "value": "quad"
						}
						, "rval": {
							"proto": "(quad + k)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 286
							, "lval": {
								"proto": "quad"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 286
								, "value": "quad"
							}
							, "rval": {
								"proto": "k"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 286
								, "value": "k"
							}
						}
					}
				}, {
					"proto": "quad := (quad & 3);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 287
					, "stmt": {
						"proto": "(quad := (quad & 3))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 287
						, "lval": {
							"proto": "quad"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 287
							, "value": "quad"
						}
						, "rval": {
							"proto": "(quad & 3)"
							, "kind": "&"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 287
							, "lval": {
								"proto": "quad"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 287
								, "value": "quad"
							}
							, "rval": {
								"proto": "3"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 287
								, "value": "3"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (quad & 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 289
			, "test": {
				"proto": "(quad & 1)"
				, "kind": "&"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 289
				, "lval": {
					"proto": "quad"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 289
					, "value": "quad"
				}
				, "rval": {
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 289
					, "value": "1"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 289
				, "stmt": [{
					"proto": "y := (1 - y);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 290
					, "stmt": {
						"proto": "(y := (1 - y))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 290
						, "lval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 290
							, "value": "y"
						}
						, "rval": {
							"proto": "(1 - y)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 290
							, "lval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 290
								, "value": "1"
							}
							, "rval": {
								"proto": "y"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 290
								, "value": "y"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (quad > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 292
			, "test": {
				"proto": "(quad > 1)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 292
				, "lval": {
					"proto": "quad"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 292
					, "value": "quad"
				}
				, "rval": {
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 292
					, "value": "1"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 292
				, "stmt": [{
					"proto": "y := (-y);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 293
					, "stmt": {
						"proto": "(y := (-y))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 293
						, "lval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 293
							, "value": "y"
						}
						, "rval": {
							"proto": "(-y)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 293
							, "rval": {
								"proto": "y"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 293
								, "value": "y"
							}
						}
					}
				}]
			}
		}, {
			"proto": "ysq"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 296
			, "value": "ysq"
		}, {
			"proto": "temp1"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 297
			, "value": "temp1"
		}, {
			"proto": "temp2"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 298
			, "value": "temp2"
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 299
			, "stmt": {
				"proto": "(result := (temp1 / temp2))"
				, "kind": ":="
				, "type": "float64"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "value": "result"
				}
				, "rval": {
					"proto": "(temp1 / temp2)"
					, "kind": "/"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 299
					, "lval": {
						"proto": "temp1"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 299
						, "value": "temp1"
					}
					, "rval": {
						"proto": "temp2"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 299
						, "value": "temp2"
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.m64 .0006f0"
		, "offset": 263809
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 263813
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 263815
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 263817
	}, {
		"instruction": "f64.clt"
		, "offset": 263826
	}, {
		"instruction": "jz +17"
		, "offset": 263827
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 263831
	}, {
		"instruction": "f64.neg"
		, "offset": 263833
	}, {
		"instruction": "set.x2 sp(2)"
		, "offset": 263834
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 263836
	}, {
		"instruction": "inc 2"
		, "offset": 263838
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 263842
	}, {
		"instruction": "stack 8"
		, "offset": 263844
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 263848
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 263850
	}, {
		"instruction": "load.f64 1.570796"
		, "offset": 263859
	}, {
		"instruction": "f64.div"
		, "offset": 263868
	}, {
		"instruction": "f64.mul"
		, "offset": 263869
	}, {
		"instruction": "set.x2 sp(4)"
		, "offset": 263870
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 263872
	}, {
		"instruction": "load.f64 32764.000000"
		, "offset": 263874
	}, {
		"instruction": "f64.cgt"
		, "offset": 263883
	}, {
		"instruction": "jz +98"
		, "offset": 263884
	}, {
		"instruction": "stack 8"
		, "offset": 263888
	}, {
		"instruction": "stack 8"
		, "offset": 263892
	}, {
		"instruction": "stack 8"
		, "offset": 263896
	}, {
		"instruction": "ldsp 16"
		, "offset": 263900
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 263904
	}, {
		"instruction": "load.ref .040480"
		, "offset": 263906
	}, {
		"instruction": "call"
		, "offset": 263911
	}, {
		"instruction": "stack -12"
		, "offset": 263912
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 263916
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 263918
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 263920
	}, {
		"instruction": "i32.2f64"
		, "offset": 263922
	}, {
		"instruction": "f64.add"
		, "offset": 263923
	}, {
		"instruction": "set.x2 sp(4)"
		, "offset": 263924
	}, {
		"instruction": "stack 8"
		, "offset": 263926
	}, {
		"instruction": "ldsp 8"
		, "offset": 263930
	}, {
		"instruction": "load.f64 0.250000"
		, "offset": 263934
	}, {
		"instruction": "dup.x2 sp(7)"
		, "offset": 263943
	}, {
		"instruction": "f64.mul"
		, "offset": 263945
	}, {
		"instruction": "load.ref .040480"
		, "offset": 263946
	}, {
		"instruction": "call"
		, "offset": 263951
	}, {
		"instruction": "stack -12"
		, "offset": 263952
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 263956
	}, {
		"instruction": "load.f64 4.000000"
		, "offset": 263958
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 263967
	}, {
		"instruction": "f64.mul"
		, "offset": 263969
	}, {
		"instruction": "f64.sub"
		, "offset": 263970
	}, {
		"instruction": "f64.2i32"
		, "offset": 263971
	}, {
		"instruction": "set.x1 sp(16)"
		, "offset": 263972
	}, {
		"instruction": "stack -24"
		, "offset": 263974
	}, {
		"instruction": "jmp +32"
		, "offset": 263978
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 263982
	}, {
		"instruction": "f64.2i32"
		, "offset": 263984
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 263985
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 263987
	}, {
		"instruction": "i32.2f64"
		, "offset": 263989
	}, {
		"instruction": "f64.sub"
		, "offset": 263990
	}, {
		"instruction": "set.x2 sp(3)"
		, "offset": 263991
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 263993
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 263995
	}, {
		"instruction": "i32.add"
		, "offset": 263997
	}, {
		"instruction": "set.x1 sp(11)"
		, "offset": 263998
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 264000
	}, {
		"instruction": "b32.and 0x003"
		, "offset": 264002
	}, {
		"instruction": "set.x1 sp(11)"
		, "offset": 264004
	}, {
		"instruction": "stack -4"
		, "offset": 264006
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 264010
	}, {
		"instruction": "b32.and 0x001"
		, "offset": 264012
	}, {
		"instruction": "jz +18"
		, "offset": 264014
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 264018
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264027
	}, {
		"instruction": "f64.sub"
		, "offset": 264029
	}, {
		"instruction": "set.x2 sp(2)"
		, "offset": 264030
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 264032
	}, {
		"instruction": "load.c32 1"
		, "offset": 264034
	}, {
		"instruction": "i32.cgt"
		, "offset": 264039
	}, {
		"instruction": "jz +9"
		, "offset": 264040
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 264044
	}, {
		"instruction": "f64.neg"
		, "offset": 264046
	}, {
		"instruction": "set.x2 sp(2)"
		, "offset": 264047
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 264049
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264051
	}, {
		"instruction": "f64.mul"
		, "offset": 264053
	}, {
		"instruction": "load.f64 145.968841"
		, "offset": 264054
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264063
	}, {
		"instruction": "f64.mul"
		, "offset": 264065
	}, {
		"instruction": "load.f64 -13847.272500"
		, "offset": 264066
	}, {
		"instruction": "f64.add"
		, "offset": 264075
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264076
	}, {
		"instruction": "f64.mul"
		, "offset": 264078
	}, {
		"instruction": "load.f64 440103.053538"
		, "offset": 264079
	}, {
		"instruction": "f64.add"
		, "offset": 264088
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264089
	}, {
		"instruction": "f64.mul"
		, "offset": 264091
	}, {
		"instruction": "load.f64 -4942908.100903"
		, "offset": 264092
	}, {
		"instruction": "f64.add"
		, "offset": 264101
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264102
	}, {
		"instruction": "f64.mul"
		, "offset": 264104
	}, {
		"instruction": "load.f64 13578840.978774"
		, "offset": 264105
	}, {
		"instruction": "f64.add"
		, "offset": 264114
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264115
	}, {
		"instruction": "f64.mul"
		, "offset": 264117
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264118
	}, {
		"instruction": "load.f64 132.653491"
		, "offset": 264120
	}, {
		"instruction": "f64.add"
		, "offset": 264129
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264130
	}, {
		"instruction": "f64.mul"
		, "offset": 264132
	}, {
		"instruction": "load.f64 9463.096102"
		, "offset": 264133
	}, {
		"instruction": "f64.add"
		, "offset": 264142
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264143
	}, {
		"instruction": "f64.mul"
		, "offset": 264145
	}, {
		"instruction": "load.f64 408179.225234"
		, "offset": 264146
	}, {
		"instruction": "f64.add"
		, "offset": 264155
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264156
	}, {
		"instruction": "f64.mul"
		, "offset": 264158
	}, {
		"instruction": "load.f64 8644558.652923"
		, "offset": 264159
	}, {
		"instruction": "f64.add"
		, "offset": 264168
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264169
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264171
	}, {
		"instruction": "f64.div"
		, "offset": 264173
	}, {
		"instruction": "set.x2 sp(18)"
		, "offset": 264174
	}, {
		"instruction": "stack -48"
		, "offset": 264176
	}, {
		"instruction": "ret"
		, "offset": 264180
	}, {
		"instruction": "stack -48"
		, "offset": 264181
	}, {
		"instruction": "ret"
		, "offset": 264185
	}]
}, {
	"proto": "Math.Sin(arg: float64)"
	, "kind": ".def"
	, "name": "Sin"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 303
	, "args": [{
		"proto": "Math.Sin.arg"
		, "kind": ".def"
		, "name": "arg"
		, "declaredIn": "Math.Sin(arg: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 303
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "sincos(arg, 0)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 303
		, "args": [{
			"proto": "0"
			, "kind": ".i64"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 303
			, "value": "0"
		}, {
			"proto": "arg"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 303
			, "value": "arg"
		}]
	}
}, {
	"proto": "Math.Cos(arg: float64)"
	, "kind": ".def"
	, "name": "Cos"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 306
	, "args": [{
		"proto": "Math.Cos.arg"
		, "kind": ".def"
		, "name": "arg"
		, "declaredIn": "Math.Cos(arg: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 306
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "sincos(abs(arg), 1)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 306
		, "args": [{
			"proto": "1"
			, "kind": ".i64"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 306
			, "value": "1"
		}, {
			"proto": "abs(arg)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 306
			, "args": [{
				"proto": "arg"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 306
				, "value": "arg"
			}]
		}]
	}
}, {
	"proto": "Math.Tan(arg: float64)"
	, "kind": ".ref"
	, "name": "Tan"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 309
	, "args": [{
		"proto": "Math.Tan.arg"
		, "kind": ".ref"
		, "name": "arg"
		, "declaredIn": "Math.Tan(arg: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 309
		, "cast": ".f64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 388
	, "offs": 264186
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 309
		, "stmt": [{
			"proto": "float64"
			, "kind": ".ref"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 310
			, "value": "float64"
		}, {
			"proto": "flag"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 323
			, "value": "flag"
		}, {
			"proto": "sign"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 324
			, "value": "sign"
		}, {
			"proto": "if (arg < 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 326
			, "test": {
				"proto": "(arg < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 326
				, "lval": {
					"proto": "arg"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 326
					, "value": "arg"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 326
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 326
				, "stmt": [{
					"proto": "arg := (-arg);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 327
					, "stmt": {
						"proto": "(arg := (-arg))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 327
						, "lval": {
							"proto": "arg"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 327
							, "value": "arg"
						}
						, "rval": {
							"proto": "(-arg)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 327
							, "rval": {
								"proto": "arg"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 327
								, "value": "arg"
							}
						}
					}
				}, {
					"proto": "sign := (sign + 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 328
					, "stmt": {
						"proto": "(sign := (sign + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 328
						, "lval": {
							"proto": "sign"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 328
							, "value": "sign"
						}
						, "rval": {
							"proto": "(sign + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 328
							, "lval": {
								"proto": "sign"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 328
								, "value": "sign"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 328
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "arg := (2 * arg / PIO2);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 330
			, "stmt": {
				"proto": "(arg := (2 * arg / PIO2))"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 330
				, "lval": {
					"proto": "arg"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 330
					, "value": "arg"
				}
				, "rval": {
					"proto": "(2 * arg / PIO2)"
					, "kind": "/"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 330
					, "lval": {
						"proto": "(2 * arg)"
						, "kind": "*"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 330
						, "lval": {
							"proto": "2"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 330
							, "value": "2"
						}
						, "rval": {
							"proto": "arg"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 330
							, "value": "arg"
						}
					}
					, "rval": {
						"proto": "PIO2"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 330
						, "value": "PIO2"
					}
				}
			}
		}, {
			"proto": "e"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 332
			, "value": "e"
		}, {
			"proto": "x"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 333
			, "value": "x"
		}, {
			"proto": "i"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 334
			, "value": "i"
		}, {
			"proto": "if (i == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 336
			, "test": {
				"proto": "(i == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 336
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 336
					, "value": "i"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 336
					, "value": "0"
				}
			}
			, "else": {
				"proto": "if (i == 1)"
				, "kind": "if"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 337
				, "test": {
					"proto": "(i == 1)"
					, "kind": "=="
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 337
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 337
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 337
						, "value": "1"
					}
				}
				, "then": {
					"proto": "{...}"
					, "kind": "{"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 337
					, "stmt": [{
						"proto": "x := (1 - x);"
						, "kind": ";"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 338
						, "stmt": {
							"proto": "(x := (1 - x))"
							, "kind": ":="
							, "type": "float64"
							, "file": "stdlib.cvx"
							, "line": 338
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 338
								, "value": "x"
							}
							, "rval": {
								"proto": "(1 - x)"
								, "kind": "-"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 338
								, "lval": {
									"proto": "1"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 338
									, "value": "1"
								}
								, "rval": {
									"proto": "x"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 338
									, "value": "x"
								}
							}
						}
					}, {
						"proto": "flag := 1;"
						, "kind": ";"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 339
						, "stmt": {
							"proto": "(flag := 1)"
							, "kind": ":="
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 339
							, "lval": {
								"proto": "flag"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 339
								, "value": "flag"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 339
								, "value": "1"
							}
						}
					}]
				}
				, "else": {
					"proto": "if (i == 2)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 341
					, "test": {
						"proto": "(i == 2)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 341
						, "lval": {
							"proto": "i"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 341
							, "value": "i"
						}
						, "rval": {
							"proto": "2"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 341
							, "value": "2"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 341
						, "stmt": [{
							"proto": "sign := (!sign);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 342
							, "stmt": {
								"proto": "(sign := (!sign))"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 342
								, "lval": {
									"proto": "sign"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 342
									, "value": "sign"
								}
								, "rval": {
									"proto": "(!sign)"
									, "kind": "!"
									, "type": "bool"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 342
									, "rval": {
										"proto": "sign"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 342
										, "value": "sign"
									}
								}
							}
						}, {
							"proto": "flag := 1;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 343
							, "stmt": {
								"proto": "(flag := 1)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 343
								, "lval": {
									"proto": "flag"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 343
									, "value": "flag"
								}
								, "rval": {
									"proto": "1"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 343
									, "value": "1"
								}
							}
						}]
					}
					, "else": {
						"proto": "if (i == 3)"
						, "kind": "if"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 345
						, "test": {
							"proto": "(i == 3)"
							, "kind": "=="
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 345
							, "lval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 345
								, "value": "i"
							}
							, "rval": {
								"proto": "3"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 345
								, "value": "3"
							}
						}
						, "then": {
							"proto": "{...}"
							, "kind": "{"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 345
							, "stmt": [{
								"proto": "x := (1 - x);"
								, "kind": ";"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 346
								, "stmt": {
									"proto": "(x := (1 - x))"
									, "kind": ":="
									, "type": "float64"
									, "file": "stdlib.cvx"
									, "line": 346
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 346
										, "value": "x"
									}
									, "rval": {
										"proto": "(1 - x)"
										, "kind": "-"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 346
										, "lval": {
											"proto": "1"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 346
											, "value": "1"
										}
										, "rval": {
											"proto": "x"
											, "kind": ".ref"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 346
											, "value": "x"
										}
									}
								}
							}, {
								"proto": "sign := (!sign);"
								, "kind": ";"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 347
								, "stmt": {
									"proto": "(sign := (!sign))"
									, "kind": ":="
									, "type": "int32"
									, "file": "stdlib.cvx"
									, "line": 347
									, "lval": {
										"proto": "sign"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 347
										, "value": "sign"
									}
									, "rval": {
										"proto": "(!sign)"
										, "kind": "!"
										, "type": "bool"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 347
										, "rval": {
											"proto": "sign"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 347
											, "value": "sign"
										}
									}
								}
							}]
						}
					}
				}
			}
		}, {
			"proto": "xsq"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 350
			, "value": "xsq"
		}, {
			"proto": "result := (((((((((p4 * xsq) + p3) * xsq) + p2) * xsq) + p1) * xsq) + p0) * x);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 351
			, "stmt": {
				"proto": "(result := (((((((((p4 * xsq) + p3) * xsq) + p2) * xsq) + p1) * xsq) + p0) * x))"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 351
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 351
					, "value": "result"
				}
				, "rval": {
					"proto": "(((((((((p4 * xsq) + p3) * xsq) + p2) * xsq) + p1) * xsq) + p0) * x)"
					, "kind": "*"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 351
					, "lval": {
						"proto": "((((((((p4 * xsq) + p3) * xsq) + p2) * xsq) + p1) * xsq) + p0)"
						, "kind": "(?)"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 351
						, "args": [{
							"proto": "((((((((p4 * xsq) + p3) * xsq) + p2) * xsq) + p1) * xsq) + p0)"
							, "kind": "+"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 351
							, "lval": {
								"proto": "(((((((p4 * xsq) + p3) * xsq) + p2) * xsq) + p1) * xsq)"
								, "kind": "*"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 351
								, "lval": {
									"proto": "((((((p4 * xsq) + p3) * xsq) + p2) * xsq) + p1)"
									, "kind": "(?)"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 351
									, "args": [{
										"proto": "((((((p4 * xsq) + p3) * xsq) + p2) * xsq) + p1)"
										, "kind": "+"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 351
										, "lval": {
											"proto": "(((((p4 * xsq) + p3) * xsq) + p2) * xsq)"
											, "kind": "*"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 351
											, "lval": {
												"proto": "((((p4 * xsq) + p3) * xsq) + p2)"
												, "kind": "(?)"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 351
												, "args": [{
													"proto": "((((p4 * xsq) + p3) * xsq) + p2)"
													, "kind": "+"
													, "type": "float64"
													, "cast": ".f64"
													, "file": "stdlib.cvx"
													, "line": 351
													, "lval": {
														"proto": "(((p4 * xsq) + p3) * xsq)"
														, "kind": "*"
														, "type": "float64"
														, "cast": ".f64"
														, "file": "stdlib.cvx"
														, "line": 351
														, "lval": {
															"proto": "((p4 * xsq) + p3)"
															, "kind": "(?)"
															, "type": "float64"
															, "cast": ".f64"
															, "file": "stdlib.cvx"
															, "line": 351
															, "args": [{
																"proto": "((p4 * xsq) + p3)"
																, "kind": "+"
																, "type": "float64"
																, "cast": ".f64"
																, "file": "stdlib.cvx"
																, "line": 351
																, "lval": {
																	"proto": "(p4 * xsq)"
																	, "kind": "*"
																	, "type": "float64"
																	, "cast": ".f64"
																	, "file": "stdlib.cvx"
																	, "line": 351
																	, "lval": {
																		"proto": "p4"
																		, "kind": ".ref"
																		, "type": "float64"
																		, "cast": ".f64"
																		, "file": "stdlib.cvx"
																		, "line": 351
																		, "value": "p4"
																	}
																	, "rval": {
																		"proto": "xsq"
																		, "kind": ".ref"
																		, "type": "float64"
																		, "cast": ".f64"
																		, "file": "stdlib.cvx"
																		, "line": 351
																		, "value": "xsq"
																	}
																}
																, "rval": {
																	"proto": "p3"
																	, "kind": ".ref"
																	, "type": "float64"
																	, "cast": ".f64"
																	, "file": "stdlib.cvx"
																	, "line": 351
																	, "value": "p3"
																}
															}]
														}
														, "rval": {
															"proto": "xsq"
															, "kind": ".ref"
															, "type": "float64"
															, "cast": ".f64"
															, "file": "stdlib.cvx"
															, "line": 351
															, "value": "xsq"
														}
													}
													, "rval": {
														"proto": "p2"
														, "kind": ".ref"
														, "type": "float64"
														, "cast": ".f64"
														, "file": "stdlib.cvx"
														, "line": 351
														, "value": "p2"
													}
												}]
											}
											, "rval": {
												"proto": "xsq"
												, "kind": ".ref"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 351
												, "value": "xsq"
											}
										}
										, "rval": {
											"proto": "p1"
											, "kind": ".ref"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 351
											, "value": "p1"
										}
									}]
								}
								, "rval": {
									"proto": "xsq"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 351
									, "value": "xsq"
								}
							}
							, "rval": {
								"proto": "p0"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 351
								, "value": "p0"
							}
						}]
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 351
						, "value": "x"
					}
				}
			}
		}, {
			"proto": "result := (result / ((((xsq + q2) * xsq) + q1) * xsq) + q0);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 352
			, "stmt": {
				"proto": "(result := (result / ((((xsq + q2) * xsq) + q1) * xsq) + q0))"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 352
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 352
					, "value": "result"
				}
				, "rval": {
					"proto": "(result / ((((xsq + q2) * xsq) + q1) * xsq) + q0)"
					, "kind": "/"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 352
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 352
						, "value": "result"
					}
					, "rval": {
						"proto": "(((((xsq + q2) * xsq) + q1) * xsq) + q0)"
						, "kind": "+"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 352
						, "lval": {
							"proto": "((((xsq + q2) * xsq) + q1) * xsq)"
							, "kind": "*"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 352
							, "lval": {
								"proto": "(((xsq + q2) * xsq) + q1)"
								, "kind": "(?)"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 352
								, "args": [{
									"proto": "(((xsq + q2) * xsq) + q1)"
									, "kind": "+"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 352
									, "lval": {
										"proto": "((xsq + q2) * xsq)"
										, "kind": "*"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 352
										, "lval": {
											"proto": "(xsq + q2)"
											, "kind": "(?)"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 352
											, "args": [{
												"proto": "(xsq + q2)"
												, "kind": "+"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 352
												, "lval": {
													"proto": "xsq"
													, "kind": ".ref"
													, "type": "float64"
													, "cast": ".f64"
													, "file": "stdlib.cvx"
													, "line": 352
													, "value": "xsq"
												}
												, "rval": {
													"proto": "q2"
													, "kind": ".ref"
													, "type": "float64"
													, "cast": ".f64"
													, "file": "stdlib.cvx"
													, "line": 352
													, "value": "q2"
												}
											}]
										}
										, "rval": {
											"proto": "xsq"
											, "kind": ".ref"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 352
											, "value": "xsq"
										}
									}
									, "rval": {
										"proto": "q1"
										, "kind": ".ref"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 352
										, "value": "q1"
									}
								}]
							}
							, "rval": {
								"proto": "xsq"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 352
								, "value": "xsq"
							}
						}
						, "rval": {
							"proto": "q0"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 352
							, "value": "q0"
						}
					}
				}
			}
		}, {
			"proto": "if (flag)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 354
			, "test": {
				"proto": "flag"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 354
				, "value": "flag"
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 354
				, "stmt": [{
					"proto": "if (result == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 355
					, "test": {
						"proto": "(result == 0)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 355
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 355
							, "value": "result"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 355
							, "value": "0"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 355
						, "stmt": [{
							"proto": "return;"
							, "kind": "return"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 356
							, "stmt": {
								"proto": "(result := nan)"
								, "kind": ":="
								, "type": "float64"
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "value": "result"
								}
								, "rval": {
									"proto": "nan"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 356
									, "value": "nan"
								}
							}
						}]
					}
				}, {
					"proto": "result := (1 / result);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 358
					, "stmt": {
						"proto": "(result := (1 / result))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 358
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 358
							, "value": "result"
						}
						, "rval": {
							"proto": "(1 / result)"
							, "kind": "/"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 358
							, "lval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 358
								, "value": "1"
							}
							, "rval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 358
								, "value": "result"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (sign)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 360
			, "test": {
				"proto": "sign"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 360
				, "value": "sign"
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 360
				, "stmt": [{
					"proto": "result := (-result);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 361
					, "stmt": {
						"proto": "(result := (-result))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 361
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 361
							, "value": "result"
						}
						, "rval": {
							"proto": "(-result)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 361
							, "rval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 361
								, "value": "result"
							}
						}
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.m64 .0006f0"
		, "offset": 264186
	}, {
		"instruction": "load.c32 0"
		, "offset": 264190
	}, {
		"instruction": "load.c32 0"
		, "offset": 264195
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 264200
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 264202
	}, {
		"instruction": "f64.clt"
		, "offset": 264211
	}, {
		"instruction": "jz +13"
		, "offset": 264212
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 264216
	}, {
		"instruction": "f64.neg"
		, "offset": 264218
	}, {
		"instruction": "set.x2 sp(7)"
		, "offset": 264219
	}, {
		"instruction": "inc 1"
		, "offset": 264221
	}, {
		"instruction": "load.f64 2.000000"
		, "offset": 264225
	}, {
		"instruction": "dup.x2 sp(7)"
		, "offset": 264234
	}, {
		"instruction": "f64.mul"
		, "offset": 264236
	}, {
		"instruction": "load.f64 1.570796"
		, "offset": 264237
	}, {
		"instruction": "f64.div"
		, "offset": 264246
	}, {
		"instruction": "set.x2 sp(7)"
		, "offset": 264247
	}, {
		"instruction": "stack 8"
		, "offset": 264249
	}, {
		"instruction": "stack 8"
		, "offset": 264253
	}, {
		"instruction": "ldsp 8"
		, "offset": 264257
	}, {
		"instruction": "dup.x2 sp(10)"
		, "offset": 264261
	}, {
		"instruction": "load.ref .040480"
		, "offset": 264263
	}, {
		"instruction": "call"
		, "offset": 264268
	}, {
		"instruction": "stack -12"
		, "offset": 264269
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264273
	}, {
		"instruction": "f64.2i32"
		, "offset": 264275
	}, {
		"instruction": "load.c32 4"
		, "offset": 264276
	}, {
		"instruction": "i32.mod"
		, "offset": 264281
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 264282
	}, {
		"instruction": "load.c32 0"
		, "offset": 264284
	}, {
		"instruction": "i32.ceq"
		, "offset": 264289
	}, {
		"instruction": "jnz +102"
		, "offset": 264290
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 264294
	}, {
		"instruction": "load.c32 1"
		, "offset": 264296
	}, {
		"instruction": "i32.ceq"
		, "offset": 264301
	}, {
		"instruction": "jz +29"
		, "offset": 264302
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 264306
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 264315
	}, {
		"instruction": "f64.sub"
		, "offset": 264317
	}, {
		"instruction": "set.x2 sp(3)"
		, "offset": 264318
	}, {
		"instruction": "load.c32 1"
		, "offset": 264320
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 264325
	}, {
		"instruction": "jmp +65"
		, "offset": 264327
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 264331
	}, {
		"instruction": "load.c32 2"
		, "offset": 264333
	}, {
		"instruction": "i32.ceq"
		, "offset": 264338
	}, {
		"instruction": "jz +21"
		, "offset": 264339
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 264343
	}, {
		"instruction": "i32.2bool"
		, "offset": 264345
	}, {
		"instruction": "b32.not"
		, "offset": 264346
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 264347
	}, {
		"instruction": "load.c32 1"
		, "offset": 264349
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 264354
	}, {
		"instruction": "jmp +36"
		, "offset": 264356
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 264360
	}, {
		"instruction": "load.c32 3"
		, "offset": 264362
	}, {
		"instruction": "i32.ceq"
		, "offset": 264367
	}, {
		"instruction": "jz +24"
		, "offset": 264368
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 264372
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 264381
	}, {
		"instruction": "f64.sub"
		, "offset": 264383
	}, {
		"instruction": "set.x2 sp(3)"
		, "offset": 264384
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 264386
	}, {
		"instruction": "i32.2bool"
		, "offset": 264388
	}, {
		"instruction": "b32.not"
		, "offset": 264389
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 264390
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 264392
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 264394
	}, {
		"instruction": "f64.mul"
		, "offset": 264396
	}, {
		"instruction": "load.f64 0.000034"
		, "offset": 264397
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264406
	}, {
		"instruction": "f64.mul"
		, "offset": 264408
	}, {
		"instruction": "load.f64 0.034226"
		, "offset": 264409
	}, {
		"instruction": "f64.add"
		, "offset": 264418
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264419
	}, {
		"instruction": "f64.mul"
		, "offset": 264421
	}, {
		"instruction": "load.f64 -15.506857"
		, "offset": 264422
	}, {
		"instruction": "f64.add"
		, "offset": 264431
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264432
	}, {
		"instruction": "f64.mul"
		, "offset": 264434
	}, {
		"instruction": "load.f64 1055.970902"
		, "offset": 264435
	}, {
		"instruction": "f64.add"
		, "offset": 264444
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264445
	}, {
		"instruction": "f64.mul"
		, "offset": 264447
	}, {
		"instruction": "load.f64 -13068.202648"
		, "offset": 264448
	}, {
		"instruction": "f64.add"
		, "offset": 264457
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 264458
	}, {
		"instruction": "f64.mul"
		, "offset": 264460
	}, {
		"instruction": "set.x2 sp(16)"
		, "offset": 264461
	}, {
		"instruction": "dup.x2 sp(14)"
		, "offset": 264463
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264465
	}, {
		"instruction": "load.f64 -155.503316"
		, "offset": 264467
	}, {
		"instruction": "f64.add"
		, "offset": 264476
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264477
	}, {
		"instruction": "f64.mul"
		, "offset": 264479
	}, {
		"instruction": "load.f64 4765.751363"
		, "offset": 264480
	}, {
		"instruction": "f64.add"
		, "offset": 264489
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264490
	}, {
		"instruction": "f64.mul"
		, "offset": 264492
	}, {
		"instruction": "load.f64 -16638.952389"
		, "offset": 264493
	}, {
		"instruction": "f64.add"
		, "offset": 264502
	}, {
		"instruction": "f64.div"
		, "offset": 264503
	}, {
		"instruction": "set.x2 sp(16)"
		, "offset": 264504
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 264506
	}, {
		"instruction": "jz +50"
		, "offset": 264508
	}, {
		"instruction": "dup.x2 sp(14)"
		, "offset": 264512
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 264514
	}, {
		"instruction": "f64.ceq"
		, "offset": 264523
	}, {
		"instruction": "jz +20"
		, "offset": 264524
	}, {
		"instruction": "load.f64 -nan"
		, "offset": 264528
	}, {
		"instruction": "set.x2 sp(16)"
		, "offset": 264537
	}, {
		"instruction": "stack -44"
		, "offset": 264539
	}, {
		"instruction": "ret"
		, "offset": 264543
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 264544
	}, {
		"instruction": "dup.x2 sp(16)"
		, "offset": 264553
	}, {
		"instruction": "f64.div"
		, "offset": 264555
	}, {
		"instruction": "set.x2 sp(16)"
		, "offset": 264556
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 264558
	}, {
		"instruction": "jz +9"
		, "offset": 264560
	}, {
		"instruction": "dup.x2 sp(14)"
		, "offset": 264564
	}, {
		"instruction": "f64.neg"
		, "offset": 264566
	}, {
		"instruction": "set.x2 sp(16)"
		, "offset": 264567
	}, {
		"instruction": "stack -44"
		, "offset": 264569
	}, {
		"instruction": "ret"
		, "offset": 264573
	}]
}, {
	"proto": "Math.Sinh(x: float64)"
	, "kind": ".ref"
	, "name": "Sinh"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 367
	, "args": [{
		"proto": "Math.Sinh.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.Sinh(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 367
		, "cast": ".f64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 243
	, "offs": 264574
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 367
		, "stmt": [{
			"proto": "float64"
			, "kind": ".ref"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 369
			, "value": "float64"
		}, {
			"proto": "sign"
			, "kind": ".def"
			, "type": "bool"
			, "file": "stdlib.cvx"
			, "line": 379
			, "value": "sign"
		}, {
			"proto": "if (x < 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 380
			, "test": {
				"proto": "(x < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 380
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 380
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 380
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 380
				, "stmt": [{
					"proto": "x := (-x);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 381
					, "stmt": {
						"proto": "(x := (-x))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 381
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 381
							, "value": "x"
						}
						, "rval": {
							"proto": "(-x)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 381
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 381
								, "value": "x"
							}
						}
					}
				}, {
					"proto": "sign := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 382
					, "stmt": {
						"proto": "(sign := true)"
						, "kind": ":="
						, "type": "bool"
						, "file": "stdlib.cvx"
						, "line": 382
						, "lval": {
							"proto": "sign"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 382
							, "value": "sign"
						}
						, "rval": {
							"proto": "true"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 382
							, "value": "true"
						}
					}
				}]
			}
		}, {
			"proto": "if (x > 21)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 385
			, "test": {
				"proto": "(x > 21)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 385
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 385
					, "value": "x"
				}
				, "rval": {
					"proto": "21"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 385
					, "value": "21"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 385
				, "stmt": [{
					"proto": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 386
					, "stmt": {
						"proto": "(result := (float64.exp(x) / 2))"
						, "kind": ":="
						, "type": "float64"
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "value": "result"
						}
						, "rval": {
							"proto": "(float64.exp(x) / 2)"
							, "kind": "/"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 386
							, "lval": {
								"proto": "float64.exp(x)"
								, "kind": "(?)"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 386
								, "args": [{
									"proto": "x"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 386
									, "value": "x"
								}]
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 386
								, "value": "2"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (x > 0.500000)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 388
			, "test": {
				"proto": "(x > 0.500000)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 388
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 388
					, "value": "x"
				}
				, "rval": {
					"proto": "0.500000"
					, "kind": ".f64"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 388
					, "value": "0.500000"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 388
				, "stmt": [{
					"proto": "result := ((float64.exp(x) - float64.exp(-x)) / 2);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 389
					, "stmt": {
						"proto": "(result := ((float64.exp(x) - float64.exp(-x)) / 2))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 389
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 389
							, "value": "result"
						}
						, "rval": {
							"proto": "((float64.exp(x) - float64.exp(-x)) / 2)"
							, "kind": "/"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 389
							, "lval": {
								"proto": "(float64.exp(x) - float64.exp(-x))"
								, "kind": "(?)"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 389
								, "args": [{
									"proto": "(float64.exp(x) - float64.exp(-x))"
									, "kind": "-"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 389
									, "lval": {
										"proto": "float64.exp(x)"
										, "kind": "(?)"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 389
										, "args": [{
											"proto": "x"
											, "kind": ".ref"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 389
											, "value": "x"
										}]
									}
									, "rval": {
										"proto": "float64.exp(-x)"
										, "kind": "(?)"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 389
										, "args": [{
											"proto": "(-x)"
											, "kind": "-"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 389
											, "rval": {
												"proto": "x"
												, "kind": ".ref"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 389
												, "value": "x"
											}
										}]
									}
								}]
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 389
								, "value": "2"
							}
						}
					}
				}]
			}
			, "else": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 391
				, "stmt": [{
					"proto": "sq"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 392
					, "value": "sq"
				}, {
					"proto": "result := (((((((P3 * sq) + P2) * sq) + P1) * sq) + P0) * x);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 395
					, "stmt": {
						"proto": "(result := (((((((P3 * sq) + P2) * sq) + P1) * sq) + P0) * x))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 395
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 395
							, "value": "result"
						}
						, "rval": {
							"proto": "(((((((P3 * sq) + P2) * sq) + P1) * sq) + P0) * x)"
							, "kind": "*"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 395
							, "lval": {
								"proto": "((((((P3 * sq) + P2) * sq) + P1) * sq) + P0)"
								, "kind": "(?)"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 395
								, "args": [{
									"proto": "((((((P3 * sq) + P2) * sq) + P1) * sq) + P0)"
									, "kind": "+"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 395
									, "lval": {
										"proto": "(((((P3 * sq) + P2) * sq) + P1) * sq)"
										, "kind": "*"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 395
										, "lval": {
											"proto": "((((P3 * sq) + P2) * sq) + P1)"
											, "kind": "(?)"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 395
											, "args": [{
												"proto": "((((P3 * sq) + P2) * sq) + P1)"
												, "kind": "+"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 395
												, "lval": {
													"proto": "(((P3 * sq) + P2) * sq)"
													, "kind": "*"
													, "type": "float64"
													, "cast": ".f64"
													, "file": "stdlib.cvx"
													, "line": 395
													, "lval": {
														"proto": "((P3 * sq) + P2)"
														, "kind": "(?)"
														, "type": "float64"
														, "cast": ".f64"
														, "file": "stdlib.cvx"
														, "line": 395
														, "args": [{
															"proto": "((P3 * sq) + P2)"
															, "kind": "+"
															, "type": "float64"
															, "cast": ".f64"
															, "file": "stdlib.cvx"
															, "line": 395
															, "lval": {
																"proto": "(P3 * sq)"
																, "kind": "*"
																, "type": "float64"
																, "cast": ".f64"
																, "file": "stdlib.cvx"
																, "line": 395
																, "lval": {
																	"proto": "P3"
																	, "kind": ".ref"
																	, "type": "float64"
																	, "cast": ".f64"
																	, "file": "stdlib.cvx"
																	, "line": 395
																	, "value": "P3"
																}
																, "rval": {
																	"proto": "sq"
																	, "kind": ".ref"
																	, "type": "float64"
																	, "cast": ".f64"
																	, "file": "stdlib.cvx"
																	, "line": 395
																	, "value": "sq"
																}
															}
															, "rval": {
																"proto": "P2"
																, "kind": ".ref"
																, "type": "float64"
																, "cast": ".f64"
																, "file": "stdlib.cvx"
																, "line": 395
																, "value": "P2"
															}
														}]
													}
													, "rval": {
														"proto": "sq"
														, "kind": ".ref"
														, "type": "float64"
														, "cast": ".f64"
														, "file": "stdlib.cvx"
														, "line": 395
														, "value": "sq"
													}
												}
												, "rval": {
													"proto": "P1"
													, "kind": ".ref"
													, "type": "float64"
													, "cast": ".f64"
													, "file": "stdlib.cvx"
													, "line": 395
													, "value": "P1"
												}
											}]
										}
										, "rval": {
											"proto": "sq"
											, "kind": ".ref"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 395
											, "value": "sq"
										}
									}
									, "rval": {
										"proto": "P0"
										, "kind": ".ref"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 395
										, "value": "P0"
									}
								}]
							}
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 395
								, "value": "x"
							}
						}
					}
				}, {
					"proto": "result := (result / ((((sq + Q2) * sq) + Q1) * sq) + Q0);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 396
					, "stmt": {
						"proto": "(result := (result / ((((sq + Q2) * sq) + Q1) * sq) + Q0))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 396
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 396
							, "value": "result"
						}
						, "rval": {
							"proto": "(result / ((((sq + Q2) * sq) + Q1) * sq) + Q0)"
							, "kind": "/"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 396
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 396
								, "value": "result"
							}
							, "rval": {
								"proto": "(((((sq + Q2) * sq) + Q1) * sq) + Q0)"
								, "kind": "+"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 396
								, "lval": {
									"proto": "((((sq + Q2) * sq) + Q1) * sq)"
									, "kind": "*"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 396
									, "lval": {
										"proto": "(((sq + Q2) * sq) + Q1)"
										, "kind": "(?)"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 396
										, "args": [{
											"proto": "(((sq + Q2) * sq) + Q1)"
											, "kind": "+"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 396
											, "lval": {
												"proto": "((sq + Q2) * sq)"
												, "kind": "*"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 396
												, "lval": {
													"proto": "(sq + Q2)"
													, "kind": "(?)"
													, "type": "float64"
													, "cast": ".f64"
													, "file": "stdlib.cvx"
													, "line": 396
													, "args": [{
														"proto": "(sq + Q2)"
														, "kind": "+"
														, "type": "float64"
														, "cast": ".f64"
														, "file": "stdlib.cvx"
														, "line": 396
														, "lval": {
															"proto": "sq"
															, "kind": ".ref"
															, "type": "float64"
															, "cast": ".f64"
															, "file": "stdlib.cvx"
															, "line": 396
															, "value": "sq"
														}
														, "rval": {
															"proto": "Q2"
															, "kind": ".ref"
															, "type": "float64"
															, "cast": ".f64"
															, "file": "stdlib.cvx"
															, "line": 396
															, "value": "Q2"
														}
													}]
												}
												, "rval": {
													"proto": "sq"
													, "kind": ".ref"
													, "type": "float64"
													, "cast": ".f64"
													, "file": "stdlib.cvx"
													, "line": 396
													, "value": "sq"
												}
											}
											, "rval": {
												"proto": "Q1"
												, "kind": ".ref"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 396
												, "value": "Q1"
											}
										}]
									}
									, "rval": {
										"proto": "sq"
										, "kind": ".ref"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 396
										, "value": "sq"
									}
								}
								, "rval": {
									"proto": "Q0"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 396
									, "value": "Q0"
								}
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (sign)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 399
			, "test": {
				"proto": "sign"
				, "kind": ".ref"
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 399
				, "value": "sign"
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 399
				, "stmt": [{
					"proto": "result := (-result);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 400
					, "stmt": {
						"proto": "(result := (-result))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 400
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 400
							, "value": "result"
						}
						, "rval": {
							"proto": "(-result)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 400
							, "rval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 400
								, "value": "result"
							}
						}
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.m64 .0006f0"
		, "offset": 264574
	}, {
		"instruction": "load.c32 0"
		, "offset": 264578
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264583
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 264585
	}, {
		"instruction": "f64.clt"
		, "offset": 264594
	}, {
		"instruction": "jz +16"
		, "offset": 264595
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264599
	}, {
		"instruction": "f64.neg"
		, "offset": 264601
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 264602
	}, {
		"instruction": "load.c32 1"
		, "offset": 264604
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 264609
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264611
	}, {
		"instruction": "load.f64 21.000000"
		, "offset": 264613
	}, {
		"instruction": "f64.cgt"
		, "offset": 264622
	}, {
		"instruction": "jz +27"
		, "offset": 264623
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264627
	}, {
		"instruction": "nfc(27)"
		, "offset": 264629
	}, {
		"instruction": "load.f64 2.000000"
		, "offset": 264633
	}, {
		"instruction": "f64.div"
		, "offset": 264642
	}, {
		"instruction": "set.x2 sp(8)"
		, "offset": 264643
	}, {
		"instruction": "stack -12"
		, "offset": 264645
	}, {
		"instruction": "ret"
		, "offset": 264649
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264650
	}, {
		"instruction": "load.f64 0.500000"
		, "offset": 264652
	}, {
		"instruction": "f64.cgt"
		, "offset": 264661
	}, {
		"instruction": "jz +34"
		, "offset": 264662
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264666
	}, {
		"instruction": "nfc(27)"
		, "offset": 264668
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 264672
	}, {
		"instruction": "f64.neg"
		, "offset": 264674
	}, {
		"instruction": "nfc(27)"
		, "offset": 264675
	}, {
		"instruction": "f64.sub"
		, "offset": 264679
	}, {
		"instruction": "load.f64 2.000000"
		, "offset": 264680
	}, {
		"instruction": "f64.div"
		, "offset": 264689
	}, {
		"instruction": "set.x2 sp(8)"
		, "offset": 264690
	}, {
		"instruction": "jmp +109"
		, "offset": 264692
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264696
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 264698
	}, {
		"instruction": "f64.mul"
		, "offset": 264700
	}, {
		"instruction": "load.f64 -26.305632"
		, "offset": 264701
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264710
	}, {
		"instruction": "f64.mul"
		, "offset": 264712
	}, {
		"instruction": "load.f64 -2894.211356"
		, "offset": 264713
	}, {
		"instruction": "f64.add"
		, "offset": 264722
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264723
	}, {
		"instruction": "f64.mul"
		, "offset": 264725
	}, {
		"instruction": "load.f64 -89912.720220"
		, "offset": 264726
	}, {
		"instruction": "f64.add"
		, "offset": 264735
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264736
	}, {
		"instruction": "f64.mul"
		, "offset": 264738
	}, {
		"instruction": "load.f64 -630767.364050"
		, "offset": 264739
	}, {
		"instruction": "f64.add"
		, "offset": 264748
	}, {
		"instruction": "dup.x2 sp(8)"
		, "offset": 264749
	}, {
		"instruction": "f64.mul"
		, "offset": 264751
	}, {
		"instruction": "set.x2 sp(10)"
		, "offset": 264752
	}, {
		"instruction": "dup.x2 sp(8)"
		, "offset": 264754
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264756
	}, {
		"instruction": "load.f64 -173.678954"
		, "offset": 264758
	}, {
		"instruction": "f64.add"
		, "offset": 264767
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264768
	}, {
		"instruction": "f64.mul"
		, "offset": 264770
	}, {
		"instruction": "load.f64 15215.173788"
		, "offset": 264771
	}, {
		"instruction": "f64.add"
		, "offset": 264780
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264781
	}, {
		"instruction": "f64.mul"
		, "offset": 264783
	}, {
		"instruction": "load.f64 -630767.364050"
		, "offset": 264784
	}, {
		"instruction": "f64.add"
		, "offset": 264793
	}, {
		"instruction": "f64.div"
		, "offset": 264794
	}, {
		"instruction": "set.x2 sp(10)"
		, "offset": 264795
	}, {
		"instruction": "stack -8"
		, "offset": 264797
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 264801
	}, {
		"instruction": "jz +9"
		, "offset": 264803
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 264807
	}, {
		"instruction": "f64.neg"
		, "offset": 264809
	}, {
		"instruction": "set.x2 sp(8)"
		, "offset": 264810
	}, {
		"instruction": "stack -12"
		, "offset": 264812
	}, {
		"instruction": "ret"
		, "offset": 264816
	}]
}, {
	"proto": "Math.Cosh(x: float64)"
	, "kind": ".ref"
	, "name": "Cosh"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 405
	, "args": [{
		"proto": "Math.Cosh.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.Cosh(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 405
		, "cast": ".f64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 86
	, "offs": 264817
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 405
		, "stmt": [{
			"proto": "if (x < 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 406
			, "test": {
				"proto": "(x < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 406
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 406
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 406
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 406
				, "stmt": [{
					"proto": "x := (-x);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 407
					, "stmt": {
						"proto": "(x := (-x))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 407
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 407
							, "value": "x"
						}
						, "rval": {
							"proto": "(-x)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 407
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 407
								, "value": "x"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (x > 21)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 409
			, "test": {
				"proto": "(x > 21)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 409
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 409
					, "value": "x"
				}
				, "rval": {
					"proto": "21"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 409
					, "value": "21"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 409
				, "stmt": [{
					"proto": "result := (float64.exp(x) / 2);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 410
					, "stmt": {
						"proto": "(result := (float64.exp(x) / 2))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 410
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 410
							, "value": "result"
						}
						, "rval": {
							"proto": "(float64.exp(x) / 2)"
							, "kind": "/"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 410
							, "lval": {
								"proto": "float64.exp(x)"
								, "kind": "(?)"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 410
								, "args": [{
									"proto": "x"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 410
									, "value": "x"
								}]
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 410
								, "value": "2"
							}
						}
					}
				}]
			}
			, "else": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 412
				, "stmt": [{
					"proto": "result := ((float64.exp(x) + float64.exp(-x)) / 2);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 413
					, "stmt": {
						"proto": "(result := ((float64.exp(x) + float64.exp(-x)) / 2))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 413
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 413
							, "value": "result"
						}
						, "rval": {
							"proto": "((float64.exp(x) + float64.exp(-x)) / 2)"
							, "kind": "/"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 413
							, "lval": {
								"proto": "(float64.exp(x) + float64.exp(-x))"
								, "kind": "(?)"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 413
								, "args": [{
									"proto": "(float64.exp(x) + float64.exp(-x))"
									, "kind": "+"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 413
									, "lval": {
										"proto": "float64.exp(x)"
										, "kind": "(?)"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 413
										, "args": [{
											"proto": "x"
											, "kind": ".ref"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 413
											, "value": "x"
										}]
									}
									, "rval": {
										"proto": "float64.exp(-x)"
										, "kind": "(?)"
										, "type": "float64"
										, "cast": ".f64"
										, "file": "stdlib.cvx"
										, "line": 413
										, "args": [{
											"proto": "(-x)"
											, "kind": "-"
											, "type": "float64"
											, "cast": ".f64"
											, "file": "stdlib.cvx"
											, "line": 413
											, "rval": {
												"proto": "x"
												, "kind": ".ref"
												, "type": "float64"
												, "cast": ".f64"
												, "file": "stdlib.cvx"
												, "line": 413
												, "value": "x"
											}
										}]
									}
								}]
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 413
								, "value": "2"
							}
						}
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x2 sp(1)"
		, "offset": 264817
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 264819
	}, {
		"instruction": "f64.clt"
		, "offset": 264828
	}, {
		"instruction": "jz +9"
		, "offset": 264829
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 264833
	}, {
		"instruction": "f64.neg"
		, "offset": 264835
	}, {
		"instruction": "set.x2 sp(3)"
		, "offset": 264836
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 264838
	}, {
		"instruction": "load.f64 21.000000"
		, "offset": 264840
	}, {
		"instruction": "f64.cgt"
		, "offset": 264849
	}, {
		"instruction": "jz +26"
		, "offset": 264850
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 264854
	}, {
		"instruction": "nfc(27)"
		, "offset": 264856
	}, {
		"instruction": "load.f64 2.000000"
		, "offset": 264860
	}, {
		"instruction": "f64.div"
		, "offset": 264869
	}, {
		"instruction": "set.x2 sp(5)"
		, "offset": 264870
	}, {
		"instruction": "jmp +30"
		, "offset": 264872
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 264876
	}, {
		"instruction": "nfc(27)"
		, "offset": 264878
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 264882
	}, {
		"instruction": "f64.neg"
		, "offset": 264884
	}, {
		"instruction": "nfc(27)"
		, "offset": 264885
	}, {
		"instruction": "f64.add"
		, "offset": 264889
	}, {
		"instruction": "load.f64 2.000000"
		, "offset": 264890
	}, {
		"instruction": "f64.div"
		, "offset": 264899
	}, {
		"instruction": "set.x2 sp(5)"
		, "offset": 264900
	}, {
		"instruction": "ret"
		, "offset": 264902
	}]
}, {
	"proto": "Math.Asin(x: float64)"
	, "kind": ".ref"
	, "name": "Asin"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 422
	, "args": [{
		"proto": "Math.Asin.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Math.Asin(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 422
		, "cast": ".f64"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}]
	, "cast": ".f64"
	, "size": 183
	, "offs": 264903
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 422
		, "stmt": [{
			"proto": "if (x == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 423
			, "test": {
				"proto": "(x == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 423
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 423
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 423
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 423
				, "stmt": [{
					"proto": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 425
					, "stmt": {
						"proto": "(result := x)"
						, "kind": ":="
						, "type": "float64"
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "value": "result"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 425
							, "value": "x"
						}
					}
				}]
			}
		}, {
			"proto": "sign"
			, "kind": ".def"
			, "type": "bool"
			, "file": "stdlib.cvx"
			, "line": 427
			, "value": "sign"
		}, {
			"proto": "if (x < 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 428
			, "test": {
				"proto": "(x < 0)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 428
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 428
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 428
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 428
				, "stmt": [{
					"proto": "x := (-x);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 429
					, "stmt": {
						"proto": "(x := (-x))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 429
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 429
							, "value": "x"
						}
						, "rval": {
							"proto": "(-x)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 429
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 429
								, "value": "x"
							}
						}
					}
				}, {
					"proto": "sign := true;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 430
					, "stmt": {
						"proto": "(sign := true)"
						, "kind": ":="
						, "type": "bool"
						, "file": "stdlib.cvx"
						, "line": 430
						, "lval": {
							"proto": "sign"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 430
							, "value": "sign"
						}
						, "rval": {
							"proto": "true"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 430
							, "value": "true"
						}
					}
				}]
			}
		}, {
			"proto": "if (x > 1)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 432
			, "test": {
				"proto": "(x > 1)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 432
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 432
					, "value": "x"
				}
				, "rval": {
					"proto": "1"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 432
					, "value": "1"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 432
				, "stmt": [{
					"proto": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 433
					, "stmt": {
						"proto": "(result := nan)"
						, "kind": ":="
						, "type": "float64"
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "value": "result"
						}
						, "rval": {
							"proto": "nan"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 433
							, "value": "nan"
						}
					}
				}]
			}
		}, {
			"proto": "result := float64.sqrt(1 - (x * x));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 436
			, "stmt": {
				"proto": "(result := float64.sqrt(1 - (x * x)))"
				, "kind": ":="
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 436
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 436
					, "value": "result"
				}
				, "rval": {
					"proto": "float64.sqrt(1 - (x * x))"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 436
					, "args": [{
						"proto": "(1 - (x * x))"
						, "kind": "-"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 436
						, "lval": {
							"proto": "1"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 436
							, "value": "1"
						}
						, "rval": {
							"proto": "(x * x)"
							, "kind": "*"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 436
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 436
								, "value": "x"
							}
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 436
								, "value": "x"
							}
						}
					}]
				}
			}
		}, {
			"proto": "if (x > 0.700000)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 437
			, "test": {
				"proto": "(x > 0.700000)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 437
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 437
					, "value": "x"
				}
				, "rval": {
					"proto": "0.700000"
					, "kind": ".f64"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 437
					, "value": "0.700000"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 437
				, "stmt": [{
					"proto": "result := ((pi / 2) - float64.atan2(result, x));"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 438
					, "stmt": {
						"proto": "(result := ((pi / 2) - float64.atan2(result, x)))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 438
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 438
							, "value": "result"
						}
						, "rval": {
							"proto": "((pi / 2) - float64.atan2(result, x))"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 438
							, "lval": {
								"proto": "(pi / 2)"
								, "kind": "/"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 438
								, "lval": {
									"proto": "pi"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 438
									, "value": "pi"
								}
								, "rval": {
									"proto": "2"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 438
									, "value": "2"
								}
							}
							, "rval": {
								"proto": "float64.atan2(result, x)"
								, "kind": "(?)"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 438
								, "args": [{
									"proto": "x"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 438
									, "value": "x"
								}, {
									"proto": "result"
									, "kind": ".ref"
									, "type": "float64"
									, "cast": ".f64"
									, "file": "stdlib.cvx"
									, "line": 438
									, "value": "result"
								}]
							}
						}
					}
				}]
			}
			, "else": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 440
				, "stmt": [{
					"proto": "result := float64.atan2(x, result);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 441
					, "stmt": {
						"proto": "(result := float64.atan2(x, result))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 441
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 441
							, "value": "result"
						}
						, "rval": {
							"proto": "float64.atan2(x, result)"
							, "kind": "(?)"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 441
							, "args": [{
								"proto": "result"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 441
								, "value": "result"
							}, {
								"proto": "x"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 441
								, "value": "x"
							}]
						}
					}
				}]
			}
		}, {
			"proto": "if (sign)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 444
			, "test": {
				"proto": "sign"
				, "kind": ".ref"
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 444
				, "value": "sign"
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 444
				, "stmt": [{
					"proto": "result := (-result);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 445
					, "stmt": {
						"proto": "(result := (-result))"
						, "kind": ":="
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 445
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 445
							, "value": "result"
						}
						, "rval": {
							"proto": "(-result)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 445
							, "rval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 445
								, "value": "result"
							}
						}
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x2 sp(1)"
		, "offset": 264903
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 264905
	}, {
		"instruction": "f64.ceq"
		, "offset": 264914
	}, {
		"instruction": "jz +9"
		, "offset": 264915
	}, {
		"instruction": "dup.x2 sp(1)"
		, "offset": 264919
	}, {
		"instruction": "set.x2 sp(5)"
		, "offset": 264921
	}, {
		"instruction": "ret"
		, "offset": 264923
	}, {
		"instruction": "load.c32 0"
		, "offset": 264924
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264929
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 264931
	}, {
		"instruction": "f64.clt"
		, "offset": 264940
	}, {
		"instruction": "jz +16"
		, "offset": 264941
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264945
	}, {
		"instruction": "f64.neg"
		, "offset": 264947
	}, {
		"instruction": "set.x2 sp(4)"
		, "offset": 264948
	}, {
		"instruction": "load.c32 1"
		, "offset": 264950
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 264955
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 264957
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 264959
	}, {
		"instruction": "f64.cgt"
		, "offset": 264968
	}, {
		"instruction": "jz +20"
		, "offset": 264969
	}, {
		"instruction": "load.f64 -nan"
		, "offset": 264973
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 264982
	}, {
		"instruction": "stack -4"
		, "offset": 264984
	}, {
		"instruction": "ret"
		, "offset": 264988
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 264989
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 264998
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 265000
	}, {
		"instruction": "f64.mul"
		, "offset": 265002
	}, {
		"instruction": "f64.sub"
		, "offset": 265003
	}, {
		"instruction": "nfc(29)"
		, "offset": 265004
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 265008
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 265010
	}, {
		"instruction": "load.f64 0.700000"
		, "offset": 265012
	}, {
		"instruction": "f64.cgt"
		, "offset": 265021
	}, {
		"instruction": "jz +38"
		, "offset": 265022
	}, {
		"instruction": "load.f64 3.141593"
		, "offset": 265026
	}, {
		"instruction": "load.f64 2.000000"
		, "offset": 265035
	}, {
		"instruction": "f64.div"
		, "offset": 265044
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 265045
	}, {
		"instruction": "dup.x2 sp(8)"
		, "offset": 265047
	}, {
		"instruction": "nfc(30)"
		, "offset": 265049
	}, {
		"instruction": "f64.sub"
		, "offset": 265053
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 265054
	}, {
		"instruction": "jmp +14"
		, "offset": 265056
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 265060
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 265062
	}, {
		"instruction": "nfc(30)"
		, "offset": 265064
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 265068
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 265070
	}, {
		"instruction": "jz +9"
		, "offset": 265072
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 265076
	}, {
		"instruction": "f64.neg"
		, "offset": 265078
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 265079
	}, {
		"instruction": "stack -4"
		, "offset": 265081
	}, {
		"instruction": "ret"
		, "offset": 265085
	}]
}, {
	"proto": "Math.Acos(x: float64)"
	, "kind": ".def"
	, "name": "Acos"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 453
	, "args": [{
		"proto": "Math.Acos.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.Acos(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 453
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "((pi / 2) - Asin(x))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 453
		, "args": [{
			"proto": "((pi / 2) - Asin(x))"
			, "kind": "-"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 453
			, "lval": {
				"proto": "(pi / 2)"
				, "kind": "/"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 453
				, "lval": {
					"proto": "pi"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 453
					, "value": "pi"
				}
				, "rval": {
					"proto": "2"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 453
					, "value": "2"
				}
			}
			, "rval": {
				"proto": "Asin(x)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 453
				, "args": [{
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 453
					, "value": "x"
				}]
			}
		}]
	}
}, {
	"proto": "Math.deg2rad(x: float64)"
	, "kind": ".def"
	, "name": "deg2rad"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 477
	, "args": [{
		"proto": "Math.deg2rad.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.deg2rad(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 477
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64(x * pi / 180)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 477
		, "args": [{
			"proto": "(x * pi / 180)"
			, "kind": "/"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 477
			, "lval": {
				"proto": "(x * pi)"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 477
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 477
					, "value": "x"
				}
				, "rval": {
					"proto": "pi"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 477
					, "value": "pi"
				}
			}
			, "rval": {
				"proto": "180"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 477
				, "value": "180"
			}
		}]
	}
}, {
	"proto": "Math.rad2deg(x: float64)"
	, "kind": ".def"
	, "name": "rad2deg"
	, "declaredIn": "Math"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 478
	, "args": [{
		"proto": "Math.rad2deg.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Math.rad2deg(x: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 478
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64(x * 180 / pi)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 478
		, "args": [{
			"proto": "(x * 180 / pi)"
			, "kind": "/"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 478
			, "lval": {
				"proto": "(x * 180)"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 478
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 478
					, "value": "x"
				}
				, "rval": {
					"proto": "180"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 478
					, "value": "180"
				}
			}
			, "rval": {
				"proto": "pi"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 478
				, "value": "pi"
			}
		}]
	}
}, {
	"proto": "Perlin"
	, "kind": ".rec"
	, "name": "Perlin"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 484
	, "cast": ".vid"
	, "size": 0
	, "offs": 134064
	, "const": true
	, "static": true
}, {
	"proto": "Perlin.B"
	, "kind": ".def"
	, "name": "B"
	, "declaredIn": "Perlin"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 485
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "256"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 485
		, "value": "256"
	}
}, {
	"proto": "Perlin.BM"
	, "kind": ".def"
	, "name": "BM"
	, "declaredIn": "Perlin"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 486
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "255"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 486
		, "value": "255"
	}
}, {
	"proto": "Perlin.N"
	, "kind": ".def"
	, "name": "N"
	, "declaredIn": "Perlin"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 487
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "4096"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 487
		, "value": "4096"
	}
}, {
	"proto": "Perlin.NP"
	, "kind": ".def"
	, "name": "NP"
	, "declaredIn": "Perlin"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 488
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "12"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 488
		, "value": "12"
	}
}, {
	"proto": "Perlin.NM"
	, "kind": ".def"
	, "name": "NM"
	, "declaredIn": "Perlin"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 489
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "4095"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 489
		, "value": "4095"
	}
}, {
	"proto": "Perlin.p"
	, "kind": ".ref"
	, "name": "p"
	, "declaredIn": "Perlin"
	, "type": "int32[(B + B + 2)]"
	, "file": "stdlib.cvx"
	, "line": 491
	, "size": 2056
	, "offs": 265088
	, "const": false
	, "static": true
}, {
	"proto": "Perlin.g3"
	, "kind": ".ref"
	, "name": "g3"
	, "declaredIn": "Perlin"
	, "type": "float32[3][(B + B + 2)]"
	, "file": "stdlib.cvx"
	, "line": 492
	, "size": 6168
	, "offs": 267152
	, "const": false
	, "static": true
}, {
	"proto": "Perlin.g2"
	, "kind": ".ref"
	, "name": "g2"
	, "declaredIn": "Perlin"
	, "type": "float32[2][(B + B + 2)]"
	, "file": "stdlib.cvx"
	, "line": 493
	, "size": 4112
	, "offs": 273328
	, "const": false
	, "static": true
}, {
	"proto": "Perlin.g1"
	, "kind": ".ref"
	, "name": "g1"
	, "declaredIn": "Perlin"
	, "type": "float32[(B + B + 2)]"
	, "file": "stdlib.cvx"
	, "line": 494
	, "size": 2056
	, "offs": 277440
	, "const": false
	, "static": true
}, {
	"proto": "Perlin.start"
	, "kind": ".ref"
	, "name": "start"
	, "declaredIn": "Perlin"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 496
	, "cast": ".bit"
	, "size": 4
	, "offs": 279496
	, "const": false
	, "static": true
	, "ast": {
		"proto": "true"
		, "kind": ".ref"
		, "type": "bool"
		, "cast": ".bit"
		, "file": "stdlib.cvx"
		, "line": 496
		, "value": "true"
	}
}, {
	"proto": "Perlin.init()"
	, "kind": ".ref"
	, "name": "init"
	, "declaredIn": "Perlin"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 498
	, "args": [{
		"proto": ""
		, "kind": ".def"
		, "name": ""
		, "type": "void"
		, "cast": ".vid"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "cast": ".vid"
	, "size": 863
	, "offs": 279500
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 498
		, "stmt": [{
			"proto": "i"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 499
			, "value": "i"
		}, {
			"proto": "System.srand(System.time());"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 500
			, "stmt": {
				"proto": "System.srand(System.time())"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 500
				, "args": [{
					"proto": "System.time()"
					, "kind": "(?)"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 500
					, "args": [{
					}]
				}]
			}
		}, {
			"proto": "sqr(x: float32)"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 501
			, "value": "sqr(x: float32)"
		}, {
			"proto": "for (i := 0; i < B; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 502
			, "init": {
				"proto": "(i := 0)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 502
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 502
					, "value": "i"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 502
					, "value": "0"
				}
			}
			, "test": {
				"proto": "(i < B)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 502
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 502
					, "value": "i"
				}
				, "rval": {
					"proto": "B"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 502
					, "value": "B"
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 502
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 502
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 502
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 502
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 502
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 502
				, "stmt": [{
					"proto": "p[i] := i;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 503
					, "stmt": {
						"proto": "(p[i] := i)"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 503
						, "lval": {
							"proto": "p[i]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 503
							, "lval": {
								"proto": "p"
								, "kind": ".ref"
								, "type": "int32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 503
								, "value": "p"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 503
								, "value": "i"
							}
						}
						, "rval": {
							"proto": "i"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 503
							, "value": "i"
						}
					}
				}, {
					"proto": "g1[i] := (float32((System.rand() % (B + B)) - B) / B);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 505
					, "stmt": {
						"proto": "(g1[i] := (float32((System.rand() % (B + B)) - B) / B))"
						, "kind": ":="
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 505
						, "lval": {
							"proto": "g1[i]"
							, "kind": "[?]"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 505
							, "lval": {
								"proto": "g1"
								, "kind": ".ref"
								, "type": "float32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 505
								, "value": "g1"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 505
								, "value": "i"
							}
						}
						, "rval": {
							"proto": "(float32((System.rand() % (B + B)) - B) / B)"
							, "kind": "/"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 505
							, "lval": {
								"proto": "float32((System.rand() % (B + B)) - B)"
								, "kind": "(?)"
								, "type": "float32"
								, "cast": ".f32"
								, "file": "stdlib.cvx"
								, "line": 505
								, "args": [{
									"proto": "((System.rand() % (B + B)) - B)"
									, "kind": "-"
									, "type": "int32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 505
									, "lval": {
										"proto": "(System.rand() % (B + B))"
										, "kind": "(?)"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 505
										, "args": [{
											"proto": "(System.rand() % (B + B))"
											, "kind": "%"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 505
											, "lval": {
												"proto": "System.rand()"
												, "kind": "(?)"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 505
												, "args": [{
												}]
											}
											, "rval": {
												"proto": "(B + B)"
												, "kind": "(?)"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 505
												, "args": [{
													"proto": "(B + B)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 505
													, "lval": {
														"proto": "B"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 505
														, "value": "B"
													}
													, "rval": {
														"proto": "B"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 505
														, "value": "B"
													}
												}]
											}
										}]
									}
									, "rval": {
										"proto": "B"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 505
										, "value": "B"
									}
								}]
							}
							, "rval": {
								"proto": "B"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".f32"
								, "file": "stdlib.cvx"
								, "line": 505
								, "value": "B"
							}
						}
					}
				}, {
					"proto": "for (j; j < 2; j := (j + 1))"
					, "kind": "for"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 507
					, "init": {
						"proto": "j"
						, "kind": ".def"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 507
						, "value": "j"
					}
					, "test": {
						"proto": "(j < 2)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 507
						, "lval": {
							"proto": "j"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 507
							, "value": "j"
						}
						, "rval": {
							"proto": "2"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 507
							, "value": "2"
						}
					}
					, "step": {
						"proto": "(j := (j + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 507
						, "lval": {
							"proto": "j"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 507
							, "value": "j"
						}
						, "rval": {
							"proto": "(j + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 507
							, "lval": {
								"proto": "j"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 507
								, "value": "j"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 507
								, "value": "1"
							}
						}
					}
					, "stmt": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 507
						, "stmt": [{
							"proto": "g2[i][j] := (float32((System.rand() % (B + B)) - B) / B);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 508
							, "stmt": {
								"proto": "(g2[i][j] := (float32((System.rand() % (B + B)) - B) / B))"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 508
								, "lval": {
									"proto": "g2[i][j]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 508
									, "lval": {
										"proto": "g2[i]"
										, "kind": "[?]"
										, "type": "float32[2]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 508
										, "lval": {
											"proto": "g2"
											, "kind": ".ref"
											, "type": "float32[2][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 508
											, "value": "g2"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 508
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "j"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 508
										, "value": "j"
									}
								}
								, "rval": {
									"proto": "(float32((System.rand() % (B + B)) - B) / B)"
									, "kind": "/"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 508
									, "lval": {
										"proto": "float32((System.rand() % (B + B)) - B)"
										, "kind": "(?)"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 508
										, "args": [{
											"proto": "((System.rand() % (B + B)) - B)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".f32"
											, "file": "stdlib.cvx"
											, "line": 508
											, "lval": {
												"proto": "(System.rand() % (B + B))"
												, "kind": "(?)"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 508
												, "args": [{
													"proto": "(System.rand() % (B + B))"
													, "kind": "%"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 508
													, "lval": {
														"proto": "System.rand()"
														, "kind": "(?)"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 508
														, "args": [{
														}]
													}
													, "rval": {
														"proto": "(B + B)"
														, "kind": "(?)"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 508
														, "args": [{
															"proto": "(B + B)"
															, "kind": "+"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 508
															, "lval": {
																"proto": "B"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 508
																, "value": "B"
															}
															, "rval": {
																"proto": "B"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 508
																, "value": "B"
															}
														}]
													}
												}]
											}
											, "rval": {
												"proto": "B"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 508
												, "value": "B"
											}
										}]
									}
									, "rval": {
										"proto": "B"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 508
										, "value": "B"
									}
								}
							}
						}]
					}
				}, {
					"proto": "n2"
					, "kind": ".def"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 512
					, "value": "n2"
				}, {
					"proto": "if (n2 != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 513
					, "test": {
						"proto": "(n2 != 0)"
						, "kind": "!="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 513
						, "lval": {
							"proto": "n2"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 513
							, "value": "n2"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 513
							, "value": "0"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 513
						, "stmt": [{
							"proto": "g2[i][0] := (g2[i][0] / n2);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 514
							, "stmt": {
								"proto": "(g2[i][0] := (g2[i][0] / n2))"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 514
								, "lval": {
									"proto": "g2[i][0]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 514
									, "lval": {
										"proto": "g2[i]"
										, "kind": "[?]"
										, "type": "float32[2]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 514
										, "lval": {
											"proto": "g2"
											, "kind": ".ref"
											, "type": "float32[2][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 514
											, "value": "g2"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 514
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "0"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 514
										, "value": "0"
									}
								}
								, "rval": {
									"proto": "(g2[i][0] / n2)"
									, "kind": "/"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 514
									, "lval": {
										"proto": "g2[i][0]"
										, "kind": "[?]"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 514
										, "lval": {
											"proto": "g2[i]"
											, "kind": "[?]"
											, "type": "float32[2]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 514
											, "lval": {
												"proto": "g2"
												, "kind": ".ref"
												, "type": "float32[2][(B + B + 2)]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 514
												, "value": "g2"
											}
											, "rval": {
												"proto": "i"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 514
												, "value": "i"
											}
										}
										, "rval": {
											"proto": "0"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 514
											, "value": "0"
										}
									}
									, "rval": {
										"proto": "n2"
										, "kind": ".ref"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 514
										, "value": "n2"
									}
								}
							}
						}, {
							"proto": "g2[i][1] := (g2[i][1] / n2);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 515
							, "stmt": {
								"proto": "(g2[i][1] := (g2[i][1] / n2))"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 515
								, "lval": {
									"proto": "g2[i][1]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 515
									, "lval": {
										"proto": "g2[i]"
										, "kind": "[?]"
										, "type": "float32[2]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 515
										, "lval": {
											"proto": "g2"
											, "kind": ".ref"
											, "type": "float32[2][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 515
											, "value": "g2"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 515
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 515
										, "value": "1"
									}
								}
								, "rval": {
									"proto": "(g2[i][1] / n2)"
									, "kind": "/"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 515
									, "lval": {
										"proto": "g2[i][1]"
										, "kind": "[?]"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 515
										, "lval": {
											"proto": "g2[i]"
											, "kind": "[?]"
											, "type": "float32[2]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 515
											, "lval": {
												"proto": "g2"
												, "kind": ".ref"
												, "type": "float32[2][(B + B + 2)]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 515
												, "value": "g2"
											}
											, "rval": {
												"proto": "i"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 515
												, "value": "i"
											}
										}
										, "rval": {
											"proto": "1"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 515
											, "value": "1"
										}
									}
									, "rval": {
										"proto": "n2"
										, "kind": ".ref"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 515
										, "value": "n2"
									}
								}
							}
						}]
					}
				}, {
					"proto": "for (j; j < 3; j := (j + 1))"
					, "kind": "for"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 518
					, "init": {
						"proto": "j"
						, "kind": ".def"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 518
						, "value": "j"
					}
					, "test": {
						"proto": "(j < 3)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 518
						, "lval": {
							"proto": "j"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 518
							, "value": "j"
						}
						, "rval": {
							"proto": "3"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 518
							, "value": "3"
						}
					}
					, "step": {
						"proto": "(j := (j + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 518
						, "lval": {
							"proto": "j"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 518
							, "value": "j"
						}
						, "rval": {
							"proto": "(j + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 518
							, "lval": {
								"proto": "j"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 518
								, "value": "j"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 518
								, "value": "1"
							}
						}
					}
					, "stmt": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 518
						, "stmt": [{
							"proto": "g3[i][j] := (float32((System.rand() % (B + B)) - B) / B);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 519
							, "stmt": {
								"proto": "(g3[i][j] := (float32((System.rand() % (B + B)) - B) / B))"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 519
								, "lval": {
									"proto": "g3[i][j]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 519
									, "lval": {
										"proto": "g3[i]"
										, "kind": "[?]"
										, "type": "float32[3]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 519
										, "lval": {
											"proto": "g3"
											, "kind": ".ref"
											, "type": "float32[3][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 519
											, "value": "g3"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 519
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "j"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 519
										, "value": "j"
									}
								}
								, "rval": {
									"proto": "(float32((System.rand() % (B + B)) - B) / B)"
									, "kind": "/"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 519
									, "lval": {
										"proto": "float32((System.rand() % (B + B)) - B)"
										, "kind": "(?)"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 519
										, "args": [{
											"proto": "((System.rand() % (B + B)) - B)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".f32"
											, "file": "stdlib.cvx"
											, "line": 519
											, "lval": {
												"proto": "(System.rand() % (B + B))"
												, "kind": "(?)"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 519
												, "args": [{
													"proto": "(System.rand() % (B + B))"
													, "kind": "%"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 519
													, "lval": {
														"proto": "System.rand()"
														, "kind": "(?)"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 519
														, "args": [{
														}]
													}
													, "rval": {
														"proto": "(B + B)"
														, "kind": "(?)"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 519
														, "args": [{
															"proto": "(B + B)"
															, "kind": "+"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 519
															, "lval": {
																"proto": "B"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 519
																, "value": "B"
															}
															, "rval": {
																"proto": "B"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 519
																, "value": "B"
															}
														}]
													}
												}]
											}
											, "rval": {
												"proto": "B"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 519
												, "value": "B"
											}
										}]
									}
									, "rval": {
										"proto": "B"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 519
										, "value": "B"
									}
								}
							}
						}]
					}
				}, {
					"proto": "n3"
					, "kind": ".def"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 523
					, "value": "n3"
				}, {
					"proto": "if (n3 != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 524
					, "test": {
						"proto": "(n3 != 0)"
						, "kind": "!="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 524
						, "lval": {
							"proto": "n3"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 524
							, "value": "n3"
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 524
							, "value": "0"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 524
						, "stmt": [{
							"proto": "g3[i][0] := (g3[i][0] / n3);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 525
							, "stmt": {
								"proto": "(g3[i][0] := (g3[i][0] / n3))"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 525
								, "lval": {
									"proto": "g3[i][0]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 525
									, "lval": {
										"proto": "g3[i]"
										, "kind": "[?]"
										, "type": "float32[3]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 525
										, "lval": {
											"proto": "g3"
											, "kind": ".ref"
											, "type": "float32[3][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 525
											, "value": "g3"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 525
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "0"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 525
										, "value": "0"
									}
								}
								, "rval": {
									"proto": "(g3[i][0] / n3)"
									, "kind": "/"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 525
									, "lval": {
										"proto": "g3[i][0]"
										, "kind": "[?]"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 525
										, "lval": {
											"proto": "g3[i]"
											, "kind": "[?]"
											, "type": "float32[3]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 525
											, "lval": {
												"proto": "g3"
												, "kind": ".ref"
												, "type": "float32[3][(B + B + 2)]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 525
												, "value": "g3"
											}
											, "rval": {
												"proto": "i"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 525
												, "value": "i"
											}
										}
										, "rval": {
											"proto": "0"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 525
											, "value": "0"
										}
									}
									, "rval": {
										"proto": "n3"
										, "kind": ".ref"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 525
										, "value": "n3"
									}
								}
							}
						}, {
							"proto": "g3[i][1] := (g3[i][1] / n3);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 526
							, "stmt": {
								"proto": "(g3[i][1] := (g3[i][1] / n3))"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 526
								, "lval": {
									"proto": "g3[i][1]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 526
									, "lval": {
										"proto": "g3[i]"
										, "kind": "[?]"
										, "type": "float32[3]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 526
										, "lval": {
											"proto": "g3"
											, "kind": ".ref"
											, "type": "float32[3][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 526
											, "value": "g3"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 526
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 526
										, "value": "1"
									}
								}
								, "rval": {
									"proto": "(g3[i][1] / n3)"
									, "kind": "/"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 526
									, "lval": {
										"proto": "g3[i][1]"
										, "kind": "[?]"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 526
										, "lval": {
											"proto": "g3[i]"
											, "kind": "[?]"
											, "type": "float32[3]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 526
											, "lval": {
												"proto": "g3"
												, "kind": ".ref"
												, "type": "float32[3][(B + B + 2)]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 526
												, "value": "g3"
											}
											, "rval": {
												"proto": "i"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 526
												, "value": "i"
											}
										}
										, "rval": {
											"proto": "1"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 526
											, "value": "1"
										}
									}
									, "rval": {
										"proto": "n3"
										, "kind": ".ref"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 526
										, "value": "n3"
									}
								}
							}
						}, {
							"proto": "g3[i][2] := (g3[i][2] / n3);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 527
							, "stmt": {
								"proto": "(g3[i][2] := (g3[i][2] / n3))"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 527
								, "lval": {
									"proto": "g3[i][2]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 527
									, "lval": {
										"proto": "g3[i]"
										, "kind": "[?]"
										, "type": "float32[3]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 527
										, "lval": {
											"proto": "g3"
											, "kind": ".ref"
											, "type": "float32[3][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 527
											, "value": "g3"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 527
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "2"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 527
										, "value": "2"
									}
								}
								, "rval": {
									"proto": "(g3[i][2] / n3)"
									, "kind": "/"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 527
									, "lval": {
										"proto": "g3[i][2]"
										, "kind": "[?]"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 527
										, "lval": {
											"proto": "g3[i]"
											, "kind": "[?]"
											, "type": "float32[3]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 527
											, "lval": {
												"proto": "g3"
												, "kind": ".ref"
												, "type": "float32[3][(B + B + 2)]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 527
												, "value": "g3"
											}
											, "rval": {
												"proto": "i"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 527
												, "value": "i"
											}
										}
										, "rval": {
											"proto": "2"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 527
											, "value": "2"
										}
									}
									, "rval": {
										"proto": "n3"
										, "kind": ".ref"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 527
										, "value": "n3"
									}
								}
							}
						}]
					}
				}]
			}
		}, {
			"proto": "for ( ; i := (i - 1); )"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 531
			, "test": {
				"proto": "(i := (i - 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 531
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 531
					, "value": "i"
				}
				, "rval": {
					"proto": "(i - 1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 531
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 531
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 531
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 531
				, "stmt": [{
					"proto": "k"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 532
					, "value": "k"
				}, {
					"proto": "j"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 533
					, "value": "j"
				}, {
					"proto": "p[i] := p[j];"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 534
					, "stmt": {
						"proto": "(p[i] := p[j])"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 534
						, "lval": {
							"proto": "p[i]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 534
							, "lval": {
								"proto": "p"
								, "kind": ".ref"
								, "type": "int32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 534
								, "value": "p"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 534
								, "value": "i"
							}
						}
						, "rval": {
							"proto": "p[j]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 534
							, "lval": {
								"proto": "p"
								, "kind": ".ref"
								, "type": "int32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 534
								, "value": "p"
							}
							, "rval": {
								"proto": "j"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 534
								, "value": "j"
							}
						}
					}
				}, {
					"proto": "p[j] := k;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 535
					, "stmt": {
						"proto": "(p[j] := k)"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 535
						, "lval": {
							"proto": "p[j]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 535
							, "lval": {
								"proto": "p"
								, "kind": ".ref"
								, "type": "int32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 535
								, "value": "p"
							}
							, "rval": {
								"proto": "j"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 535
								, "value": "j"
							}
						}
						, "rval": {
							"proto": "k"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 535
							, "value": "k"
						}
					}
				}]
			}
		}, {
			"proto": "for (i := 0; i < (B + 2); i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 538
			, "init": {
				"proto": "(i := 0)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 538
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 538
					, "value": "i"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 538
					, "value": "0"
				}
			}
			, "test": {
				"proto": "(i < (B + 2))"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 538
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 538
					, "value": "i"
				}
				, "rval": {
					"proto": "(B + 2)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 538
					, "lval": {
						"proto": "B"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 538
						, "value": "B"
					}
					, "rval": {
						"proto": "2"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 538
						, "value": "2"
					}
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 538
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 538
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 538
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 538
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 538
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 538
				, "stmt": [{
					"proto": "p[B + i] := p[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 539
					, "stmt": {
						"proto": "(p[B + i] := p[i])"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 539
						, "lval": {
							"proto": "p[B + i]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 539
							, "lval": {
								"proto": "p"
								, "kind": ".ref"
								, "type": "int32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 539
								, "value": "p"
							}
							, "rval": {
								"proto": "(B + i)"
								, "kind": "+"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 539
								, "lval": {
									"proto": "B"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 539
									, "value": "B"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 539
									, "value": "i"
								}
							}
						}
						, "rval": {
							"proto": "p[i]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 539
							, "lval": {
								"proto": "p"
								, "kind": ".ref"
								, "type": "int32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 539
								, "value": "p"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 539
								, "value": "i"
							}
						}
					}
				}, {
					"proto": "g1[B + i] := g1[i];"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 540
					, "stmt": {
						"proto": "(g1[B + i] := g1[i])"
						, "kind": ":="
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 540
						, "lval": {
							"proto": "g1[B + i]"
							, "kind": "[?]"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 540
							, "lval": {
								"proto": "g1"
								, "kind": ".ref"
								, "type": "float32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 540
								, "value": "g1"
							}
							, "rval": {
								"proto": "(B + i)"
								, "kind": "+"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 540
								, "lval": {
									"proto": "B"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 540
									, "value": "B"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 540
									, "value": "i"
								}
							}
						}
						, "rval": {
							"proto": "g1[i]"
							, "kind": "[?]"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 540
							, "lval": {
								"proto": "g1"
								, "kind": ".ref"
								, "type": "float32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 540
								, "value": "g1"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 540
								, "value": "i"
							}
						}
					}
				}, {
					"proto": "for (j; j < 2; j := (j + 1))"
					, "kind": "for"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 541
					, "init": {
						"proto": "j"
						, "kind": ".def"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 541
						, "value": "j"
					}
					, "test": {
						"proto": "(j < 2)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 541
						, "lval": {
							"proto": "j"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 541
							, "value": "j"
						}
						, "rval": {
							"proto": "2"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 541
							, "value": "2"
						}
					}
					, "step": {
						"proto": "(j := (j + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 541
						, "lval": {
							"proto": "j"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 541
							, "value": "j"
						}
						, "rval": {
							"proto": "(j + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 541
							, "lval": {
								"proto": "j"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 541
								, "value": "j"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 541
								, "value": "1"
							}
						}
					}
					, "stmt": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 541
						, "stmt": [{
							"proto": "g2[B + i][j] := g2[i][j];"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 542
							, "stmt": {
								"proto": "(g2[B + i][j] := g2[i][j])"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 542
								, "lval": {
									"proto": "g2[B + i][j]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 542
									, "lval": {
										"proto": "g2[B + i]"
										, "kind": "[?]"
										, "type": "float32[2]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 542
										, "lval": {
											"proto": "g2"
											, "kind": ".ref"
											, "type": "float32[2][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 542
											, "value": "g2"
										}
										, "rval": {
											"proto": "(B + i)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 542
											, "lval": {
												"proto": "B"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 542
												, "value": "B"
											}
											, "rval": {
												"proto": "i"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 542
												, "value": "i"
											}
										}
									}
									, "rval": {
										"proto": "j"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 542
										, "value": "j"
									}
								}
								, "rval": {
									"proto": "g2[i][j]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 542
									, "lval": {
										"proto": "g2[i]"
										, "kind": "[?]"
										, "type": "float32[2]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 542
										, "lval": {
											"proto": "g2"
											, "kind": ".ref"
											, "type": "float32[2][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 542
											, "value": "g2"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 542
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "j"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 542
										, "value": "j"
									}
								}
							}
						}]
					}
				}, {
					"proto": "for (j; j < 3; j := (j + 1))"
					, "kind": "for"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 544
					, "init": {
						"proto": "j"
						, "kind": ".def"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 544
						, "value": "j"
					}
					, "test": {
						"proto": "(j < 3)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 544
						, "lval": {
							"proto": "j"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 544
							, "value": "j"
						}
						, "rval": {
							"proto": "3"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 544
							, "value": "3"
						}
					}
					, "step": {
						"proto": "(j := (j + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 544
						, "lval": {
							"proto": "j"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 544
							, "value": "j"
						}
						, "rval": {
							"proto": "(j + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 544
							, "lval": {
								"proto": "j"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 544
								, "value": "j"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 544
								, "value": "1"
							}
						}
					}
					, "stmt": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 544
						, "stmt": [{
							"proto": "g3[B + i][j] := g3[i][j];"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 545
							, "stmt": {
								"proto": "(g3[B + i][j] := g3[i][j])"
								, "kind": ":="
								, "type": "float32"
								, "file": "stdlib.cvx"
								, "line": 545
								, "lval": {
									"proto": "g3[B + i][j]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 545
									, "lval": {
										"proto": "g3[B + i]"
										, "kind": "[?]"
										, "type": "float32[3]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 545
										, "lval": {
											"proto": "g3"
											, "kind": ".ref"
											, "type": "float32[3][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 545
											, "value": "g3"
										}
										, "rval": {
											"proto": "(B + i)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 545
											, "lval": {
												"proto": "B"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 545
												, "value": "B"
											}
											, "rval": {
												"proto": "i"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 545
												, "value": "i"
											}
										}
									}
									, "rval": {
										"proto": "j"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 545
										, "value": "j"
									}
								}
								, "rval": {
									"proto": "g3[i][j]"
									, "kind": "[?]"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 545
									, "lval": {
										"proto": "g3[i]"
										, "kind": "[?]"
										, "type": "float32[3]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 545
										, "lval": {
											"proto": "g3"
											, "kind": ".ref"
											, "type": "float32[3][(B + B + 2)]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 545
											, "value": "g3"
										}
										, "rval": {
											"proto": "i"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 545
											, "value": "i"
										}
									}
									, "rval": {
										"proto": "j"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 545
										, "value": "j"
									}
								}
							}
						}]
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "stack 4"
		, "offset": 279500
	}, {
		"instruction": "nfc(12)"
		, "offset": 279504
	}, {
		"instruction": "nfc(10)"
		, "offset": 279508
	}, {
		"instruction": "load.c32 0"
		, "offset": 279512
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 279517
	}, {
		"instruction": "jmp +512"
		, "offset": 279519
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279523
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 279525
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 279530
	}, {
		"instruction": "mad 4"
		, "offset": 279532
	}, {
		"instruction": "store.i32"
		, "offset": 279536
	}, {
		"instruction": "nfc(11)"
		, "offset": 279537
	}, {
		"instruction": "load.c32 256"
		, "offset": 279541
	}, {
		"instruction": "inc 256"
		, "offset": 279546
	}, {
		"instruction": "i32.mod"
		, "offset": 279550
	}, {
		"instruction": "inc -256"
		, "offset": 279551
	}, {
		"instruction": "i32.2f32"
		, "offset": 279555
	}, {
		"instruction": "load.f32 256.000000"
		, "offset": 279556
	}, {
		"instruction": "f32.div"
		, "offset": 279561
	}, {
		"instruction": "load.ref .043bc0"
		, "offset": 279562
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 279567
	}, {
		"instruction": "mad 4"
		, "offset": 279569
	}, {
		"instruction": "store.i32"
		, "offset": 279573
	}, {
		"instruction": "load.c32 0"
		, "offset": 279574
	}, {
		"instruction": "jmp +51"
		, "offset": 279579
	}, {
		"instruction": "nfc(11)"
		, "offset": 279583
	}, {
		"instruction": "load.c32 256"
		, "offset": 279587
	}, {
		"instruction": "inc 256"
		, "offset": 279592
	}, {
		"instruction": "i32.mod"
		, "offset": 279596
	}, {
		"instruction": "inc -256"
		, "offset": 279597
	}, {
		"instruction": "i32.2f32"
		, "offset": 279601
	}, {
		"instruction": "load.f32 256.000000"
		, "offset": 279602
	}, {
		"instruction": "f32.div"
		, "offset": 279607
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 279608
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 279613
	}, {
		"instruction": "mad 8"
		, "offset": 279615
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 279619
	}, {
		"instruction": "mad 4"
		, "offset": 279621
	}, {
		"instruction": "store.i32"
		, "offset": 279625
	}, {
		"instruction": "inc 1"
		, "offset": 279626
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279630
	}, {
		"instruction": "load.c32 2"
		, "offset": 279632
	}, {
		"instruction": "i32.clt"
		, "offset": 279637
	}, {
		"instruction": "jnz -55"
		, "offset": 279638
	}, {
		"instruction": "stack -4"
		, "offset": 279642
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 279646
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279651
	}, {
		"instruction": "mad 8"
		, "offset": 279653
	}, {
		"instruction": "load.i32"
		, "offset": 279657
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279658
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279660
	}, {
		"instruction": "f32.mul"
		, "offset": 279662
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 279663
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 279665
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 279670
	}, {
		"instruction": "mad 8"
		, "offset": 279672
	}, {
		"instruction": "inc 4"
		, "offset": 279676
	}, {
		"instruction": "load.i32"
		, "offset": 279680
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279681
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279683
	}, {
		"instruction": "f32.mul"
		, "offset": 279685
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 279686
	}, {
		"instruction": "f32.add"
		, "offset": 279688
	}, {
		"instruction": "f32.2f64"
		, "offset": 279689
	}, {
		"instruction": "nfc(29)"
		, "offset": 279690
	}, {
		"instruction": "f64.2f32"
		, "offset": 279694
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279695
	}, {
		"instruction": "load.f32 0.000000"
		, "offset": 279697
	}, {
		"instruction": "f32.ceq"
		, "offset": 279702
	}, {
		"instruction": "jnz +66"
		, "offset": 279703
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 279707
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 279712
	}, {
		"instruction": "mad 8"
		, "offset": 279714
	}, {
		"instruction": "load.i32"
		, "offset": 279718
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279719
	}, {
		"instruction": "f32.div"
		, "offset": 279721
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 279722
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 279727
	}, {
		"instruction": "mad 8"
		, "offset": 279729
	}, {
		"instruction": "store.i32"
		, "offset": 279733
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 279734
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 279739
	}, {
		"instruction": "mad 8"
		, "offset": 279741
	}, {
		"instruction": "inc 4"
		, "offset": 279745
	}, {
		"instruction": "load.i32"
		, "offset": 279749
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279750
	}, {
		"instruction": "f32.div"
		, "offset": 279752
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 279753
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 279758
	}, {
		"instruction": "mad 8"
		, "offset": 279760
	}, {
		"instruction": "inc 4"
		, "offset": 279764
	}, {
		"instruction": "store.i32"
		, "offset": 279768
	}, {
		"instruction": "load.c32 0"
		, "offset": 279769
	}, {
		"instruction": "jmp +51"
		, "offset": 279774
	}, {
		"instruction": "nfc(11)"
		, "offset": 279778
	}, {
		"instruction": "load.c32 256"
		, "offset": 279782
	}, {
		"instruction": "inc 256"
		, "offset": 279787
	}, {
		"instruction": "i32.mod"
		, "offset": 279791
	}, {
		"instruction": "inc -256"
		, "offset": 279792
	}, {
		"instruction": "i32.2f32"
		, "offset": 279796
	}, {
		"instruction": "load.f32 256.000000"
		, "offset": 279797
	}, {
		"instruction": "f32.div"
		, "offset": 279802
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279803
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 279808
	}, {
		"instruction": "mad 12"
		, "offset": 279810
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 279814
	}, {
		"instruction": "mad 4"
		, "offset": 279816
	}, {
		"instruction": "store.i32"
		, "offset": 279820
	}, {
		"instruction": "inc 1"
		, "offset": 279821
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279825
	}, {
		"instruction": "load.c32 3"
		, "offset": 279827
	}, {
		"instruction": "i32.clt"
		, "offset": 279832
	}, {
		"instruction": "jnz -55"
		, "offset": 279833
	}, {
		"instruction": "stack -4"
		, "offset": 279837
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279841
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 279846
	}, {
		"instruction": "mad 12"
		, "offset": 279848
	}, {
		"instruction": "load.i32"
		, "offset": 279852
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279853
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279855
	}, {
		"instruction": "f32.mul"
		, "offset": 279857
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 279858
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279860
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 279865
	}, {
		"instruction": "mad 12"
		, "offset": 279867
	}, {
		"instruction": "inc 4"
		, "offset": 279871
	}, {
		"instruction": "load.i32"
		, "offset": 279875
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279876
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279878
	}, {
		"instruction": "f32.mul"
		, "offset": 279880
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 279881
	}, {
		"instruction": "f32.add"
		, "offset": 279883
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279884
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 279889
	}, {
		"instruction": "mad 12"
		, "offset": 279891
	}, {
		"instruction": "inc 4"
		, "offset": 279895
	}, {
		"instruction": "load.i32"
		, "offset": 279899
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279900
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279902
	}, {
		"instruction": "f32.mul"
		, "offset": 279904
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 279905
	}, {
		"instruction": "f32.add"
		, "offset": 279907
	}, {
		"instruction": "f32.2f64"
		, "offset": 279908
	}, {
		"instruction": "nfc(29)"
		, "offset": 279909
	}, {
		"instruction": "f64.2f32"
		, "offset": 279913
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 279914
	}, {
		"instruction": "load.f32 0.000000"
		, "offset": 279916
	}, {
		"instruction": "f32.ceq"
		, "offset": 279921
	}, {
		"instruction": "jnz +101"
		, "offset": 279922
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279926
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 279931
	}, {
		"instruction": "mad 12"
		, "offset": 279933
	}, {
		"instruction": "load.i32"
		, "offset": 279937
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279938
	}, {
		"instruction": "f32.div"
		, "offset": 279940
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279941
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 279946
	}, {
		"instruction": "mad 12"
		, "offset": 279948
	}, {
		"instruction": "store.i32"
		, "offset": 279952
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279953
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 279958
	}, {
		"instruction": "mad 12"
		, "offset": 279960
	}, {
		"instruction": "inc 4"
		, "offset": 279964
	}, {
		"instruction": "load.i32"
		, "offset": 279968
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 279969
	}, {
		"instruction": "f32.div"
		, "offset": 279971
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279972
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 279977
	}, {
		"instruction": "mad 12"
		, "offset": 279979
	}, {
		"instruction": "inc 4"
		, "offset": 279983
	}, {
		"instruction": "store.i32"
		, "offset": 279987
	}, {
		"instruction": "load.ref .041390"
		, "offset": 279988
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 279993
	}, {
		"instruction": "mad 12"
		, "offset": 279995
	}, {
		"instruction": "inc 8"
		, "offset": 279999
	}, {
		"instruction": "load.i32"
		, "offset": 280003
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280004
	}, {
		"instruction": "f32.div"
		, "offset": 280006
	}, {
		"instruction": "load.ref .041390"
		, "offset": 280007
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280012
	}, {
		"instruction": "mad 12"
		, "offset": 280014
	}, {
		"instruction": "inc 8"
		, "offset": 280018
	}, {
		"instruction": "store.i32"
		, "offset": 280022
	}, {
		"instruction": "stack -8"
		, "offset": 280023
	}, {
		"instruction": "inc 1"
		, "offset": 280027
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280031
	}, {
		"instruction": "load.c32 256"
		, "offset": 280033
	}, {
		"instruction": "i32.clt"
		, "offset": 280038
	}, {
		"instruction": "jnz -516"
		, "offset": 280039
	}, {
		"instruction": "jmp +68"
		, "offset": 280043
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280047
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280052
	}, {
		"instruction": "mad 4"
		, "offset": 280054
	}, {
		"instruction": "load.i32"
		, "offset": 280058
	}, {
		"instruction": "nfc(11)"
		, "offset": 280059
	}, {
		"instruction": "load.c32 256"
		, "offset": 280063
	}, {
		"instruction": "i32.mod"
		, "offset": 280068
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280069
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280074
	}, {
		"instruction": "mad 4"
		, "offset": 280076
	}, {
		"instruction": "load.i32"
		, "offset": 280080
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280081
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280086
	}, {
		"instruction": "mad 4"
		, "offset": 280088
	}, {
		"instruction": "store.i32"
		, "offset": 280092
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280093
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280095
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280100
	}, {
		"instruction": "mad 4"
		, "offset": 280102
	}, {
		"instruction": "store.i32"
		, "offset": 280106
	}, {
		"instruction": "stack -8"
		, "offset": 280107
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280111
	}, {
		"instruction": "inc -1"
		, "offset": 280113
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280117
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 280119
	}, {
		"instruction": "jnz -74"
		, "offset": 280121
	}, {
		"instruction": "load.c32 0"
		, "offset": 280125
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280130
	}, {
		"instruction": "jmp +210"
		, "offset": 280132
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280136
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280141
	}, {
		"instruction": "mad 4"
		, "offset": 280143
	}, {
		"instruction": "load.i32"
		, "offset": 280147
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280148
	}, {
		"instruction": "load.c32 256"
		, "offset": 280153
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280158
	}, {
		"instruction": "i32.add"
		, "offset": 280160
	}, {
		"instruction": "mad 4"
		, "offset": 280161
	}, {
		"instruction": "store.i32"
		, "offset": 280165
	}, {
		"instruction": "load.ref .043bc0"
		, "offset": 280166
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280171
	}, {
		"instruction": "mad 4"
		, "offset": 280173
	}, {
		"instruction": "load.i32"
		, "offset": 280177
	}, {
		"instruction": "load.ref .043bc0"
		, "offset": 280178
	}, {
		"instruction": "load.c32 256"
		, "offset": 280183
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280188
	}, {
		"instruction": "i32.add"
		, "offset": 280190
	}, {
		"instruction": "mad 4"
		, "offset": 280191
	}, {
		"instruction": "store.i32"
		, "offset": 280195
	}, {
		"instruction": "load.c32 0"
		, "offset": 280196
	}, {
		"instruction": "jmp +50"
		, "offset": 280201
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280205
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280210
	}, {
		"instruction": "mad 8"
		, "offset": 280212
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280216
	}, {
		"instruction": "mad 4"
		, "offset": 280218
	}, {
		"instruction": "load.i32"
		, "offset": 280222
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280223
	}, {
		"instruction": "load.c32 256"
		, "offset": 280228
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280233
	}, {
		"instruction": "i32.add"
		, "offset": 280235
	}, {
		"instruction": "mad 8"
		, "offset": 280236
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280240
	}, {
		"instruction": "mad 4"
		, "offset": 280242
	}, {
		"instruction": "store.i32"
		, "offset": 280246
	}, {
		"instruction": "inc 1"
		, "offset": 280247
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280251
	}, {
		"instruction": "load.c32 2"
		, "offset": 280253
	}, {
		"instruction": "i32.clt"
		, "offset": 280258
	}, {
		"instruction": "jnz -54"
		, "offset": 280259
	}, {
		"instruction": "stack -4"
		, "offset": 280263
	}, {
		"instruction": "load.c32 0"
		, "offset": 280267
	}, {
		"instruction": "jmp +50"
		, "offset": 280272
	}, {
		"instruction": "load.ref .041390"
		, "offset": 280276
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280281
	}, {
		"instruction": "mad 12"
		, "offset": 280283
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280287
	}, {
		"instruction": "mad 4"
		, "offset": 280289
	}, {
		"instruction": "load.i32"
		, "offset": 280293
	}, {
		"instruction": "load.ref .041390"
		, "offset": 280294
	}, {
		"instruction": "load.c32 256"
		, "offset": 280299
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280304
	}, {
		"instruction": "i32.add"
		, "offset": 280306
	}, {
		"instruction": "mad 12"
		, "offset": 280307
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280311
	}, {
		"instruction": "mad 4"
		, "offset": 280313
	}, {
		"instruction": "store.i32"
		, "offset": 280317
	}, {
		"instruction": "inc 1"
		, "offset": 280318
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280322
	}, {
		"instruction": "load.c32 3"
		, "offset": 280324
	}, {
		"instruction": "i32.clt"
		, "offset": 280329
	}, {
		"instruction": "jnz -54"
		, "offset": 280330
	}, {
		"instruction": "stack -4"
		, "offset": 280334
	}, {
		"instruction": "inc 1"
		, "offset": 280338
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280342
	}, {
		"instruction": "load.c32 256"
		, "offset": 280344
	}, {
		"instruction": "inc 2"
		, "offset": 280349
	}, {
		"instruction": "i32.clt"
		, "offset": 280353
	}, {
		"instruction": "jnz -218"
		, "offset": 280354
	}, {
		"instruction": "stack -4"
		, "offset": 280358
	}, {
		"instruction": "ret"
		, "offset": 280362
	}]
}, {
	"proto": "Perlin.setup(vec_i: float32, b0: int32, b1: int32, r0: float32, r1: float32)"
	, "kind": ".ref"
	, "name": "setup"
	, "declaredIn": "Perlin"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 550
	, "args": [{
		"proto": "Perlin.setup.vec_i"
		, "kind": ".ref"
		, "name": "vec_i"
		, "declaredIn": "Perlin.setup(vec_i: float32, b0: int32, b1: int32, r0: float32, r1: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 550
		, "cast": ".f32"
		, "size": 4
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.setup.b0"
		, "kind": ".ref"
		, "name": "b0"
		, "declaredIn": "Perlin.setup(vec_i: float32, b0: int32, b1: int32, r0: float32, r1: float32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 550
		, "cast": ".ref"
		, "size": 4
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.setup.b1"
		, "kind": ".ref"
		, "name": "b1"
		, "declaredIn": "Perlin.setup(vec_i: float32, b0: int32, b1: int32, r0: float32, r1: float32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 550
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.setup.r0"
		, "kind": ".ref"
		, "name": "r0"
		, "declaredIn": "Perlin.setup(vec_i: float32, b0: int32, b1: int32, r0: float32, r1: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 550
		, "cast": ".ref"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.setup.r1"
		, "kind": ".ref"
		, "name": "r1"
		, "declaredIn": "Perlin.setup(vec_i: float32, b0: int32, b1: int32, r0: float32, r1: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 550
		, "cast": ".ref"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "cast": ".vid"
	, "size": 61
	, "offs": 280363
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 550
		, "stmt": [{
			"proto": "t"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 551
			, "value": "t"
		}, {
			"proto": "b0 := (int32(t) & BM);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 552
			, "stmt": {
				"proto": "(b0 := (int32(t) & BM))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 552
				, "lval": {
					"proto": "b0"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 552
					, "value": "b0"
				}
				, "rval": {
					"proto": "(int32(t) & BM)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 552
					, "lval": {
						"proto": "int32(t)"
						, "kind": "(?)"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 552
						, "args": [{
							"proto": "t"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 552
							, "value": "t"
						}]
					}
					, "rval": {
						"proto": "BM"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 552
						, "value": "BM"
					}
				}
			}
		}, {
			"proto": "b1 := ((b0 + 1) & BM);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 553
			, "stmt": {
				"proto": "(b1 := ((b0 + 1) & BM))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 553
				, "lval": {
					"proto": "b1"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 553
					, "value": "b1"
				}
				, "rval": {
					"proto": "((b0 + 1) & BM)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 553
					, "lval": {
						"proto": "(b0 + 1)"
						, "kind": "(?)"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 553
						, "args": [{
							"proto": "(b0 + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 553
							, "lval": {
								"proto": "b0"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 553
								, "value": "b0"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 553
								, "value": "1"
							}
						}]
					}
					, "rval": {
						"proto": "BM"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 553
						, "value": "BM"
					}
				}
			}
		}, {
			"proto": "r0 := (t - int32(t));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 554
			, "stmt": {
				"proto": "(r0 := (t - int32(t)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 554
				, "lval": {
					"proto": "r0"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 554
					, "value": "r0"
				}
				, "rval": {
					"proto": "(t - int32(t))"
					, "kind": "-"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 554
					, "lval": {
						"proto": "t"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 554
						, "value": "t"
					}
					, "rval": {
						"proto": "int32(t)"
						, "kind": "(?)"
						, "type": "int32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 554
						, "args": [{
							"proto": "t"
							, "kind": ".ref"
							, "type": "float32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 554
							, "value": "t"
						}]
					}
				}
			}
		}, {
			"proto": "r1 := (r0 - 1.000000);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 555
			, "stmt": {
				"proto": "(r1 := (r0 - 1.000000))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 555
				, "lval": {
					"proto": "r1"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 555
					, "value": "r1"
				}
				, "rval": {
					"proto": "(r0 - 1.000000)"
					, "kind": "-"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 555
					, "lval": {
						"proto": "r0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 555
						, "value": "r0"
					}
					, "rval": {
						"proto": "1.000000"
						, "kind": ".f64"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 555
						, "value": "1.000000"
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 280363
	}, {
		"instruction": "load.f32 4096.000000"
		, "offset": 280365
	}, {
		"instruction": "f32.add"
		, "offset": 280370
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280371
	}, {
		"instruction": "f32.2i32"
		, "offset": 280373
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 280374
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280376
	}, {
		"instruction": "store.i32"
		, "offset": 280378
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280379
	}, {
		"instruction": "load.i32"
		, "offset": 280381
	}, {
		"instruction": "inc 1"
		, "offset": 280382
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 280386
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 280388
	}, {
		"instruction": "store.i32"
		, "offset": 280390
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280391
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280393
	}, {
		"instruction": "f32.2i32"
		, "offset": 280395
	}, {
		"instruction": "i32.2f32"
		, "offset": 280396
	}, {
		"instruction": "f32.sub"
		, "offset": 280397
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 280398
	}, {
		"instruction": "store.i32"
		, "offset": 280400
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 280401
	}, {
		"instruction": "load.i32"
		, "offset": 280403
	}, {
		"instruction": "f32.2f64"
		, "offset": 280404
	}, {
		"instruction": "load.f64 1.000000"
		, "offset": 280405
	}, {
		"instruction": "f64.sub"
		, "offset": 280414
	}, {
		"instruction": "f64.2f32"
		, "offset": 280415
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 280416
	}, {
		"instruction": "store.i32"
		, "offset": 280418
	}, {
		"instruction": "stack -4"
		, "offset": 280419
	}, {
		"instruction": "ret"
		, "offset": 280423
	}]
}, {
	"proto": "Perlin.smooth(t: float32)"
	, "kind": ".def"
	, "name": "smooth"
	, "declaredIn": "Perlin"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 558
	, "args": [{
		"proto": "Perlin.smooth.t"
		, "kind": ".def"
		, "name": "t"
		, "declaredIn": "Perlin.smooth(t: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 558
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Math.smooth(t)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 654
		, "args": [{
			"proto": "t"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 558
			, "value": "t"
		}]
	}
}, {
	"proto": "Perlin.lerp(t: float32, a: float32, b: float32)"
	, "kind": ".def"
	, "name": "lerp"
	, "declaredIn": "Perlin"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 559
	, "args": [{
		"proto": "Perlin.lerp.t"
		, "kind": ".def"
		, "name": "t"
		, "declaredIn": "Perlin.lerp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 559
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.lerp.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "Perlin.lerp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 559
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.lerp.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "Perlin.lerp(t: float32, a: float32, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 559
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Math.lerp(t, a, b)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 685
		, "args": [{
			"proto": "b"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 559
			, "value": "b"
		}, {
			"proto": "a"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 559
			, "value": "a"
		}, {
			"proto": "t"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 559
			, "value": "t"
		}]
	}
}, {
	"proto": "Perlin.Noise1f(x: float32)"
	, "kind": ".ref"
	, "name": "Noise1f"
	, "declaredIn": "Perlin"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 561
	, "args": [{
		"proto": "Perlin.Noise1f.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Perlin.Noise1f(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 561
		, "cast": ".f32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".f32"
	, "size": 181
	, "offs": 280424
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 561
		, "stmt": [{
			"proto": "bx0"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 562
			, "value": "bx0"
		}, {
			"proto": "bx1"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 563
			, "value": "bx1"
		}, {
			"proto": "rx0"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 564
			, "value": "rx0"
		}, {
			"proto": "rx1"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 565
			, "value": "rx1"
		}, {
			"proto": "sx"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 566
			, "value": "sx"
		}, {
			"proto": "u"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 567
			, "value": "u"
		}, {
			"proto": "v"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 568
			, "value": "v"
		}, {
			"proto": "if (start)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 570
			, "test": {
				"proto": "start"
				, "kind": ".ref"
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 570
				, "value": "start"
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 570
				, "stmt": [{
					"proto": "start := false;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 571
					, "stmt": {
						"proto": "(start := false)"
						, "kind": ":="
						, "type": "bool"
						, "file": "stdlib.cvx"
						, "line": 571
						, "lval": {
							"proto": "start"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 571
							, "value": "start"
						}
						, "rval": {
							"proto": "false"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 571
							, "value": "false"
						}
					}
				}, {
					"proto": "init();"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 572
					, "stmt": {
						"proto": "init()"
						, "kind": "(?)"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 572
						, "args": [{
						}]
					}
				}]
			}
		}, {
			"proto": "setup(x, (&bx0), (&bx1), (&rx0), (&rx1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 575
			, "stmt": {
				"proto": "setup(x, (&bx0), (&bx1), (&rx0), (&rx1))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 575
				, "args": [{
					"proto": "(&rx1)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 575
					, "rval": {
						"proto": "rx1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 575
						, "value": "rx1"
					}
				}, {
					"proto": "(&rx0)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 575
					, "rval": {
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 575
						, "value": "rx0"
					}
				}, {
					"proto": "(&bx1)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 575
					, "rval": {
						"proto": "bx1"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 575
						, "value": "bx1"
					}
				}, {
					"proto": "(&bx0)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 575
					, "rval": {
						"proto": "bx0"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 575
						, "value": "bx0"
					}
				}, {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 575
					, "value": "x"
				}]
			}
		}, {
			"proto": "sx := smooth(rx0);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 577
			, "stmt": {
				"proto": "(sx := smooth(rx0))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 577
				, "lval": {
					"proto": "sx"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 577
					, "value": "sx"
				}
				, "rval": {
					"proto": "smooth(rx0)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 577
					, "args": [{
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 577
						, "value": "rx0"
					}]
				}
			}
		}, {
			"proto": "u := (rx0 * g1[p[bx0]]);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 579
			, "stmt": {
				"proto": "(u := (rx0 * g1[p[bx0]]))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 579
				, "lval": {
					"proto": "u"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 579
					, "value": "u"
				}
				, "rval": {
					"proto": "(rx0 * g1[p[bx0]])"
					, "kind": "*"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 579
					, "lval": {
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 579
						, "value": "rx0"
					}
					, "rval": {
						"proto": "g1[p[bx0]]"
						, "kind": "[?]"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 579
						, "lval": {
							"proto": "g1"
							, "kind": ".ref"
							, "type": "float32[(B + B + 2)]"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 579
							, "value": "g1"
						}
						, "rval": {
							"proto": "p[bx0]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i64"
							, "file": "stdlib.cvx"
							, "line": 579
							, "lval": {
								"proto": "p"
								, "kind": ".ref"
								, "type": "int32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 579
								, "value": "p"
							}
							, "rval": {
								"proto": "bx0"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 579
								, "value": "bx0"
							}
						}
					}
				}
			}
		}, {
			"proto": "v := (rx1 * g1[p[bx1]]);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 580
			, "stmt": {
				"proto": "(v := (rx1 * g1[p[bx1]]))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 580
				, "lval": {
					"proto": "v"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 580
					, "value": "v"
				}
				, "rval": {
					"proto": "(rx1 * g1[p[bx1]])"
					, "kind": "*"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 580
					, "lval": {
						"proto": "rx1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 580
						, "value": "rx1"
					}
					, "rval": {
						"proto": "g1[p[bx1]]"
						, "kind": "[?]"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 580
						, "lval": {
							"proto": "g1"
							, "kind": ".ref"
							, "type": "float32[(B + B + 2)]"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 580
							, "value": "g1"
						}
						, "rval": {
							"proto": "p[bx1]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i64"
							, "file": "stdlib.cvx"
							, "line": 580
							, "lval": {
								"proto": "p"
								, "kind": ".ref"
								, "type": "int32[(B + B + 2)]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 580
								, "value": "p"
							}
							, "rval": {
								"proto": "bx1"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 580
								, "value": "bx1"
							}
						}
					}
				}
			}
		}, {
			"proto": "result := lerp(sx, u, v);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 582
			, "stmt": {
				"proto": "(result := lerp(sx, u, v))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 582
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 582
					, "value": "result"
				}
				, "rval": {
					"proto": "lerp(sx, u, v)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 582
					, "args": [{
						"proto": "v"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 582
						, "value": "v"
					}, {
						"proto": "u"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 582
						, "value": "u"
					}, {
						"proto": "sx"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 582
						, "value": "sx"
					}]
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "stack 4"
		, "offset": 280424
	}, {
		"instruction": "stack 4"
		, "offset": 280428
	}, {
		"instruction": "stack 4"
		, "offset": 280432
	}, {
		"instruction": "stack 4"
		, "offset": 280436
	}, {
		"instruction": "stack 4"
		, "offset": 280440
	}, {
		"instruction": "stack 4"
		, "offset": 280444
	}, {
		"instruction": "stack 4"
		, "offset": 280448
	}, {
		"instruction": "load.m32 .0443c8"
		, "offset": 280452
	}, {
		"instruction": "jz +19"
		, "offset": 280456
	}, {
		"instruction": "load.c32 0"
		, "offset": 280460
	}, {
		"instruction": "store.m32 .0443c8"
		, "offset": 280465
	}, {
		"instruction": "load.ref .0443cc"
		, "offset": 280469
	}, {
		"instruction": "call"
		, "offset": 280474
	}, {
		"instruction": "ldsp 12"
		, "offset": 280475
	}, {
		"instruction": "ldsp 20"
		, "offset": 280479
	}, {
		"instruction": "ldsp 28"
		, "offset": 280483
	}, {
		"instruction": "ldsp 36"
		, "offset": 280487
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 280491
	}, {
		"instruction": "load.ref .04472b"
		, "offset": 280493
	}, {
		"instruction": "call"
		, "offset": 280498
	}, {
		"instruction": "stack -20"
		, "offset": 280499
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280503
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280505
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280507
	}, {
		"instruction": "f32.mul"
		, "offset": 280509
	}, {
		"instruction": "load.f32 3.000000"
		, "offset": 280510
	}, {
		"instruction": "load.f32 2.000000"
		, "offset": 280515
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280520
	}, {
		"instruction": "f32.mul"
		, "offset": 280522
	}, {
		"instruction": "f32.sub"
		, "offset": 280523
	}, {
		"instruction": "f32.mul"
		, "offset": 280524
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280525
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 280527
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280529
	}, {
		"instruction": "load.ref .043bc0"
		, "offset": 280531
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280536
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 280541
	}, {
		"instruction": "mad 4"
		, "offset": 280543
	}, {
		"instruction": "load.i32"
		, "offset": 280547
	}, {
		"instruction": "mad 4"
		, "offset": 280548
	}, {
		"instruction": "load.i32"
		, "offset": 280552
	}, {
		"instruction": "f32.mul"
		, "offset": 280553
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 280554
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280556
	}, {
		"instruction": "load.ref .043bc0"
		, "offset": 280558
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280563
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 280568
	}, {
		"instruction": "mad 4"
		, "offset": 280570
	}, {
		"instruction": "load.i32"
		, "offset": 280574
	}, {
		"instruction": "mad 4"
		, "offset": 280575
	}, {
		"instruction": "load.i32"
		, "offset": 280579
	}, {
		"instruction": "f32.mul"
		, "offset": 280580
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280581
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280583
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280585
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280587
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280589
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280591
	}, {
		"instruction": "f32.sub"
		, "offset": 280593
	}, {
		"instruction": "f32.mul"
		, "offset": 280594
	}, {
		"instruction": "f32.add"
		, "offset": 280595
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280596
	}, {
		"instruction": "set.x1 sp(10)"
		, "offset": 280598
	}, {
		"instruction": "stack -28"
		, "offset": 280600
	}, {
		"instruction": "ret"
		, "offset": 280604
	}]
}, {
	"proto": "Perlin.Noise2f(x: float32, y: float32)"
	, "kind": ".ref"
	, "name": "Noise2f"
	, "declaredIn": "Perlin"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 584
	, "args": [{
		"proto": "Perlin.Noise2f.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Perlin.Noise2f(x: float32, y: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 584
		, "cast": ".f32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.Noise2f.y"
		, "kind": ".ref"
		, "name": "y"
		, "declaredIn": "Perlin.Noise2f(x: float32, y: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 584
		, "cast": ".f32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".f32"
	, "size": 443
	, "offs": 280605
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 584
		, "stmt": [{
			"proto": "bx0"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 585
			, "value": "bx0"
		}, {
			"proto": "bx1"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 586
			, "value": "bx1"
		}, {
			"proto": "by0"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 587
			, "value": "by0"
		}, {
			"proto": "by1"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 588
			, "value": "by1"
		}, {
			"proto": "rx0"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 589
			, "value": "rx0"
		}, {
			"proto": "rx1"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 590
			, "value": "rx1"
		}, {
			"proto": "ry0"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 591
			, "value": "ry0"
		}, {
			"proto": "ry1"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 592
			, "value": "ry1"
		}, {
			"proto": "if (start)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 594
			, "test": {
				"proto": "start"
				, "kind": ".ref"
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 594
				, "value": "start"
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 594
				, "stmt": [{
					"proto": "start := false;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 595
					, "stmt": {
						"proto": "(start := false)"
						, "kind": ":="
						, "type": "bool"
						, "file": "stdlib.cvx"
						, "line": 595
						, "lval": {
							"proto": "start"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 595
							, "value": "start"
						}
						, "rval": {
							"proto": "false"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 595
							, "value": "false"
						}
					}
				}, {
					"proto": "init();"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 596
					, "stmt": {
						"proto": "init()"
						, "kind": "(?)"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 596
						, "args": [{
						}]
					}
				}]
			}
		}, {
			"proto": "setup(x, (&bx0), (&bx1), (&rx0), (&rx1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 599
			, "stmt": {
				"proto": "setup(x, (&bx0), (&bx1), (&rx0), (&rx1))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 599
				, "args": [{
					"proto": "(&rx1)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 599
					, "rval": {
						"proto": "rx1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 599
						, "value": "rx1"
					}
				}, {
					"proto": "(&rx0)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 599
					, "rval": {
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 599
						, "value": "rx0"
					}
				}, {
					"proto": "(&bx1)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 599
					, "rval": {
						"proto": "bx1"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 599
						, "value": "bx1"
					}
				}, {
					"proto": "(&bx0)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 599
					, "rval": {
						"proto": "bx0"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 599
						, "value": "bx0"
					}
				}, {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 599
					, "value": "x"
				}]
			}
		}, {
			"proto": "setup(y, (&by0), (&by1), (&ry0), (&ry1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 600
			, "stmt": {
				"proto": "setup(y, (&by0), (&by1), (&ry0), (&ry1))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 600
				, "args": [{
					"proto": "(&ry1)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 600
					, "rval": {
						"proto": "ry1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 600
						, "value": "ry1"
					}
				}, {
					"proto": "(&ry0)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 600
					, "rval": {
						"proto": "ry0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 600
						, "value": "ry0"
					}
				}, {
					"proto": "(&by1)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 600
					, "rval": {
						"proto": "by1"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 600
						, "value": "by1"
					}
				}, {
					"proto": "(&by0)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 600
					, "rval": {
						"proto": "by0"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 600
						, "value": "by0"
					}
				}, {
					"proto": "y"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 600
					, "value": "y"
				}]
			}
		}, {
			"proto": "i"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 602
			, "value": "i"
		}, {
			"proto": "j"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 603
			, "value": "j"
		}, {
			"proto": "b00"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 605
			, "value": "b00"
		}, {
			"proto": "b10"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 606
			, "value": "b10"
		}, {
			"proto": "b01"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 607
			, "value": "b01"
		}, {
			"proto": "b11"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 608
			, "value": "b11"
		}, {
			"proto": "sx"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 610
			, "value": "sx"
		}, {
			"proto": "sy"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 611
			, "value": "sy"
		}, {
			"proto": "at2(rx: float32, ry: float32, i: int32)"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 613
			, "value": "at2(rx: float32, ry: float32, i: int32)"
		}, {
			"proto": "a"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 615
			, "value": "a"
		}, {
			"proto": "b"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 616
			, "value": "b"
		}, {
			"proto": "result := lerp(sy, a, b);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 618
			, "stmt": {
				"proto": "(result := lerp(sy, a, b))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 618
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 618
					, "value": "result"
				}
				, "rval": {
					"proto": "lerp(sy, a, b)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 618
					, "args": [{
						"proto": "b"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 618
						, "value": "b"
					}, {
						"proto": "a"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 618
						, "value": "a"
					}, {
						"proto": "sy"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 618
						, "value": "sy"
					}]
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "stack 4"
		, "offset": 280605
	}, {
		"instruction": "stack 4"
		, "offset": 280609
	}, {
		"instruction": "stack 4"
		, "offset": 280613
	}, {
		"instruction": "stack 4"
		, "offset": 280617
	}, {
		"instruction": "stack 4"
		, "offset": 280621
	}, {
		"instruction": "stack 4"
		, "offset": 280625
	}, {
		"instruction": "stack 4"
		, "offset": 280629
	}, {
		"instruction": "stack 4"
		, "offset": 280633
	}, {
		"instruction": "load.m32 .0443c8"
		, "offset": 280637
	}, {
		"instruction": "jz +19"
		, "offset": 280641
	}, {
		"instruction": "load.c32 0"
		, "offset": 280645
	}, {
		"instruction": "store.m32 .0443c8"
		, "offset": 280650
	}, {
		"instruction": "load.ref .0443cc"
		, "offset": 280654
	}, {
		"instruction": "call"
		, "offset": 280659
	}, {
		"instruction": "ldsp 8"
		, "offset": 280660
	}, {
		"instruction": "ldsp 16"
		, "offset": 280664
	}, {
		"instruction": "ldsp 32"
		, "offset": 280668
	}, {
		"instruction": "ldsp 40"
		, "offset": 280672
	}, {
		"instruction": "dup.x1 sp(13)"
		, "offset": 280676
	}, {
		"instruction": "load.ref .04472b"
		, "offset": 280678
	}, {
		"instruction": "call"
		, "offset": 280683
	}, {
		"instruction": "stack -20"
		, "offset": 280684
	}, {
		"instruction": "ldsp 0"
		, "offset": 280688
	}, {
		"instruction": "ldsp 8"
		, "offset": 280692
	}, {
		"instruction": "ldsp 24"
		, "offset": 280696
	}, {
		"instruction": "ldsp 32"
		, "offset": 280700
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 280704
	}, {
		"instruction": "load.ref .04472b"
		, "offset": 280706
	}, {
		"instruction": "call"
		, "offset": 280711
	}, {
		"instruction": "stack -20"
		, "offset": 280712
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280716
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 280721
	}, {
		"instruction": "mad 4"
		, "offset": 280723
	}, {
		"instruction": "load.i32"
		, "offset": 280727
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280728
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 280733
	}, {
		"instruction": "mad 4"
		, "offset": 280735
	}, {
		"instruction": "load.i32"
		, "offset": 280739
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280740
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280745
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 280747
	}, {
		"instruction": "i32.add"
		, "offset": 280749
	}, {
		"instruction": "mad 4"
		, "offset": 280750
	}, {
		"instruction": "load.i32"
		, "offset": 280754
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280755
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280760
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 280762
	}, {
		"instruction": "i32.add"
		, "offset": 280764
	}, {
		"instruction": "mad 4"
		, "offset": 280765
	}, {
		"instruction": "load.i32"
		, "offset": 280769
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280770
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280775
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 280777
	}, {
		"instruction": "i32.add"
		, "offset": 280779
	}, {
		"instruction": "mad 4"
		, "offset": 280780
	}, {
		"instruction": "load.i32"
		, "offset": 280784
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 280785
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280790
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 280792
	}, {
		"instruction": "i32.add"
		, "offset": 280794
	}, {
		"instruction": "mad 4"
		, "offset": 280795
	}, {
		"instruction": "load.i32"
		, "offset": 280799
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 280800
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280802
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280804
	}, {
		"instruction": "f32.mul"
		, "offset": 280806
	}, {
		"instruction": "load.f32 3.000000"
		, "offset": 280807
	}, {
		"instruction": "load.f32 2.000000"
		, "offset": 280812
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280817
	}, {
		"instruction": "f32.mul"
		, "offset": 280819
	}, {
		"instruction": "f32.sub"
		, "offset": 280820
	}, {
		"instruction": "f32.mul"
		, "offset": 280821
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280822
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 280824
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280826
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 280828
	}, {
		"instruction": "f32.mul"
		, "offset": 280830
	}, {
		"instruction": "load.f32 3.000000"
		, "offset": 280831
	}, {
		"instruction": "load.f32 2.000000"
		, "offset": 280836
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280841
	}, {
		"instruction": "f32.mul"
		, "offset": 280843
	}, {
		"instruction": "f32.sub"
		, "offset": 280844
	}, {
		"instruction": "f32.mul"
		, "offset": 280845
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280846
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 280848
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 280850
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280852
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280857
	}, {
		"instruction": "mad 8"
		, "offset": 280859
	}, {
		"instruction": "load.i32"
		, "offset": 280863
	}, {
		"instruction": "f32.mul"
		, "offset": 280864
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 280865
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280867
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280872
	}, {
		"instruction": "mad 8"
		, "offset": 280874
	}, {
		"instruction": "inc 4"
		, "offset": 280878
	}, {
		"instruction": "load.i32"
		, "offset": 280882
	}, {
		"instruction": "f32.mul"
		, "offset": 280883
	}, {
		"instruction": "f32.add"
		, "offset": 280884
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280885
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280887
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280889
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 280891
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 280893
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280895
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280900
	}, {
		"instruction": "mad 8"
		, "offset": 280902
	}, {
		"instruction": "load.i32"
		, "offset": 280906
	}, {
		"instruction": "f32.mul"
		, "offset": 280907
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 280908
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280910
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280915
	}, {
		"instruction": "mad 8"
		, "offset": 280917
	}, {
		"instruction": "inc 4"
		, "offset": 280921
	}, {
		"instruction": "load.i32"
		, "offset": 280925
	}, {
		"instruction": "f32.mul"
		, "offset": 280926
	}, {
		"instruction": "f32.add"
		, "offset": 280927
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280928
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280930
	}, {
		"instruction": "f32.sub"
		, "offset": 280932
	}, {
		"instruction": "f32.mul"
		, "offset": 280933
	}, {
		"instruction": "f32.add"
		, "offset": 280934
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280935
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280937
	}, {
		"instruction": "dup.x1 sp(13)"
		, "offset": 280939
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280941
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280946
	}, {
		"instruction": "mad 8"
		, "offset": 280948
	}, {
		"instruction": "load.i32"
		, "offset": 280952
	}, {
		"instruction": "f32.mul"
		, "offset": 280953
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 280954
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280956
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 280961
	}, {
		"instruction": "mad 8"
		, "offset": 280963
	}, {
		"instruction": "inc 4"
		, "offset": 280967
	}, {
		"instruction": "load.i32"
		, "offset": 280971
	}, {
		"instruction": "f32.mul"
		, "offset": 280972
	}, {
		"instruction": "f32.add"
		, "offset": 280973
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 280974
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 280976
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 280978
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 280980
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 280982
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280984
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 280989
	}, {
		"instruction": "mad 8"
		, "offset": 280991
	}, {
		"instruction": "load.i32"
		, "offset": 280995
	}, {
		"instruction": "f32.mul"
		, "offset": 280996
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 280997
	}, {
		"instruction": "load.ref .042bb0"
		, "offset": 280999
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281004
	}, {
		"instruction": "mad 8"
		, "offset": 281006
	}, {
		"instruction": "inc 4"
		, "offset": 281010
	}, {
		"instruction": "load.i32"
		, "offset": 281014
	}, {
		"instruction": "f32.mul"
		, "offset": 281015
	}, {
		"instruction": "f32.add"
		, "offset": 281016
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281017
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281019
	}, {
		"instruction": "f32.sub"
		, "offset": 281021
	}, {
		"instruction": "f32.mul"
		, "offset": 281022
	}, {
		"instruction": "f32.add"
		, "offset": 281023
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281024
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 281026
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281028
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 281030
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281032
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281034
	}, {
		"instruction": "f32.sub"
		, "offset": 281036
	}, {
		"instruction": "f32.mul"
		, "offset": 281037
	}, {
		"instruction": "f32.add"
		, "offset": 281038
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281039
	}, {
		"instruction": "set.x1 sp(22)"
		, "offset": 281041
	}, {
		"instruction": "stack -72"
		, "offset": 281043
	}, {
		"instruction": "ret"
		, "offset": 281047
	}]
}, {
	"proto": "Perlin.Noise3f(x: float32, y: float32, z: float32)"
	, "kind": ".ref"
	, "name": "Noise3f"
	, "declaredIn": "Perlin"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 620
	, "args": [{
		"proto": "Perlin.Noise3f.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "Perlin.Noise3f(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 620
		, "cast": ".f32"
		, "size": 4
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.Noise3f.y"
		, "kind": ".ref"
		, "name": "y"
		, "declaredIn": "Perlin.Noise3f(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 620
		, "cast": ".f32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.Noise3f.z"
		, "kind": ".ref"
		, "name": "z"
		, "declaredIn": "Perlin.Noise3f(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 620
		, "cast": ".f32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".f32"
	, "size": 971
	, "offs": 281048
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 620
		, "stmt": [{
			"proto": "bx0"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 622
			, "value": "bx0"
		}, {
			"proto": "bx1"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 623
			, "value": "bx1"
		}, {
			"proto": "by0"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 624
			, "value": "by0"
		}, {
			"proto": "by1"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 625
			, "value": "by1"
		}, {
			"proto": "bz0"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 626
			, "value": "bz0"
		}, {
			"proto": "bz1"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 627
			, "value": "bz1"
		}, {
			"proto": "rx0"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 628
			, "value": "rx0"
		}, {
			"proto": "rx1"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 629
			, "value": "rx1"
		}, {
			"proto": "ry0"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 630
			, "value": "ry0"
		}, {
			"proto": "ry1"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 631
			, "value": "ry1"
		}, {
			"proto": "rz0"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 632
			, "value": "rz0"
		}, {
			"proto": "rz1"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 633
			, "value": "rz1"
		}, {
			"proto": "if (start)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 635
			, "test": {
				"proto": "start"
				, "kind": ".ref"
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 635
				, "value": "start"
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 635
				, "stmt": [{
					"proto": "start := false;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 636
					, "stmt": {
						"proto": "(start := false)"
						, "kind": ":="
						, "type": "bool"
						, "file": "stdlib.cvx"
						, "line": 636
						, "lval": {
							"proto": "start"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 636
							, "value": "start"
						}
						, "rval": {
							"proto": "false"
							, "kind": ".ref"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 636
							, "value": "false"
						}
					}
				}, {
					"proto": "init();"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 637
					, "stmt": {
						"proto": "init()"
						, "kind": "(?)"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 637
						, "args": [{
						}]
					}
				}]
			}
		}, {
			"proto": "setup(x, (&bx0), (&bx1), (&rx0), (&rx1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 640
			, "stmt": {
				"proto": "setup(x, (&bx0), (&bx1), (&rx0), (&rx1))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 640
				, "args": [{
					"proto": "(&rx1)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 640
					, "rval": {
						"proto": "rx1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 640
						, "value": "rx1"
					}
				}, {
					"proto": "(&rx0)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 640
					, "rval": {
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 640
						, "value": "rx0"
					}
				}, {
					"proto": "(&bx1)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 640
					, "rval": {
						"proto": "bx1"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 640
						, "value": "bx1"
					}
				}, {
					"proto": "(&bx0)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 640
					, "rval": {
						"proto": "bx0"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 640
						, "value": "bx0"
					}
				}, {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 640
					, "value": "x"
				}]
			}
		}, {
			"proto": "setup(y, (&by0), (&by1), (&ry0), (&ry1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 641
			, "stmt": {
				"proto": "setup(y, (&by0), (&by1), (&ry0), (&ry1))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 641
				, "args": [{
					"proto": "(&ry1)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 641
					, "rval": {
						"proto": "ry1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 641
						, "value": "ry1"
					}
				}, {
					"proto": "(&ry0)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 641
					, "rval": {
						"proto": "ry0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 641
						, "value": "ry0"
					}
				}, {
					"proto": "(&by1)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 641
					, "rval": {
						"proto": "by1"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 641
						, "value": "by1"
					}
				}, {
					"proto": "(&by0)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 641
					, "rval": {
						"proto": "by0"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 641
						, "value": "by0"
					}
				}, {
					"proto": "y"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 641
					, "value": "y"
				}]
			}
		}, {
			"proto": "setup(z, (&bz0), (&bz1), (&rz0), (&rz1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 642
			, "stmt": {
				"proto": "setup(z, (&bz0), (&bz1), (&rz0), (&rz1))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 642
				, "args": [{
					"proto": "(&rz1)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 642
					, "rval": {
						"proto": "rz1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 642
						, "value": "rz1"
					}
				}, {
					"proto": "(&rz0)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 642
					, "rval": {
						"proto": "rz0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 642
						, "value": "rz0"
					}
				}, {
					"proto": "(&bz1)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 642
					, "rval": {
						"proto": "bz1"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 642
						, "value": "bz1"
					}
				}, {
					"proto": "(&bz0)"
					, "kind": "&"
					, "type": "int32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 642
					, "rval": {
						"proto": "bz0"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 642
						, "value": "bz0"
					}
				}, {
					"proto": "z"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 642
					, "value": "z"
				}]
			}
		}, {
			"proto": "i"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 644
			, "value": "i"
		}, {
			"proto": "j"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 645
			, "value": "j"
		}, {
			"proto": "b00"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 647
			, "value": "b00"
		}, {
			"proto": "b10"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 648
			, "value": "b10"
		}, {
			"proto": "b01"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 649
			, "value": "b01"
		}, {
			"proto": "b11"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 650
			, "value": "b11"
		}, {
			"proto": "sx"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 652
			, "value": "sx"
		}, {
			"proto": "sy"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 653
			, "value": "sy"
		}, {
			"proto": "sz"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 654
			, "value": "sz"
		}, {
			"proto": "at3(rx: float32, ry: float32, rz: float32, i: int32)"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 656
			, "value": "at3(rx: float32, ry: float32, rz: float32, i: int32)"
		}, {
			"proto": "a"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 658
			, "value": "a"
		}, {
			"proto": "b"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 659
			, "value": "b"
		}, {
			"proto": "c"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 660
			, "value": "c"
		}, {
			"proto": "d"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 661
			, "value": "d"
		}, {
			"proto": "u"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 662
			, "value": "u"
		}, {
			"proto": "v"
			, "kind": ".def"
			, "type": "float32"
			, "file": "stdlib.cvx"
			, "line": 663
			, "value": "v"
		}, {
			"proto": "u := at3(rx0, ry0, rz0, (b00 + bz0));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 665
			, "stmt": {
				"proto": "(u := at3(rx0, ry0, rz0, (b00 + bz0)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 665
				, "lval": {
					"proto": "u"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 665
					, "value": "u"
				}
				, "rval": {
					"proto": "at3(rx0, ry0, rz0, (b00 + bz0))"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 665
					, "args": [{
						"proto": "(b00 + bz0)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 665
						, "lval": {
							"proto": "b00"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 665
							, "value": "b00"
						}
						, "rval": {
							"proto": "bz0"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 665
							, "value": "bz0"
						}
					}, {
						"proto": "rz0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 665
						, "value": "rz0"
					}, {
						"proto": "ry0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 665
						, "value": "ry0"
					}, {
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 665
						, "value": "rx0"
					}]
				}
			}
		}, {
			"proto": "v := at3(rx1, ry0, rz0, (b10 + bz0));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 666
			, "stmt": {
				"proto": "(v := at3(rx1, ry0, rz0, (b10 + bz0)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 666
				, "lval": {
					"proto": "v"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 666
					, "value": "v"
				}
				, "rval": {
					"proto": "at3(rx1, ry0, rz0, (b10 + bz0))"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 666
					, "args": [{
						"proto": "(b10 + bz0)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 666
						, "lval": {
							"proto": "b10"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 666
							, "value": "b10"
						}
						, "rval": {
							"proto": "bz0"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 666
							, "value": "bz0"
						}
					}, {
						"proto": "rz0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 666
						, "value": "rz0"
					}, {
						"proto": "ry0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 666
						, "value": "ry0"
					}, {
						"proto": "rx1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 666
						, "value": "rx1"
					}]
				}
			}
		}, {
			"proto": "a := lerp(sx, u, v);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 667
			, "stmt": {
				"proto": "(a := lerp(sx, u, v))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 667
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 667
					, "value": "a"
				}
				, "rval": {
					"proto": "lerp(sx, u, v)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 667
					, "args": [{
						"proto": "v"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 667
						, "value": "v"
					}, {
						"proto": "u"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 667
						, "value": "u"
					}, {
						"proto": "sx"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 667
						, "value": "sx"
					}]
				}
			}
		}, {
			"proto": "u := at3(rx0, ry1, rz0, (b01 + bz0));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 669
			, "stmt": {
				"proto": "(u := at3(rx0, ry1, rz0, (b01 + bz0)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 669
				, "lval": {
					"proto": "u"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 669
					, "value": "u"
				}
				, "rval": {
					"proto": "at3(rx0, ry1, rz0, (b01 + bz0))"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 669
					, "args": [{
						"proto": "(b01 + bz0)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 669
						, "lval": {
							"proto": "b01"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 669
							, "value": "b01"
						}
						, "rval": {
							"proto": "bz0"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 669
							, "value": "bz0"
						}
					}, {
						"proto": "rz0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 669
						, "value": "rz0"
					}, {
						"proto": "ry1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 669
						, "value": "ry1"
					}, {
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 669
						, "value": "rx0"
					}]
				}
			}
		}, {
			"proto": "v := at3(rx1, ry1, rz0, (b11 + bz0));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 670
			, "stmt": {
				"proto": "(v := at3(rx1, ry1, rz0, (b11 + bz0)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 670
				, "lval": {
					"proto": "v"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 670
					, "value": "v"
				}
				, "rval": {
					"proto": "at3(rx1, ry1, rz0, (b11 + bz0))"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 670
					, "args": [{
						"proto": "(b11 + bz0)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 670
						, "lval": {
							"proto": "b11"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 670
							, "value": "b11"
						}
						, "rval": {
							"proto": "bz0"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 670
							, "value": "bz0"
						}
					}, {
						"proto": "rz0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 670
						, "value": "rz0"
					}, {
						"proto": "ry1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 670
						, "value": "ry1"
					}, {
						"proto": "rx1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 670
						, "value": "rx1"
					}]
				}
			}
		}, {
			"proto": "b := lerp(sx, u, v);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 671
			, "stmt": {
				"proto": "(b := lerp(sx, u, v))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 671
				, "lval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 671
					, "value": "b"
				}
				, "rval": {
					"proto": "lerp(sx, u, v)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 671
					, "args": [{
						"proto": "v"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 671
						, "value": "v"
					}, {
						"proto": "u"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 671
						, "value": "u"
					}, {
						"proto": "sx"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 671
						, "value": "sx"
					}]
				}
			}
		}, {
			"proto": "c := lerp(sy, a, b);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 673
			, "stmt": {
				"proto": "(c := lerp(sy, a, b))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 673
				, "lval": {
					"proto": "c"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 673
					, "value": "c"
				}
				, "rval": {
					"proto": "lerp(sy, a, b)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 673
					, "args": [{
						"proto": "b"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 673
						, "value": "b"
					}, {
						"proto": "a"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 673
						, "value": "a"
					}, {
						"proto": "sy"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 673
						, "value": "sy"
					}]
				}
			}
		}, {
			"proto": "u := at3(rx0, ry0, rz1, (b00 + bz1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 675
			, "stmt": {
				"proto": "(u := at3(rx0, ry0, rz1, (b00 + bz1)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 675
				, "lval": {
					"proto": "u"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 675
					, "value": "u"
				}
				, "rval": {
					"proto": "at3(rx0, ry0, rz1, (b00 + bz1))"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 675
					, "args": [{
						"proto": "(b00 + bz1)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 675
						, "lval": {
							"proto": "b00"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 675
							, "value": "b00"
						}
						, "rval": {
							"proto": "bz1"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 675
							, "value": "bz1"
						}
					}, {
						"proto": "rz1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 675
						, "value": "rz1"
					}, {
						"proto": "ry0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 675
						, "value": "ry0"
					}, {
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 675
						, "value": "rx0"
					}]
				}
			}
		}, {
			"proto": "v := at3(rx1, ry0, rz1, (b10 + bz1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 676
			, "stmt": {
				"proto": "(v := at3(rx1, ry0, rz1, (b10 + bz1)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 676
				, "lval": {
					"proto": "v"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 676
					, "value": "v"
				}
				, "rval": {
					"proto": "at3(rx1, ry0, rz1, (b10 + bz1))"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 676
					, "args": [{
						"proto": "(b10 + bz1)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 676
						, "lval": {
							"proto": "b10"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 676
							, "value": "b10"
						}
						, "rval": {
							"proto": "bz1"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 676
							, "value": "bz1"
						}
					}, {
						"proto": "rz1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 676
						, "value": "rz1"
					}, {
						"proto": "ry0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 676
						, "value": "ry0"
					}, {
						"proto": "rx1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 676
						, "value": "rx1"
					}]
				}
			}
		}, {
			"proto": "a := lerp(sx, u, v);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 677
			, "stmt": {
				"proto": "(a := lerp(sx, u, v))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 677
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 677
					, "value": "a"
				}
				, "rval": {
					"proto": "lerp(sx, u, v)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 677
					, "args": [{
						"proto": "v"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 677
						, "value": "v"
					}, {
						"proto": "u"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 677
						, "value": "u"
					}, {
						"proto": "sx"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 677
						, "value": "sx"
					}]
				}
			}
		}, {
			"proto": "u := at3(rx0, ry1, rz1, (b01 + bz1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 679
			, "stmt": {
				"proto": "(u := at3(rx0, ry1, rz1, (b01 + bz1)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 679
				, "lval": {
					"proto": "u"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 679
					, "value": "u"
				}
				, "rval": {
					"proto": "at3(rx0, ry1, rz1, (b01 + bz1))"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 679
					, "args": [{
						"proto": "(b01 + bz1)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 679
						, "lval": {
							"proto": "b01"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 679
							, "value": "b01"
						}
						, "rval": {
							"proto": "bz1"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 679
							, "value": "bz1"
						}
					}, {
						"proto": "rz1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 679
						, "value": "rz1"
					}, {
						"proto": "ry1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 679
						, "value": "ry1"
					}, {
						"proto": "rx0"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 679
						, "value": "rx0"
					}]
				}
			}
		}, {
			"proto": "v := at3(rx1, ry1, rz1, (b11 + bz1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 680
			, "stmt": {
				"proto": "(v := at3(rx1, ry1, rz1, (b11 + bz1)))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 680
				, "lval": {
					"proto": "v"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 680
					, "value": "v"
				}
				, "rval": {
					"proto": "at3(rx1, ry1, rz1, (b11 + bz1))"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 680
					, "args": [{
						"proto": "(b11 + bz1)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 680
						, "lval": {
							"proto": "b11"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 680
							, "value": "b11"
						}
						, "rval": {
							"proto": "bz1"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 680
							, "value": "bz1"
						}
					}, {
						"proto": "rz1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 680
						, "value": "rz1"
					}, {
						"proto": "ry1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 680
						, "value": "ry1"
					}, {
						"proto": "rx1"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 680
						, "value": "rx1"
					}]
				}
			}
		}, {
			"proto": "b := lerp(sx, u, v);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 681
			, "stmt": {
				"proto": "(b := lerp(sx, u, v))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 681
				, "lval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 681
					, "value": "b"
				}
				, "rval": {
					"proto": "lerp(sx, u, v)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 681
					, "args": [{
						"proto": "v"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 681
						, "value": "v"
					}, {
						"proto": "u"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 681
						, "value": "u"
					}, {
						"proto": "sx"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 681
						, "value": "sx"
					}]
				}
			}
		}, {
			"proto": "d := lerp(sy, a, b);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 683
			, "stmt": {
				"proto": "(d := lerp(sy, a, b))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 683
				, "lval": {
					"proto": "d"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 683
					, "value": "d"
				}
				, "rval": {
					"proto": "lerp(sy, a, b)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 683
					, "args": [{
						"proto": "b"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 683
						, "value": "b"
					}, {
						"proto": "a"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 683
						, "value": "a"
					}, {
						"proto": "sy"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 683
						, "value": "sy"
					}]
				}
			}
		}, {
			"proto": "result := lerp(sz, c, d);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 685
			, "stmt": {
				"proto": "(result := lerp(sz, c, d))"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 685
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 685
					, "value": "result"
				}
				, "rval": {
					"proto": "lerp(sz, c, d)"
					, "kind": "(?)"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 685
					, "args": [{
						"proto": "d"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 685
						, "value": "d"
					}, {
						"proto": "c"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 685
						, "value": "c"
					}, {
						"proto": "sz"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 685
						, "value": "sz"
					}]
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "stack 4"
		, "offset": 281048
	}, {
		"instruction": "stack 4"
		, "offset": 281052
	}, {
		"instruction": "stack 4"
		, "offset": 281056
	}, {
		"instruction": "stack 4"
		, "offset": 281060
	}, {
		"instruction": "stack 4"
		, "offset": 281064
	}, {
		"instruction": "stack 4"
		, "offset": 281068
	}, {
		"instruction": "stack 4"
		, "offset": 281072
	}, {
		"instruction": "stack 4"
		, "offset": 281076
	}, {
		"instruction": "stack 4"
		, "offset": 281080
	}, {
		"instruction": "stack 4"
		, "offset": 281084
	}, {
		"instruction": "stack 4"
		, "offset": 281088
	}, {
		"instruction": "stack 4"
		, "offset": 281092
	}, {
		"instruction": "load.m32 .0443c8"
		, "offset": 281096
	}, {
		"instruction": "jz +19"
		, "offset": 281100
	}, {
		"instruction": "load.c32 0"
		, "offset": 281104
	}, {
		"instruction": "store.m32 .0443c8"
		, "offset": 281109
	}, {
		"instruction": "load.ref .0443cc"
		, "offset": 281113
	}, {
		"instruction": "call"
		, "offset": 281118
	}, {
		"instruction": "ldsp 16"
		, "offset": 281119
	}, {
		"instruction": "ldsp 24"
		, "offset": 281123
	}, {
		"instruction": "ldsp 48"
		, "offset": 281127
	}, {
		"instruction": "ldsp 56"
		, "offset": 281131
	}, {
		"instruction": "dup.x1 sp(17)"
		, "offset": 281135
	}, {
		"instruction": "load.ref .04472b"
		, "offset": 281137
	}, {
		"instruction": "call"
		, "offset": 281142
	}, {
		"instruction": "stack -20"
		, "offset": 281143
	}, {
		"instruction": "ldsp 8"
		, "offset": 281147
	}, {
		"instruction": "ldsp 16"
		, "offset": 281151
	}, {
		"instruction": "ldsp 40"
		, "offset": 281155
	}, {
		"instruction": "ldsp 48"
		, "offset": 281159
	}, {
		"instruction": "dup.x1 sp(18)"
		, "offset": 281163
	}, {
		"instruction": "load.ref .04472b"
		, "offset": 281165
	}, {
		"instruction": "call"
		, "offset": 281170
	}, {
		"instruction": "stack -20"
		, "offset": 281171
	}, {
		"instruction": "ldsp 0"
		, "offset": 281175
	}, {
		"instruction": "ldsp 8"
		, "offset": 281179
	}, {
		"instruction": "ldsp 32"
		, "offset": 281183
	}, {
		"instruction": "ldsp 40"
		, "offset": 281187
	}, {
		"instruction": "dup.x1 sp(19)"
		, "offset": 281191
	}, {
		"instruction": "load.ref .04472b"
		, "offset": 281193
	}, {
		"instruction": "call"
		, "offset": 281198
	}, {
		"instruction": "stack -20"
		, "offset": 281199
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 281203
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 281208
	}, {
		"instruction": "mad 4"
		, "offset": 281210
	}, {
		"instruction": "load.i32"
		, "offset": 281214
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 281215
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 281220
	}, {
		"instruction": "mad 4"
		, "offset": 281222
	}, {
		"instruction": "load.i32"
		, "offset": 281226
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 281227
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281232
	}, {
		"instruction": "dup.x1 sp(13)"
		, "offset": 281234
	}, {
		"instruction": "i32.add"
		, "offset": 281236
	}, {
		"instruction": "mad 4"
		, "offset": 281237
	}, {
		"instruction": "load.i32"
		, "offset": 281241
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 281242
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281247
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 281249
	}, {
		"instruction": "i32.add"
		, "offset": 281251
	}, {
		"instruction": "mad 4"
		, "offset": 281252
	}, {
		"instruction": "load.i32"
		, "offset": 281256
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 281257
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 281262
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 281264
	}, {
		"instruction": "i32.add"
		, "offset": 281266
	}, {
		"instruction": "mad 4"
		, "offset": 281267
	}, {
		"instruction": "load.i32"
		, "offset": 281271
	}, {
		"instruction": "load.ref .040b80"
		, "offset": 281272
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 281277
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 281279
	}, {
		"instruction": "i32.add"
		, "offset": 281281
	}, {
		"instruction": "mad 4"
		, "offset": 281282
	}, {
		"instruction": "load.i32"
		, "offset": 281286
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 281287
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281289
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 281291
	}, {
		"instruction": "f32.mul"
		, "offset": 281293
	}, {
		"instruction": "load.f32 3.000000"
		, "offset": 281294
	}, {
		"instruction": "load.f32 2.000000"
		, "offset": 281299
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281304
	}, {
		"instruction": "f32.mul"
		, "offset": 281306
	}, {
		"instruction": "f32.sub"
		, "offset": 281307
	}, {
		"instruction": "f32.mul"
		, "offset": 281308
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281309
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 281311
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281313
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 281315
	}, {
		"instruction": "f32.mul"
		, "offset": 281317
	}, {
		"instruction": "load.f32 3.000000"
		, "offset": 281318
	}, {
		"instruction": "load.f32 2.000000"
		, "offset": 281323
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281328
	}, {
		"instruction": "f32.mul"
		, "offset": 281330
	}, {
		"instruction": "f32.sub"
		, "offset": 281331
	}, {
		"instruction": "f32.mul"
		, "offset": 281332
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281333
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 281335
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281337
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 281339
	}, {
		"instruction": "f32.mul"
		, "offset": 281341
	}, {
		"instruction": "load.f32 3.000000"
		, "offset": 281342
	}, {
		"instruction": "load.f32 2.000000"
		, "offset": 281347
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281352
	}, {
		"instruction": "f32.mul"
		, "offset": 281354
	}, {
		"instruction": "f32.sub"
		, "offset": 281355
	}, {
		"instruction": "f32.mul"
		, "offset": 281356
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281357
	}, {
		"instruction": "stack 4"
		, "offset": 281359
	}, {
		"instruction": "stack 4"
		, "offset": 281363
	}, {
		"instruction": "stack 4"
		, "offset": 281367
	}, {
		"instruction": "stack 4"
		, "offset": 281371
	}, {
		"instruction": "stack 4"
		, "offset": 281375
	}, {
		"instruction": "stack 4"
		, "offset": 281379
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 281383
	}, {
		"instruction": "dup.x1 sp(23)"
		, "offset": 281385
	}, {
		"instruction": "i32.add"
		, "offset": 281387
	}, {
		"instruction": "dup.x1 sp(21)"
		, "offset": 281388
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281390
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281395
	}, {
		"instruction": "mad 12"
		, "offset": 281397
	}, {
		"instruction": "load.i32"
		, "offset": 281401
	}, {
		"instruction": "f32.mul"
		, "offset": 281402
	}, {
		"instruction": "dup.x1 sp(20)"
		, "offset": 281403
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281405
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281410
	}, {
		"instruction": "mad 12"
		, "offset": 281412
	}, {
		"instruction": "inc 4"
		, "offset": 281416
	}, {
		"instruction": "load.i32"
		, "offset": 281420
	}, {
		"instruction": "f32.mul"
		, "offset": 281421
	}, {
		"instruction": "f32.add"
		, "offset": 281422
	}, {
		"instruction": "dup.x1 sp(18)"
		, "offset": 281423
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281425
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281430
	}, {
		"instruction": "mad 12"
		, "offset": 281432
	}, {
		"instruction": "inc 8"
		, "offset": 281436
	}, {
		"instruction": "load.i32"
		, "offset": 281440
	}, {
		"instruction": "f32.mul"
		, "offset": 281441
	}, {
		"instruction": "f32.add"
		, "offset": 281442
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281443
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 281445
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 281447
	}, {
		"instruction": "dup.x1 sp(23)"
		, "offset": 281449
	}, {
		"instruction": "i32.add"
		, "offset": 281451
	}, {
		"instruction": "dup.x1 sp(20)"
		, "offset": 281452
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281454
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281459
	}, {
		"instruction": "mad 12"
		, "offset": 281461
	}, {
		"instruction": "load.i32"
		, "offset": 281465
	}, {
		"instruction": "f32.mul"
		, "offset": 281466
	}, {
		"instruction": "dup.x1 sp(20)"
		, "offset": 281467
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281469
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281474
	}, {
		"instruction": "mad 12"
		, "offset": 281476
	}, {
		"instruction": "inc 4"
		, "offset": 281480
	}, {
		"instruction": "load.i32"
		, "offset": 281484
	}, {
		"instruction": "f32.mul"
		, "offset": 281485
	}, {
		"instruction": "f32.add"
		, "offset": 281486
	}, {
		"instruction": "dup.x1 sp(18)"
		, "offset": 281487
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281489
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281494
	}, {
		"instruction": "mad 12"
		, "offset": 281496
	}, {
		"instruction": "inc 8"
		, "offset": 281500
	}, {
		"instruction": "load.i32"
		, "offset": 281504
	}, {
		"instruction": "f32.mul"
		, "offset": 281505
	}, {
		"instruction": "f32.add"
		, "offset": 281506
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281507
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281509
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 281511
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281513
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 281515
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281517
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281519
	}, {
		"instruction": "f32.sub"
		, "offset": 281521
	}, {
		"instruction": "f32.mul"
		, "offset": 281522
	}, {
		"instruction": "f32.add"
		, "offset": 281523
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281524
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 281526
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 281528
	}, {
		"instruction": "dup.x1 sp(23)"
		, "offset": 281530
	}, {
		"instruction": "i32.add"
		, "offset": 281532
	}, {
		"instruction": "dup.x1 sp(21)"
		, "offset": 281533
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281535
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281540
	}, {
		"instruction": "mad 12"
		, "offset": 281542
	}, {
		"instruction": "load.i32"
		, "offset": 281546
	}, {
		"instruction": "f32.mul"
		, "offset": 281547
	}, {
		"instruction": "dup.x1 sp(19)"
		, "offset": 281548
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281550
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281555
	}, {
		"instruction": "mad 12"
		, "offset": 281557
	}, {
		"instruction": "inc 4"
		, "offset": 281561
	}, {
		"instruction": "load.i32"
		, "offset": 281565
	}, {
		"instruction": "f32.mul"
		, "offset": 281566
	}, {
		"instruction": "f32.add"
		, "offset": 281567
	}, {
		"instruction": "dup.x1 sp(18)"
		, "offset": 281568
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281570
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281575
	}, {
		"instruction": "mad 12"
		, "offset": 281577
	}, {
		"instruction": "inc 8"
		, "offset": 281581
	}, {
		"instruction": "load.i32"
		, "offset": 281585
	}, {
		"instruction": "f32.mul"
		, "offset": 281586
	}, {
		"instruction": "f32.add"
		, "offset": 281587
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281588
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 281590
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 281592
	}, {
		"instruction": "dup.x1 sp(23)"
		, "offset": 281594
	}, {
		"instruction": "i32.add"
		, "offset": 281596
	}, {
		"instruction": "dup.x1 sp(20)"
		, "offset": 281597
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281599
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281604
	}, {
		"instruction": "mad 12"
		, "offset": 281606
	}, {
		"instruction": "load.i32"
		, "offset": 281610
	}, {
		"instruction": "f32.mul"
		, "offset": 281611
	}, {
		"instruction": "dup.x1 sp(19)"
		, "offset": 281612
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281614
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281619
	}, {
		"instruction": "mad 12"
		, "offset": 281621
	}, {
		"instruction": "inc 4"
		, "offset": 281625
	}, {
		"instruction": "load.i32"
		, "offset": 281629
	}, {
		"instruction": "f32.mul"
		, "offset": 281630
	}, {
		"instruction": "f32.add"
		, "offset": 281631
	}, {
		"instruction": "dup.x1 sp(18)"
		, "offset": 281632
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281634
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281639
	}, {
		"instruction": "mad 12"
		, "offset": 281641
	}, {
		"instruction": "inc 8"
		, "offset": 281645
	}, {
		"instruction": "load.i32"
		, "offset": 281649
	}, {
		"instruction": "f32.mul"
		, "offset": 281650
	}, {
		"instruction": "f32.add"
		, "offset": 281651
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281652
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281654
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 281656
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281658
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 281660
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281662
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281664
	}, {
		"instruction": "f32.sub"
		, "offset": 281666
	}, {
		"instruction": "f32.mul"
		, "offset": 281667
	}, {
		"instruction": "f32.add"
		, "offset": 281668
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281669
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 281671
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 281673
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281675
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 281677
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 281679
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281681
	}, {
		"instruction": "f32.sub"
		, "offset": 281683
	}, {
		"instruction": "f32.mul"
		, "offset": 281684
	}, {
		"instruction": "f32.add"
		, "offset": 281685
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281686
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 281688
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 281690
	}, {
		"instruction": "dup.x1 sp(22)"
		, "offset": 281692
	}, {
		"instruction": "i32.add"
		, "offset": 281694
	}, {
		"instruction": "dup.x1 sp(21)"
		, "offset": 281695
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281697
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281702
	}, {
		"instruction": "mad 12"
		, "offset": 281704
	}, {
		"instruction": "load.i32"
		, "offset": 281708
	}, {
		"instruction": "f32.mul"
		, "offset": 281709
	}, {
		"instruction": "dup.x1 sp(20)"
		, "offset": 281710
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281712
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281717
	}, {
		"instruction": "mad 12"
		, "offset": 281719
	}, {
		"instruction": "inc 4"
		, "offset": 281723
	}, {
		"instruction": "load.i32"
		, "offset": 281727
	}, {
		"instruction": "f32.mul"
		, "offset": 281728
	}, {
		"instruction": "f32.add"
		, "offset": 281729
	}, {
		"instruction": "dup.x1 sp(17)"
		, "offset": 281730
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281732
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281737
	}, {
		"instruction": "mad 12"
		, "offset": 281739
	}, {
		"instruction": "inc 8"
		, "offset": 281743
	}, {
		"instruction": "load.i32"
		, "offset": 281747
	}, {
		"instruction": "f32.mul"
		, "offset": 281748
	}, {
		"instruction": "f32.add"
		, "offset": 281749
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281750
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 281752
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 281754
	}, {
		"instruction": "dup.x1 sp(22)"
		, "offset": 281756
	}, {
		"instruction": "i32.add"
		, "offset": 281758
	}, {
		"instruction": "dup.x1 sp(20)"
		, "offset": 281759
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281761
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281766
	}, {
		"instruction": "mad 12"
		, "offset": 281768
	}, {
		"instruction": "load.i32"
		, "offset": 281772
	}, {
		"instruction": "f32.mul"
		, "offset": 281773
	}, {
		"instruction": "dup.x1 sp(20)"
		, "offset": 281774
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281776
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281781
	}, {
		"instruction": "mad 12"
		, "offset": 281783
	}, {
		"instruction": "inc 4"
		, "offset": 281787
	}, {
		"instruction": "load.i32"
		, "offset": 281791
	}, {
		"instruction": "f32.mul"
		, "offset": 281792
	}, {
		"instruction": "f32.add"
		, "offset": 281793
	}, {
		"instruction": "dup.x1 sp(17)"
		, "offset": 281794
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281796
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281801
	}, {
		"instruction": "mad 12"
		, "offset": 281803
	}, {
		"instruction": "inc 8"
		, "offset": 281807
	}, {
		"instruction": "load.i32"
		, "offset": 281811
	}, {
		"instruction": "f32.mul"
		, "offset": 281812
	}, {
		"instruction": "f32.add"
		, "offset": 281813
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281814
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281816
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 281818
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281820
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 281822
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281824
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281826
	}, {
		"instruction": "f32.sub"
		, "offset": 281828
	}, {
		"instruction": "f32.mul"
		, "offset": 281829
	}, {
		"instruction": "f32.add"
		, "offset": 281830
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281831
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 281833
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 281835
	}, {
		"instruction": "dup.x1 sp(22)"
		, "offset": 281837
	}, {
		"instruction": "i32.add"
		, "offset": 281839
	}, {
		"instruction": "dup.x1 sp(21)"
		, "offset": 281840
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281842
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281847
	}, {
		"instruction": "mad 12"
		, "offset": 281849
	}, {
		"instruction": "load.i32"
		, "offset": 281853
	}, {
		"instruction": "f32.mul"
		, "offset": 281854
	}, {
		"instruction": "dup.x1 sp(19)"
		, "offset": 281855
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281857
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281862
	}, {
		"instruction": "mad 12"
		, "offset": 281864
	}, {
		"instruction": "inc 4"
		, "offset": 281868
	}, {
		"instruction": "load.i32"
		, "offset": 281872
	}, {
		"instruction": "f32.mul"
		, "offset": 281873
	}, {
		"instruction": "f32.add"
		, "offset": 281874
	}, {
		"instruction": "dup.x1 sp(17)"
		, "offset": 281875
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281877
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281882
	}, {
		"instruction": "mad 12"
		, "offset": 281884
	}, {
		"instruction": "inc 8"
		, "offset": 281888
	}, {
		"instruction": "load.i32"
		, "offset": 281892
	}, {
		"instruction": "f32.mul"
		, "offset": 281893
	}, {
		"instruction": "f32.add"
		, "offset": 281894
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281895
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 281897
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 281899
	}, {
		"instruction": "dup.x1 sp(22)"
		, "offset": 281901
	}, {
		"instruction": "i32.add"
		, "offset": 281903
	}, {
		"instruction": "dup.x1 sp(20)"
		, "offset": 281904
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281906
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 281911
	}, {
		"instruction": "mad 12"
		, "offset": 281913
	}, {
		"instruction": "load.i32"
		, "offset": 281917
	}, {
		"instruction": "f32.mul"
		, "offset": 281918
	}, {
		"instruction": "dup.x1 sp(19)"
		, "offset": 281919
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281921
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281926
	}, {
		"instruction": "mad 12"
		, "offset": 281928
	}, {
		"instruction": "inc 4"
		, "offset": 281932
	}, {
		"instruction": "load.i32"
		, "offset": 281936
	}, {
		"instruction": "f32.mul"
		, "offset": 281937
	}, {
		"instruction": "f32.add"
		, "offset": 281938
	}, {
		"instruction": "dup.x1 sp(17)"
		, "offset": 281939
	}, {
		"instruction": "load.ref .041390"
		, "offset": 281941
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281946
	}, {
		"instruction": "mad 12"
		, "offset": 281948
	}, {
		"instruction": "inc 8"
		, "offset": 281952
	}, {
		"instruction": "load.i32"
		, "offset": 281956
	}, {
		"instruction": "f32.mul"
		, "offset": 281957
	}, {
		"instruction": "f32.add"
		, "offset": 281958
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281959
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281961
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 281963
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281965
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 281967
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281969
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281971
	}, {
		"instruction": "f32.sub"
		, "offset": 281973
	}, {
		"instruction": "f32.mul"
		, "offset": 281974
	}, {
		"instruction": "f32.add"
		, "offset": 281975
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281976
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 281978
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 281980
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281982
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 281984
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 281986
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281988
	}, {
		"instruction": "f32.sub"
		, "offset": 281990
	}, {
		"instruction": "f32.mul"
		, "offset": 281991
	}, {
		"instruction": "f32.add"
		, "offset": 281992
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 281993
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 281995
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 281997
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 281999
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 282001
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282003
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282005
	}, {
		"instruction": "f32.sub"
		, "offset": 282007
	}, {
		"instruction": "f32.mul"
		, "offset": 282008
	}, {
		"instruction": "f32.add"
		, "offset": 282009
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 282010
	}, {
		"instruction": "set.x1 sp(32)"
		, "offset": 282012
	}, {
		"instruction": "stack -108"
		, "offset": 282014
	}, {
		"instruction": "ret"
		, "offset": 282018
	}]
}, {
	"proto": "Perlin.Noise(x: float32)"
	, "kind": ".def"
	, "name": "Noise"
	, "declaredIn": "Perlin"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 688
	, "args": [{
		"proto": "Perlin.Noise.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Perlin.Noise(x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 688
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Noise1f(x)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 688
		, "args": [{
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 688
			, "value": "x"
		}]
	}
}, {
	"proto": "Perlin.Noise(x: float32, y: float32)"
	, "kind": ".def"
	, "name": "Noise"
	, "declaredIn": "Perlin"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 689
	, "args": [{
		"proto": "Perlin.Noise.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Perlin.Noise(x: float32, y: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 689
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.Noise.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "Perlin.Noise(x: float32, y: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 689
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Noise2f(x, y)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 689
		, "args": [{
			"proto": "y"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 689
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 689
			, "value": "x"
		}]
	}
}, {
	"proto": "Perlin.Noise(x: float32, y: float32, z: float32)"
	, "kind": ".def"
	, "name": "Noise"
	, "declaredIn": "Perlin"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 690
	, "args": [{
		"proto": "Perlin.Noise.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "Perlin.Noise(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 690
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.Noise.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "Perlin.Noise(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 690
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Perlin.Noise.z"
		, "kind": ".def"
		, "name": "z"
		, "declaredIn": "Perlin.Noise(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 690
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Noise3f(x, y, z)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 690
		, "args": [{
			"proto": "z"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 690
			, "value": "z"
		}, {
			"proto": "y"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 690
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 690
			, "value": "x"
		}]
	}
}, {
	"proto": "Date"
	, "kind": ".rec"
	, "name": "Date"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 693
	, "cast": ".rec"
	, "size": 8
	, "offs": 156392
	, "const": true
	, "static": true
}, {
	"proto": "Date.days"
	, "kind": ".ref"
	, "name": "days"
	, "declaredIn": "Date"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 694
	, "cast": ".i64"
	, "size": 8
	, "offs": 0
	, "const": false
	, "static": false
}, {
	"proto": "Date.MillisPerSecond"
	, "kind": ".def"
	, "name": "MillisPerSecond"
	, "declaredIn": "Date"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 704
	, "cast": ".i64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1000"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i64"
		, "file": "stdlib.cvx"
		, "line": 704
		, "value": "1000"
	}
}, {
	"proto": "Date.MillisPerMinute"
	, "kind": ".def"
	, "name": "MillisPerMinute"
	, "declaredIn": "Date"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 705
	, "cast": ".i64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "60000"
		, "kind": ".i64"
		, "type": "int64"
		, "cast": ".i64"
		, "file": "stdlib.cvx"
		, "line": 705
		, "value": "60000"
	}
}, {
	"proto": "Date.MillisPerHour"
	, "kind": ".def"
	, "name": "MillisPerHour"
	, "declaredIn": "Date"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 706
	, "cast": ".i64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "3600000"
		, "kind": ".i64"
		, "type": "int64"
		, "cast": ".i64"
		, "file": "stdlib.cvx"
		, "line": 706
		, "value": "3600000"
	}
}, {
	"proto": "Date.MillisPerDay"
	, "kind": ".def"
	, "name": "MillisPerDay"
	, "declaredIn": "Date"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 707
	, "cast": ".i64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "86400000"
		, "kind": ".i64"
		, "type": "int64"
		, "cast": ".i64"
		, "file": "stdlib.cvx"
		, "line": 707
		, "value": "86400000"
	}
}, {
	"proto": "Date.MillisPerWeek"
	, "kind": ".def"
	, "name": "MillisPerWeek"
	, "declaredIn": "Date"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 708
	, "cast": ".i64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "604800000"
		, "kind": ".i64"
		, "type": "int64"
		, "cast": ".i64"
		, "file": "stdlib.cvx"
		, "line": 708
		, "value": "604800000"
	}
}, {
	"proto": "Date.DaysPerYear"
	, "kind": ".def"
	, "name": "DaysPerYear"
	, "declaredIn": "Date"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 712
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "365"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 712
		, "value": "365"
	}
}, {
	"proto": "Date.DaysPer4Years"
	, "kind": ".def"
	, "name": "DaysPer4Years"
	, "declaredIn": "Date"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 714
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1461"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 714
		, "value": "1461"
	}
}, {
	"proto": "Date.DaysPer100Years"
	, "kind": ".def"
	, "name": "DaysPer100Years"
	, "declaredIn": "Date"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 716
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "36524"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 716
		, "value": "36524"
	}
}, {
	"proto": "Date.DaysPer400Years"
	, "kind": ".def"
	, "name": "DaysPer400Years"
	, "declaredIn": "Date"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 718
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "146097"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 718
		, "value": "146097"
	}
}, {
	"proto": "Date.HoursPerDay"
	, "kind": ".def"
	, "name": "HoursPerDay"
	, "declaredIn": "Date"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 720
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "24"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 720
		, "value": "24"
	}
}, {
	"proto": "Date.MinutesPerDay"
	, "kind": ".def"
	, "name": "MinutesPerDay"
	, "declaredIn": "Date"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 721
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1440"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 721
		, "value": "1440"
	}
}, {
	"proto": "Date.SecondsPerDay"
	, "kind": ".def"
	, "name": "SecondsPerDay"
	, "declaredIn": "Date"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 722
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "86400"
		, "kind": ".i64"
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 722
		, "value": "86400"
	}
}, {
	"proto": "Date.Duration"
	, "kind": ".rec"
	, "name": "Duration"
	, "declaredIn": "Date"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 725
	, "cast": ".rec"
	, "size": 8
	, "offs": 158736
	, "const": true
	, "static": true
}, {
	"proto": "Date.Duration.value"
	, "kind": ".ref"
	, "name": "value"
	, "declaredIn": "Date.Duration"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 726
	, "cast": ".i64"
	, "size": 8
	, "offs": 0
	, "const": false
	, "static": false
}, {
	"proto": "Date.Duration.millis(value: int64)"
	, "kind": ".def"
	, "name": "millis"
	, "declaredIn": "Date.Duration"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 728
	, "args": [{
		"proto": "Date.Duration.millis.value"
		, "kind": ".def"
		, "name": "value"
		, "declaredIn": "Date.Duration.millis(value: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 728
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": false
	, "ast": {
		"proto": "int64(value)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 728
		, "args": [{
			"proto": "value"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 728
			, "value": "value"
		}]
	}
}, {
	"proto": "Date.Duration.seconds(value: int64)"
	, "kind": ".def"
	, "name": "seconds"
	, "declaredIn": "Date.Duration"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 729
	, "args": [{
		"proto": "Date.Duration.seconds.value"
		, "kind": ".def"
		, "name": "value"
		, "declaredIn": "Date.Duration.seconds(value: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 729
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": false
	, "ast": {
		"proto": "int64(value * MillisPerSecond)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 729
		, "args": [{
			"proto": "(value * MillisPerSecond)"
			, "kind": "*"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 729
			, "lval": {
				"proto": "value"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 729
				, "value": "value"
			}
			, "rval": {
				"proto": "MillisPerSecond"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 729
				, "value": "MillisPerSecond"
			}
		}]
	}
}, {
	"proto": "Date.Duration.minutes(value: int64)"
	, "kind": ".def"
	, "name": "minutes"
	, "declaredIn": "Date.Duration"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 730
	, "args": [{
		"proto": "Date.Duration.minutes.value"
		, "kind": ".def"
		, "name": "value"
		, "declaredIn": "Date.Duration.minutes(value: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 730
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": false
	, "ast": {
		"proto": "int64(value * MillisPerMinute)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 730
		, "args": [{
			"proto": "(value * MillisPerMinute)"
			, "kind": "*"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 730
			, "lval": {
				"proto": "value"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 730
				, "value": "value"
			}
			, "rval": {
				"proto": "MillisPerMinute"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 730
				, "value": "MillisPerMinute"
			}
		}]
	}
}, {
	"proto": "Date.Duration.hours(value: int64)"
	, "kind": ".def"
	, "name": "hours"
	, "declaredIn": "Date.Duration"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 731
	, "args": [{
		"proto": "Date.Duration.hours.value"
		, "kind": ".def"
		, "name": "value"
		, "declaredIn": "Date.Duration.hours(value: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 731
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": false
	, "ast": {
		"proto": "int64(value * MillisPerHour)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 731
		, "args": [{
			"proto": "(value * MillisPerHour)"
			, "kind": "*"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 731
			, "lval": {
				"proto": "value"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 731
				, "value": "value"
			}
			, "rval": {
				"proto": "MillisPerHour"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 731
				, "value": "MillisPerHour"
			}
		}]
	}
}, {
	"proto": "Date.Duration.days(value: int64)"
	, "kind": ".def"
	, "name": "days"
	, "declaredIn": "Date.Duration"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 732
	, "args": [{
		"proto": "Date.Duration.days.value"
		, "kind": ".def"
		, "name": "value"
		, "declaredIn": "Date.Duration.days(value: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 732
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": false
	, "ast": {
		"proto": "int64(value * MillisPerDay)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 732
		, "args": [{
			"proto": "(value * MillisPerDay)"
			, "kind": "*"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 732
			, "lval": {
				"proto": "value"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 732
				, "value": "value"
			}
			, "rval": {
				"proto": "MillisPerDay"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 732
				, "value": "MillisPerDay"
			}
		}]
	}
}, {
	"proto": "Date.Duration.weeks(value: int64)"
	, "kind": ".def"
	, "name": "weeks"
	, "declaredIn": "Date.Duration"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 733
	, "args": [{
		"proto": "Date.Duration.weeks.value"
		, "kind": ".def"
		, "name": "value"
		, "declaredIn": "Date.Duration.weeks(value: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 733
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": false
	, "ast": {
		"proto": "int64(value * MillisPerWeek)"
		, "kind": "(?)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 733
		, "args": [{
			"proto": "(value * MillisPerWeek)"
			, "kind": "*"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 733
			, "lval": {
				"proto": "value"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 733
				, "value": "value"
			}
			, "rval": {
				"proto": "MillisPerWeek"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 733
				, "value": "MillisPerWeek"
			}
		}]
	}
}, {
	"proto": "Date.Duration(value: int64)"
	, "kind": ".def"
	, "name": "Duration"
	, "declaredIn": "Date"
	, "type": "Date.Duration"
	, "args": [{
		"proto": "Date.Duration.value"
		, "kind": ".def"
		, "name": "value"
		, "declaredIn": "Date.Duration(value: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": false
	, "ast": {
		"proto": "emit(value)"
		, "kind": "(?)"
		, "type": "Date.Duration"
		, "args": [{
			"proto": "value"
			, "kind": ".ref"
			, "type": "Date.Duration.value"
			, "cast": ".i64"
			, "value": "value"
		}]
	}
}, {
	"proto": "Date.DaysToMonth365"
	, "kind": ".ref"
	, "name": "DaysToMonth365"
	, "declaredIn": "Date"
	, "type": "int32[13]"
	, "file": "stdlib.cvx"
	, "line": 790
	, "size": 52
	, "offs": 282032
	, "const": true
	, "static": true
	, "ast": {
		"proto": "(0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365)"
		, "kind": ","
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 790
		, "lval": {
			"proto": "(0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334)"
			, "kind": ","
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 790
			, "lval": {
				"proto": "(0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304)"
				, "kind": ","
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 790
				, "lval": {
					"proto": "(0, 31, 59, 90, 120, 151, 181, 212, 243, 273)"
					, "kind": ","
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 790
					, "lval": {
						"proto": "(0, 31, 59, 90, 120, 151, 181, 212, 243)"
						, "kind": ","
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 790
						, "lval": {
							"proto": "(0, 31, 59, 90, 120, 151, 181, 212)"
							, "kind": ","
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 790
							, "lval": {
								"proto": "(0, 31, 59, 90, 120, 151, 181)"
								, "kind": ","
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 790
								, "lval": {
									"proto": "(0, 31, 59, 90, 120, 151)"
									, "kind": ","
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 790
									, "lval": {
										"proto": "(0, 31, 59, 90, 120)"
										, "kind": ","
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 790
										, "lval": {
											"proto": "(0, 31, 59, 90)"
											, "kind": ","
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 790
											, "lval": {
												"proto": "(0, 31, 59)"
												, "kind": ","
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 790
												, "lval": {
													"proto": "(0, 31)"
													, "kind": ","
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 790
													, "lval": {
														"proto": "0"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 790
														, "value": "0"
													}
													, "rval": {
														"proto": "31"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 790
														, "value": "31"
													}
												}
												, "rval": {
													"proto": "59"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 790
													, "value": "59"
												}
											}
											, "rval": {
												"proto": "90"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 790
												, "value": "90"
											}
										}
										, "rval": {
											"proto": "120"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 790
											, "value": "120"
										}
									}
									, "rval": {
										"proto": "151"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 790
										, "value": "151"
									}
								}
								, "rval": {
									"proto": "181"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 790
									, "value": "181"
								}
							}
							, "rval": {
								"proto": "212"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 790
								, "value": "212"
							}
						}
						, "rval": {
							"proto": "243"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 790
							, "value": "243"
						}
					}
					, "rval": {
						"proto": "273"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 790
						, "value": "273"
					}
				}
				, "rval": {
					"proto": "304"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 790
					, "value": "304"
				}
			}
			, "rval": {
				"proto": "334"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 790
				, "value": "334"
			}
		}
		, "rval": {
			"proto": "365"
			, "kind": ".i64"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 790
			, "value": "365"
		}
	}
}, {
	"proto": "Date.DaysToMonth366"
	, "kind": ".ref"
	, "name": "DaysToMonth366"
	, "declaredIn": "Date"
	, "type": "int32[13]"
	, "file": "stdlib.cvx"
	, "line": 791
	, "size": 52
	, "offs": 282096
	, "const": true
	, "static": true
	, "ast": {
		"proto": "(0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366)"
		, "kind": ","
		, "type": "int32"
		, "cast": ".i32"
		, "file": "stdlib.cvx"
		, "line": 791
		, "lval": {
			"proto": "(0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335)"
			, "kind": ","
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 791
			, "lval": {
				"proto": "(0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305)"
				, "kind": ","
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 791
				, "lval": {
					"proto": "(0, 31, 60, 91, 121, 152, 182, 213, 244, 274)"
					, "kind": ","
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 791
					, "lval": {
						"proto": "(0, 31, 60, 91, 121, 152, 182, 213, 244)"
						, "kind": ","
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 791
						, "lval": {
							"proto": "(0, 31, 60, 91, 121, 152, 182, 213)"
							, "kind": ","
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 791
							, "lval": {
								"proto": "(0, 31, 60, 91, 121, 152, 182)"
								, "kind": ","
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 791
								, "lval": {
									"proto": "(0, 31, 60, 91, 121, 152)"
									, "kind": ","
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 791
									, "lval": {
										"proto": "(0, 31, 60, 91, 121)"
										, "kind": ","
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 791
										, "lval": {
											"proto": "(0, 31, 60, 91)"
											, "kind": ","
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 791
											, "lval": {
												"proto": "(0, 31, 60)"
												, "kind": ","
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 791
												, "lval": {
													"proto": "(0, 31)"
													, "kind": ","
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 791
													, "lval": {
														"proto": "0"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 791
														, "value": "0"
													}
													, "rval": {
														"proto": "31"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 791
														, "value": "31"
													}
												}
												, "rval": {
													"proto": "60"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 791
													, "value": "60"
												}
											}
											, "rval": {
												"proto": "91"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 791
												, "value": "91"
											}
										}
										, "rval": {
											"proto": "121"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 791
											, "value": "121"
										}
									}
									, "rval": {
										"proto": "152"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 791
										, "value": "152"
									}
								}
								, "rval": {
									"proto": "182"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 791
									, "value": "182"
								}
							}
							, "rval": {
								"proto": "213"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 791
								, "value": "213"
							}
						}
						, "rval": {
							"proto": "244"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 791
							, "value": "244"
						}
					}
					, "rval": {
						"proto": "274"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 791
						, "value": "274"
					}
				}
				, "rval": {
					"proto": "305"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 791
					, "value": "305"
				}
			}
			, "rval": {
				"proto": "335"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 791
				, "value": "335"
			}
		}
		, "rval": {
			"proto": "366"
			, "kind": ".i64"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 791
			, "value": "366"
		}
	}
}, {
	"proto": "Date.IsLeapYear(year: int32)"
	, "kind": ".ref"
	, "name": "IsLeapYear"
	, "declaredIn": "Date"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 793
	, "args": [{
		"proto": "Date.IsLeapYear.year"
		, "kind": ".ref"
		, "name": "year"
		, "declaredIn": "Date.IsLeapYear(year: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 793
		, "cast": ".i32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".bit"
	, "size": 79
	, "offs": 282148
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 793
		, "stmt": [{
			"proto": "if ((year % 4) == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 794
			, "test": {
				"proto": "((year % 4) == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 794
				, "lval": {
					"proto": "(year % 4)"
					, "kind": "%"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 794
					, "lval": {
						"proto": "year"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 794
						, "value": "year"
					}
					, "rval": {
						"proto": "4"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 794
						, "value": "4"
					}
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 794
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 794
				, "stmt": [{
					"proto": "if ((year % 100) != 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 795
					, "test": {
						"proto": "((year % 100) != 0)"
						, "kind": "!="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 795
						, "lval": {
							"proto": "(year % 100)"
							, "kind": "%"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 795
							, "lval": {
								"proto": "year"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 795
								, "value": "year"
							}
							, "rval": {
								"proto": "100"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 795
								, "value": "100"
							}
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 795
							, "value": "0"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 795
						, "stmt": [{
							"proto": "return;"
							, "kind": "return"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 796
							, "stmt": {
								"proto": "(result := true)"
								, "kind": ":="
								, "type": "bool"
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "bool"
									, "cast": ".bit"
									, "value": "result"
								}
								, "rval": {
									"proto": "true"
									, "kind": ".ref"
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 796
									, "value": "true"
								}
							}
						}]
					}
				}, {
					"proto": "if ((year % 400) == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 798
					, "test": {
						"proto": "((year % 400) == 0)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 798
						, "lval": {
							"proto": "(year % 400)"
							, "kind": "%"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 798
							, "lval": {
								"proto": "year"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 798
								, "value": "year"
							}
							, "rval": {
								"proto": "400"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 798
								, "value": "400"
							}
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 798
							, "value": "0"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 798
						, "stmt": [{
							"proto": "return;"
							, "kind": "return"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 799
							, "stmt": {
								"proto": "(result := true)"
								, "kind": ":="
								, "type": "bool"
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "bool"
									, "cast": ".bit"
									, "value": "result"
								}
								, "rval": {
									"proto": "true"
									, "kind": ".ref"
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 799
									, "value": "true"
								}
							}
						}]
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 802
			, "stmt": {
				"proto": "(result := false)"
				, "kind": ":="
				, "type": "bool"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "bool"
					, "cast": ".bit"
					, "value": "result"
				}
				, "rval": {
					"proto": "false"
					, "kind": ".ref"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 802
					, "value": "false"
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 282148
	}, {
		"instruction": "load.c32 4"
		, "offset": 282150
	}, {
		"instruction": "i32.mod"
		, "offset": 282155
	}, {
		"instruction": "load.c32 0"
		, "offset": 282156
	}, {
		"instruction": "i32.ceq"
		, "offset": 282161
	}, {
		"instruction": "jz +56"
		, "offset": 282162
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282166
	}, {
		"instruction": "load.c32 100"
		, "offset": 282168
	}, {
		"instruction": "i32.mod"
		, "offset": 282173
	}, {
		"instruction": "load.c32 0"
		, "offset": 282174
	}, {
		"instruction": "i32.ceq"
		, "offset": 282179
	}, {
		"instruction": "jnz +12"
		, "offset": 282180
	}, {
		"instruction": "load.c32 1"
		, "offset": 282184
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282189
	}, {
		"instruction": "ret"
		, "offset": 282191
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282192
	}, {
		"instruction": "load.c32 400"
		, "offset": 282194
	}, {
		"instruction": "i32.mod"
		, "offset": 282199
	}, {
		"instruction": "load.c32 0"
		, "offset": 282200
	}, {
		"instruction": "i32.ceq"
		, "offset": 282205
	}, {
		"instruction": "jz +12"
		, "offset": 282206
	}, {
		"instruction": "load.c32 1"
		, "offset": 282210
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282215
	}, {
		"instruction": "ret"
		, "offset": 282217
	}, {
		"instruction": "load.c32 0"
		, "offset": 282218
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282223
	}, {
		"instruction": "ret"
		, "offset": 282225
	}, {
		"instruction": "ret"
		, "offset": 282226
	}]
}, {
	"proto": "Date.ToDays(year: int32, month: int32, day: int32)"
	, "kind": ".ref"
	, "name": "ToDays"
	, "declaredIn": "Date"
	, "type": "int64"
	, "file": "stdlib.cvx"
	, "line": 805
	, "args": [{
		"proto": "Date.ToDays.year"
		, "kind": ".ref"
		, "name": "year"
		, "declaredIn": "Date.ToDays(year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 805
		, "cast": ".i32"
		, "size": 4
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "Date.ToDays.month"
		, "kind": ".ref"
		, "name": "month"
		, "declaredIn": "Date.ToDays(year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 805
		, "cast": ".i32"
		, "size": 4
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "Date.ToDays.day"
		, "kind": ".ref"
		, "name": "day"
		, "declaredIn": "Date.ToDays(year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 805
		, "cast": ".i32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}]
	, "cast": ".i64"
	, "size": 241
	, "offs": 282227
	, "const": true
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 805
		, "stmt": [{
			"proto": "result := (-1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 806
			, "stmt": {
				"proto": "(result := (-1))"
				, "kind": ":="
				, "type": "int64"
				, "file": "stdlib.cvx"
				, "line": 806
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int64"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 806
					, "value": "result"
				}
				, "rval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 806
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 806
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "if ((year > 0) && (year <= 9999))"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 807
			, "test": {
				"proto": "((year > 0) && (year <= 9999))"
				, "kind": "&&"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 807
				, "lval": {
					"proto": "(year > 0)"
					, "kind": ">"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 807
					, "lval": {
						"proto": "year"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 807
						, "value": "year"
					}
					, "rval": {
						"proto": "0"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 807
						, "value": "0"
					}
				}
				, "rval": {
					"proto": "(year <= 9999)"
					, "kind": "<="
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 807
					, "lval": {
						"proto": "year"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 807
						, "value": "year"
					}
					, "rval": {
						"proto": "9999"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 807
						, "value": "9999"
					}
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 807
				, "stmt": [{
					"proto": "if ((month > 0) && (month <= 12))"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 808
					, "test": {
						"proto": "((month > 0) && (month <= 12))"
						, "kind": "&&"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 808
						, "lval": {
							"proto": "(month > 0)"
							, "kind": ">"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 808
							, "lval": {
								"proto": "month"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 808
								, "value": "month"
							}
							, "rval": {
								"proto": "0"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 808
								, "value": "0"
							}
						}
						, "rval": {
							"proto": "(month <= 12)"
							, "kind": "<="
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 808
							, "lval": {
								"proto": "month"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 808
								, "value": "month"
							}
							, "rval": {
								"proto": "12"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 808
								, "value": "12"
							}
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 808
						, "stmt": [{
							"proto": "daysInYear"
							, "kind": ".def"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 809
							, "value": "daysInYear"
						}, {
							"proto": "daysInMonth"
							, "kind": ".def"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 810
							, "value": "daysInMonth"
						}, {
							"proto": "if (IsLeapYear(year))"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 811
							, "test": {
								"proto": "IsLeapYear(year)"
								, "kind": "(?)"
								, "type": "bool"
								, "file": "stdlib.cvx"
								, "line": 811
								, "args": [{
									"proto": "year"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 811
									, "value": "year"
								}]
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 811
								, "stmt": [{
									"proto": "daysInYear := DaysToMonth366[month - 1];"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 812
									, "stmt": {
										"proto": "(daysInYear := DaysToMonth366[month - 1])"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 812
										, "lval": {
											"proto": "daysInYear"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 812
											, "value": "daysInYear"
										}
										, "rval": {
											"proto": "DaysToMonth366[month - 1]"
											, "kind": "[?]"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 812
											, "lval": {
												"proto": "DaysToMonth366"
												, "kind": ".ref"
												, "type": "int32[13]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 812
												, "value": "DaysToMonth366"
											}
											, "rval": {
												"proto": "(month - 1)"
												, "kind": "-"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 812
												, "lval": {
													"proto": "month"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 812
													, "value": "month"
												}
												, "rval": {
													"proto": "1"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 812
													, "value": "1"
												}
											}
										}
									}
								}, {
									"proto": "daysInMonth := (DaysToMonth366[month] - daysInMonth);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 813
									, "stmt": {
										"proto": "(daysInMonth := (DaysToMonth366[month] - daysInMonth))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 813
										, "lval": {
											"proto": "daysInMonth"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 813
											, "value": "daysInMonth"
										}
										, "rval": {
											"proto": "(DaysToMonth366[month] - daysInMonth)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 813
											, "lval": {
												"proto": "DaysToMonth366[month]"
												, "kind": "[?]"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 813
												, "lval": {
													"proto": "DaysToMonth366"
													, "kind": ".ref"
													, "type": "int32[13]"
													, "cast": ".ref"
													, "file": "stdlib.cvx"
													, "line": 813
													, "value": "DaysToMonth366"
												}
												, "rval": {
													"proto": "month"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i64"
													, "file": "stdlib.cvx"
													, "line": 813
													, "value": "month"
												}
											}
											, "rval": {
												"proto": "daysInMonth"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 813
												, "value": "daysInMonth"
											}
										}
									}
								}]
							}
							, "else": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 815
								, "stmt": [{
									"proto": "daysInYear := DaysToMonth365[month - 1];"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 816
									, "stmt": {
										"proto": "(daysInYear := DaysToMonth365[month - 1])"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 816
										, "lval": {
											"proto": "daysInYear"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 816
											, "value": "daysInYear"
										}
										, "rval": {
											"proto": "DaysToMonth365[month - 1]"
											, "kind": "[?]"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 816
											, "lval": {
												"proto": "DaysToMonth365"
												, "kind": ".ref"
												, "type": "int32[13]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 816
												, "value": "DaysToMonth365"
											}
											, "rval": {
												"proto": "(month - 1)"
												, "kind": "-"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 816
												, "lval": {
													"proto": "month"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 816
													, "value": "month"
												}
												, "rval": {
													"proto": "1"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 816
													, "value": "1"
												}
											}
										}
									}
								}, {
									"proto": "daysInMonth := (DaysToMonth365[month] - daysInMonth);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 817
									, "stmt": {
										"proto": "(daysInMonth := (DaysToMonth365[month] - daysInMonth))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 817
										, "lval": {
											"proto": "daysInMonth"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 817
											, "value": "daysInMonth"
										}
										, "rval": {
											"proto": "(DaysToMonth365[month] - daysInMonth)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 817
											, "lval": {
												"proto": "DaysToMonth365[month]"
												, "kind": "[?]"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 817
												, "lval": {
													"proto": "DaysToMonth365"
													, "kind": ".ref"
													, "type": "int32[13]"
													, "cast": ".ref"
													, "file": "stdlib.cvx"
													, "line": 817
													, "value": "DaysToMonth365"
												}
												, "rval": {
													"proto": "month"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i64"
													, "file": "stdlib.cvx"
													, "line": 817
													, "value": "month"
												}
											}
											, "rval": {
												"proto": "daysInMonth"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 817
												, "value": "daysInMonth"
											}
										}
									}
								}]
							}
						}, {
							"proto": "if ((day > 0) && (day <= daysInMonth))"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 820
							, "test": {
								"proto": "((day > 0) && (day <= daysInMonth))"
								, "kind": "&&"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 820
								, "lval": {
									"proto": "(day > 0)"
									, "kind": ">"
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 820
									, "lval": {
										"proto": "day"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 820
										, "value": "day"
									}
									, "rval": {
										"proto": "0"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 820
										, "value": "0"
									}
								}
								, "rval": {
									"proto": "(day <= daysInMonth)"
									, "kind": "<="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 820
									, "lval": {
										"proto": "day"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 820
										, "value": "day"
									}
									, "rval": {
										"proto": "daysInMonth"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 820
										, "value": "daysInMonth"
									}
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 820
								, "stmt": [{
									"proto": "y"
									, "kind": ".def"
									, "type": "int32"
									, "file": "stdlib.cvx"
									, "line": 821
									, "value": "y"
								}, {
									"proto": "result := ((y * 365) + (y / 4) - (y / 100) + (y / 400) + daysInYear + day - 1);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 822
									, "stmt": {
										"proto": "(result := ((y * 365) + (y / 4) - (y / 100) + (y / 400) + daysInYear + day - 1))"
										, "kind": ":="
										, "type": "int64"
										, "file": "stdlib.cvx"
										, "line": 822
										, "lval": {
											"proto": "result"
											, "kind": ".ref"
											, "type": "int64"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 822
											, "value": "result"
										}
										, "rval": {
											"proto": "((y * 365) + (y / 4) - (y / 100) + (y / 400) + daysInYear + day - 1)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 822
											, "lval": {
												"proto": "((y * 365) + (y / 4) - (y / 100) + (y / 400) + daysInYear + day)"
												, "kind": "+"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 822
												, "lval": {
													"proto": "((y * 365) + (y / 4) - (y / 100) + (y / 400) + daysInYear)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 822
													, "lval": {
														"proto": "((y * 365) + (y / 4) - (y / 100) + (y / 400))"
														, "kind": "+"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 822
														, "lval": {
															"proto": "((y * 365) + (y / 4) - (y / 100))"
															, "kind": "-"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 822
															, "lval": {
																"proto": "((y * 365) + (y / 4))"
																, "kind": "+"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 822
																, "lval": {
																	"proto": "(y * 365)"
																	, "kind": "*"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 822
																	, "lval": {
																		"proto": "y"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 822
																		, "value": "y"
																	}
																	, "rval": {
																		"proto": "365"
																		, "kind": ".i64"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 822
																		, "value": "365"
																	}
																}
																, "rval": {
																	"proto": "(y / 4)"
																	, "kind": "/"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 822
																	, "lval": {
																		"proto": "y"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 822
																		, "value": "y"
																	}
																	, "rval": {
																		"proto": "4"
																		, "kind": ".i64"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 822
																		, "value": "4"
																	}
																}
															}
															, "rval": {
																"proto": "(y / 100)"
																, "kind": "/"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 822
																, "lval": {
																	"proto": "y"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 822
																	, "value": "y"
																}
																, "rval": {
																	"proto": "100"
																	, "kind": ".i64"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 822
																	, "value": "100"
																}
															}
														}
														, "rval": {
															"proto": "(y / 400)"
															, "kind": "/"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 822
															, "lval": {
																"proto": "y"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 822
																, "value": "y"
															}
															, "rval": {
																"proto": "400"
																, "kind": ".i64"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 822
																, "value": "400"
															}
														}
													}
													, "rval": {
														"proto": "daysInYear"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 822
														, "value": "daysInYear"
													}
												}
												, "rval": {
													"proto": "day"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 822
													, "value": "day"
												}
											}
											, "rval": {
												"proto": "1"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 822
												, "value": "1"
											}
										}
									}
								}]
							}
						}]
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.c64 -1"
		, "offset": 282227
	}, {
		"instruction": "set.x2 sp(6)"
		, "offset": 282236
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282238
	}, {
		"instruction": "load.c32 0"
		, "offset": 282240
	}, {
		"instruction": "i32.cgt"
		, "offset": 282245
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282246
	}, {
		"instruction": "load.c32 9999"
		, "offset": 282248
	}, {
		"instruction": "i32.cgt"
		, "offset": 282253
	}, {
		"instruction": "b32.not"
		, "offset": 282254
	}, {
		"instruction": "b32.and"
		, "offset": 282255
	}, {
		"instruction": "jz +211"
		, "offset": 282256
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282260
	}, {
		"instruction": "load.c32 0"
		, "offset": 282262
	}, {
		"instruction": "i32.cgt"
		, "offset": 282267
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282268
	}, {
		"instruction": "load.c32 12"
		, "offset": 282270
	}, {
		"instruction": "i32.cgt"
		, "offset": 282275
	}, {
		"instruction": "b32.not"
		, "offset": 282276
	}, {
		"instruction": "b32.and"
		, "offset": 282277
	}, {
		"instruction": "jz +189"
		, "offset": 282278
	}, {
		"instruction": "load.c32 0"
		, "offset": 282282
	}, {
		"instruction": "load.c32 0"
		, "offset": 282287
	}, {
		"instruction": "stack 4"
		, "offset": 282292
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 282296
	}, {
		"instruction": "load.ref .044e24"
		, "offset": 282298
	}, {
		"instruction": "call"
		, "offset": 282303
	}, {
		"instruction": "stack -4"
		, "offset": 282304
	}, {
		"instruction": "jz +43"
		, "offset": 282308
	}, {
		"instruction": "load.ref .044df0"
		, "offset": 282312
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282317
	}, {
		"instruction": "inc -1"
		, "offset": 282319
	}, {
		"instruction": "mad 4"
		, "offset": 282323
	}, {
		"instruction": "load.i32"
		, "offset": 282327
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 282328
	}, {
		"instruction": "load.ref .044df0"
		, "offset": 282330
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282335
	}, {
		"instruction": "mad 4"
		, "offset": 282337
	}, {
		"instruction": "load.i32"
		, "offset": 282341
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282342
	}, {
		"instruction": "i32.sub"
		, "offset": 282344
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 282345
	}, {
		"instruction": "jmp +39"
		, "offset": 282347
	}, {
		"instruction": "load.ref .044db0"
		, "offset": 282351
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282356
	}, {
		"instruction": "inc -1"
		, "offset": 282358
	}, {
		"instruction": "mad 4"
		, "offset": 282362
	}, {
		"instruction": "load.i32"
		, "offset": 282366
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 282367
	}, {
		"instruction": "load.ref .044db0"
		, "offset": 282369
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282374
	}, {
		"instruction": "mad 4"
		, "offset": 282376
	}, {
		"instruction": "load.i32"
		, "offset": 282380
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282381
	}, {
		"instruction": "i32.sub"
		, "offset": 282383
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 282384
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282386
	}, {
		"instruction": "load.c32 0"
		, "offset": 282388
	}, {
		"instruction": "i32.cgt"
		, "offset": 282393
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 282394
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282396
	}, {
		"instruction": "i32.cgt"
		, "offset": 282398
	}, {
		"instruction": "b32.not"
		, "offset": 282399
	}, {
		"instruction": "b32.and"
		, "offset": 282400
	}, {
		"instruction": "jz +62"
		, "offset": 282401
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282405
	}, {
		"instruction": "inc -1"
		, "offset": 282407
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 282411
	}, {
		"instruction": "load.c32 365"
		, "offset": 282413
	}, {
		"instruction": "i32.mul"
		, "offset": 282418
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282419
	}, {
		"instruction": "load.c32 4"
		, "offset": 282421
	}, {
		"instruction": "i32.div"
		, "offset": 282426
	}, {
		"instruction": "i32.add"
		, "offset": 282427
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282428
	}, {
		"instruction": "load.c32 100"
		, "offset": 282430
	}, {
		"instruction": "i32.div"
		, "offset": 282435
	}, {
		"instruction": "i32.sub"
		, "offset": 282436
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282437
	}, {
		"instruction": "load.c32 400"
		, "offset": 282439
	}, {
		"instruction": "i32.div"
		, "offset": 282444
	}, {
		"instruction": "i32.add"
		, "offset": 282445
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282446
	}, {
		"instruction": "i32.add"
		, "offset": 282448
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 282449
	}, {
		"instruction": "i32.add"
		, "offset": 282451
	}, {
		"instruction": "inc -1"
		, "offset": 282452
	}, {
		"instruction": "i32.2i64"
		, "offset": 282456
	}, {
		"instruction": "set.x2 sp(9)"
		, "offset": 282457
	}, {
		"instruction": "stack -4"
		, "offset": 282459
	}, {
		"instruction": "stack -8"
		, "offset": 282463
	}, {
		"instruction": "ret"
		, "offset": 282467
	}]
}, {
	"proto": "Date.Parts"
	, "kind": ".rec"
	, "name": "Parts"
	, "declaredIn": "Date"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 828
	, "cast": ".rec"
	, "size": 20
	, "offs": 164512
	, "const": true
	, "static": true
}, {
	"proto": "Date.Parts.year"
	, "kind": ".ref"
	, "name": "year"
	, "declaredIn": "Date.Parts"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 829
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts.month"
	, "kind": ".ref"
	, "name": "month"
	, "declaredIn": "Date.Parts"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 830
	, "cast": ".i32"
	, "size": 4
	, "offs": 4
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts.dayOfYear"
	, "kind": ".ref"
	, "name": "dayOfYear"
	, "declaredIn": "Date.Parts"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 831
	, "cast": ".i32"
	, "size": 4
	, "offs": 8
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts.dayOfMonth"
	, "kind": ".ref"
	, "name": "dayOfMonth"
	, "declaredIn": "Date.Parts"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 832
	, "cast": ".i32"
	, "size": 4
	, "offs": 12
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts.dayOfWeek"
	, "kind": ".ref"
	, "name": "dayOfWeek"
	, "declaredIn": "Date.Parts"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 833
	, "cast": ".i32"
	, "size": 4
	, "offs": 16
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
	, "kind": ".def"
	, "name": "Parts"
	, "declaredIn": "Date"
	, "type": "Date.Parts"
	, "args": [{
		"proto": "Date.Parts.year"
		, "kind": ".def"
		, "name": "year"
		, "declaredIn": "Date.Parts(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.Parts.month"
		, "kind": ".def"
		, "name": "month"
		, "declaredIn": "Date.Parts(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.Parts.dayOfYear"
		, "kind": ".def"
		, "name": "dayOfYear"
		, "declaredIn": "Date.Parts(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.Parts.dayOfMonth"
		, "kind": ".def"
		, "name": "dayOfMonth"
		, "declaredIn": "Date.Parts(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.Parts.dayOfWeek"
		, "kind": ".def"
		, "name": "dayOfWeek"
		, "declaredIn": "Date.Parts(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": false
	, "ast": {
		"proto": "emit(year, month, dayOfYear, dayOfMonth, dayOfWeek)"
		, "kind": "(?)"
		, "type": "Date.Parts"
		, "args": [{
			"proto": "dayOfWeek"
			, "kind": ".ref"
			, "type": "Date.Parts.dayOfWeek"
			, "cast": ".i32"
			, "value": "dayOfWeek"
		}, {
			"proto": "dayOfMonth"
			, "kind": ".ref"
			, "type": "Date.Parts.dayOfMonth"
			, "cast": ".i32"
			, "value": "dayOfMonth"
		}, {
			"proto": "dayOfYear"
			, "kind": ".ref"
			, "type": "Date.Parts.dayOfYear"
			, "cast": ".i32"
			, "value": "dayOfYear"
		}, {
			"proto": "month"
			, "kind": ".ref"
			, "type": "Date.Parts.month"
			, "cast": ".i32"
			, "value": "month"
		}, {
			"proto": "year"
			, "kind": ".ref"
			, "type": "Date.Parts.year"
			, "cast": ".i32"
			, "value": "year"
		}]
	}
}, {
	"proto": "Date.Parts2"
	, "kind": ".rec"
	, "name": "Parts2"
	, "declaredIn": "Date"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 837
	, "cast": ".rec"
	, "size": 20
	, "offs": 166392
	, "const": true
	, "static": true
}, {
	"proto": "Date.Parts2.year"
	, "kind": ".ref"
	, "name": "year"
	, "declaredIn": "Date.Parts2"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 838
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts2.month"
	, "kind": ".ref"
	, "name": "month"
	, "declaredIn": "Date.Parts2"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 839
	, "cast": ".i32"
	, "size": 4
	, "offs": 4
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts2.dayOfYear"
	, "kind": ".ref"
	, "name": "dayOfYear"
	, "declaredIn": "Date.Parts2"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 840
	, "cast": ".i32"
	, "size": 4
	, "offs": 8
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts2.dayOfMonth"
	, "kind": ".ref"
	, "name": "dayOfMonth"
	, "declaredIn": "Date.Parts2"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 841
	, "cast": ".i32"
	, "size": 4
	, "offs": 12
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts2.dayOfWeek"
	, "kind": ".ref"
	, "name": "dayOfWeek"
	, "declaredIn": "Date.Parts2"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 842
	, "cast": ".i32"
	, "size": 4
	, "offs": 16
	, "const": false
	, "static": false
}, {
	"proto": "Date.Parts2(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
	, "kind": ".def"
	, "name": "Parts2"
	, "declaredIn": "Date"
	, "type": "Date.Parts2"
	, "args": [{
		"proto": "Date.Parts2.year"
		, "kind": ".def"
		, "name": "year"
		, "declaredIn": "Date.Parts2(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.Parts2.month"
		, "kind": ".def"
		, "name": "month"
		, "declaredIn": "Date.Parts2(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.Parts2.dayOfYear"
		, "kind": ".def"
		, "name": "dayOfYear"
		, "declaredIn": "Date.Parts2(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.Parts2.dayOfMonth"
		, "kind": ".def"
		, "name": "dayOfMonth"
		, "declaredIn": "Date.Parts2(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.Parts2.dayOfWeek"
		, "kind": ".def"
		, "name": "dayOfWeek"
		, "declaredIn": "Date.Parts2(year: int32, month: int32, dayOfYear: int32, dayOfMonth: int32, dayOfWeek: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": false
	, "ast": {
		"proto": "emit(year, month, dayOfYear, dayOfMonth, dayOfWeek)"
		, "kind": "(?)"
		, "type": "Date.Parts2"
		, "args": [{
			"proto": "dayOfWeek"
			, "kind": ".ref"
			, "type": "Date.Parts2.dayOfWeek"
			, "cast": ".i32"
			, "value": "dayOfWeek"
		}, {
			"proto": "dayOfMonth"
			, "kind": ".ref"
			, "type": "Date.Parts2.dayOfMonth"
			, "cast": ".i32"
			, "value": "dayOfMonth"
		}, {
			"proto": "dayOfYear"
			, "kind": ".ref"
			, "type": "Date.Parts2.dayOfYear"
			, "cast": ".i32"
			, "value": "dayOfYear"
		}, {
			"proto": "month"
			, "kind": ".ref"
			, "type": "Date.Parts2.month"
			, "cast": ".i32"
			, "value": "month"
		}, {
			"proto": "year"
			, "kind": ".ref"
			, "type": "Date.Parts2.year"
			, "cast": ".i32"
			, "value": "year"
		}]
	}
}, {
	"proto": "Date.ToParts(n: int32)"
	, "kind": ".ref"
	, "name": "ToParts"
	, "declaredIn": "Date"
	, "type": "Date.Parts"
	, "file": "stdlib.cvx"
	, "line": 880
	, "args": [{
		"proto": "Date.ToParts.n"
		, "kind": ".ref"
		, "name": "n"
		, "declaredIn": "Date.ToParts(n: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 880
		, "cast": ".i32"
		, "size": 4
		, "offs": 24
		, "const": false
		, "static": false
	}]
	, "cast": ".rec"
	, "size": 337
	, "offs": 282468
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 880
		, "stmt": [{
			"proto": "result.dayOfWeek := ((n % 7) + 1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 882
			, "stmt": {
				"proto": "(result.dayOfWeek := ((n % 7) + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 882
				, "lval": {
					"proto": "result.dayOfWeek"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 882
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "Date.Parts"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 882
						, "value": "result"
					}
					, "rval": {
						"proto": "dayOfWeek"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 882
						, "value": "dayOfWeek"
					}
				}
				, "rval": {
					"proto": "((n % 7) + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 882
					, "lval": {
						"proto": "(n % 7)"
						, "kind": "%"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 882
						, "lval": {
							"proto": "n"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 882
							, "value": "n"
						}
						, "rval": {
							"proto": "7"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 882
							, "value": "7"
						}
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 882
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "y400"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 885
			, "value": "y400"
		}, {
			"proto": "n := (n - (y400 * DaysPer400Years));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 887
			, "stmt": {
				"proto": "(n := (n - (y400 * DaysPer400Years)))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 887
				, "lval": {
					"proto": "n"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 887
					, "value": "n"
				}
				, "rval": {
					"proto": "(n - (y400 * DaysPer400Years))"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 887
					, "lval": {
						"proto": "n"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 887
						, "value": "n"
					}
					, "rval": {
						"proto": "(y400 * DaysPer400Years)"
						, "kind": "*"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 887
						, "lval": {
							"proto": "y400"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 887
							, "value": "y400"
						}
						, "rval": {
							"proto": "DaysPer400Years"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 887
							, "value": "DaysPer400Years"
						}
					}
				}
			}
		}, {
			"proto": "y100"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 890
			, "value": "y100"
		}, {
			"proto": "if (y100 == 4)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 893
			, "test": {
				"proto": "(y100 == 4)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 893
				, "lval": {
					"proto": "y100"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 893
					, "value": "y100"
				}
				, "rval": {
					"proto": "4"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 893
					, "value": "4"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 893
				, "stmt": [{
					"proto": "y100 := 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 894
					, "stmt": {
						"proto": "(y100 := 3)"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 894
						, "lval": {
							"proto": "y100"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 894
							, "value": "y100"
						}
						, "rval": {
							"proto": "3"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 894
							, "value": "3"
						}
					}
				}]
			}
		}, {
			"proto": "n := (n - (y100 * DaysPer100Years));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 897
			, "stmt": {
				"proto": "(n := (n - (y100 * DaysPer100Years)))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 897
				, "lval": {
					"proto": "n"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 897
					, "value": "n"
				}
				, "rval": {
					"proto": "(n - (y100 * DaysPer100Years))"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 897
					, "lval": {
						"proto": "n"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 897
						, "value": "n"
					}
					, "rval": {
						"proto": "(y100 * DaysPer100Years)"
						, "kind": "*"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 897
						, "lval": {
							"proto": "y100"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 897
							, "value": "y100"
						}
						, "rval": {
							"proto": "DaysPer100Years"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 897
							, "value": "DaysPer100Years"
						}
					}
				}
			}
		}, {
			"proto": "y4"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 900
			, "value": "y4"
		}, {
			"proto": "n := (n - (y4 * DaysPer4Years));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 902
			, "stmt": {
				"proto": "(n := (n - (y4 * DaysPer4Years)))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 902
				, "lval": {
					"proto": "n"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 902
					, "value": "n"
				}
				, "rval": {
					"proto": "(n - (y4 * DaysPer4Years))"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 902
					, "lval": {
						"proto": "n"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 902
						, "value": "n"
					}
					, "rval": {
						"proto": "(y4 * DaysPer4Years)"
						, "kind": "*"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 902
						, "lval": {
							"proto": "y4"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 902
							, "value": "y4"
						}
						, "rval": {
							"proto": "DaysPer4Years"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 902
							, "value": "DaysPer4Years"
						}
					}
				}
			}
		}, {
			"proto": "y1"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 905
			, "value": "y1"
		}, {
			"proto": "if (y1 == 4)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 907
			, "test": {
				"proto": "(y1 == 4)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 907
				, "lval": {
					"proto": "y1"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 907
					, "value": "y1"
				}
				, "rval": {
					"proto": "4"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 907
					, "value": "4"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 907
				, "stmt": [{
					"proto": "y1 := 3;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 908
					, "stmt": {
						"proto": "(y1 := 3)"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 908
						, "lval": {
							"proto": "y1"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 908
							, "value": "y1"
						}
						, "rval": {
							"proto": "3"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 908
							, "value": "3"
						}
					}
				}]
			}
		}, {
			"proto": "result.year := ((y400 * 400) + (y100 * 100) + (y4 * 4) + y1 + 1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 912
			, "stmt": {
				"proto": "(result.year := ((y400 * 400) + (y100 * 100) + (y4 * 4) + y1 + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 912
				, "lval": {
					"proto": "result.year"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 912
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "Date.Parts"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 912
						, "value": "result"
					}
					, "rval": {
						"proto": "year"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 912
						, "value": "year"
					}
				}
				, "rval": {
					"proto": "((y400 * 400) + (y100 * 100) + (y4 * 4) + y1 + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 912
					, "lval": {
						"proto": "((y400 * 400) + (y100 * 100) + (y4 * 4) + y1)"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 912
						, "lval": {
							"proto": "((y400 * 400) + (y100 * 100) + (y4 * 4))"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 912
							, "lval": {
								"proto": "((y400 * 400) + (y100 * 100))"
								, "kind": "+"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 912
								, "lval": {
									"proto": "(y400 * 400)"
									, "kind": "*"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 912
									, "lval": {
										"proto": "y400"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 912
										, "value": "y400"
									}
									, "rval": {
										"proto": "400"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 912
										, "value": "400"
									}
								}
								, "rval": {
									"proto": "(y100 * 100)"
									, "kind": "*"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 912
									, "lval": {
										"proto": "y100"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 912
										, "value": "y100"
									}
									, "rval": {
										"proto": "100"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 912
										, "value": "100"
									}
								}
							}
							, "rval": {
								"proto": "(y4 * 4)"
								, "kind": "*"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 912
								, "lval": {
									"proto": "y4"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 912
									, "value": "y4"
								}
								, "rval": {
									"proto": "4"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 912
									, "value": "4"
								}
							}
						}
						, "rval": {
							"proto": "y1"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 912
							, "value": "y1"
						}
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 912
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "n := (n - (y1 * DaysPerYear));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 915
			, "stmt": {
				"proto": "(n := (n - (y1 * DaysPerYear)))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 915
				, "lval": {
					"proto": "n"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 915
					, "value": "n"
				}
				, "rval": {
					"proto": "(n - (y1 * DaysPerYear))"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 915
					, "lval": {
						"proto": "n"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 915
						, "value": "n"
					}
					, "rval": {
						"proto": "(y1 * DaysPerYear)"
						, "kind": "*"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 915
						, "lval": {
							"proto": "y1"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 915
							, "value": "y1"
						}
						, "rval": {
							"proto": "DaysPerYear"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 915
							, "value": "DaysPerYear"
						}
					}
				}
			}
		}, {
			"proto": "result.dayOfYear := (n + 1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 916
			, "stmt": {
				"proto": "(result.dayOfYear := (n + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 916
				, "lval": {
					"proto": "result.dayOfYear"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 916
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "Date.Parts"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 916
						, "value": "result"
					}
					, "rval": {
						"proto": "dayOfYear"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 916
						, "value": "dayOfYear"
					}
				}
				, "rval": {
					"proto": "(n + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 916
					, "lval": {
						"proto": "n"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 916
						, "value": "n"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 916
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "m"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 920
			, "value": "m"
		}, {
			"proto": "if (IsLeapYear(result.year))"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 922
			, "test": {
				"proto": "IsLeapYear(result.year)"
				, "kind": "(?)"
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 922
				, "args": [{
					"proto": "result.year"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 922
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "Date.Parts"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 922
						, "value": "result"
					}
					, "rval": {
						"proto": "year"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 922
						, "value": "year"
					}
				}]
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 922
				, "stmt": [{
					"proto": "for ( ; n >= DaysToMonth366[m]; )"
					, "kind": "for"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 924
					, "test": {
						"proto": "(n >= DaysToMonth366[m])"
						, "kind": ">="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 924
						, "lval": {
							"proto": "n"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 924
							, "value": "n"
						}
						, "rval": {
							"proto": "DaysToMonth366[m]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 924
							, "lval": {
								"proto": "DaysToMonth366"
								, "kind": ".ref"
								, "type": "int32[13]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 924
								, "value": "DaysToMonth366"
							}
							, "rval": {
								"proto": "m"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 924
								, "value": "m"
							}
						}
					}
					, "stmt": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 924
						, "stmt": [{
							"proto": "m := (m + 1);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 925
							, "stmt": {
								"proto": "(m := (m + 1))"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 925
								, "lval": {
									"proto": "m"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 925
									, "value": "m"
								}
								, "rval": {
									"proto": "(m + 1)"
									, "kind": "+"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 925
									, "lval": {
										"proto": "m"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 925
										, "value": "m"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 925
										, "value": "1"
									}
								}
							}
						}]
					}
				}, {
					"proto": "result.month := m;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 927
					, "stmt": {
						"proto": "(result.month := m)"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 927
						, "lval": {
							"proto": "result.month"
							, "kind": "."
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 927
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "Date.Parts"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 927
								, "value": "result"
							}
							, "rval": {
								"proto": "month"
								, "kind": ".ref"
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 927
								, "value": "month"
							}
						}
						, "rval": {
							"proto": "m"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 927
							, "value": "m"
						}
					}
				}, {
					"proto": "result.dayOfMonth := (n - DaysToMonth366[m - 1] + 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 929
					, "stmt": {
						"proto": "(result.dayOfMonth := (n - DaysToMonth366[m - 1] + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 929
						, "lval": {
							"proto": "result.dayOfMonth"
							, "kind": "."
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 929
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "Date.Parts"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 929
								, "value": "result"
							}
							, "rval": {
								"proto": "dayOfMonth"
								, "kind": ".ref"
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 929
								, "value": "dayOfMonth"
							}
						}
						, "rval": {
							"proto": "(n - DaysToMonth366[m - 1] + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 929
							, "lval": {
								"proto": "(n - DaysToMonth366[m - 1])"
								, "kind": "-"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 929
								, "lval": {
									"proto": "n"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 929
									, "value": "n"
								}
								, "rval": {
									"proto": "DaysToMonth366[m - 1]"
									, "kind": "[?]"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 929
									, "lval": {
										"proto": "DaysToMonth366"
										, "kind": ".ref"
										, "type": "int32[13]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 929
										, "value": "DaysToMonth366"
									}
									, "rval": {
										"proto": "(m - 1)"
										, "kind": "-"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 929
										, "lval": {
											"proto": "m"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 929
											, "value": "m"
										}
										, "rval": {
											"proto": "1"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 929
											, "value": "1"
										}
									}
								}
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 929
								, "value": "1"
							}
						}
					}
				}]
			}
			, "else": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 931
				, "stmt": [{
					"proto": "for ( ; n >= DaysToMonth365[m]; )"
					, "kind": "for"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 933
					, "test": {
						"proto": "(n >= DaysToMonth365[m])"
						, "kind": ">="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 933
						, "lval": {
							"proto": "n"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 933
							, "value": "n"
						}
						, "rval": {
							"proto": "DaysToMonth365[m]"
							, "kind": "[?]"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 933
							, "lval": {
								"proto": "DaysToMonth365"
								, "kind": ".ref"
								, "type": "int32[13]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 933
								, "value": "DaysToMonth365"
							}
							, "rval": {
								"proto": "m"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 933
								, "value": "m"
							}
						}
					}
					, "stmt": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 933
						, "stmt": [{
							"proto": "m := (m + 1);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 934
							, "stmt": {
								"proto": "(m := (m + 1))"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 934
								, "lval": {
									"proto": "m"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 934
									, "value": "m"
								}
								, "rval": {
									"proto": "(m + 1)"
									, "kind": "+"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 934
									, "lval": {
										"proto": "m"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 934
										, "value": "m"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 934
										, "value": "1"
									}
								}
							}
						}]
					}
				}, {
					"proto": "result.month := m;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 936
					, "stmt": {
						"proto": "(result.month := m)"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 936
						, "lval": {
							"proto": "result.month"
							, "kind": "."
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 936
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "Date.Parts"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 936
								, "value": "result"
							}
							, "rval": {
								"proto": "month"
								, "kind": ".ref"
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 936
								, "value": "month"
							}
						}
						, "rval": {
							"proto": "m"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 936
							, "value": "m"
						}
					}
				}, {
					"proto": "result.dayOfMonth := (n - DaysToMonth365[m - 1] + 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 938
					, "stmt": {
						"proto": "(result.dayOfMonth := (n - DaysToMonth365[m - 1] + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 938
						, "lval": {
							"proto": "result.dayOfMonth"
							, "kind": "."
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 938
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "Date.Parts"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 938
								, "value": "result"
							}
							, "rval": {
								"proto": "dayOfMonth"
								, "kind": ".ref"
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 938
								, "value": "dayOfMonth"
							}
						}
						, "rval": {
							"proto": "(n - DaysToMonth365[m - 1] + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 938
							, "lval": {
								"proto": "(n - DaysToMonth365[m - 1])"
								, "kind": "-"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 938
								, "lval": {
									"proto": "n"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 938
									, "value": "n"
								}
								, "rval": {
									"proto": "DaysToMonth365[m - 1]"
									, "kind": "[?]"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 938
									, "lval": {
										"proto": "DaysToMonth365"
										, "kind": ".ref"
										, "type": "int32[13]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 938
										, "value": "DaysToMonth365"
									}
									, "rval": {
										"proto": "(m - 1)"
										, "kind": "-"
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 938
										, "lval": {
											"proto": "m"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 938
											, "value": "m"
										}
										, "rval": {
											"proto": "1"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 938
											, "value": "1"
										}
									}
								}
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 938
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 940
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 282468
	}, {
		"instruction": "load.c32 7"
		, "offset": 282470
	}, {
		"instruction": "i32.mod"
		, "offset": 282475
	}, {
		"instruction": "inc 1"
		, "offset": 282476
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 282480
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282482
	}, {
		"instruction": "load.c32 146097"
		, "offset": 282484
	}, {
		"instruction": "i32.div"
		, "offset": 282489
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282490
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282492
	}, {
		"instruction": "load.c32 146097"
		, "offset": 282494
	}, {
		"instruction": "i32.mul"
		, "offset": 282499
	}, {
		"instruction": "i32.sub"
		, "offset": 282500
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282501
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282503
	}, {
		"instruction": "load.c32 36524"
		, "offset": 282505
	}, {
		"instruction": "i32.div"
		, "offset": 282510
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 282511
	}, {
		"instruction": "load.c32 4"
		, "offset": 282513
	}, {
		"instruction": "i32.ceq"
		, "offset": 282518
	}, {
		"instruction": "jz +11"
		, "offset": 282519
	}, {
		"instruction": "load.c32 3"
		, "offset": 282523
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 282528
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282530
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282532
	}, {
		"instruction": "load.c32 36524"
		, "offset": 282534
	}, {
		"instruction": "i32.mul"
		, "offset": 282539
	}, {
		"instruction": "i32.sub"
		, "offset": 282540
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 282541
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282543
	}, {
		"instruction": "load.c32 1461"
		, "offset": 282545
	}, {
		"instruction": "i32.div"
		, "offset": 282550
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 282551
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282553
	}, {
		"instruction": "load.c32 1461"
		, "offset": 282555
	}, {
		"instruction": "i32.mul"
		, "offset": 282560
	}, {
		"instruction": "i32.sub"
		, "offset": 282561
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 282562
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 282564
	}, {
		"instruction": "load.c32 365"
		, "offset": 282566
	}, {
		"instruction": "i32.div"
		, "offset": 282571
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 282572
	}, {
		"instruction": "load.c32 4"
		, "offset": 282574
	}, {
		"instruction": "i32.ceq"
		, "offset": 282579
	}, {
		"instruction": "jz +11"
		, "offset": 282580
	}, {
		"instruction": "load.c32 3"
		, "offset": 282584
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 282589
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282591
	}, {
		"instruction": "load.c32 400"
		, "offset": 282593
	}, {
		"instruction": "i32.mul"
		, "offset": 282598
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282599
	}, {
		"instruction": "load.c32 100"
		, "offset": 282601
	}, {
		"instruction": "i32.mul"
		, "offset": 282606
	}, {
		"instruction": "i32.add"
		, "offset": 282607
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282608
	}, {
		"instruction": "load.c32 4"
		, "offset": 282610
	}, {
		"instruction": "i32.mul"
		, "offset": 282615
	}, {
		"instruction": "i32.add"
		, "offset": 282616
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282617
	}, {
		"instruction": "i32.add"
		, "offset": 282619
	}, {
		"instruction": "inc 1"
		, "offset": 282620
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 282624
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282626
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282628
	}, {
		"instruction": "load.c32 365"
		, "offset": 282630
	}, {
		"instruction": "i32.mul"
		, "offset": 282635
	}, {
		"instruction": "i32.sub"
		, "offset": 282636
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 282637
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282639
	}, {
		"instruction": "inc 1"
		, "offset": 282641
	}, {
		"instruction": "set.x1 sp(9)"
		, "offset": 282645
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 282647
	}, {
		"instruction": "load.c32 5"
		, "offset": 282649
	}, {
		"instruction": "inc 1"
		, "offset": 282654
	}, {
		"instruction": "b32.sar"
		, "offset": 282658
	}, {
		"instruction": "stack 4"
		, "offset": 282659
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 282663
	}, {
		"instruction": "load.ref .044e24"
		, "offset": 282665
	}, {
		"instruction": "call"
		, "offset": 282670
	}, {
		"instruction": "stack -4"
		, "offset": 282671
	}, {
		"instruction": "jz +64"
		, "offset": 282675
	}, {
		"instruction": "jmp +8"
		, "offset": 282679
	}, {
		"instruction": "inc 1"
		, "offset": 282683
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 282687
	}, {
		"instruction": "load.ref .044df0"
		, "offset": 282689
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282694
	}, {
		"instruction": "mad 4"
		, "offset": 282696
	}, {
		"instruction": "load.i32"
		, "offset": 282700
	}, {
		"instruction": "i32.clt"
		, "offset": 282701
	}, {
		"instruction": "jz -19"
		, "offset": 282702
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 282706
	}, {
		"instruction": "set.x1 sp(9)"
		, "offset": 282708
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 282710
	}, {
		"instruction": "load.ref .044df0"
		, "offset": 282712
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282717
	}, {
		"instruction": "inc -1"
		, "offset": 282719
	}, {
		"instruction": "mad 4"
		, "offset": 282723
	}, {
		"instruction": "load.i32"
		, "offset": 282727
	}, {
		"instruction": "i32.sub"
		, "offset": 282728
	}, {
		"instruction": "inc 1"
		, "offset": 282729
	}, {
		"instruction": "set.x1 sp(11)"
		, "offset": 282733
	}, {
		"instruction": "jmp +60"
		, "offset": 282735
	}, {
		"instruction": "jmp +8"
		, "offset": 282739
	}, {
		"instruction": "inc 1"
		, "offset": 282743
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 282747
	}, {
		"instruction": "load.ref .044db0"
		, "offset": 282749
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282754
	}, {
		"instruction": "mad 4"
		, "offset": 282756
	}, {
		"instruction": "load.i32"
		, "offset": 282760
	}, {
		"instruction": "i32.clt"
		, "offset": 282761
	}, {
		"instruction": "jz -19"
		, "offset": 282762
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 282766
	}, {
		"instruction": "set.x1 sp(9)"
		, "offset": 282768
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 282770
	}, {
		"instruction": "load.ref .044db0"
		, "offset": 282772
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282777
	}, {
		"instruction": "inc -1"
		, "offset": 282779
	}, {
		"instruction": "mad 4"
		, "offset": 282783
	}, {
		"instruction": "load.i32"
		, "offset": 282787
	}, {
		"instruction": "i32.sub"
		, "offset": 282788
	}, {
		"instruction": "inc 1"
		, "offset": 282789
	}, {
		"instruction": "set.x1 sp(11)"
		, "offset": 282793
	}, {
		"instruction": "stack -20"
		, "offset": 282795
	}, {
		"instruction": "ret"
		, "offset": 282799
	}, {
		"instruction": "stack -20"
		, "offset": 282800
	}, {
		"instruction": "ret"
		, "offset": 282804
	}]
}, {
	"proto": "Date.ToParts(days: int64, year: int32, month: int32, day: int32)"
	, "kind": ".ref"
	, "name": "ToParts"
	, "declaredIn": "Date"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 942
	, "args": [{
		"proto": "Date.ToParts.days"
		, "kind": ".ref"
		, "name": "days"
		, "declaredIn": "Date.ToParts(days: int64, year: int32, month: int32, day: int32)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 942
		, "cast": ".i64"
		, "size": 8
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "Date.ToParts.year"
		, "kind": ".ref"
		, "name": "year"
		, "declaredIn": "Date.ToParts(days: int64, year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 942
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "Date.ToParts.month"
		, "kind": ".ref"
		, "name": "month"
		, "declaredIn": "Date.ToParts(days: int64, year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 942
		, "cast": ".ref"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}, {
		"proto": "Date.ToParts.day"
		, "kind": ".ref"
		, "name": "day"
		, "declaredIn": "Date.ToParts(days: int64, year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 942
		, "cast": ".ref"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "cast": ".vid"
	, "size": 37
	, "offs": 282805
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 942
		, "stmt": [{
			"proto": "parts"
			, "kind": ".def"
			, "type": "Date.Parts"
			, "file": "stdlib.cvx"
			, "line": 943
			, "value": "parts"
		}, {
			"proto": "year := parts.year;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 944
			, "stmt": {
				"proto": "(year := parts.year)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 944
				, "lval": {
					"proto": "year"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 944
					, "value": "year"
				}
				, "rval": {
					"proto": "parts.year"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 944
					, "lval": {
						"proto": "parts"
						, "kind": ".ref"
						, "type": "Date.Parts"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 944
						, "value": "parts"
					}
					, "rval": {
						"proto": "year"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 944
						, "value": "year"
					}
				}
			}
		}, {
			"proto": "month := parts.month;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 945
			, "stmt": {
				"proto": "(month := parts.month)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 945
				, "lval": {
					"proto": "month"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 945
					, "value": "month"
				}
				, "rval": {
					"proto": "parts.month"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 945
					, "lval": {
						"proto": "parts"
						, "kind": ".ref"
						, "type": "Date.Parts"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 945
						, "value": "parts"
					}
					, "rval": {
						"proto": "month"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 945
						, "value": "month"
					}
				}
			}
		}, {
			"proto": "day := parts.dayOfMonth;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 946
			, "stmt": {
				"proto": "(day := parts.dayOfMonth)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 946
				, "lval": {
					"proto": "day"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 946
					, "value": "day"
				}
				, "rval": {
					"proto": "parts.dayOfMonth"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 946
					, "lval": {
						"proto": "parts"
						, "kind": ".ref"
						, "type": "Date.Parts"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 946
						, "value": "parts"
					}
					, "rval": {
						"proto": "dayOfMonth"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 946
						, "value": "dayOfMonth"
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "stack 20"
		, "offset": 282805
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 282809
	}, {
		"instruction": "i64.2i32"
		, "offset": 282811
	}, {
		"instruction": "load.ref .044f64"
		, "offset": 282812
	}, {
		"instruction": "call"
		, "offset": 282817
	}, {
		"instruction": "stack -4"
		, "offset": 282818
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 282822
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 282824
	}, {
		"instruction": "store.i32"
		, "offset": 282826
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282827
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 282829
	}, {
		"instruction": "store.i32"
		, "offset": 282831
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 282832
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 282834
	}, {
		"instruction": "store.i32"
		, "offset": 282836
	}, {
		"instruction": "stack -20"
		, "offset": 282837
	}, {
		"instruction": "ret"
		, "offset": 282841
	}]
}, {
	"proto": "Date.Parts(n: int32)"
	, "kind": ".def"
	, "name": "Parts"
	, "declaredIn": "Date"
	, "type": "Date.Parts"
	, "file": "stdlib.cvx"
	, "line": 949
	, "args": [{
		"proto": "Date.Parts.n"
		, "kind": ".def"
		, "name": "n"
		, "declaredIn": "Date.Parts(n: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 949
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": false
	, "ast": {
		"proto": "ToParts(n)"
		, "kind": "(?)"
		, "type": "Date.Parts"
		, "file": "stdlib.cvx"
		, "line": 949
		, "args": [{
			"proto": "n"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 949
			, "value": "n"
		}]
	}
}, {
	"proto": "Date(days: int64)"
	, "kind": ".def"
	, "name": "Date"
	, "type": "Date"
	, "args": [{
		"proto": "Date.days"
		, "kind": ".def"
		, "name": "days"
		, "declaredIn": "Date(days: int64)"
		, "type": "int64"
		, "cast": ".i64"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "emit(days)"
		, "kind": "(?)"
		, "type": "Date"
		, "file": "stdlib.cvx"
		, "line": 957
		, "args": [{
			"proto": "days"
			, "kind": ".ref"
			, "type": "Date.days"
			, "cast": ".i64"
			, "value": "days"
		}]
	}
}, {
	"proto": "Date(year: int32, month: int32, day: int32)"
	, "kind": ".def"
	, "name": "Date"
	, "type": "Date"
	, "file": "stdlib.cvx"
	, "line": 953
	, "args": [{
		"proto": "Date.year"
		, "kind": ".def"
		, "name": "year"
		, "declaredIn": "Date(year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 953
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.month"
		, "kind": ".def"
		, "name": "month"
		, "declaredIn": "Date(year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 953
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Date.day"
		, "kind": ".def"
		, "name": "day"
		, "declaredIn": "Date(year: int32, month: int32, day: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 953
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Date(Date.ToDays(year, month, day))"
		, "kind": "(?)"
		, "type": "Date"
		, "file": "stdlib.cvx"
		, "line": 953
		, "args": [{
			"proto": "Date.ToDays(year, month, day)"
			, "kind": "(?)"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 953
			, "args": [{
				"proto": "day"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 953
				, "value": "day"
			}, {
				"proto": "month"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 953
				, "value": "month"
			}, {
				"proto": "year"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 953
				, "value": "year"
			}]
		}]
	}
}, {
	"proto": "DateFromTime(time: int32)"
	, "kind": ".ref"
	, "name": "DateFromTime"
	, "type": "Date"
	, "file": "stdlib.cvx"
	, "line": 955
	, "args": [{
		"proto": "DateFromTime.time"
		, "kind": ".ref"
		, "name": "time"
		, "declaredIn": "DateFromTime(time: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 955
		, "cast": ".i32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}]
	, "cast": ".rec"
	, "size": 18
	, "offs": 282848
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 955
		, "stmt": [{
			"proto": "_1970"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 956
			, "value": "_1970"
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 957
			, "stmt": {
				"proto": "(result := Date(_1970 + (time / Date.SecondsPerDay)))"
				, "kind": ":="
				, "type": "Date"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "Date"
					, "cast": ".rec"
					, "value": "result"
				}
				, "rval": {
					"proto": "Date(_1970 + (time / Date.SecondsPerDay))"
					, "kind": "(?)"
					, "type": "Date"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 957
					, "args": [{
						"proto": "(_1970 + (time / Date.SecondsPerDay))"
						, "kind": "+"
						, "type": "int32"
						, "cast": ".i64"
						, "file": "stdlib.cvx"
						, "line": 957
						, "lval": {
							"proto": "_1970"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 957
							, "value": "_1970"
						}
						, "rval": {
							"proto": "(time / Date.SecondsPerDay)"
							, "kind": "(?)"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 957
							, "args": [{
								"proto": "(time / Date.SecondsPerDay)"
								, "kind": "/"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 957
								, "lval": {
									"proto": "time"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 957
									, "value": "time"
								}
								, "rval": {
									"proto": "Date.SecondsPerDay"
									, "kind": "."
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 957
									, "lval": {
										"proto": "Date"
										, "kind": ".ref"
										, "type": "Date"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 957
										, "value": "Date"
									}
									, "rval": {
										"proto": "SecondsPerDay"
										, "kind": ".ref"
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 957
										, "value": "SecondsPerDay"
									}
								}
							}]
						}
					}]
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.m32 .0450dc"
		, "offset": 282848
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282852
	}, {
		"instruction": "load.c32 86400"
		, "offset": 282854
	}, {
		"instruction": "i32.div"
		, "offset": 282859
	}, {
		"instruction": "i32.add"
		, "offset": 282860
	}, {
		"instruction": "i32.2i64"
		, "offset": 282861
	}, {
		"instruction": "set.x2 sp(4)"
		, "offset": 282862
	}, {
		"instruction": "ret"
		, "offset": 282864
	}, {
		"instruction": "ret"
		, "offset": 282865
	}]
}, {
	"proto": "importstd"
	, "kind": ".rec"
	, "name": "importstd"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 960
	, "cast": "enum"
	, "size": 4
	, "offs": 173336
	, "const": true
	, "static": true
}, {
	"proto": "importstd.print"
	, "kind": ".def"
	, "name": "print"
	, "declaredIn": "importstd"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 961
	, "cast": ".bit"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "bool"
		, "cast": ".bit"
		, "file": "stdlib.cvx"
		, "line": 961
		, "value": "1"
	}
}, {
	"proto": "importstd.bits2"
	, "kind": ".def"
	, "name": "bits2"
	, "declaredIn": "importstd"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 962
	, "cast": ".bit"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "bool"
		, "cast": ".bit"
		, "file": "stdlib.cvx"
		, "line": 962
		, "value": "1"
	}
}, {
	"proto": "importstd.complex"
	, "kind": ".def"
	, "name": "complex"
	, "declaredIn": "importstd"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 963
	, "cast": ".bit"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "bool"
		, "cast": ".bit"
		, "file": "stdlib.cvx"
		, "line": 963
		, "value": "1"
	}
}, {
	"proto": "importstd.vec2d"
	, "kind": ".def"
	, "name": "vec2d"
	, "declaredIn": "importstd"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 966
	, "cast": ".bit"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "bool"
		, "cast": ".bit"
		, "file": "stdlib.cvx"
		, "line": 966
		, "value": "1"
	}
}, {
	"proto": "importstd.vec4f"
	, "kind": ".def"
	, "name": "vec4f"
	, "declaredIn": "importstd"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 967
	, "cast": ".bit"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "bool"
		, "cast": ".bit"
		, "file": "stdlib.cvx"
		, "line": 967
		, "value": "1"
	}
}, {
	"proto": "importstd.mat4f"
	, "kind": ".def"
	, "name": "mat4f"
	, "declaredIn": "importstd"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 968
	, "cast": ".bit"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "bool"
		, "cast": ".bit"
		, "file": "stdlib.cvx"
		, "line": 968
		, "value": "1"
	}
}, {
	"proto": "importstd.strUtils"
	, "kind": ".def"
	, "name": "strUtils"
	, "declaredIn": "importstd"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 970
	, "cast": ".bit"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "1"
		, "kind": ".i64"
		, "type": "bool"
		, "cast": ".bit"
		, "file": "stdlib.cvx"
		, "line": 970
		, "value": "1"
	}
}, {
	"proto": "variant(type: typename, value: pointer)"
	, "kind": ".def"
	, "name": "variant"
	, "type": "variant"
	, "file": "stdlib.cvx"
	, "line": 973
	, "args": [{
		"proto": "variant.type"
		, "kind": ".ref"
		, "name": "type"
		, "declaredIn": "variant(type: typename, value: pointer)"
		, "type": "typename"
		, "file": "stdlib.cvx"
		, "line": 973
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "variant.value"
		, "kind": ".ref"
		, "name": "value"
		, "declaredIn": "variant(type: typename, value: pointer)"
		, "type": "pointer"
		, "file": "stdlib.cvx"
		, "line": 973
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(variant, pointer(value), typename(type))"
		, "kind": "(?)"
		, "type": "variant"
		, "file": "stdlib.cvx"
		, "line": 973
		, "args": [{
			"proto": "typename(type)"
			, "kind": "(?)"
			, "type": "typename"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 973
			, "args": [{
				"proto": "type"
				, "kind": ".ref"
				, "type": "typename"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 973
				, "value": "type"
			}]
		}, {
			"proto": "pointer(value)"
			, "kind": "(?)"
			, "type": "pointer"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 973
			, "args": [{
				"proto": "value"
				, "kind": ".ref"
				, "type": "pointer"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 973
				, "value": "value"
			}]
		}, {
			"proto": "variant"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 973
			, "value": "variant"
		}]
	}
}, {
	"proto": "Lo32(a: int64)"
	, "kind": ".def"
	, "name": "Lo32"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 977
	, "args": [{
		"proto": "Lo32.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "Lo32(a: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 977
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "int32(a)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 977
		, "args": [{
			"proto": "a"
			, "kind": ".ref"
			, "type": "int64"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 977
			, "value": "a"
		}]
	}
}, {
	"proto": "Hi32(a: int64)"
	, "kind": ".def"
	, "name": "Hi32"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 978
	, "args": [{
		"proto": "Hi32.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "Hi32(a: int64)"
		, "type": "int64"
		, "file": "stdlib.cvx"
		, "line": 978
		, "cast": ".i64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Lo32(int64.Shr(a, 32))"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 978
		, "args": [{
			"proto": "int64.Shr(a, 32)"
			, "kind": "(?)"
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 978
			, "args": [{
				"proto": "32"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 978
				, "value": "32"
			}, {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int64"
				, "cast": ".i64"
				, "file": "stdlib.cvx"
				, "line": 978
				, "value": "a"
			}]
		}]
	}
}, {
	"proto": "Lo16(a: int32)"
	, "kind": ".def"
	, "name": "Lo16"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 979
	, "args": [{
		"proto": "Lo16.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "Lo16(a: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 979
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "int32(a & 65535)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 979
		, "args": [{
			"proto": "(a & 65535)"
			, "kind": "&"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 979
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 979
				, "value": "a"
			}
			, "rval": {
				"proto": "65535"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 979
				, "value": "65535"
			}
		}]
	}
}, {
	"proto": "Hi16(a: int32)"
	, "kind": ".def"
	, "name": "Hi16"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 980
	, "args": [{
		"proto": "Hi16.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "Hi16(a: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 980
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Lo16(a >> 16)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 980
		, "args": [{
			"proto": "(a >> 16)"
			, "kind": ">>"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 980
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 980
				, "value": "a"
			}
			, "rval": {
				"proto": "16"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 980
				, "value": "16"
			}
		}]
	}
}, {
	"proto": "Lo8(a: int32)"
	, "kind": ".def"
	, "name": "Lo8"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 981
	, "args": [{
		"proto": "Lo8.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "Lo8(a: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 981
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "int32(a & 255)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 981
		, "args": [{
			"proto": "(a & 255)"
			, "kind": "&"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 981
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 981
				, "value": "a"
			}
			, "rval": {
				"proto": "255"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 981
				, "value": "255"
			}
		}]
	}
}, {
	"proto": "Hi8(a: int32)"
	, "kind": ".def"
	, "name": "Hi8"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 982
	, "args": [{
		"proto": "Hi8.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "Hi8(a: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 982
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Lo8(a >> 8)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 982
		, "args": [{
			"proto": "(a >> 8)"
			, "kind": ">>"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 982
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 982
				, "value": "a"
			}
			, "rval": {
				"proto": "8"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 982
				, "value": "8"
			}
		}]
	}
}, {
	"proto": "bitsr(x: uint32)"
	, "kind": ".ref"
	, "name": "bitsr"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 995
	, "args": [{
		"proto": "bitsr.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "bitsr(x: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 995
		, "cast": ".u32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 153
	, "offs": 282866
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 995
		, "stmt": [{
			"proto": "if (x == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 996
			, "test": {
				"proto": "(x == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 996
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 996
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 996
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 996
				, "stmt": [{
					"proto": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 997
					, "stmt": {
						"proto": "(result := (-1))"
						, "kind": ":="
						, "type": "int32"
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "value": "result"
						}
						, "rval": {
							"proto": "(-1)"
							, "kind": "-"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 997
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 997
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "result := 0;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1000
			, "stmt": {
				"proto": "(result := 0)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1000
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1000
					, "value": "result"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1000
					, "value": "0"
				}
			}
		}, {
			"proto": "if (x & -65536)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1001
			, "test": {
				"proto": "(x & -65536)"
				, "kind": "&"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 1001
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1001
					, "value": "x"
				}
				, "rval": {
					"proto": "-65536"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1001
					, "value": "-65536"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1001
				, "stmt": [{
					"proto": "result := (result + 16);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1002
					, "stmt": {
						"proto": "(result := (result + 16))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1002
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1002
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 16)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1002
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1002
								, "value": "result"
							}
							, "rval": {
								"proto": "16"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1002
								, "value": "16"
							}
						}
					}
				}, {
					"proto": "x := (x >> 16);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1003
					, "stmt": {
						"proto": "(x := (x >> 16))"
						, "kind": ":="
						, "type": "uint32"
						, "file": "stdlib.cvx"
						, "line": 1003
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1003
							, "value": "x"
						}
						, "rval": {
							"proto": "(x >> 16)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1003
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1003
								, "value": "x"
							}
							, "rval": {
								"proto": "16"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1003
								, "value": "16"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (x & 65280)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1005
			, "test": {
				"proto": "(x & 65280)"
				, "kind": "&"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 1005
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1005
					, "value": "x"
				}
				, "rval": {
					"proto": "65280"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1005
					, "value": "65280"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1005
				, "stmt": [{
					"proto": "result := (result + 8);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1006
					, "stmt": {
						"proto": "(result := (result + 8))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1006
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1006
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 8)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1006
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1006
								, "value": "result"
							}
							, "rval": {
								"proto": "8"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1006
								, "value": "8"
							}
						}
					}
				}, {
					"proto": "x := (x >> 8);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1007
					, "stmt": {
						"proto": "(x := (x >> 8))"
						, "kind": ":="
						, "type": "uint32"
						, "file": "stdlib.cvx"
						, "line": 1007
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1007
							, "value": "x"
						}
						, "rval": {
							"proto": "(x >> 8)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1007
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1007
								, "value": "x"
							}
							, "rval": {
								"proto": "8"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1007
								, "value": "8"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (x & 240)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1009
			, "test": {
				"proto": "(x & 240)"
				, "kind": "&"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 1009
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1009
					, "value": "x"
				}
				, "rval": {
					"proto": "240"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1009
					, "value": "240"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1009
				, "stmt": [{
					"proto": "result := (result + 4);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1010
					, "stmt": {
						"proto": "(result := (result + 4))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1010
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1010
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 4)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1010
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1010
								, "value": "result"
							}
							, "rval": {
								"proto": "4"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1010
								, "value": "4"
							}
						}
					}
				}, {
					"proto": "x := (x >> 4);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1011
					, "stmt": {
						"proto": "(x := (x >> 4))"
						, "kind": ":="
						, "type": "uint32"
						, "file": "stdlib.cvx"
						, "line": 1011
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1011
							, "value": "x"
						}
						, "rval": {
							"proto": "(x >> 4)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1011
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1011
								, "value": "x"
							}
							, "rval": {
								"proto": "4"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1011
								, "value": "4"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (x & 12)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1013
			, "test": {
				"proto": "(x & 12)"
				, "kind": "&"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 1013
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1013
					, "value": "x"
				}
				, "rval": {
					"proto": "12"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1013
					, "value": "12"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1013
				, "stmt": [{
					"proto": "result := (result + 2);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1014
					, "stmt": {
						"proto": "(result := (result + 2))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1014
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1014
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 2)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1014
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1014
								, "value": "result"
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1014
								, "value": "2"
							}
						}
					}
				}, {
					"proto": "x := (x >> 2);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1015
					, "stmt": {
						"proto": "(x := (x >> 2))"
						, "kind": ":="
						, "type": "uint32"
						, "file": "stdlib.cvx"
						, "line": 1015
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1015
							, "value": "x"
						}
						, "rval": {
							"proto": "(x >> 2)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1015
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1015
								, "value": "x"
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1015
								, "value": "2"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (x & 2)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1017
			, "test": {
				"proto": "(x & 2)"
				, "kind": "&"
				, "type": "uint32"
				, "cast": ".u32"
				, "file": "stdlib.cvx"
				, "line": 1017
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1017
					, "value": "x"
				}
				, "rval": {
					"proto": "2"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1017
					, "value": "2"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1017
				, "stmt": [{
					"proto": "result := (result + 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1018
					, "stmt": {
						"proto": "(result := (result + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1018
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1018
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1018
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1018
								, "value": "result"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1018
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1020
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 282866
	}, {
		"instruction": "load.c32 0"
		, "offset": 282868
	}, {
		"instruction": "i32.ceq"
		, "offset": 282873
	}, {
		"instruction": "jz +12"
		, "offset": 282874
	}, {
		"instruction": "load.c32 -1"
		, "offset": 282878
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282883
	}, {
		"instruction": "ret"
		, "offset": 282885
	}, {
		"instruction": "load.c32 0"
		, "offset": 282886
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282891
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282893
	}, {
		"instruction": "load.c32 -65536"
		, "offset": 282895
	}, {
		"instruction": "b32.and"
		, "offset": 282900
	}, {
		"instruction": "jz +18"
		, "offset": 282901
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282905
	}, {
		"instruction": "inc 16"
		, "offset": 282907
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282911
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282913
	}, {
		"instruction": "b32.shr 0x010"
		, "offset": 282915
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 282917
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282919
	}, {
		"instruction": "load.c32 65280"
		, "offset": 282921
	}, {
		"instruction": "b32.and"
		, "offset": 282926
	}, {
		"instruction": "jz +18"
		, "offset": 282927
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282931
	}, {
		"instruction": "inc 8"
		, "offset": 282933
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282937
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282939
	}, {
		"instruction": "b32.shr 0x008"
		, "offset": 282941
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 282943
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282945
	}, {
		"instruction": "load.c32 240"
		, "offset": 282947
	}, {
		"instruction": "b32.and"
		, "offset": 282952
	}, {
		"instruction": "jz +18"
		, "offset": 282953
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282957
	}, {
		"instruction": "inc 4"
		, "offset": 282959
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282963
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282965
	}, {
		"instruction": "b32.shr 0x004"
		, "offset": 282967
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 282969
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282971
	}, {
		"instruction": "load.c32 12"
		, "offset": 282973
	}, {
		"instruction": "b32.and"
		, "offset": 282978
	}, {
		"instruction": "jz +18"
		, "offset": 282979
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 282983
	}, {
		"instruction": "inc 2"
		, "offset": 282985
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 282989
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282991
	}, {
		"instruction": "b32.shr 0x002"
		, "offset": 282993
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 282995
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 282997
	}, {
		"instruction": "load.c32 2"
		, "offset": 282999
	}, {
		"instruction": "b32.and"
		, "offset": 283004
	}, {
		"instruction": "jz +12"
		, "offset": 283005
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283009
	}, {
		"instruction": "inc 1"
		, "offset": 283011
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283015
	}, {
		"instruction": "ret"
		, "offset": 283017
	}, {
		"instruction": "ret"
		, "offset": 283018
	}]
}, {
	"proto": "bitsf(x: uint32)"
	, "kind": ".ref"
	, "name": "bitsf"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1027
	, "args": [{
		"proto": "bitsf.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "bitsf(x: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1027
		, "cast": ".u32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 163
	, "offs": 283019
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1027
		, "stmt": [{
			"proto": "if (x == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1028
			, "test": {
				"proto": "(x == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1028
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1028
					, "value": "x"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1028
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1028
				, "stmt": [{
					"proto": "return;"
					, "kind": "return"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1029
					, "stmt": {
						"proto": "(result := (-1))"
						, "kind": ":="
						, "type": "int32"
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "value": "result"
						}
						, "rval": {
							"proto": "(-1)"
							, "kind": "-"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1029
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1029
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "result := 0;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1032
			, "stmt": {
				"proto": "(result := 0)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1032
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1032
					, "value": "result"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1032
					, "value": "0"
				}
			}
		}, {
			"proto": "if ((x & 65535) == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1033
			, "test": {
				"proto": "((x & 65535) == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1033
				, "lval": {
					"proto": "(x & 65535)"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1033
					, "args": [{
						"proto": "(x & 65535)"
						, "kind": "&"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1033
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1033
							, "value": "x"
						}
						, "rval": {
							"proto": "65535"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1033
							, "value": "65535"
						}
					}]
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1033
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1033
				, "stmt": [{
					"proto": "result := (result + 16);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1034
					, "stmt": {
						"proto": "(result := (result + 16))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1034
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1034
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 16)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1034
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1034
								, "value": "result"
							}
							, "rval": {
								"proto": "16"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1034
								, "value": "16"
							}
						}
					}
				}, {
					"proto": "x := (x >> 16);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1035
					, "stmt": {
						"proto": "(x := (x >> 16))"
						, "kind": ":="
						, "type": "uint32"
						, "file": "stdlib.cvx"
						, "line": 1035
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1035
							, "value": "x"
						}
						, "rval": {
							"proto": "(x >> 16)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1035
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1035
								, "value": "x"
							}
							, "rval": {
								"proto": "16"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1035
								, "value": "16"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if ((x & 255) == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1037
			, "test": {
				"proto": "((x & 255) == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1037
				, "lval": {
					"proto": "(x & 255)"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1037
					, "args": [{
						"proto": "(x & 255)"
						, "kind": "&"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1037
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1037
							, "value": "x"
						}
						, "rval": {
							"proto": "255"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1037
							, "value": "255"
						}
					}]
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1037
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1037
				, "stmt": [{
					"proto": "result := (result + 8);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1038
					, "stmt": {
						"proto": "(result := (result + 8))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1038
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1038
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 8)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1038
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1038
								, "value": "result"
							}
							, "rval": {
								"proto": "8"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1038
								, "value": "8"
							}
						}
					}
				}, {
					"proto": "x := (x >> 8);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1038
					, "stmt": {
						"proto": "(x := (x >> 8))"
						, "kind": ":="
						, "type": "uint32"
						, "file": "stdlib.cvx"
						, "line": 1038
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1038
							, "value": "x"
						}
						, "rval": {
							"proto": "(x >> 8)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1038
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1038
								, "value": "x"
							}
							, "rval": {
								"proto": "8"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1038
								, "value": "8"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if ((x & 15) == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1040
			, "test": {
				"proto": "((x & 15) == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1040
				, "lval": {
					"proto": "(x & 15)"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1040
					, "args": [{
						"proto": "(x & 15)"
						, "kind": "&"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1040
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1040
							, "value": "x"
						}
						, "rval": {
							"proto": "15"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1040
							, "value": "15"
						}
					}]
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1040
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1040
				, "stmt": [{
					"proto": "result := (result + 4);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1041
					, "stmt": {
						"proto": "(result := (result + 4))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1041
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1041
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 4)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1041
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1041
								, "value": "result"
							}
							, "rval": {
								"proto": "4"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1041
								, "value": "4"
							}
						}
					}
				}, {
					"proto": "x := (x >> 4);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1042
					, "stmt": {
						"proto": "(x := (x >> 4))"
						, "kind": ":="
						, "type": "uint32"
						, "file": "stdlib.cvx"
						, "line": 1042
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1042
							, "value": "x"
						}
						, "rval": {
							"proto": "(x >> 4)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1042
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1042
								, "value": "x"
							}
							, "rval": {
								"proto": "4"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1042
								, "value": "4"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if ((x & 3) == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1044
			, "test": {
				"proto": "((x & 3) == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1044
				, "lval": {
					"proto": "(x & 3)"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1044
					, "args": [{
						"proto": "(x & 3)"
						, "kind": "&"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1044
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1044
							, "value": "x"
						}
						, "rval": {
							"proto": "3"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1044
							, "value": "3"
						}
					}]
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1044
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1044
				, "stmt": [{
					"proto": "result := (result + 2);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1045
					, "stmt": {
						"proto": "(result := (result + 2))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1045
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1045
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 2)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1045
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1045
								, "value": "result"
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1045
								, "value": "2"
							}
						}
					}
				}, {
					"proto": "x := (x >> 2);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1046
					, "stmt": {
						"proto": "(x := (x >> 2))"
						, "kind": ":="
						, "type": "uint32"
						, "file": "stdlib.cvx"
						, "line": 1046
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1046
							, "value": "x"
						}
						, "rval": {
							"proto": "(x >> 2)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1046
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1046
								, "value": "x"
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1046
								, "value": "2"
							}
						}
					}
				}]
			}
		}, {
			"proto": "if ((x & 1) == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1048
			, "test": {
				"proto": "((x & 1) == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1048
				, "lval": {
					"proto": "(x & 1)"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1048
					, "args": [{
						"proto": "(x & 1)"
						, "kind": "&"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1048
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1048
							, "value": "x"
						}
						, "rval": {
							"proto": "1"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1048
							, "value": "1"
						}
					}]
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1048
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1048
				, "stmt": [{
					"proto": "result := (result + 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1049
					, "stmt": {
						"proto": "(result := (result + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1049
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1049
							, "value": "result"
						}
						, "rval": {
							"proto": "(result + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1049
							, "lval": {
								"proto": "result"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1049
								, "value": "result"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1049
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1051
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 283019
	}, {
		"instruction": "load.c32 0"
		, "offset": 283021
	}, {
		"instruction": "i32.ceq"
		, "offset": 283026
	}, {
		"instruction": "jz +12"
		, "offset": 283027
	}, {
		"instruction": "load.c32 -1"
		, "offset": 283031
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283036
	}, {
		"instruction": "ret"
		, "offset": 283038
	}, {
		"instruction": "load.c32 0"
		, "offset": 283039
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283044
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283046
	}, {
		"instruction": "b32.and 0xffff"
		, "offset": 283048
	}, {
		"instruction": "load.c32 0"
		, "offset": 283050
	}, {
		"instruction": "i32.ceq"
		, "offset": 283055
	}, {
		"instruction": "jz +18"
		, "offset": 283056
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283060
	}, {
		"instruction": "inc 16"
		, "offset": 283062
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283066
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283068
	}, {
		"instruction": "b32.shr 0x010"
		, "offset": 283070
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283072
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283074
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 283076
	}, {
		"instruction": "load.c32 0"
		, "offset": 283078
	}, {
		"instruction": "i32.ceq"
		, "offset": 283083
	}, {
		"instruction": "jz +18"
		, "offset": 283084
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283088
	}, {
		"instruction": "inc 8"
		, "offset": 283090
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283094
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283096
	}, {
		"instruction": "b32.shr 0x008"
		, "offset": 283098
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283100
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283102
	}, {
		"instruction": "b32.and 0x00f"
		, "offset": 283104
	}, {
		"instruction": "load.c32 0"
		, "offset": 283106
	}, {
		"instruction": "i32.ceq"
		, "offset": 283111
	}, {
		"instruction": "jz +18"
		, "offset": 283112
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283116
	}, {
		"instruction": "inc 4"
		, "offset": 283118
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283122
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283124
	}, {
		"instruction": "b32.shr 0x004"
		, "offset": 283126
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283128
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283130
	}, {
		"instruction": "b32.and 0x003"
		, "offset": 283132
	}, {
		"instruction": "load.c32 0"
		, "offset": 283134
	}, {
		"instruction": "i32.ceq"
		, "offset": 283139
	}, {
		"instruction": "jz +18"
		, "offset": 283140
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283144
	}, {
		"instruction": "inc 2"
		, "offset": 283146
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283150
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283152
	}, {
		"instruction": "b32.shr 0x002"
		, "offset": 283154
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283156
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283158
	}, {
		"instruction": "b32.and 0x001"
		, "offset": 283160
	}, {
		"instruction": "load.c32 0"
		, "offset": 283162
	}, {
		"instruction": "i32.ceq"
		, "offset": 283167
	}, {
		"instruction": "jz +12"
		, "offset": 283168
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283172
	}, {
		"instruction": "inc 1"
		, "offset": 283174
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283178
	}, {
		"instruction": "ret"
		, "offset": 283180
	}, {
		"instruction": "ret"
		, "offset": 283181
	}]
}, {
	"proto": "bithi(x: uint32)"
	, "kind": ".ref"
	, "name": "bithi"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1056
	, "args": [{
		"proto": "bithi.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "bithi(x: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1056
		, "cast": ".u32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 56
	, "offs": 283182
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1056
		, "stmt": [{
			"proto": "x := (x | (x >> 1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1057
			, "stmt": {
				"proto": "(x := (x | (x >> 1)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1057
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1057
					, "value": "x"
				}
				, "rval": {
					"proto": "(x | (x >> 1))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1057
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1057
						, "value": "x"
					}
					, "rval": {
						"proto": "(x >> 1)"
						, "kind": ">>"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1057
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1057
							, "value": "x"
						}
						, "rval": {
							"proto": "1"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1057
							, "value": "1"
						}
					}
				}
			}
		}, {
			"proto": "x := (x | (x >> 2));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1058
			, "stmt": {
				"proto": "(x := (x | (x >> 2)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1058
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1058
					, "value": "x"
				}
				, "rval": {
					"proto": "(x | (x >> 2))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1058
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1058
						, "value": "x"
					}
					, "rval": {
						"proto": "(x >> 2)"
						, "kind": ">>"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1058
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1058
							, "value": "x"
						}
						, "rval": {
							"proto": "2"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1058
							, "value": "2"
						}
					}
				}
			}
		}, {
			"proto": "x := (x | (x >> 4));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1059
			, "stmt": {
				"proto": "(x := (x | (x >> 4)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1059
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1059
					, "value": "x"
				}
				, "rval": {
					"proto": "(x | (x >> 4))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1059
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1059
						, "value": "x"
					}
					, "rval": {
						"proto": "(x >> 4)"
						, "kind": ">>"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1059
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1059
							, "value": "x"
						}
						, "rval": {
							"proto": "4"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1059
							, "value": "4"
						}
					}
				}
			}
		}, {
			"proto": "x := (x | (x >> 8));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1060
			, "stmt": {
				"proto": "(x := (x | (x >> 8)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1060
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1060
					, "value": "x"
				}
				, "rval": {
					"proto": "(x | (x >> 8))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1060
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1060
						, "value": "x"
					}
					, "rval": {
						"proto": "(x >> 8)"
						, "kind": ">>"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1060
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1060
							, "value": "x"
						}
						, "rval": {
							"proto": "8"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1060
							, "value": "8"
						}
					}
				}
			}
		}, {
			"proto": "x := (x | (x >> 16));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1061
			, "stmt": {
				"proto": "(x := (x | (x >> 16)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1061
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1061
					, "value": "x"
				}
				, "rval": {
					"proto": "(x | (x >> 16))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1061
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1061
						, "value": "x"
					}
					, "rval": {
						"proto": "(x >> 16)"
						, "kind": ">>"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1061
						, "lval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1061
							, "value": "x"
						}
						, "rval": {
							"proto": "16"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1061
							, "value": "16"
						}
					}
				}
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1062
			, "stmt": {
				"proto": "(result := (x - (x >> 1)))"
				, "kind": ":="
				, "type": "int32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "value": "result"
				}
				, "rval": {
					"proto": "(x - (x >> 1))"
					, "kind": "-"
					, "type": "uint32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1062
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1062
						, "value": "x"
					}
					, "rval": {
						"proto": "(x >> 1)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1062
						, "args": [{
							"proto": "(x >> 1)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1062
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1062
								, "value": "x"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1062
								, "value": "1"
							}
						}]
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 283182
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283184
	}, {
		"instruction": "b32.shr 0x001"
		, "offset": 283186
	}, {
		"instruction": "b32.or"
		, "offset": 283188
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283189
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283191
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283193
	}, {
		"instruction": "b32.shr 0x002"
		, "offset": 283195
	}, {
		"instruction": "b32.or"
		, "offset": 283197
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283198
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283200
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283202
	}, {
		"instruction": "b32.shr 0x004"
		, "offset": 283204
	}, {
		"instruction": "b32.or"
		, "offset": 283206
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283207
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283209
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283211
	}, {
		"instruction": "b32.shr 0x008"
		, "offset": 283213
	}, {
		"instruction": "b32.or"
		, "offset": 283215
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283216
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283218
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283220
	}, {
		"instruction": "b32.shr 0x010"
		, "offset": 283222
	}, {
		"instruction": "b32.or"
		, "offset": 283224
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283225
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283227
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283229
	}, {
		"instruction": "b32.shr 0x001"
		, "offset": 283231
	}, {
		"instruction": "i32.sub"
		, "offset": 283233
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283234
	}, {
		"instruction": "ret"
		, "offset": 283236
	}, {
		"instruction": "ret"
		, "offset": 283237
	}]
}, {
	"proto": "bitlo(x: uint32)"
	, "kind": ".ref"
	, "name": "bitlo"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1067
	, "args": [{
		"proto": "bitlo.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "bitlo(x: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1067
		, "cast": ".u32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 10
	, "offs": 283238
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1067
		, "stmt": [{
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1068
			, "stmt": {
				"proto": "(result := (x & (-x)))"
				, "kind": ":="
				, "type": "int32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "value": "result"
				}
				, "rval": {
					"proto": "(x & (-x))"
					, "kind": "&"
					, "type": "uint32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1068
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1068
						, "value": "x"
					}
					, "rval": {
						"proto": "(-x)"
						, "kind": "-"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1068
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1068
							, "value": "x"
						}
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 283238
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283240
	}, {
		"instruction": "i32.neg"
		, "offset": 283242
	}, {
		"instruction": "b32.and"
		, "offset": 283243
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283244
	}, {
		"instruction": "ret"
		, "offset": 283246
	}, {
		"instruction": "ret"
		, "offset": 283247
	}]
}, {
	"proto": "bitcnt(x: uint32)"
	, "kind": ".ref"
	, "name": "bitcnt"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1072
	, "args": [{
		"proto": "bitcnt.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "bitcnt(x: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1072
		, "cast": ".u32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 73
	, "offs": 283248
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1072
		, "stmt": [{
			"proto": "x := (x - ((x >> 1) & 1431655765));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1073
			, "stmt": {
				"proto": "(x := (x - ((x >> 1) & 1431655765)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1073
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1073
					, "value": "x"
				}
				, "rval": {
					"proto": "(x - ((x >> 1) & 1431655765))"
					, "kind": "-"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1073
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1073
						, "value": "x"
					}
					, "rval": {
						"proto": "((x >> 1) & 1431655765)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1073
						, "args": [{
							"proto": "((x >> 1) & 1431655765)"
							, "kind": "&"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1073
							, "lval": {
								"proto": "(x >> 1)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1073
								, "args": [{
									"proto": "(x >> 1)"
									, "kind": ">>"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1073
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1073
										, "value": "x"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1073
										, "value": "1"
									}
								}]
							}
							, "rval": {
								"proto": "1431655765"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1073
								, "value": "1431655765"
							}
						}]
					}
				}
			}
		}, {
			"proto": "x := (((x >> 2) & 858993459) + (x & 858993459));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1074
			, "stmt": {
				"proto": "(x := (((x >> 2) & 858993459) + (x & 858993459)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1074
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1074
					, "value": "x"
				}
				, "rval": {
					"proto": "(((x >> 2) & 858993459) + (x & 858993459))"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1074
					, "args": [{
						"proto": "(((x >> 2) & 858993459) + (x & 858993459))"
						, "kind": "+"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1074
						, "lval": {
							"proto": "((x >> 2) & 858993459)"
							, "kind": "(?)"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1074
							, "args": [{
								"proto": "((x >> 2) & 858993459)"
								, "kind": "&"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1074
								, "lval": {
									"proto": "(x >> 2)"
									, "kind": "(?)"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1074
									, "args": [{
										"proto": "(x >> 2)"
										, "kind": ">>"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1074
										, "lval": {
											"proto": "x"
											, "kind": ".ref"
											, "type": "uint32"
											, "cast": ".u32"
											, "file": "stdlib.cvx"
											, "line": 1074
											, "value": "x"
										}
										, "rval": {
											"proto": "2"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".u32"
											, "file": "stdlib.cvx"
											, "line": 1074
											, "value": "2"
										}
									}]
								}
								, "rval": {
									"proto": "858993459"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1074
									, "value": "858993459"
								}
							}]
						}
						, "rval": {
							"proto": "(x & 858993459)"
							, "kind": "(?)"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1074
							, "args": [{
								"proto": "(x & 858993459)"
								, "kind": "&"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1074
								, "lval": {
									"proto": "x"
									, "kind": ".ref"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1074
									, "value": "x"
								}
								, "rval": {
									"proto": "858993459"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1074
									, "value": "858993459"
								}
							}]
						}
					}]
				}
			}
		}, {
			"proto": "x := (((x >> 4) + x) & 252645135);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1075
			, "stmt": {
				"proto": "(x := (((x >> 4) + x) & 252645135))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1075
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1075
					, "value": "x"
				}
				, "rval": {
					"proto": "(((x >> 4) + x) & 252645135)"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1075
					, "args": [{
						"proto": "(((x >> 4) + x) & 252645135)"
						, "kind": "&"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1075
						, "lval": {
							"proto": "((x >> 4) + x)"
							, "kind": "(?)"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1075
							, "args": [{
								"proto": "((x >> 4) + x)"
								, "kind": "+"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1075
								, "lval": {
									"proto": "(x >> 4)"
									, "kind": "(?)"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1075
									, "args": [{
										"proto": "(x >> 4)"
										, "kind": ">>"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1075
										, "lval": {
											"proto": "x"
											, "kind": ".ref"
											, "type": "uint32"
											, "cast": ".u32"
											, "file": "stdlib.cvx"
											, "line": 1075
											, "value": "x"
										}
										, "rval": {
											"proto": "4"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".u32"
											, "file": "stdlib.cvx"
											, "line": 1075
											, "value": "4"
										}
									}]
								}
								, "rval": {
									"proto": "x"
									, "kind": ".ref"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1075
									, "value": "x"
								}
							}]
						}
						, "rval": {
							"proto": "252645135"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1075
							, "value": "252645135"
						}
					}]
				}
			}
		}, {
			"proto": "x := (x + (x >> 8) + (x >> 16));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1076
			, "stmt": {
				"proto": "(x := (x + (x >> 8) + (x >> 16)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1076
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1076
					, "value": "x"
				}
				, "rval": {
					"proto": "(x + (x >> 8) + (x >> 16))"
					, "kind": "+"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1076
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1076
						, "value": "x"
					}
					, "rval": {
						"proto": "((x >> 8) + (x >> 16))"
						, "kind": "+"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1076
						, "lval": {
							"proto": "(x >> 8)"
							, "kind": "(?)"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1076
							, "args": [{
								"proto": "(x >> 8)"
								, "kind": ">>"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1076
								, "lval": {
									"proto": "x"
									, "kind": ".ref"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1076
									, "value": "x"
								}
								, "rval": {
									"proto": "8"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1076
									, "value": "8"
								}
							}]
						}
						, "rval": {
							"proto": "(x >> 16)"
							, "kind": "(?)"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1076
							, "args": [{
								"proto": "(x >> 16)"
								, "kind": ">>"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1076
								, "lval": {
									"proto": "x"
									, "kind": ".ref"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1076
									, "value": "x"
								}
								, "rval": {
									"proto": "16"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1076
									, "value": "16"
								}
							}]
						}
					}
				}
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1077
			, "stmt": {
				"proto": "(result := (x & 63))"
				, "kind": ":="
				, "type": "int32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "value": "result"
				}
				, "rval": {
					"proto": "(x & 63)"
					, "kind": "&"
					, "type": "uint32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1077
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1077
						, "value": "x"
					}
					, "rval": {
						"proto": "63"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1077
						, "value": "63"
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 283248
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283250
	}, {
		"instruction": "b32.shr 0x001"
		, "offset": 283252
	}, {
		"instruction": "load.c32 1431655765"
		, "offset": 283254
	}, {
		"instruction": "b32.and"
		, "offset": 283259
	}, {
		"instruction": "i32.sub"
		, "offset": 283260
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283261
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283263
	}, {
		"instruction": "b32.shr 0x002"
		, "offset": 283265
	}, {
		"instruction": "load.c32 858993459"
		, "offset": 283267
	}, {
		"instruction": "b32.and"
		, "offset": 283272
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283273
	}, {
		"instruction": "load.c32 858993459"
		, "offset": 283275
	}, {
		"instruction": "b32.and"
		, "offset": 283280
	}, {
		"instruction": "i32.add"
		, "offset": 283281
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283282
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283284
	}, {
		"instruction": "b32.shr 0x004"
		, "offset": 283286
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283288
	}, {
		"instruction": "i32.add"
		, "offset": 283290
	}, {
		"instruction": "load.c32 252645135"
		, "offset": 283291
	}, {
		"instruction": "b32.and"
		, "offset": 283296
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283297
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283299
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283301
	}, {
		"instruction": "b32.shr 0x008"
		, "offset": 283303
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 283305
	}, {
		"instruction": "b32.shr 0x010"
		, "offset": 283307
	}, {
		"instruction": "i32.add"
		, "offset": 283309
	}, {
		"instruction": "i32.add"
		, "offset": 283310
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283311
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283313
	}, {
		"instruction": "b32.and 0x03f"
		, "offset": 283315
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283317
	}, {
		"instruction": "ret"
		, "offset": 283319
	}, {
		"instruction": "ret"
		, "offset": 283320
	}]
}, {
	"proto": "bitswp(x: uint32)"
	, "kind": ".ref"
	, "name": "bitswp"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1081
	, "args": [{
		"proto": "bitswp.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "bitswp(x: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1081
		, "cast": ".u32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 105
	, "offs": 283321
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1081
		, "stmt": [{
			"proto": "x := (((x >> 1) & 1431655765) | ((x & 1431655765) << 1));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1082
			, "stmt": {
				"proto": "(x := (((x >> 1) & 1431655765) | ((x & 1431655765) << 1)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1082
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1082
					, "value": "x"
				}
				, "rval": {
					"proto": "(((x >> 1) & 1431655765) | ((x & 1431655765) << 1))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1082
					, "lval": {
						"proto": "((x >> 1) & 1431655765)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1082
						, "args": [{
							"proto": "((x >> 1) & 1431655765)"
							, "kind": "&"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1082
							, "lval": {
								"proto": "(x >> 1)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1082
								, "args": [{
									"proto": "(x >> 1)"
									, "kind": ">>"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1082
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1082
										, "value": "x"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1082
										, "value": "1"
									}
								}]
							}
							, "rval": {
								"proto": "1431655765"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1082
								, "value": "1431655765"
							}
						}]
					}
					, "rval": {
						"proto": "((x & 1431655765) << 1)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1082
						, "args": [{
							"proto": "((x & 1431655765) << 1)"
							, "kind": "<<"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1082
							, "lval": {
								"proto": "(x & 1431655765)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1082
								, "args": [{
									"proto": "(x & 1431655765)"
									, "kind": "&"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1082
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1082
										, "value": "x"
									}
									, "rval": {
										"proto": "1431655765"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1082
										, "value": "1431655765"
									}
								}]
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1082
								, "value": "1"
							}
						}]
					}
				}
			}
		}, {
			"proto": "x := (((x >> 2) & 858993459) | ((x & 858993459) << 2));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1083
			, "stmt": {
				"proto": "(x := (((x >> 2) & 858993459) | ((x & 858993459) << 2)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1083
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1083
					, "value": "x"
				}
				, "rval": {
					"proto": "(((x >> 2) & 858993459) | ((x & 858993459) << 2))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1083
					, "lval": {
						"proto": "((x >> 2) & 858993459)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1083
						, "args": [{
							"proto": "((x >> 2) & 858993459)"
							, "kind": "&"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1083
							, "lval": {
								"proto": "(x >> 2)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1083
								, "args": [{
									"proto": "(x >> 2)"
									, "kind": ">>"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1083
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1083
										, "value": "x"
									}
									, "rval": {
										"proto": "2"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1083
										, "value": "2"
									}
								}]
							}
							, "rval": {
								"proto": "858993459"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1083
								, "value": "858993459"
							}
						}]
					}
					, "rval": {
						"proto": "((x & 858993459) << 2)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1083
						, "args": [{
							"proto": "((x & 858993459) << 2)"
							, "kind": "<<"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1083
							, "lval": {
								"proto": "(x & 858993459)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1083
								, "args": [{
									"proto": "(x & 858993459)"
									, "kind": "&"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1083
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1083
										, "value": "x"
									}
									, "rval": {
										"proto": "858993459"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1083
										, "value": "858993459"
									}
								}]
							}
							, "rval": {
								"proto": "2"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1083
								, "value": "2"
							}
						}]
					}
				}
			}
		}, {
			"proto": "x := (((x >> 4) & 252645135) | ((x & 252645135) << 4));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1084
			, "stmt": {
				"proto": "(x := (((x >> 4) & 252645135) | ((x & 252645135) << 4)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1084
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1084
					, "value": "x"
				}
				, "rval": {
					"proto": "(((x >> 4) & 252645135) | ((x & 252645135) << 4))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1084
					, "lval": {
						"proto": "((x >> 4) & 252645135)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1084
						, "args": [{
							"proto": "((x >> 4) & 252645135)"
							, "kind": "&"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1084
							, "lval": {
								"proto": "(x >> 4)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1084
								, "args": [{
									"proto": "(x >> 4)"
									, "kind": ">>"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1084
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1084
										, "value": "x"
									}
									, "rval": {
										"proto": "4"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1084
										, "value": "4"
									}
								}]
							}
							, "rval": {
								"proto": "252645135"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1084
								, "value": "252645135"
							}
						}]
					}
					, "rval": {
						"proto": "((x & 252645135) << 4)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1084
						, "args": [{
							"proto": "((x & 252645135) << 4)"
							, "kind": "<<"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1084
							, "lval": {
								"proto": "(x & 252645135)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1084
								, "args": [{
									"proto": "(x & 252645135)"
									, "kind": "&"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1084
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1084
										, "value": "x"
									}
									, "rval": {
										"proto": "252645135"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1084
										, "value": "252645135"
									}
								}]
							}
							, "rval": {
								"proto": "4"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1084
								, "value": "4"
							}
						}]
					}
				}
			}
		}, {
			"proto": "x := (((x >> 8) & 16711935) | ((x & 16711935) << 8));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1085
			, "stmt": {
				"proto": "(x := (((x >> 8) & 16711935) | ((x & 16711935) << 8)))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1085
				, "lval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1085
					, "value": "x"
				}
				, "rval": {
					"proto": "(((x >> 8) & 16711935) | ((x & 16711935) << 8))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1085
					, "lval": {
						"proto": "((x >> 8) & 16711935)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1085
						, "args": [{
							"proto": "((x >> 8) & 16711935)"
							, "kind": "&"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1085
							, "lval": {
								"proto": "(x >> 8)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1085
								, "args": [{
									"proto": "(x >> 8)"
									, "kind": ">>"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1085
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1085
										, "value": "x"
									}
									, "rval": {
										"proto": "8"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1085
										, "value": "8"
									}
								}]
							}
							, "rval": {
								"proto": "16711935"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1085
								, "value": "16711935"
							}
						}]
					}
					, "rval": {
						"proto": "((x & 16711935) << 8)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1085
						, "args": [{
							"proto": "((x & 16711935) << 8)"
							, "kind": "<<"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1085
							, "lval": {
								"proto": "(x & 16711935)"
								, "kind": "(?)"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1085
								, "args": [{
									"proto": "(x & 16711935)"
									, "kind": "&"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1085
									, "lval": {
										"proto": "x"
										, "kind": ".ref"
										, "type": "uint32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1085
										, "value": "x"
									}
									, "rval": {
										"proto": "16711935"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1085
										, "value": "16711935"
									}
								}]
							}
							, "rval": {
								"proto": "8"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1085
								, "value": "8"
							}
						}]
					}
				}
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1086
			, "stmt": {
				"proto": "(result := ((x >> 16) | (x << 16)))"
				, "kind": ":="
				, "type": "int32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "value": "result"
				}
				, "rval": {
					"proto": "((x >> 16) | (x << 16))"
					, "kind": "|"
					, "type": "uint32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1086
					, "lval": {
						"proto": "(x >> 16)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1086
						, "args": [{
							"proto": "(x >> 16)"
							, "kind": ">>"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1086
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1086
								, "value": "x"
							}
							, "rval": {
								"proto": "16"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1086
								, "value": "16"
							}
						}]
					}
					, "rval": {
						"proto": "(x << 16)"
						, "kind": "(?)"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1086
						, "args": [{
							"proto": "(x << 16)"
							, "kind": "<<"
							, "type": "uint32"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1086
							, "lval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "uint32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1086
								, "value": "x"
							}
							, "rval": {
								"proto": "16"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1086
								, "value": "16"
							}
						}]
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 283321
	}, {
		"instruction": "b32.shr 0x001"
		, "offset": 283323
	}, {
		"instruction": "load.c32 1431655765"
		, "offset": 283325
	}, {
		"instruction": "b32.and"
		, "offset": 283330
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283331
	}, {
		"instruction": "load.c32 1431655765"
		, "offset": 283333
	}, {
		"instruction": "b32.and"
		, "offset": 283338
	}, {
		"instruction": "b32.shl 0x001"
		, "offset": 283339
	}, {
		"instruction": "b32.or"
		, "offset": 283341
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283342
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283344
	}, {
		"instruction": "b32.shr 0x002"
		, "offset": 283346
	}, {
		"instruction": "load.c32 858993459"
		, "offset": 283348
	}, {
		"instruction": "b32.and"
		, "offset": 283353
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283354
	}, {
		"instruction": "load.c32 858993459"
		, "offset": 283356
	}, {
		"instruction": "b32.and"
		, "offset": 283361
	}, {
		"instruction": "b32.shl 0x002"
		, "offset": 283362
	}, {
		"instruction": "b32.or"
		, "offset": 283364
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283365
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283367
	}, {
		"instruction": "b32.shr 0x004"
		, "offset": 283369
	}, {
		"instruction": "load.c32 252645135"
		, "offset": 283371
	}, {
		"instruction": "b32.and"
		, "offset": 283376
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283377
	}, {
		"instruction": "load.c32 252645135"
		, "offset": 283379
	}, {
		"instruction": "b32.and"
		, "offset": 283384
	}, {
		"instruction": "b32.shl 0x004"
		, "offset": 283385
	}, {
		"instruction": "b32.or"
		, "offset": 283387
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283388
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283390
	}, {
		"instruction": "b32.shr 0x008"
		, "offset": 283392
	}, {
		"instruction": "load.c32 16711935"
		, "offset": 283394
	}, {
		"instruction": "b32.and"
		, "offset": 283399
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283400
	}, {
		"instruction": "load.c32 16711935"
		, "offset": 283402
	}, {
		"instruction": "b32.and"
		, "offset": 283407
	}, {
		"instruction": "b32.shl 0x008"
		, "offset": 283408
	}, {
		"instruction": "b32.or"
		, "offset": 283410
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 283411
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 283413
	}, {
		"instruction": "b32.shr 0x010"
		, "offset": 283415
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 283417
	}, {
		"instruction": "b32.shl 0x010"
		, "offset": 283419
	}, {
		"instruction": "b32.or"
		, "offset": 283421
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 283422
	}, {
		"instruction": "ret"
		, "offset": 283424
	}, {
		"instruction": "ret"
		, "offset": 283425
	}]
}, {
	"proto": "Complex"
	, "kind": ".rec"
	, "name": "Complex"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 1092
	, "cast": ".rec"
	, "size": 16
	, "offs": 180648
	, "const": true
	, "static": true
}, {
	"proto": "Complex.re"
	, "kind": ".ref"
	, "name": "re"
	, "declaredIn": "Complex"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1093
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": false
}, {
	"proto": "Complex.im"
	, "kind": ".ref"
	, "name": "im"
	, "declaredIn": "Complex"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1094
	, "cast": ".f64"
	, "size": 8
	, "offs": 8
	, "const": true
	, "static": false
}, {
	"proto": "Complex(re: float64, im: float64)"
	, "kind": ".def"
	, "name": "Complex"
	, "type": "Complex"
	, "args": [{
		"proto": "Complex.re"
		, "kind": ".def"
		, "name": "re"
		, "declaredIn": "Complex(re: float64, im: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "Complex.im"
		, "kind": ".def"
		, "name": "im"
		, "declaredIn": "Complex(re: float64, im: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "emit(re, im)"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1173
		, "args": [{
			"proto": "im"
			, "kind": ".ref"
			, "type": "Complex.im"
			, "cast": ".f64"
			, "value": "im"
		}, {
			"proto": "re"
			, "kind": ".ref"
			, "type": "Complex.re"
			, "cast": ".f64"
			, "value": "re"
		}]
	}
}, {
	"proto": "Complex(re: float64)"
	, "kind": ".def"
	, "name": "Complex"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1098
	, "args": [{
		"proto": "Complex.re"
		, "kind": ".ref"
		, "name": "re"
		, "declaredIn": "Complex(re: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1098
		, "cast": ".f64"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Complex(re, float64(0))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1098
		, "args": [{
			"proto": "float64(0)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1098
			, "args": [{
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1098
				, "value": "0"
			}]
		}, {
			"proto": "re"
			, "kind": ".ref"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1098
			, "value": "re"
		}]
	}
}, {
	"proto": "neg(a: Complex)"
	, "kind": ".def"
	, "name": "neg"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1100
	, "args": [{
		"proto": "neg.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "neg(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1100
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, neg.p2d, Complex(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1100
		, "args": [{
			"proto": "Complex(a)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1100
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1100
				, "value": "a"
			}]
		}, {
			"proto": "neg.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1100
			, "lval": {
				"proto": "neg"
				, "kind": ".ref"
				, "type": "emit.neg"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1100
				, "value": "neg"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1100
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1100
			, "value": "Complex"
		}]
	}
}, {
	"proto": "add(a: Complex, b: Complex)"
	, "kind": ".def"
	, "name": "add"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1102
	, "args": [{
		"proto": "add.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "add(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1102
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "add.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "add(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1102
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, add.p2d, Complex(b), Complex(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1102
		, "args": [{
			"proto": "Complex(a)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1102
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1102
				, "value": "a"
			}]
		}, {
			"proto": "Complex(b)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1102
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1102
				, "value": "b"
			}]
		}, {
			"proto": "add.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1102
			, "lval": {
				"proto": "add"
				, "kind": ".ref"
				, "type": "emit.add"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1102
				, "value": "add"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1102
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1102
			, "value": "Complex"
		}]
	}
}, {
	"proto": "add(a: Complex, b: float64)"
	, "kind": ".def"
	, "name": "add"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1103
	, "args": [{
		"proto": "add.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "add(a: Complex, b: float64)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1103
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "add.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "add(a: Complex, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1103
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, add.p2d, float64(b), float64(0), Complex(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1103
		, "args": [{
			"proto": "Complex(a)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1103
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1103
				, "value": "a"
			}]
		}, {
			"proto": "float64(0)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1103
			, "args": [{
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1103
				, "value": "0"
			}]
		}, {
			"proto": "float64(b)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1103
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1103
				, "value": "b"
			}]
		}, {
			"proto": "add.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1103
			, "lval": {
				"proto": "add"
				, "kind": ".ref"
				, "type": "emit.add"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1103
				, "value": "add"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1103
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1103
			, "value": "Complex"
		}]
	}
}, {
	"proto": "add(a: float64, b: Complex)"
	, "kind": ".def"
	, "name": "add"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1104
	, "args": [{
		"proto": "add.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "add(a: float64, b: Complex)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1104
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "add.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "add(a: float64, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1104
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, add.p2d, Complex(b), float64(a), float64(0))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1104
		, "args": [{
			"proto": "float64(0)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1104
			, "args": [{
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1104
				, "value": "0"
			}]
		}, {
			"proto": "float64(a)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1104
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1104
				, "value": "a"
			}]
		}, {
			"proto": "Complex(b)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1104
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1104
				, "value": "b"
			}]
		}, {
			"proto": "add.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1104
			, "lval": {
				"proto": "add"
				, "kind": ".ref"
				, "type": "emit.add"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1104
				, "value": "add"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1104
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1104
			, "value": "Complex"
		}]
	}
}, {
	"proto": "sub(a: Complex, b: Complex)"
	, "kind": ".def"
	, "name": "sub"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1106
	, "args": [{
		"proto": "sub.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "sub(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1106
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "sub.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "sub(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1106
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, sub.p2d, Complex(b), Complex(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1106
		, "args": [{
			"proto": "Complex(a)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1106
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1106
				, "value": "a"
			}]
		}, {
			"proto": "Complex(b)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1106
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1106
				, "value": "b"
			}]
		}, {
			"proto": "sub.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1106
			, "lval": {
				"proto": "sub"
				, "kind": ".ref"
				, "type": "emit.sub"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1106
				, "value": "sub"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1106
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1106
			, "value": "Complex"
		}]
	}
}, {
	"proto": "sub(a: Complex, b: float64)"
	, "kind": ".def"
	, "name": "sub"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1107
	, "args": [{
		"proto": "sub.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "sub(a: Complex, b: float64)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1107
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "sub.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "sub(a: Complex, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1107
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, sub.p2d, float64(b), float64(0), Complex(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1107
		, "args": [{
			"proto": "Complex(a)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1107
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1107
				, "value": "a"
			}]
		}, {
			"proto": "float64(0)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1107
			, "args": [{
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1107
				, "value": "0"
			}]
		}, {
			"proto": "float64(b)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1107
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1107
				, "value": "b"
			}]
		}, {
			"proto": "sub.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1107
			, "lval": {
				"proto": "sub"
				, "kind": ".ref"
				, "type": "emit.sub"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1107
				, "value": "sub"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1107
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1107
			, "value": "Complex"
		}]
	}
}, {
	"proto": "sub(a: float64, b: Complex)"
	, "kind": ".def"
	, "name": "sub"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1108
	, "args": [{
		"proto": "sub.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "sub(a: float64, b: Complex)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1108
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "sub.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "sub(a: float64, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1108
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, sub.p2d, Complex(b), float64(a), float64(0))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1108
		, "args": [{
			"proto": "float64(0)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1108
			, "args": [{
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1108
				, "value": "0"
			}]
		}, {
			"proto": "float64(a)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1108
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1108
				, "value": "a"
			}]
		}, {
			"proto": "Complex(b)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1108
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1108
				, "value": "b"
			}]
		}, {
			"proto": "sub.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1108
			, "lval": {
				"proto": "sub"
				, "kind": ".ref"
				, "type": "emit.sub"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1108
				, "value": "sub"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1108
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1108
			, "value": "Complex"
		}]
	}
}, {
	"proto": "mul(a: Complex, b: Complex)"
	, "kind": ".def"
	, "name": "mul"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1110
	, "args": [{
		"proto": "mul.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "mul(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1110
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mul.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "mul(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1110
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, sub.f64, mul.p2d, float64(b.im), float64(b.re), float64(a.im), float64(a.re), add.f64, mul.p2d, Complex(b), float64(a.im), float64(a.re))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1110
		, "args": [{
			"proto": "float64(a.re)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1112
			, "args": [{
				"proto": "a.re"
				, "kind": "."
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1112
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1112
					, "value": "a"
				}
				, "rval": {
					"proto": "re"
					, "kind": ".ref"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1112
					, "value": "re"
				}
			}]
		}, {
			"proto": "float64(a.im)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1112
			, "args": [{
				"proto": "a.im"
				, "kind": "."
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1112
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1112
					, "value": "a"
				}
				, "rval": {
					"proto": "im"
					, "kind": ".ref"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1112
					, "value": "im"
				}
			}]
		}, {
			"proto": "Complex(b)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1112
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1112
				, "value": "b"
			}]
		}, {
			"proto": "mul.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1112
			, "lval": {
				"proto": "mul"
				, "kind": ".ref"
				, "type": "emit.mul"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1112
				, "value": "mul"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1112
				, "value": "p2d"
			}
		}, {
			"proto": "add.f64"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1112
			, "lval": {
				"proto": "add"
				, "kind": ".ref"
				, "type": "emit.add"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1112
				, "value": "add"
			}
			, "rval": {
				"proto": "f64"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1112
				, "value": "f64"
			}
		}, {
			"proto": "float64(a.re)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1111
			, "args": [{
				"proto": "a.re"
				, "kind": "."
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1111
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1111
					, "value": "a"
				}
				, "rval": {
					"proto": "re"
					, "kind": ".ref"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1111
					, "value": "re"
				}
			}]
		}, {
			"proto": "float64(a.im)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1111
			, "args": [{
				"proto": "a.im"
				, "kind": "."
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1111
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1111
					, "value": "a"
				}
				, "rval": {
					"proto": "im"
					, "kind": ".ref"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1111
					, "value": "im"
				}
			}]
		}, {
			"proto": "float64(b.re)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1111
			, "args": [{
				"proto": "b.re"
				, "kind": "."
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1111
				, "lval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1111
					, "value": "b"
				}
				, "rval": {
					"proto": "re"
					, "kind": ".ref"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1111
					, "value": "re"
				}
			}]
		}, {
			"proto": "float64(b.im)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1111
			, "args": [{
				"proto": "b.im"
				, "kind": "."
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1111
				, "lval": {
					"proto": "b"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1111
					, "value": "b"
				}
				, "rval": {
					"proto": "im"
					, "kind": ".ref"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1111
					, "value": "im"
				}
			}]
		}, {
			"proto": "mul.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1111
			, "lval": {
				"proto": "mul"
				, "kind": ".ref"
				, "type": "emit.mul"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1111
				, "value": "mul"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1111
				, "value": "p2d"
			}
		}, {
			"proto": "sub.f64"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1111
			, "lval": {
				"proto": "sub"
				, "kind": ".ref"
				, "type": "emit.sub"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1111
				, "value": "sub"
			}
			, "rval": {
				"proto": "f64"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1111
				, "value": "f64"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1110
			, "value": "Complex"
		}]
	}
}, {
	"proto": "mul(a: Complex, b: float64)"
	, "kind": ".def"
	, "name": "mul"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1115
	, "args": [{
		"proto": "mul.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "mul(a: Complex, b: float64)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1115
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mul.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "mul(a: Complex, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1115
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, mul.p2d, dupp.x2(0), float64(b), Complex(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1115
		, "args": [{
			"proto": "Complex(a)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1115
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1115
				, "value": "a"
			}]
		}, {
			"proto": "float64(b)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1115
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1115
				, "value": "b"
			}]
		}, {
			"proto": "dupp.x2(0)"
			, "kind": "."
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 1115
			, "lval": {
				"proto": "dupp"
				, "kind": ".ref"
				, "type": "emit.dupp"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1115
				, "value": "dupp"
			}
			, "rval": {
				"proto": "x2(0)"
				, "kind": ".ref"
				, "type": "int64"
				, "file": "stdlib.cvx"
				, "line": 1115
				, "value": "x2(0)"
			}
		}, {
			"proto": "mul.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1115
			, "lval": {
				"proto": "mul"
				, "kind": ".ref"
				, "type": "emit.mul"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1115
				, "value": "mul"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1115
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1115
			, "value": "Complex"
		}]
	}
}, {
	"proto": "mul(a: float64, b: Complex)"
	, "kind": ".def"
	, "name": "mul"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1116
	, "args": [{
		"proto": "mul.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "mul(a: float64, b: Complex)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1116
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mul.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "mul(a: float64, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1116
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(Complex, mul.p2d, Complex(b), dupp.x2(0), float64(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1116
		, "args": [{
			"proto": "float64(a)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1116
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1116
				, "value": "a"
			}]
		}, {
			"proto": "dupp.x2(0)"
			, "kind": "."
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 1116
			, "lval": {
				"proto": "dupp"
				, "kind": ".ref"
				, "type": "emit.dupp"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1116
				, "value": "dupp"
			}
			, "rval": {
				"proto": "x2(0)"
				, "kind": ".ref"
				, "type": "int64"
				, "file": "stdlib.cvx"
				, "line": 1116
				, "value": "x2(0)"
			}
		}, {
			"proto": "Complex(b)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1116
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1116
				, "value": "b"
			}]
		}, {
			"proto": "mul.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1116
			, "lval": {
				"proto": "mul"
				, "kind": ".ref"
				, "type": "emit.mul"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1116
				, "value": "mul"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1116
				, "value": "p2d"
			}
		}, {
			"proto": "Complex"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1116
			, "value": "Complex"
		}]
	}
}, {
	"proto": "div(a: Complex, b: Complex)"
	, "kind": ".ref"
	, "name": "div"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1118
	, "args": [{
		"proto": "div.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "div(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1118
		, "cast": ".rec"
		, "size": 16
		, "offs": 48
		, "const": false
		, "static": false
	}, {
		"proto": "div.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "div(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1118
		, "cast": ".rec"
		, "size": 16
		, "offs": 32
		, "const": false
		, "static": false
	}]
	, "cast": ".rec"
	, "size": 158
	, "offs": 283426
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1118
		, "stmt": [{
			"proto": "if (Math.abs(b.re) >= Math.abs(b.im))"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1122
			, "test": {
				"proto": "(Math.abs(b.re) >= Math.abs(b.im))"
				, "kind": ">="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1122
				, "lval": {
					"proto": "Math.abs(b.re)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1122
					, "args": [{
						"proto": "b.re"
						, "kind": "."
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 1122
						, "lval": {
							"proto": "b"
							, "kind": ".ref"
							, "type": "Complex"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1122
							, "value": "b"
						}
						, "rval": {
							"proto": "re"
							, "kind": ".ref"
							, "type": "float64"
							, "file": "stdlib.cvx"
							, "line": 1122
							, "value": "re"
						}
					}]
				}
				, "rval": {
					"proto": "Math.abs(b.im)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1122
					, "args": [{
						"proto": "b.im"
						, "kind": "."
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 1122
						, "lval": {
							"proto": "b"
							, "kind": ".ref"
							, "type": "Complex"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1122
							, "value": "b"
						}
						, "rval": {
							"proto": "im"
							, "kind": ".ref"
							, "type": "float64"
							, "file": "stdlib.cvx"
							, "line": 1122
							, "value": "im"
						}
					}]
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1122
				, "stmt": [{
					"proto": "r"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1123
					, "value": "r"
				}, {
					"proto": "den"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1124
					, "value": "den"
				}, {
					"proto": "re"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1125
					, "value": "re"
				}, {
					"proto": "im"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1126
					, "value": "im"
				}, {
					"proto": "result := Complex(re, im);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1127
					, "stmt": {
						"proto": "(result := Complex(re, im))"
						, "kind": ":="
						, "type": "Complex"
						, "file": "stdlib.cvx"
						, "line": 1127
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "Complex"
							, "cast": ".rec"
							, "file": "stdlib.cvx"
							, "line": 1127
							, "value": "result"
						}
						, "rval": {
							"proto": "Complex(re, im)"
							, "kind": "(?)"
							, "type": "Complex"
							, "cast": ".rec"
							, "file": "stdlib.cvx"
							, "line": 1127
							, "args": [{
								"proto": "im"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 1127
								, "value": "im"
							}, {
								"proto": "re"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 1127
								, "value": "re"
							}]
						}
					}
				}]
			}
			, "else": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1129
				, "stmt": [{
					"proto": "r"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1130
					, "value": "r"
				}, {
					"proto": "den"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1131
					, "value": "den"
				}, {
					"proto": "re"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1132
					, "value": "re"
				}, {
					"proto": "im"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1133
					, "value": "im"
				}, {
					"proto": "result := Complex(re, im);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1134
					, "stmt": {
						"proto": "(result := Complex(re, im))"
						, "kind": ":="
						, "type": "Complex"
						, "file": "stdlib.cvx"
						, "line": 1134
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "Complex"
							, "cast": ".rec"
							, "file": "stdlib.cvx"
							, "line": 1134
							, "value": "result"
						}
						, "rval": {
							"proto": "Complex(re, im)"
							, "kind": "(?)"
							, "type": "Complex"
							, "cast": ".rec"
							, "file": "stdlib.cvx"
							, "line": 1134
							, "args": [{
								"proto": "im"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 1134
								, "value": "im"
							}, {
								"proto": "re"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 1134
								, "value": "re"
							}]
						}
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x2 sp(5)"
		, "offset": 283426
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283428
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 283430
	}, {
		"instruction": "f64.clt"
		, "offset": 283439
	}, {
		"instruction": "jz +11"
		, "offset": 283440
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283444
	}, {
		"instruction": "f64.neg"
		, "offset": 283446
	}, {
		"instruction": "jmp +6"
		, "offset": 283447
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283451
	}, {
		"instruction": "set.x2 sp(2)"
		, "offset": 283453
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 283455
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283457
	}, {
		"instruction": "load.f64 0.000000"
		, "offset": 283459
	}, {
		"instruction": "f64.clt"
		, "offset": 283468
	}, {
		"instruction": "jz +11"
		, "offset": 283469
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283473
	}, {
		"instruction": "f64.neg"
		, "offset": 283475
	}, {
		"instruction": "jmp +6"
		, "offset": 283476
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283480
	}, {
		"instruction": "set.x2 sp(2)"
		, "offset": 283482
	}, {
		"instruction": "f64.clt"
		, "offset": 283484
	}, {
		"instruction": "jnz +53"
		, "offset": 283485
	}, {
		"instruction": "dup.x2 sp(7)"
		, "offset": 283489
	}, {
		"instruction": "dup.x2 sp(7)"
		, "offset": 283491
	}, {
		"instruction": "f64.div"
		, "offset": 283493
	}, {
		"instruction": "dup.x2 sp(7)"
		, "offset": 283494
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283496
	}, {
		"instruction": "dup.x2 sp(13)"
		, "offset": 283498
	}, {
		"instruction": "f64.mul"
		, "offset": 283500
	}, {
		"instruction": "f64.add"
		, "offset": 283501
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 283502
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283504
	}, {
		"instruction": "dup.x2 sp(11)"
		, "offset": 283506
	}, {
		"instruction": "f64.mul"
		, "offset": 283508
	}, {
		"instruction": "f64.add"
		, "offset": 283509
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283510
	}, {
		"instruction": "f64.div"
		, "offset": 283512
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 283513
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 283515
	}, {
		"instruction": "dup.x2 sp(11)"
		, "offset": 283517
	}, {
		"instruction": "f64.mul"
		, "offset": 283519
	}, {
		"instruction": "f64.sub"
		, "offset": 283520
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283521
	}, {
		"instruction": "f64.div"
		, "offset": 283523
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283524
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283526
	}, {
		"instruction": "set.x4 sp(21)"
		, "offset": 283528
	}, {
		"instruction": "stack -32"
		, "offset": 283530
	}, {
		"instruction": "jmp +49"
		, "offset": 283534
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 283538
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 283540
	}, {
		"instruction": "f64.div"
		, "offset": 283542
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 283543
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283545
	}, {
		"instruction": "dup.x2 sp(11)"
		, "offset": 283547
	}, {
		"instruction": "f64.mul"
		, "offset": 283549
	}, {
		"instruction": "f64.add"
		, "offset": 283550
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 283551
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283553
	}, {
		"instruction": "f64.mul"
		, "offset": 283555
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 283556
	}, {
		"instruction": "f64.add"
		, "offset": 283558
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283559
	}, {
		"instruction": "f64.div"
		, "offset": 283561
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 283562
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 283564
	}, {
		"instruction": "f64.mul"
		, "offset": 283566
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 283567
	}, {
		"instruction": "f64.sub"
		, "offset": 283569
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283570
	}, {
		"instruction": "f64.div"
		, "offset": 283572
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283573
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283575
	}, {
		"instruction": "set.x4 sp(21)"
		, "offset": 283577
	}, {
		"instruction": "stack -32"
		, "offset": 283579
	}, {
		"instruction": "ret"
		, "offset": 283583
	}]
}, {
	"proto": "abs(a: Complex)"
	, "kind": ".def"
	, "name": "abs"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1138
	, "args": [{
		"proto": "abs.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "abs(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1138
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Math.hypot(a.re, a.im)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1138
		, "args": [{
			"proto": "a.im"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1138
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1138
				, "value": "a"
			}
			, "rval": {
				"proto": "im"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1138
				, "value": "im"
			}
		}, {
			"proto": "a.re"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1138
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1138
				, "value": "a"
			}
			, "rval": {
				"proto": "re"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1138
				, "value": "re"
			}
		}]
	}
}, {
	"proto": "arg(a: Complex)"
	, "kind": ".def"
	, "name": "arg"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1139
	, "args": [{
		"proto": "arg.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "arg(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1139
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64.atan2(a.re, a.im)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1139
		, "args": [{
			"proto": "a.im"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1139
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1139
				, "value": "a"
			}
			, "rval": {
				"proto": "im"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1139
				, "value": "im"
			}
		}, {
			"proto": "a.re"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1139
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1139
				, "value": "a"
			}
			, "rval": {
				"proto": "re"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1139
				, "value": "re"
			}
		}]
	}
}, {
	"proto": "re(a: Complex)"
	, "kind": ".def"
	, "name": "re"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1141
	, "args": [{
		"proto": "re.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "re(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1141
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64(a.re)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1141
		, "args": [{
			"proto": "a.re"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1141
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1141
				, "value": "a"
			}
			, "rval": {
				"proto": "re"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1141
				, "value": "re"
			}
		}]
	}
}, {
	"proto": "im(a: Complex)"
	, "kind": ".def"
	, "name": "im"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1142
	, "args": [{
		"proto": "im.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "im(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1142
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64(a.im)"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1142
		, "args": [{
			"proto": "a.im"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1142
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1142
				, "value": "a"
			}
			, "rval": {
				"proto": "im"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1142
				, "value": "im"
			}
		}]
	}
}, {
	"proto": "inv(a: Complex)"
	, "kind": ".ref"
	, "name": "inv"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1144
	, "args": [{
		"proto": "inv.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "inv(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1144
		, "cast": ".rec"
		, "size": 16
		, "offs": 32
		, "const": false
		, "static": false
	}]
	, "cast": ".rec"
	, "size": 34
	, "offs": 283584
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1144
		, "stmt": [{
			"proto": "d"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 1145
			, "value": "d"
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1146
			, "stmt": {
				"proto": "(result := Complex(((+a.re) / d), ((-a.im) / d)))"
				, "kind": ":="
				, "type": "Complex"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".rec"
					, "value": "result"
				}
				, "rval": {
					"proto": "Complex(((+a.re) / d), ((-a.im) / d))"
					, "kind": "(?)"
					, "type": "Complex"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1146
					, "args": [{
						"proto": "((-a.im) / d)"
						, "kind": "/"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 1146
						, "lval": {
							"proto": "(-a.im)"
							, "kind": "-"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 1146
							, "rval": {
								"proto": "a.im"
								, "kind": "."
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 1146
								, "lval": {
									"proto": "a"
									, "kind": ".ref"
									, "type": "Complex"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1146
									, "value": "a"
								}
								, "rval": {
									"proto": "im"
									, "kind": ".ref"
									, "type": "float64"
									, "file": "stdlib.cvx"
									, "line": 1146
									, "value": "im"
								}
							}
						}
						, "rval": {
							"proto": "d"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 1146
							, "value": "d"
						}
					}, {
						"proto": "((+a.re) / d)"
						, "kind": "/"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 1146
						, "lval": {
							"proto": "(+a.re)"
							, "kind": "+"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 1146
							, "rval": {
								"proto": "a.re"
								, "kind": "."
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 1146
								, "lval": {
									"proto": "a"
									, "kind": ".ref"
									, "type": "Complex"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1146
									, "value": "a"
								}
								, "rval": {
									"proto": "re"
									, "kind": ".ref"
									, "type": "float64"
									, "file": "stdlib.cvx"
									, "line": 1146
									, "value": "re"
								}
							}
						}
						, "rval": {
							"proto": "d"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 1146
							, "value": "d"
						}
					}]
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x2 sp(1)"
		, "offset": 283584
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 283586
	}, {
		"instruction": "f64.mul"
		, "offset": 283588
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 283589
	}, {
		"instruction": "dup.x2 sp(7)"
		, "offset": 283591
	}, {
		"instruction": "f64.mul"
		, "offset": 283593
	}, {
		"instruction": "f64.add"
		, "offset": 283594
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 283595
	}, {
		"instruction": "f64.neg"
		, "offset": 283597
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283598
	}, {
		"instruction": "f64.div"
		, "offset": 283600
	}, {
		"instruction": "dup.x2 sp(5)"
		, "offset": 283601
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283603
	}, {
		"instruction": "f64.div"
		, "offset": 283605
	}, {
		"instruction": "set.x4 sp(11)"
		, "offset": 283606
	}, {
		"instruction": "stack -8"
		, "offset": 283608
	}, {
		"instruction": "ret"
		, "offset": 283612
	}, {
		"instruction": "stack -8"
		, "offset": 283613
	}, {
		"instruction": "ret"
		, "offset": 283617
	}]
}, {
	"proto": "conj(a: Complex)"
	, "kind": ".def"
	, "name": "conj"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1149
	, "args": [{
		"proto": "conj.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "conj(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1149
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Complex(a.re, (-a.im))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1149
		, "args": [{
			"proto": "(-a.im)"
			, "kind": "-"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1149
			, "rval": {
				"proto": "a.im"
				, "kind": "."
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1149
				, "lval": {
					"proto": "a"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1149
					, "value": "a"
				}
				, "rval": {
					"proto": "im"
					, "kind": ".ref"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1149
					, "value": "im"
				}
			}
		}, {
			"proto": "a.re"
			, "kind": "."
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1149
			, "lval": {
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1149
				, "value": "a"
			}
			, "rval": {
				"proto": "re"
				, "kind": ".ref"
				, "type": "float64"
				, "file": "stdlib.cvx"
				, "line": 1149
				, "value": "re"
			}
		}]
	}
}, {
	"proto": "exp(a: Complex)"
	, "kind": ".def"
	, "name": "exp"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1151
	, "args": [{
		"proto": "exp.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "exp(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1151
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Complex((float64.exp(a.re) * float64.cos(a.im)), (float64.exp(a.re) * float64.sin(a.im)))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1151
		, "args": [{
			"proto": "(float64.exp(a.re) * float64.sin(a.im))"
			, "kind": "*"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1151
			, "lval": {
				"proto": "float64.exp(a.re)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1151
				, "args": [{
					"proto": "a.re"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1151
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1151
						, "value": "a"
					}
					, "rval": {
						"proto": "re"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1151
						, "value": "re"
					}
				}]
			}
			, "rval": {
				"proto": "float64.sin(a.im)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1151
				, "args": [{
					"proto": "a.im"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1151
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1151
						, "value": "a"
					}
					, "rval": {
						"proto": "im"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1151
						, "value": "im"
					}
				}]
			}
		}, {
			"proto": "(float64.exp(a.re) * float64.cos(a.im))"
			, "kind": "*"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1151
			, "lval": {
				"proto": "float64.exp(a.re)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1151
				, "args": [{
					"proto": "a.re"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1151
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1151
						, "value": "a"
					}
					, "rval": {
						"proto": "re"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1151
						, "value": "re"
					}
				}]
			}
			, "rval": {
				"proto": "float64.cos(a.im)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1151
				, "args": [{
					"proto": "a.im"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1151
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1151
						, "value": "a"
					}
					, "rval": {
						"proto": "im"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1151
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"proto": "log(a: Complex)"
	, "kind": ".def"
	, "name": "log"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1153
	, "args": [{
		"proto": "log.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "log(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1153
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Complex(float64.log(abs(a)), arg(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1153
		, "args": [{
			"proto": "arg(a)"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1153
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1153
				, "value": "a"
			}]
		}, {
			"proto": "float64.log(abs(a))"
			, "kind": "(?)"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1153
			, "args": [{
				"proto": "abs(a)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1153
				, "args": [{
					"proto": "a"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1153
					, "value": "a"
				}]
			}]
		}]
	}
}, {
	"proto": "pow(a: Complex, b: Complex)"
	, "kind": ".ref"
	, "name": "pow"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1155
	, "args": [{
		"proto": "pow.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "pow(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1155
		, "cast": ".rec"
		, "size": 16
		, "offs": 48
		, "const": false
		, "static": false
	}, {
		"proto": "pow.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "pow(a: Complex, b: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1155
		, "cast": ".rec"
		, "size": 16
		, "offs": 32
		, "const": false
		, "static": false
	}]
	, "cast": ".rec"
	, "size": 97
	, "offs": 283618
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1155
		, "stmt": [{
			"proto": "r"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 1169
			, "value": "r"
		}, {
			"proto": "t"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 1170
			, "value": "t"
		}, {
			"proto": "u"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 1171
			, "value": "u"
		}, {
			"proto": "v"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 1172
			, "value": "v"
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1173
			, "stmt": {
				"proto": "(result := Complex((v * float64.cos(u)), (v * float64.sin(u))))"
				, "kind": ":="
				, "type": "Complex"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "Complex"
					, "cast": ".rec"
					, "value": "result"
				}
				, "rval": {
					"proto": "Complex((v * float64.cos(u)), (v * float64.sin(u)))"
					, "kind": "(?)"
					, "type": "Complex"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1173
					, "args": [{
						"proto": "(v * float64.sin(u))"
						, "kind": "*"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 1173
						, "lval": {
							"proto": "v"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 1173
							, "value": "v"
						}
						, "rval": {
							"proto": "float64.sin(u)"
							, "kind": "(?)"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 1173
							, "args": [{
								"proto": "u"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 1173
								, "value": "u"
							}]
						}
					}, {
						"proto": "(v * float64.cos(u))"
						, "kind": "*"
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 1173
						, "lval": {
							"proto": "v"
							, "kind": ".ref"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 1173
							, "value": "v"
						}
						, "rval": {
							"proto": "float64.cos(u)"
							, "kind": "(?)"
							, "type": "float64"
							, "cast": ".f64"
							, "file": "stdlib.cvx"
							, "line": 1173
							, "args": [{
								"proto": "u"
								, "kind": ".ref"
								, "type": "float64"
								, "cast": ".f64"
								, "file": "stdlib.cvx"
								, "line": 1173
								, "value": "u"
							}]
						}
					}]
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x2 sp(3)"
		, "offset": 283618
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 283620
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283622
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283624
	}, {
		"instruction": "f64.mul"
		, "offset": 283626
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283627
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283629
	}, {
		"instruction": "f64.mul"
		, "offset": 283631
	}, {
		"instruction": "f64.add"
		, "offset": 283632
	}, {
		"instruction": "nfc(29)"
		, "offset": 283633
	}, {
		"instruction": "set.x2 sp(4)"
		, "offset": 283637
	}, {
		"instruction": "stack -8"
		, "offset": 283639
	}, {
		"instruction": "dup.x2 sp(3)"
		, "offset": 283643
	}, {
		"instruction": "dup.x2 sp(7)"
		, "offset": 283645
	}, {
		"instruction": "nfc(30)"
		, "offset": 283647
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 283651
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283653
	}, {
		"instruction": "f64.mul"
		, "offset": 283655
	}, {
		"instruction": "dup.x2 sp(13)"
		, "offset": 283656
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 283658
	}, {
		"instruction": "nfc(26)"
		, "offset": 283660
	}, {
		"instruction": "f64.mul"
		, "offset": 283664
	}, {
		"instruction": "f64.add"
		, "offset": 283665
	}, {
		"instruction": "dup.x2 sp(11)"
		, "offset": 283666
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 283668
	}, {
		"instruction": "nfc(28)"
		, "offset": 283670
	}, {
		"instruction": "dup.x2 sp(15)"
		, "offset": 283674
	}, {
		"instruction": "f64.neg"
		, "offset": 283676
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 283677
	}, {
		"instruction": "f64.mul"
		, "offset": 283679
	}, {
		"instruction": "nfc(27)"
		, "offset": 283680
	}, {
		"instruction": "f64.mul"
		, "offset": 283684
	}, {
		"instruction": "dup.x2 sp(0)"
		, "offset": 283685
	}, {
		"instruction": "dup.x2 sp(4)"
		, "offset": 283687
	}, {
		"instruction": "nfc(23)"
		, "offset": 283689
	}, {
		"instruction": "f64.mul"
		, "offset": 283693
	}, {
		"instruction": "dup.x2 sp(2)"
		, "offset": 283694
	}, {
		"instruction": "dup.x2 sp(6)"
		, "offset": 283696
	}, {
		"instruction": "nfc(24)"
		, "offset": 283698
	}, {
		"instruction": "f64.mul"
		, "offset": 283702
	}, {
		"instruction": "set.x4 sp(21)"
		, "offset": 283703
	}, {
		"instruction": "stack -32"
		, "offset": 283705
	}, {
		"instruction": "ret"
		, "offset": 283709
	}, {
		"instruction": "stack -32"
		, "offset": 283710
	}, {
		"instruction": "ret"
		, "offset": 283714
	}]
}, {
	"proto": "pow(a: Complex, b: float64)"
	, "kind": ".def"
	, "name": "pow"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1176
	, "args": [{
		"proto": "pow.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "pow(a: Complex, b: float64)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1176
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "pow.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "pow(a: Complex, b: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1176
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "pow(a, Complex(b))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1176
		, "args": [{
			"proto": "Complex(b)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1176
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1176
				, "value": "b"
			}]
		}, {
			"proto": "a"
			, "kind": ".ref"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1176
			, "value": "a"
		}]
	}
}, {
	"proto": "sin(a: Complex)"
	, "kind": ".def"
	, "name": "sin"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1178
	, "args": [{
		"proto": "sin.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "sin(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1178
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Complex((float64.sin(a.re) * Math.Cosh(a.im)), (float64.cos(a.re) * Math.Sinh(a.im)))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1178
		, "args": [{
			"proto": "(float64.cos(a.re) * Math.Sinh(a.im))"
			, "kind": "*"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1178
			, "lval": {
				"proto": "float64.cos(a.re)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1178
				, "args": [{
					"proto": "a.re"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1178
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1178
						, "value": "a"
					}
					, "rval": {
						"proto": "re"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1178
						, "value": "re"
					}
				}]
			}
			, "rval": {
				"proto": "Math.Sinh(a.im)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1178
				, "args": [{
					"proto": "a.im"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1178
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1178
						, "value": "a"
					}
					, "rval": {
						"proto": "im"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1178
						, "value": "im"
					}
				}]
			}
		}, {
			"proto": "(float64.sin(a.re) * Math.Cosh(a.im))"
			, "kind": "*"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1178
			, "lval": {
				"proto": "float64.sin(a.re)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1178
				, "args": [{
					"proto": "a.re"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1178
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1178
						, "value": "a"
					}
					, "rval": {
						"proto": "re"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1178
						, "value": "re"
					}
				}]
			}
			, "rval": {
				"proto": "Math.Cosh(a.im)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1178
				, "args": [{
					"proto": "a.im"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1178
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1178
						, "value": "a"
					}
					, "rval": {
						"proto": "im"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1178
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"proto": "cos(a: Complex)"
	, "kind": ".def"
	, "name": "cos"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1179
	, "args": [{
		"proto": "cos.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "cos(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1179
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Complex((float64.cos(a.re) * Math.Cosh(a.im)), ((-float64.sin(a.re)) * Math.Sinh(a.im)))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1179
		, "args": [{
			"proto": "((-float64.sin(a.re)) * Math.Sinh(a.im))"
			, "kind": "*"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1179
			, "lval": {
				"proto": "(-float64.sin(a.re))"
				, "kind": "-"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1179
				, "rval": {
					"proto": "float64.sin(a.re)"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1179
					, "args": [{
						"proto": "a.re"
						, "kind": "."
						, "type": "float64"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 1179
						, "lval": {
							"proto": "a"
							, "kind": ".ref"
							, "type": "Complex"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1179
							, "value": "a"
						}
						, "rval": {
							"proto": "re"
							, "kind": ".ref"
							, "type": "float64"
							, "file": "stdlib.cvx"
							, "line": 1179
							, "value": "re"
						}
					}]
				}
			}
			, "rval": {
				"proto": "Math.Sinh(a.im)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1179
				, "args": [{
					"proto": "a.im"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1179
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1179
						, "value": "a"
					}
					, "rval": {
						"proto": "im"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1179
						, "value": "im"
					}
				}]
			}
		}, {
			"proto": "(float64.cos(a.re) * Math.Cosh(a.im))"
			, "kind": "*"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1179
			, "lval": {
				"proto": "float64.cos(a.re)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1179
				, "args": [{
					"proto": "a.re"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1179
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1179
						, "value": "a"
					}
					, "rval": {
						"proto": "re"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1179
						, "value": "re"
					}
				}]
			}
			, "rval": {
				"proto": "Math.Cosh(a.im)"
				, "kind": "(?)"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1179
				, "args": [{
					"proto": "a.im"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1179
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "Complex"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1179
						, "value": "a"
					}
					, "rval": {
						"proto": "im"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1179
						, "value": "im"
					}
				}]
			}
		}]
	}
}, {
	"proto": "tan(a: Complex)"
	, "kind": ".def"
	, "name": "tan"
	, "type": "Complex"
	, "file": "stdlib.cvx"
	, "line": 1180
	, "args": [{
		"proto": "tan.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "tan(a: Complex)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1180
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "div(sin(a), cos(a))"
		, "kind": "(?)"
		, "type": "Complex"
		, "file": "stdlib.cvx"
		, "line": 1180
		, "args": [{
			"proto": "cos(a)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1180
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1180
				, "value": "a"
			}]
		}, {
			"proto": "sin(a)"
			, "kind": "(?)"
			, "type": "Complex"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1180
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "Complex"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1180
				, "value": "a"
			}]
		}]
	}
}, {
	"proto": "vec2d"
	, "kind": ".rec"
	, "name": "vec2d"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 1215
	, "cast": ".rec"
	, "size": 16
	, "offs": 194224
	, "const": true
	, "static": true
}, {
	"proto": "vec2d.x"
	, "kind": ".ref"
	, "name": "x"
	, "declaredIn": "vec2d"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1216
	, "cast": ".f64"
	, "size": 8
	, "offs": 0
	, "const": true
	, "static": false
}, {
	"proto": "vec2d.y"
	, "kind": ".ref"
	, "name": "y"
	, "declaredIn": "vec2d"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1217
	, "cast": ".f64"
	, "size": 8
	, "offs": 8
	, "const": true
	, "static": false
}, {
	"proto": "vec2d(x: float64, y: float64)"
	, "kind": ".def"
	, "name": "vec2d"
	, "type": "vec2d"
	, "args": [{
		"proto": "vec2d.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "vec2d(x: float64, y: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "vec2d.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "vec2d(x: float64, y: float64)"
		, "type": "float64"
		, "cast": ".f64"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "emit(x, y)"
		, "kind": "(?)"
		, "type": "vec2d"
		, "args": [{
			"proto": "y"
			, "kind": ".ref"
			, "type": "vec2d.y"
			, "cast": ".f64"
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "vec2d.x"
			, "cast": ".f64"
			, "value": "x"
		}]
	}
}, {
	"proto": "add(x: vec2d, y: vec2d)"
	, "kind": ".def"
	, "name": "add"
	, "type": "vec2d"
	, "file": "stdlib.cvx"
	, "line": 1220
	, "args": [{
		"proto": "add.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "add(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1220
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "add.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "add(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1220
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec2d, add.p2d, vec2d(y), vec2d(x))"
		, "kind": "(?)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1220
		, "args": [{
			"proto": "vec2d(x)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1220
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1220
				, "value": "x"
			}]
		}, {
			"proto": "vec2d(y)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1220
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1220
				, "value": "y"
			}]
		}, {
			"proto": "add.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1220
			, "lval": {
				"proto": "add"
				, "kind": ".ref"
				, "type": "emit.add"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1220
				, "value": "add"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1220
				, "value": "p2d"
			}
		}, {
			"proto": "vec2d"
			, "kind": ".ref"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1220
			, "value": "vec2d"
		}]
	}
}, {
	"proto": "sub(x: vec2d, y: vec2d)"
	, "kind": ".def"
	, "name": "sub"
	, "type": "vec2d"
	, "file": "stdlib.cvx"
	, "line": 1221
	, "args": [{
		"proto": "sub.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "sub(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1221
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "sub.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "sub(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1221
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec2d, sub.p2d, vec2d(y), vec2d(x))"
		, "kind": "(?)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1221
		, "args": [{
			"proto": "vec2d(x)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1221
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1221
				, "value": "x"
			}]
		}, {
			"proto": "vec2d(y)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1221
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1221
				, "value": "y"
			}]
		}, {
			"proto": "sub.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1221
			, "lval": {
				"proto": "sub"
				, "kind": ".ref"
				, "type": "emit.sub"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1221
				, "value": "sub"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1221
				, "value": "p2d"
			}
		}, {
			"proto": "vec2d"
			, "kind": ".ref"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1221
			, "value": "vec2d"
		}]
	}
}, {
	"proto": "mul(x: vec2d, y: vec2d)"
	, "kind": ".def"
	, "name": "mul"
	, "type": "vec2d"
	, "file": "stdlib.cvx"
	, "line": 1222
	, "args": [{
		"proto": "mul.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "mul(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1222
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mul.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "mul(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1222
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec2d, mul.p2d, vec2d(y), vec2d(x))"
		, "kind": "(?)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1222
		, "args": [{
			"proto": "vec2d(x)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1222
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1222
				, "value": "x"
			}]
		}, {
			"proto": "vec2d(y)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1222
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1222
				, "value": "y"
			}]
		}, {
			"proto": "mul.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1222
			, "lval": {
				"proto": "mul"
				, "kind": ".ref"
				, "type": "emit.mul"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1222
				, "value": "mul"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1222
				, "value": "p2d"
			}
		}, {
			"proto": "vec2d"
			, "kind": ".ref"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1222
			, "value": "vec2d"
		}]
	}
}, {
	"proto": "div(x: vec2d, y: vec2d)"
	, "kind": ".def"
	, "name": "div"
	, "type": "vec2d"
	, "file": "stdlib.cvx"
	, "line": 1223
	, "args": [{
		"proto": "div.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "div(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1223
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "div.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "div(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1223
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec2d, div.p2d, vec2d(y), vec2d(x))"
		, "kind": "(?)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1223
		, "args": [{
			"proto": "vec2d(x)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1223
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1223
				, "value": "x"
			}]
		}, {
			"proto": "vec2d(y)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1223
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1223
				, "value": "y"
			}]
		}, {
			"proto": "div.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1223
			, "lval": {
				"proto": "div"
				, "kind": ".ref"
				, "type": "emit.div"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1223
				, "value": "div"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1223
				, "value": "p2d"
			}
		}, {
			"proto": "vec2d"
			, "kind": ".ref"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1223
			, "value": "vec2d"
		}]
	}
}, {
	"proto": "min(x: vec2d, y: vec2d)"
	, "kind": ".def"
	, "name": "min"
	, "type": "vec2d"
	, "file": "stdlib.cvx"
	, "line": 1225
	, "args": [{
		"proto": "min.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "min(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1225
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "min.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "min(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1225
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec2d, min.p2d, vec2d(y), vec2d(x))"
		, "kind": "(?)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1225
		, "args": [{
			"proto": "vec2d(x)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1225
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1225
				, "value": "x"
			}]
		}, {
			"proto": "vec2d(y)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1225
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1225
				, "value": "y"
			}]
		}, {
			"proto": "min.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1225
			, "lval": {
				"proto": "min"
				, "kind": ".ref"
				, "type": "emit.min"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1225
				, "value": "min"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1225
				, "value": "p2d"
			}
		}, {
			"proto": "vec2d"
			, "kind": ".ref"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1225
			, "value": "vec2d"
		}]
	}
}, {
	"proto": "max(x: vec2d, y: vec2d)"
	, "kind": ".def"
	, "name": "max"
	, "type": "vec2d"
	, "file": "stdlib.cvx"
	, "line": 1226
	, "args": [{
		"proto": "max.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "max(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1226
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "max.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "max(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1226
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec2d, max.p2d, vec2d(y), vec2d(x))"
		, "kind": "(?)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1226
		, "args": [{
			"proto": "vec2d(x)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1226
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1226
				, "value": "x"
			}]
		}, {
			"proto": "vec2d(y)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1226
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1226
				, "value": "y"
			}]
		}, {
			"proto": "max.p2d"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1226
			, "lval": {
				"proto": "max"
				, "kind": ".ref"
				, "type": "emit.max"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1226
				, "value": "max"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1226
				, "value": "p2d"
			}
		}, {
			"proto": "vec2d"
			, "kind": ".ref"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1226
			, "value": "vec2d"
		}]
	}
}, {
	"proto": "ceq(x: vec2d, y: vec2d)"
	, "kind": ".def"
	, "name": "ceq"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 1227
	, "args": [{
		"proto": "ceq.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "ceq(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1227
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "ceq.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "ceq(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1227
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(ceq.p2d, vec2d(y), vec2d(x))"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 1227
		, "args": [{
			"proto": "vec2d(x)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1227
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1227
				, "value": "x"
			}]
		}, {
			"proto": "vec2d(y)"
			, "kind": "(?)"
			, "type": "vec2d"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1227
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec2d"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1227
				, "value": "y"
			}]
		}, {
			"proto": "ceq.p2d"
			, "kind": "."
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 1227
			, "lval": {
				"proto": "ceq"
				, "kind": ".ref"
				, "type": "emit.ceq"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1227
				, "value": "ceq"
			}
			, "rval": {
				"proto": "p2d"
				, "kind": ".ref"
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 1227
				, "value": "p2d"
			}
		}]
	}
}, {
	"proto": "dot(x: vec2d, y: vec2d)"
	, "kind": ".def"
	, "name": "dot"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1229
	, "args": [{
		"proto": "dot.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "dot(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1229
		, "cast": ".rec"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "dot.y"
		, "kind": ".ref"
		, "name": "y"
		, "declaredIn": "dot(x: vec2d, y: vec2d)"
		, "type": "vec2d"
		, "file": "stdlib.cvx"
		, "line": 1229
		, "cast": ".rec"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64((x.x * y.x) + (x.y * y.y))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1229
		, "args": [{
			"proto": "((x.x * y.x) + (x.y * y.y))"
			, "kind": "+"
			, "type": "float64"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1229
			, "lval": {
				"proto": "(x.x * y.x)"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1229
				, "lval": {
					"proto": "x.x"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1229
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "vec2d"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1229
						, "value": "x"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1229
						, "value": "x"
					}
				}
				, "rval": {
					"proto": "y.x"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1229
					, "lval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "vec2d"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1229
						, "value": "y"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1229
						, "value": "x"
					}
				}
			}
			, "rval": {
				"proto": "(x.y * y.y)"
				, "kind": "*"
				, "type": "float64"
				, "cast": ".f64"
				, "file": "stdlib.cvx"
				, "line": 1229
				, "lval": {
					"proto": "x.y"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1229
					, "lval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "vec2d"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1229
						, "value": "x"
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1229
						, "value": "y"
					}
				}
				, "rval": {
					"proto": "y.y"
					, "kind": "."
					, "type": "float64"
					, "cast": ".f64"
					, "file": "stdlib.cvx"
					, "line": 1229
					, "lval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "vec2d"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1229
						, "value": "y"
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float64"
						, "file": "stdlib.cvx"
						, "line": 1229
						, "value": "y"
					}
				}
			}
		}]
	}
}, {
	"proto": "vec4f"
	, "kind": ".rec"
	, "name": "vec4f"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 1232
	, "cast": ".rec"
	, "size": 16
	, "offs": 198792
	, "const": true
	, "static": true
}, {
	"proto": "vec4f.x"
	, "kind": ".ref"
	, "name": "x"
	, "declaredIn": "vec4f"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1233
	, "cast": ".f32"
	, "size": 4
	, "offs": 0
	, "const": false
	, "static": false
}, {
	"proto": "vec4f.y"
	, "kind": ".ref"
	, "name": "y"
	, "declaredIn": "vec4f"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1234
	, "cast": ".f32"
	, "size": 4
	, "offs": 4
	, "const": false
	, "static": false
}, {
	"proto": "vec4f.z"
	, "kind": ".ref"
	, "name": "z"
	, "declaredIn": "vec4f"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1235
	, "cast": ".f32"
	, "size": 4
	, "offs": 8
	, "const": false
	, "static": false
}, {
	"proto": "vec4f.w"
	, "kind": ".ref"
	, "name": "w"
	, "declaredIn": "vec4f"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1236
	, "cast": ".f32"
	, "size": 4
	, "offs": 12
	, "const": false
	, "static": false
}, {
	"proto": "vec4f(x: float32, y: float32, z: float32, w: float32)"
	, "kind": ".def"
	, "name": "vec4f"
	, "type": "vec4f"
	, "args": [{
		"proto": "vec4f.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "vec4f(x: float32, y: float32, z: float32, w: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "vec4f.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "vec4f(x: float32, y: float32, z: float32, w: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "vec4f.z"
		, "kind": ".def"
		, "name": "z"
		, "declaredIn": "vec4f(x: float32, y: float32, z: float32, w: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "vec4f.w"
		, "kind": ".def"
		, "name": "w"
		, "declaredIn": "vec4f(x: float32, y: float32, z: float32, w: float32)"
		, "type": "float32"
		, "cast": ".f32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "emit(x, y, z, w)"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1324
		, "args": [{
			"proto": "w"
			, "kind": ".ref"
			, "type": "vec4f.w"
			, "cast": ".f32"
			, "value": "w"
		}, {
			"proto": "z"
			, "kind": ".ref"
			, "type": "vec4f.z"
			, "cast": ".f32"
			, "value": "z"
		}, {
			"proto": "y"
			, "kind": ".ref"
			, "type": "vec4f.y"
			, "cast": ".f32"
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "vec4f.x"
			, "cast": ".f32"
			, "value": "x"
		}]
	}
}, {
	"proto": "vec4f(x: float32, y: float32, z: float32)"
	, "kind": ".def"
	, "name": "vec4f"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1239
	, "args": [{
		"proto": "vec4f.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "vec4f(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1239
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "vec4f.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "vec4f(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1239
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "vec4f.z"
		, "kind": ".def"
		, "name": "z"
		, "declaredIn": "vec4f(x: float32, y: float32, z: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1239
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, float32(x), float32(y), float32(z), float32(0))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1239
		, "args": [{
			"proto": "float32(0)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1239
			, "args": [{
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1239
				, "value": "0"
			}]
		}, {
			"proto": "float32(z)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1239
			, "args": [{
				"proto": "z"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1239
				, "value": "z"
			}]
		}, {
			"proto": "float32(y)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1239
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1239
				, "value": "y"
			}]
		}, {
			"proto": "float32(x)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1239
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1239
				, "value": "x"
			}]
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1239
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "vec4f(val: float32)"
	, "kind": ".def"
	, "name": "vec4f"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1240
	, "args": [{
		"proto": "vec4f.val"
		, "kind": ".def"
		, "name": "val"
		, "declaredIn": "vec4f(val: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1240
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, dupp.x2(0), dupp.x1(0), float32(val))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1240
		, "args": [{
			"proto": "float32(val)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1240
			, "args": [{
				"proto": "val"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1240
				, "value": "val"
			}]
		}, {
			"proto": "dupp.x1(0)"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1240
			, "lval": {
				"proto": "dupp"
				, "kind": ".ref"
				, "type": "emit.dupp"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1240
				, "value": "dupp"
			}
			, "rval": {
				"proto": "x1(0)"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1240
				, "value": "x1(0)"
			}
		}, {
			"proto": "dupp.x2(0)"
			, "kind": "."
			, "type": "int64"
			, "cast": ".i64"
			, "file": "stdlib.cvx"
			, "line": 1240
			, "lval": {
				"proto": "dupp"
				, "kind": ".ref"
				, "type": "emit.dupp"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1240
				, "value": "dupp"
			}
			, "rval": {
				"proto": "x2(0)"
				, "kind": ".ref"
				, "type": "int64"
				, "file": "stdlib.cvx"
				, "line": 1240
				, "value": "x2(0)"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1240
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "neg(rhs: vec4f)"
	, "kind": ".def"
	, "name": "neg"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1243
	, "args": [{
		"proto": "neg.rhs"
		, "kind": ".def"
		, "name": "rhs"
		, "declaredIn": "neg(rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1243
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, neg.p4f, vec4f(rhs))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1243
		, "args": [{
			"proto": "vec4f(rhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1243
			, "args": [{
				"proto": "rhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1243
				, "value": "rhs"
			}]
		}, {
			"proto": "neg.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1243
			, "lval": {
				"proto": "neg"
				, "kind": ".ref"
				, "type": "emit.neg"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1243
				, "value": "neg"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1243
				, "value": "p4f"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1243
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "add(lhs: vec4f, rhs: vec4f)"
	, "kind": ".def"
	, "name": "add"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1244
	, "args": [{
		"proto": "add.lhs"
		, "kind": ".def"
		, "name": "lhs"
		, "declaredIn": "add(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1244
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "add.rhs"
		, "kind": ".def"
		, "name": "rhs"
		, "declaredIn": "add(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1244
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, add.p4f, vec4f(rhs), vec4f(lhs))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1244
		, "args": [{
			"proto": "vec4f(lhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1244
			, "args": [{
				"proto": "lhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1244
				, "value": "lhs"
			}]
		}, {
			"proto": "vec4f(rhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1244
			, "args": [{
				"proto": "rhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1244
				, "value": "rhs"
			}]
		}, {
			"proto": "add.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1244
			, "lval": {
				"proto": "add"
				, "kind": ".ref"
				, "type": "emit.add"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1244
				, "value": "add"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1244
				, "value": "p4f"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1244
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "add(a: float32, b: vec4f)"
	, "kind": ".def"
	, "name": "add"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1245
	, "args": [{
		"proto": "add.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "add(a: float32, b: vec4f)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1245
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "add.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "add(a: float32, b: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1245
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "add(vec4f(a), b)"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1245
		, "args": [{
			"proto": "b"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1245
			, "value": "b"
		}, {
			"proto": "vec4f(a)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1245
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1245
				, "value": "a"
			}]
		}]
	}
}, {
	"proto": "add(a: vec4f, b: float32)"
	, "kind": ".def"
	, "name": "add"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1246
	, "args": [{
		"proto": "add.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "add(a: vec4f, b: float32)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1246
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "add.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "add(a: vec4f, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1246
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "add(a, vec4f(b))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1246
		, "args": [{
			"proto": "vec4f(b)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1246
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1246
				, "value": "b"
			}]
		}, {
			"proto": "a"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1246
			, "value": "a"
		}]
	}
}, {
	"proto": "sub(lhs: vec4f, rhs: vec4f)"
	, "kind": ".def"
	, "name": "sub"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1247
	, "args": [{
		"proto": "sub.lhs"
		, "kind": ".def"
		, "name": "lhs"
		, "declaredIn": "sub(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1247
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "sub.rhs"
		, "kind": ".def"
		, "name": "rhs"
		, "declaredIn": "sub(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1247
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, sub.p4f, vec4f(rhs), vec4f(lhs))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1247
		, "args": [{
			"proto": "vec4f(lhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1247
			, "args": [{
				"proto": "lhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1247
				, "value": "lhs"
			}]
		}, {
			"proto": "vec4f(rhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1247
			, "args": [{
				"proto": "rhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1247
				, "value": "rhs"
			}]
		}, {
			"proto": "sub.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1247
			, "lval": {
				"proto": "sub"
				, "kind": ".ref"
				, "type": "emit.sub"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1247
				, "value": "sub"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1247
				, "value": "p4f"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1247
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "sub(a: float32, b: vec4f)"
	, "kind": ".def"
	, "name": "sub"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1248
	, "args": [{
		"proto": "sub.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "sub(a: float32, b: vec4f)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1248
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "sub.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "sub(a: float32, b: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1248
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "sub(vec4f(a), b)"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1248
		, "args": [{
			"proto": "b"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1248
			, "value": "b"
		}, {
			"proto": "vec4f(a)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1248
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1248
				, "value": "a"
			}]
		}]
	}
}, {
	"proto": "sub(a: vec4f, b: float32)"
	, "kind": ".def"
	, "name": "sub"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1249
	, "args": [{
		"proto": "sub.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "sub(a: vec4f, b: float32)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1249
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "sub.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "sub(a: vec4f, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1249
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "sub(a, vec4f(b))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1249
		, "args": [{
			"proto": "vec4f(b)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1249
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1249
				, "value": "b"
			}]
		}, {
			"proto": "a"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1249
			, "value": "a"
		}]
	}
}, {
	"proto": "mul(lhs: vec4f, rhs: vec4f)"
	, "kind": ".def"
	, "name": "mul"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1250
	, "args": [{
		"proto": "mul.lhs"
		, "kind": ".def"
		, "name": "lhs"
		, "declaredIn": "mul(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1250
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mul.rhs"
		, "kind": ".def"
		, "name": "rhs"
		, "declaredIn": "mul(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1250
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, mul.p4f, vec4f(rhs), vec4f(lhs))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1250
		, "args": [{
			"proto": "vec4f(lhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1250
			, "args": [{
				"proto": "lhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1250
				, "value": "lhs"
			}]
		}, {
			"proto": "vec4f(rhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1250
			, "args": [{
				"proto": "rhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1250
				, "value": "rhs"
			}]
		}, {
			"proto": "mul.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1250
			, "lval": {
				"proto": "mul"
				, "kind": ".ref"
				, "type": "emit.mul"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1250
				, "value": "mul"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1250
				, "value": "p4f"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1250
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "mul(a: float32, b: vec4f)"
	, "kind": ".def"
	, "name": "mul"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1251
	, "args": [{
		"proto": "mul.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "mul(a: float32, b: vec4f)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1251
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mul.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "mul(a: float32, b: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1251
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "mul(vec4f(a), b)"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1251
		, "args": [{
			"proto": "b"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1251
			, "value": "b"
		}, {
			"proto": "vec4f(a)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1251
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1251
				, "value": "a"
			}]
		}]
	}
}, {
	"proto": "mul(a: vec4f, b: float32)"
	, "kind": ".def"
	, "name": "mul"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1252
	, "args": [{
		"proto": "mul.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "mul(a: vec4f, b: float32)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1252
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mul.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "mul(a: vec4f, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1252
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "mul(a, vec4f(b))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1252
		, "args": [{
			"proto": "vec4f(b)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1252
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1252
				, "value": "b"
			}]
		}, {
			"proto": "a"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1252
			, "value": "a"
		}]
	}
}, {
	"proto": "div(lhs: vec4f, rhs: vec4f)"
	, "kind": ".def"
	, "name": "div"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1253
	, "args": [{
		"proto": "div.lhs"
		, "kind": ".def"
		, "name": "lhs"
		, "declaredIn": "div(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1253
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "div.rhs"
		, "kind": ".def"
		, "name": "rhs"
		, "declaredIn": "div(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1253
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, div.p4f, vec4f(rhs), vec4f(lhs))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1253
		, "args": [{
			"proto": "vec4f(lhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1253
			, "args": [{
				"proto": "lhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1253
				, "value": "lhs"
			}]
		}, {
			"proto": "vec4f(rhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1253
			, "args": [{
				"proto": "rhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1253
				, "value": "rhs"
			}]
		}, {
			"proto": "div.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1253
			, "lval": {
				"proto": "div"
				, "kind": ".ref"
				, "type": "emit.div"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1253
				, "value": "div"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1253
				, "value": "p4f"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1253
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "div(a: float32, b: vec4f)"
	, "kind": ".def"
	, "name": "div"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1254
	, "args": [{
		"proto": "div.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "div(a: float32, b: vec4f)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1254
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "div.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "div(a: float32, b: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1254
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "div(vec4f(a), b)"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1254
		, "args": [{
			"proto": "b"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1254
			, "value": "b"
		}, {
			"proto": "vec4f(a)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1254
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1254
				, "value": "a"
			}]
		}]
	}
}, {
	"proto": "div(a: vec4f, b: float32)"
	, "kind": ".def"
	, "name": "div"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1255
	, "args": [{
		"proto": "div.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "div(a: vec4f, b: float32)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1255
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "div.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "div(a: vec4f, b: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1255
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "div(a, vec4f(b))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1255
		, "args": [{
			"proto": "vec4f(b)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1255
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1255
				, "value": "b"
			}]
		}, {
			"proto": "a"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1255
			, "value": "a"
		}]
	}
}, {
	"proto": "min(x: vec4f, y: vec4f)"
	, "kind": ".def"
	, "name": "min"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1257
	, "args": [{
		"proto": "min.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "min(x: vec4f, y: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1257
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "min.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "min(x: vec4f, y: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1257
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, min.p4f, vec4f(y), vec4f(x))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1257
		, "args": [{
			"proto": "vec4f(x)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1257
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1257
				, "value": "x"
			}]
		}, {
			"proto": "vec4f(y)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1257
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1257
				, "value": "y"
			}]
		}, {
			"proto": "min.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1257
			, "lval": {
				"proto": "min"
				, "kind": ".ref"
				, "type": "emit.min"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1257
				, "value": "min"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1257
				, "value": "p4f"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1257
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "max(x: vec4f, y: vec4f)"
	, "kind": ".def"
	, "name": "max"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1258
	, "args": [{
		"proto": "max.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "max(x: vec4f, y: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1258
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "max.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "max(x: vec4f, y: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1258
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, max.p4f, vec4f(y), vec4f(x))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1258
		, "args": [{
			"proto": "vec4f(x)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1258
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1258
				, "value": "x"
			}]
		}, {
			"proto": "vec4f(y)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1258
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1258
				, "value": "y"
			}]
		}, {
			"proto": "max.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1258
			, "lval": {
				"proto": "max"
				, "kind": ".ref"
				, "type": "emit.max"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1258
				, "value": "max"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1258
				, "value": "p4f"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1258
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "ceq(x: vec4f, y: vec4f)"
	, "kind": ".def"
	, "name": "ceq"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 1259
	, "args": [{
		"proto": "ceq.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "ceq(x: vec4f, y: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1259
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "ceq.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "ceq(x: vec4f, y: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1259
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(ceq.p4f, vec4f(y), vec4f(x))"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 1259
		, "args": [{
			"proto": "vec4f(x)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1259
			, "args": [{
				"proto": "x"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1259
				, "value": "x"
			}]
		}, {
			"proto": "vec4f(y)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1259
			, "args": [{
				"proto": "y"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1259
				, "value": "y"
			}]
		}, {
			"proto": "ceq.p4f"
			, "kind": "."
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 1259
			, "lval": {
				"proto": "ceq"
				, "kind": ".ref"
				, "type": "emit.ceq"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1259
				, "value": "ceq"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 1259
				, "value": "p4f"
			}
		}]
	}
}, {
	"proto": "mad(a: vec4f, b: vec4f, c: vec4f)"
	, "kind": ".def"
	, "name": "mad"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1261
	, "args": [{
		"proto": "mad.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "mad(a: vec4f, b: vec4f, c: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1261
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mad.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "mad(a: vec4f, b: vec4f, c: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1261
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mad.c"
		, "kind": ".def"
		, "name": "c"
		, "declaredIn": "mad(a: vec4f, b: vec4f, c: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1261
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(vec4f, add.p4f, mul.p4f, vec4f(a), vec4f(b), vec4f(c))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1261
		, "args": [{
			"proto": "vec4f(c)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1261
			, "args": [{
				"proto": "c"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1261
				, "value": "c"
			}]
		}, {
			"proto": "vec4f(b)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1261
			, "args": [{
				"proto": "b"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1261
				, "value": "b"
			}]
		}, {
			"proto": "vec4f(a)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1261
			, "args": [{
				"proto": "a"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1261
				, "value": "a"
			}]
		}, {
			"proto": "mul.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1261
			, "lval": {
				"proto": "mul"
				, "kind": ".ref"
				, "type": "emit.mul"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1261
				, "value": "mul"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1261
				, "value": "p4f"
			}
		}, {
			"proto": "add.p4f"
			, "kind": "."
			, "type": "emit.p4x"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1261
			, "lval": {
				"proto": "add"
				, "kind": ".ref"
				, "type": "emit.add"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1261
				, "value": "add"
			}
			, "rval": {
				"proto": "p4f"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "file": "stdlib.cvx"
				, "line": 1261
				, "value": "p4f"
			}
		}, {
			"proto": "vec4f"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1261
			, "value": "vec4f"
		}]
	}
}, {
	"proto": "dp3(lhs: vec4f, rhs: vec4f)"
	, "kind": ".def"
	, "name": "dp3"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1264
	, "args": [{
		"proto": "dp3.lhs"
		, "kind": ".def"
		, "name": "lhs"
		, "declaredIn": "dp3(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1264
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "dp3.rhs"
		, "kind": ".def"
		, "name": "rhs"
		, "declaredIn": "dp3(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1264
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(float32, p4x.dp3, vec4f(rhs), vec4f(lhs))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1264
		, "args": [{
			"proto": "vec4f(lhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1264
			, "args": [{
				"proto": "lhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1264
				, "value": "lhs"
			}]
		}, {
			"proto": "vec4f(rhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1264
			, "args": [{
				"proto": "rhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1264
				, "value": "rhs"
			}]
		}, {
			"proto": "p4x.dp3"
			, "kind": "."
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1264
			, "lval": {
				"proto": "p4x"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1264
				, "value": "p4x"
			}
			, "rval": {
				"proto": "dp3"
				, "kind": ".ref"
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1264
				, "value": "dp3"
			}
		}, {
			"proto": "float32"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1264
			, "value": "float32"
		}]
	}
}, {
	"proto": "dp4(lhs: vec4f, rhs: vec4f)"
	, "kind": ".def"
	, "name": "dp4"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1266
	, "args": [{
		"proto": "dp4.lhs"
		, "kind": ".def"
		, "name": "lhs"
		, "declaredIn": "dp4(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1266
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "dp4.rhs"
		, "kind": ".def"
		, "name": "rhs"
		, "declaredIn": "dp4(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1266
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(float32, p4x.dp4, vec4f(rhs), vec4f(lhs))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1308
		, "args": [{
			"proto": "vec4f(lhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1266
			, "args": [{
				"proto": "lhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1266
				, "value": "lhs"
			}]
		}, {
			"proto": "vec4f(rhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1266
			, "args": [{
				"proto": "rhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1266
				, "value": "rhs"
			}]
		}, {
			"proto": "p4x.dp4"
			, "kind": "."
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1266
			, "lval": {
				"proto": "p4x"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1266
				, "value": "p4x"
			}
			, "rval": {
				"proto": "dp4"
				, "kind": ".ref"
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1266
				, "value": "dp4"
			}
		}, {
			"proto": "float32"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1266
			, "value": "float32"
		}]
	}
}, {
	"proto": "dph(lhs: vec4f, rhs: vec4f)"
	, "kind": ".def"
	, "name": "dph"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1268
	, "args": [{
		"proto": "dph.lhs"
		, "kind": ".def"
		, "name": "lhs"
		, "declaredIn": "dph(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1268
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "dph.rhs"
		, "kind": ".def"
		, "name": "rhs"
		, "declaredIn": "dph(lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1268
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(float32, p4x.dph, vec4f(rhs), vec4f(lhs))"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1268
		, "args": [{
			"proto": "vec4f(lhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1268
			, "args": [{
				"proto": "lhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1268
				, "value": "lhs"
			}]
		}, {
			"proto": "vec4f(rhs)"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1268
			, "args": [{
				"proto": "rhs"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1268
				, "value": "rhs"
			}]
		}, {
			"proto": "p4x.dph"
			, "kind": "."
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1268
			, "lval": {
				"proto": "p4x"
				, "kind": ".ref"
				, "type": "emit.p4x"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1268
				, "value": "p4x"
			}
			, "rval": {
				"proto": "dph"
				, "kind": ".ref"
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1268
				, "value": "dph"
			}
		}, {
			"proto": "float32"
			, "kind": ".ref"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1268
			, "value": "float32"
		}]
	}
}, {
	"proto": "cross(a: vec4f, b: vec4f)"
	, "kind": ".def"
	, "name": "cross"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1269
	, "args": [{
		"proto": "cross.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "cross(a: vec4f, b: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1269
		, "cast": ".rec"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "cross.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "cross(a: vec4f, b: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1269
		, "cast": ".rec"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "vec4f(((a.y * b.z) - (a.z * b.y)), ((a.z * b.x) - (a.x * b.z)), ((a.x * b.y) - (a.y * b.x)))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1269
		, "args": [{
			"proto": "((a.x * b.y) - (a.y * b.x))"
			, "kind": "-"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1269
			, "lval": {
				"proto": "(a.x * b.y)"
				, "kind": "*"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1269
				, "lval": {
					"proto": "a.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "a"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "x"
					}
				}
				, "rval": {
					"proto": "b.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "b"
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "y"
					}
				}
			}
			, "rval": {
				"proto": "(a.y * b.x)"
				, "kind": "*"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1269
				, "lval": {
					"proto": "a.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "a"
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "y"
					}
				}
				, "rval": {
					"proto": "b.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "b"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "x"
					}
				}
			}
		}, {
			"proto": "((a.z * b.x) - (a.x * b.z))"
			, "kind": "-"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1269
			, "lval": {
				"proto": "(a.z * b.x)"
				, "kind": "*"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1269
				, "lval": {
					"proto": "a.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "a"
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "z"
					}
				}
				, "rval": {
					"proto": "b.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "b"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "x"
					}
				}
			}
			, "rval": {
				"proto": "(a.x * b.z)"
				, "kind": "*"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1269
				, "lval": {
					"proto": "a.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "a"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "x"
					}
				}
				, "rval": {
					"proto": "b.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "b"
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "z"
					}
				}
			}
		}, {
			"proto": "((a.y * b.z) - (a.z * b.y))"
			, "kind": "-"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1269
			, "lval": {
				"proto": "(a.y * b.z)"
				, "kind": "*"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1269
				, "lval": {
					"proto": "a.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "a"
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "y"
					}
				}
				, "rval": {
					"proto": "b.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "b"
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "z"
					}
				}
			}
			, "rval": {
				"proto": "(a.z * b.y)"
				, "kind": "*"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1269
				, "lval": {
					"proto": "a.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "a"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "a"
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "z"
					}
				}
				, "rval": {
					"proto": "b.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "lval": {
						"proto": "b"
						, "kind": ".ref"
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "b"
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1269
						, "value": "y"
					}
				}
			}
		}]
	}
}, {
	"proto": "lerp(t: float32, lhs: vec4f, rhs: vec4f)"
	, "kind": ".def"
	, "name": "lerp"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1271
	, "args": [{
		"proto": "lerp.t"
		, "kind": ".ref"
		, "name": "t"
		, "declaredIn": "lerp(t: float32, lhs: vec4f, rhs: vec4f)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1271
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "lerp.lhs"
		, "kind": ".ref"
		, "name": "lhs"
		, "declaredIn": "lerp(t: float32, lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1271
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "lerp.rhs"
		, "kind": ".ref"
		, "name": "rhs"
		, "declaredIn": "lerp(t: float32, lhs: vec4f, rhs: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1271
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "vec4f(Math.lerp(t, lhs.x, rhs.x), Math.lerp(t, lhs.y, rhs.y), Math.lerp(t, lhs.z, rhs.z), Math.lerp(t, lhs.w, rhs.w))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1271
		, "args": [{
			"proto": "Math.lerp(t, lhs.w, rhs.w)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1271
			, "args": [{
				"proto": "rhs.w"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "lval": {
					"proto": "rhs"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "rhs"
				}
				, "rval": {
					"proto": "w"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "w"
				}
			}, {
				"proto": "lhs.w"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "lval": {
					"proto": "lhs"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "lhs"
				}
				, "rval": {
					"proto": "w"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "w"
				}
			}, {
				"proto": "t"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "value": "t"
			}]
		}, {
			"proto": "Math.lerp(t, lhs.z, rhs.z)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1271
			, "args": [{
				"proto": "rhs.z"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "lval": {
					"proto": "rhs"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "rhs"
				}
				, "rval": {
					"proto": "z"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "z"
				}
			}, {
				"proto": "lhs.z"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "lval": {
					"proto": "lhs"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "lhs"
				}
				, "rval": {
					"proto": "z"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "z"
				}
			}, {
				"proto": "t"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "value": "t"
			}]
		}, {
			"proto": "Math.lerp(t, lhs.y, rhs.y)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1271
			, "args": [{
				"proto": "rhs.y"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "lval": {
					"proto": "rhs"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "rhs"
				}
				, "rval": {
					"proto": "y"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "y"
				}
			}, {
				"proto": "lhs.y"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "lval": {
					"proto": "lhs"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "lhs"
				}
				, "rval": {
					"proto": "y"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "y"
				}
			}, {
				"proto": "t"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "value": "t"
			}]
		}, {
			"proto": "Math.lerp(t, lhs.x, rhs.x)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1271
			, "args": [{
				"proto": "rhs.x"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "lval": {
					"proto": "rhs"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "rhs"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "x"
				}
			}, {
				"proto": "lhs.x"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "lval": {
					"proto": "lhs"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "lhs"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "x"
				}
			}, {
				"proto": "t"
				, "kind": ".ref"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1271
				, "value": "t"
			}]
		}]
	}
}, {
	"proto": "len(v: vec4f)"
	, "kind": ".def"
	, "name": "len"
	, "type": "float64"
	, "file": "stdlib.cvx"
	, "line": 1273
	, "args": [{
		"proto": "len.v"
		, "kind": ".ref"
		, "name": "v"
		, "declaredIn": "len(v: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1273
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float64.sqrt(dp3(v, v))"
		, "kind": "(?)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1273
		, "args": [{
			"proto": "dp3(v, v)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f64"
			, "file": "stdlib.cvx"
			, "line": 1273
			, "args": [{
				"proto": "v"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1273
				, "value": "v"
			}, {
				"proto": "v"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1273
				, "value": "v"
			}]
		}]
	}
}, {
	"proto": "eval(v: vec4f, x: float32)"
	, "kind": ".def"
	, "name": "eval"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1274
	, "args": [{
		"proto": "eval.v"
		, "kind": ".ref"
		, "name": "v"
		, "declaredIn": "eval(v: vec4f, x: float32)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1274
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "eval.x"
		, "kind": ".ref"
		, "name": "x"
		, "declaredIn": "eval(v: vec4f, x: float32)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1274
		, "cast": ".f32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float32((((((v.w * x) + v.z) * x) + v.y) * x) + v.x)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1274
		, "args": [{
			"proto": "((((((v.w * x) + v.z) * x) + v.y) * x) + v.x)"
			, "kind": "+"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1274
			, "lval": {
				"proto": "(((((v.w * x) + v.z) * x) + v.y) * x)"
				, "kind": "(?)"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1274
				, "args": [{
					"proto": "(((((v.w * x) + v.z) * x) + v.y) * x)"
					, "kind": "*"
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1274
					, "lval": {
						"proto": "((((v.w * x) + v.z) * x) + v.y)"
						, "kind": "(?)"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1274
						, "args": [{
							"proto": "((((v.w * x) + v.z) * x) + v.y)"
							, "kind": "+"
							, "type": "float32"
							, "cast": ".f32"
							, "file": "stdlib.cvx"
							, "line": 1274
							, "lval": {
								"proto": "(((v.w * x) + v.z) * x)"
								, "kind": "*"
								, "type": "float32"
								, "cast": ".f32"
								, "file": "stdlib.cvx"
								, "line": 1274
								, "lval": {
									"proto": "((v.w * x) + v.z)"
									, "kind": "(?)"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 1274
									, "args": [{
										"proto": "((v.w * x) + v.z)"
										, "kind": "+"
										, "type": "float32"
										, "cast": ".f32"
										, "file": "stdlib.cvx"
										, "line": 1274
										, "lval": {
											"proto": "(v.w * x)"
											, "kind": "*"
											, "type": "float32"
											, "cast": ".f32"
											, "file": "stdlib.cvx"
											, "line": 1274
											, "lval": {
												"proto": "v.w"
												, "kind": "."
												, "type": "float32"
												, "cast": ".f32"
												, "file": "stdlib.cvx"
												, "line": 1274
												, "lval": {
													"proto": "v"
													, "kind": ".ref"
													, "type": "vec4f"
													, "cast": ".ref"
													, "file": "stdlib.cvx"
													, "line": 1274
													, "value": "v"
												}
												, "rval": {
													"proto": "w"
													, "kind": ".ref"
													, "type": "float32"
													, "file": "stdlib.cvx"
													, "line": 1274
													, "value": "w"
												}
											}
											, "rval": {
												"proto": "x"
												, "kind": ".ref"
												, "type": "float32"
												, "cast": ".f32"
												, "file": "stdlib.cvx"
												, "line": 1274
												, "value": "x"
											}
										}
										, "rval": {
											"proto": "v.z"
											, "kind": "."
											, "type": "float32"
											, "cast": ".f32"
											, "file": "stdlib.cvx"
											, "line": 1274
											, "lval": {
												"proto": "v"
												, "kind": ".ref"
												, "type": "vec4f"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1274
												, "value": "v"
											}
											, "rval": {
												"proto": "z"
												, "kind": ".ref"
												, "type": "float32"
												, "file": "stdlib.cvx"
												, "line": 1274
												, "value": "z"
											}
										}
									}]
								}
								, "rval": {
									"proto": "x"
									, "kind": ".ref"
									, "type": "float32"
									, "cast": ".f32"
									, "file": "stdlib.cvx"
									, "line": 1274
									, "value": "x"
								}
							}
							, "rval": {
								"proto": "v.y"
								, "kind": "."
								, "type": "float32"
								, "cast": ".f32"
								, "file": "stdlib.cvx"
								, "line": 1274
								, "lval": {
									"proto": "v"
									, "kind": ".ref"
									, "type": "vec4f"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1274
									, "value": "v"
								}
								, "rval": {
									"proto": "y"
									, "kind": ".ref"
									, "type": "float32"
									, "file": "stdlib.cvx"
									, "line": 1274
									, "value": "y"
								}
							}
						}]
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1274
						, "value": "x"
					}
				}]
			}
			, "rval": {
				"proto": "v.x"
				, "kind": "."
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1274
				, "lval": {
					"proto": "v"
					, "kind": ".ref"
					, "type": "vec4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1274
					, "value": "v"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1274
					, "value": "x"
				}
			}
		}]
	}
}, {
	"proto": "normalize(a: vec4f)"
	, "kind": ".def"
	, "name": "normalize"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1275
	, "args": [{
		"proto": "normalize.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "normalize(a: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1275
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "div(a, vec4f(float32(float64.sqrt(dp3(a, a)))))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1275
		, "args": [{
			"proto": "vec4f(float32(float64.sqrt(dp3(a, a))))"
			, "kind": "(?)"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1275
			, "args": [{
				"proto": "float32(float64.sqrt(dp3(a, a)))"
				, "kind": "(?)"
				, "type": "float32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1275
				, "args": [{
					"proto": "float64.sqrt(dp3(a, a))"
					, "kind": "(?)"
					, "type": "float64"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1275
					, "args": [{
						"proto": "dp3(a, a)"
						, "kind": "(?)"
						, "type": "float32"
						, "cast": ".f64"
						, "file": "stdlib.cvx"
						, "line": 1275
						, "args": [{
							"proto": "a"
							, "kind": ".ref"
							, "type": "vec4f"
							, "cast": ".rec"
							, "file": "stdlib.cvx"
							, "line": 1275
							, "value": "a"
						}, {
							"proto": "a"
							, "kind": ".ref"
							, "type": "vec4f"
							, "cast": ".rec"
							, "file": "stdlib.cvx"
							, "line": 1275
							, "value": "a"
						}]
					}]
				}]
			}]
		}, {
			"proto": "a"
			, "kind": ".ref"
			, "type": "vec4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1275
			, "value": "a"
		}]
	}
}, {
	"proto": "float32(vec: vec4f)"
	, "kind": ".def"
	, "name": "float32"
	, "type": "float32"
	, "file": "stdlib.cvx"
	, "line": 1278
	, "args": [{
		"proto": "float32.vec"
		, "kind": ".ref"
		, "name": "vec"
		, "declaredIn": "float32(vec: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1278
		, "cast": ".rec"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "float32(vec.w)"
		, "kind": "(?)"
		, "type": "float32"
		, "file": "stdlib.cvx"
		, "line": 1278
		, "args": [{
			"proto": "vec.w"
			, "kind": "."
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1278
			, "lval": {
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1278
				, "value": "vec"
			}
			, "rval": {
				"proto": "w"
				, "kind": ".ref"
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1278
				, "value": "w"
			}
		}]
	}
}, {
	"proto": "mat4f"
	, "kind": ".rec"
	, "name": "mat4f"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 1289
	, "cast": ".rec"
	, "size": 64
	, "offs": 212848
	, "const": true
	, "static": true
}, {
	"proto": "mat4f.x"
	, "kind": ".ref"
	, "name": "x"
	, "declaredIn": "mat4f"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1290
	, "cast": ".rec"
	, "size": 16
	, "offs": 0
	, "const": false
	, "static": false
}, {
	"proto": "mat4f.y"
	, "kind": ".ref"
	, "name": "y"
	, "declaredIn": "mat4f"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1291
	, "cast": ".rec"
	, "size": 16
	, "offs": 16
	, "const": false
	, "static": false
}, {
	"proto": "mat4f.z"
	, "kind": ".ref"
	, "name": "z"
	, "declaredIn": "mat4f"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1292
	, "cast": ".rec"
	, "size": 16
	, "offs": 32
	, "const": false
	, "static": false
}, {
	"proto": "mat4f.w"
	, "kind": ".ref"
	, "name": "w"
	, "declaredIn": "mat4f"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1293
	, "cast": ".rec"
	, "size": 16
	, "offs": 48
	, "const": false
	, "static": false
}, {
	"proto": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f)"
	, "kind": ".def"
	, "name": "mat4f"
	, "type": "mat4f"
	, "args": [{
		"proto": "mat4f.x"
		, "kind": ".def"
		, "name": "x"
		, "declaredIn": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f)"
		, "type": "vec4f"
		, "cast": ".rec"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.y"
		, "kind": ".def"
		, "name": "y"
		, "declaredIn": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f)"
		, "type": "vec4f"
		, "cast": ".rec"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.z"
		, "kind": ".def"
		, "name": "z"
		, "declaredIn": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f)"
		, "type": "vec4f"
		, "cast": ".rec"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.w"
		, "kind": ".def"
		, "name": "w"
		, "declaredIn": "mat4f(x: vec4f, y: vec4f, z: vec4f, w: vec4f)"
		, "type": "vec4f"
		, "cast": ".rec"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "emit(x, y, z, w)"
		, "kind": "(?)"
		, "type": "mat4f"
		, "args": [{
			"proto": "w"
			, "kind": ".ref"
			, "type": "mat4f.w"
			, "cast": ".rec"
			, "value": "w"
		}, {
			"proto": "z"
			, "kind": ".ref"
			, "type": "mat4f.z"
			, "cast": ".rec"
			, "value": "z"
		}, {
			"proto": "y"
			, "kind": ".ref"
			, "type": "mat4f.y"
			, "cast": ".rec"
			, "value": "y"
		}, {
			"proto": "x"
			, "kind": ".ref"
			, "type": "mat4f.x"
			, "cast": ".rec"
			, "value": "x"
		}]
	}
}, {
	"proto": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
	, "kind": ".def"
	, "name": "mat4f"
	, "type": "mat4f"
	, "file": "stdlib.cvx"
	, "line": 1296
	, "args": [{
		"proto": "mat4f.m11"
		, "kind": ".def"
		, "name": "m11"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1297
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m12"
		, "kind": ".def"
		, "name": "m12"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1297
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m13"
		, "kind": ".def"
		, "name": "m13"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1297
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m14"
		, "kind": ".def"
		, "name": "m14"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1297
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m21"
		, "kind": ".def"
		, "name": "m21"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1298
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m22"
		, "kind": ".def"
		, "name": "m22"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1298
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m23"
		, "kind": ".def"
		, "name": "m23"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1298
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m24"
		, "kind": ".def"
		, "name": "m24"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1298
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m31"
		, "kind": ".def"
		, "name": "m31"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1299
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m32"
		, "kind": ".def"
		, "name": "m32"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1299
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m33"
		, "kind": ".def"
		, "name": "m33"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1299
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m34"
		, "kind": ".def"
		, "name": "m34"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1299
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m41"
		, "kind": ".def"
		, "name": "m41"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1300
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m42"
		, "kind": ".def"
		, "name": "m42"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1300
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m43"
		, "kind": ".def"
		, "name": "m43"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1300
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "mat4f.m44"
		, "kind": ".def"
		, "name": "m44"
		, "declaredIn": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
		, "type": "float64"
		, "file": "stdlib.cvx"
		, "line": 1300
		, "cast": ".f64"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(mat4f, float32(m11), float32(m12), float32(m13), float32(m14), float32(m21), float32(m22), float32(m23), float32(m24), float32(m31), float32(m32), float32(m33), float32(m34), float32(m41), float32(m42), float32(m43), float32(m44))"
		, "kind": "(?)"
		, "type": "mat4f"
		, "file": "stdlib.cvx"
		, "line": 1314
		, "args": [{
			"proto": "float32(m44)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1305
			, "args": [{
				"proto": "m44"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1305
				, "value": "m44"
			}]
		}, {
			"proto": "float32(m43)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1305
			, "args": [{
				"proto": "m43"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1305
				, "value": "m43"
			}]
		}, {
			"proto": "float32(m42)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1305
			, "args": [{
				"proto": "m42"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1305
				, "value": "m42"
			}]
		}, {
			"proto": "float32(m41)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1305
			, "args": [{
				"proto": "m41"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1305
				, "value": "m41"
			}]
		}, {
			"proto": "float32(m34)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1304
			, "args": [{
				"proto": "m34"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1304
				, "value": "m34"
			}]
		}, {
			"proto": "float32(m33)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1304
			, "args": [{
				"proto": "m33"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1304
				, "value": "m33"
			}]
		}, {
			"proto": "float32(m32)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1304
			, "args": [{
				"proto": "m32"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1304
				, "value": "m32"
			}]
		}, {
			"proto": "float32(m31)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1304
			, "args": [{
				"proto": "m31"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1304
				, "value": "m31"
			}]
		}, {
			"proto": "float32(m24)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1303
			, "args": [{
				"proto": "m24"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1303
				, "value": "m24"
			}]
		}, {
			"proto": "float32(m23)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1303
			, "args": [{
				"proto": "m23"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1303
				, "value": "m23"
			}]
		}, {
			"proto": "float32(m22)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1303
			, "args": [{
				"proto": "m22"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1303
				, "value": "m22"
			}]
		}, {
			"proto": "float32(m21)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1303
			, "args": [{
				"proto": "m21"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1303
				, "value": "m21"
			}]
		}, {
			"proto": "float32(m14)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1302
			, "args": [{
				"proto": "m14"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1302
				, "value": "m14"
			}]
		}, {
			"proto": "float32(m13)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1302
			, "args": [{
				"proto": "m13"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1302
				, "value": "m13"
			}]
		}, {
			"proto": "float32(m12)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1302
			, "args": [{
				"proto": "m12"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1302
				, "value": "m12"
			}]
		}, {
			"proto": "float32(m11)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1302
			, "args": [{
				"proto": "m11"
				, "kind": ".ref"
				, "type": "float64"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1302
				, "value": "m11"
			}]
		}, {
			"proto": "mat4f"
			, "kind": ".ref"
			, "type": "mat4f"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1301
			, "value": "mat4f"
		}]
	}
}, {
	"proto": "dp3(mat: mat4f, vec: vec4f)"
	, "kind": ".def"
	, "name": "dp3"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1307
	, "args": [{
		"proto": "dp3.mat"
		, "kind": ".ref"
		, "name": "mat"
		, "declaredIn": "dp3(mat: mat4f, vec: vec4f)"
		, "type": "mat4f"
		, "file": "stdlib.cvx"
		, "line": 1307
		, "cast": ".rec"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "dp3.vec"
		, "kind": ".ref"
		, "name": "vec"
		, "declaredIn": "dp3(mat: mat4f, vec: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1307
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "vec4f(dp3(mat.x, vec), dp3(mat.y, vec), dp3(mat.z, vec), float32(1))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1307
		, "args": [{
			"proto": "float32(1)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1307
			, "args": [{
				"proto": "1"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".f32"
				, "file": "stdlib.cvx"
				, "line": 1307
				, "value": "1"
			}]
		}, {
			"proto": "dp3(mat.z, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1307
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1307
				, "value": "vec"
			}, {
				"proto": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1307
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1307
					, "value": "mat"
				}
				, "rval": {
					"proto": "z"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1307
					, "value": "z"
				}
			}]
		}, {
			"proto": "dp3(mat.y, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1307
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1307
				, "value": "vec"
			}, {
				"proto": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1307
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1307
					, "value": "mat"
				}
				, "rval": {
					"proto": "y"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1307
					, "value": "y"
				}
			}]
		}, {
			"proto": "dp3(mat.x, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1307
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1307
				, "value": "vec"
			}, {
				"proto": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1307
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1307
					, "value": "mat"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1307
					, "value": "x"
				}
			}]
		}]
	}
}, {
	"proto": "dp4(mat: mat4f, vec: vec4f)"
	, "kind": ".def"
	, "name": "dp4"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1308
	, "args": [{
		"proto": "dp4.mat"
		, "kind": ".ref"
		, "name": "mat"
		, "declaredIn": "dp4(mat: mat4f, vec: vec4f)"
		, "type": "mat4f"
		, "file": "stdlib.cvx"
		, "line": 1308
		, "cast": ".rec"
		, "size": 4
		, "offs": 204
		, "const": false
		, "static": false
	}, {
		"proto": "dp4.vec"
		, "kind": ".ref"
		, "name": "vec"
		, "declaredIn": "dp4(mat: mat4f, vec: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1308
		, "cast": ".rec"
		, "size": 16
		, "offs": 220
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "vec4f(dp4(mat.x, vec), dp4(mat.y, vec), dp4(mat.z, vec), dp4(mat.w, vec))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1324
		, "args": [{
			"proto": "dp4(mat.w, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1308
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1308
				, "value": "vec"
			}, {
				"proto": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1308
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "mat"
				}
				, "rval": {
					"proto": "w"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "w"
				}
			}]
		}, {
			"proto": "dp4(mat.z, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1308
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1308
				, "value": "vec"
			}, {
				"proto": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1308
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "mat"
				}
				, "rval": {
					"proto": "z"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "z"
				}
			}]
		}, {
			"proto": "dp4(mat.y, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1308
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1308
				, "value": "vec"
			}, {
				"proto": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1308
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "mat"
				}
				, "rval": {
					"proto": "y"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "y"
				}
			}]
		}, {
			"proto": "dp4(mat.x, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1308
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1308
				, "value": "vec"
			}, {
				"proto": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1308
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "mat"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "x"
				}
			}]
		}]
	}
}, {
	"proto": "dph(mat: mat4f, vec: vec4f)"
	, "kind": ".def"
	, "name": "dph"
	, "type": "vec4f"
	, "file": "stdlib.cvx"
	, "line": 1309
	, "args": [{
		"proto": "dph.mat"
		, "kind": ".ref"
		, "name": "mat"
		, "declaredIn": "dph(mat: mat4f, vec: vec4f)"
		, "type": "mat4f"
		, "file": "stdlib.cvx"
		, "line": 1309
		, "cast": ".rec"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "dph.vec"
		, "kind": ".ref"
		, "name": "vec"
		, "declaredIn": "dph(mat: mat4f, vec: vec4f)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1309
		, "cast": ".rec"
		, "size": 16
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "vec4f(dph(mat.x, vec), dph(mat.y, vec), dph(mat.z, vec), dph(mat.w, vec))"
		, "kind": "(?)"
		, "type": "vec4f"
		, "file": "stdlib.cvx"
		, "line": 1309
		, "args": [{
			"proto": "dph(mat.w, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1309
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1309
				, "value": "vec"
			}, {
				"proto": "mat.w"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1309
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "mat"
				}
				, "rval": {
					"proto": "w"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "w"
				}
			}]
		}, {
			"proto": "dph(mat.z, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1309
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1309
				, "value": "vec"
			}, {
				"proto": "mat.z"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1309
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "mat"
				}
				, "rval": {
					"proto": "z"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "z"
				}
			}]
		}, {
			"proto": "dph(mat.y, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1309
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1309
				, "value": "vec"
			}, {
				"proto": "mat.y"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1309
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "mat"
				}
				, "rval": {
					"proto": "y"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "y"
				}
			}]
		}, {
			"proto": "dph(mat.x, vec)"
			, "kind": "(?)"
			, "type": "float32"
			, "cast": ".f32"
			, "file": "stdlib.cvx"
			, "line": 1309
			, "args": [{
				"proto": "vec"
				, "kind": ".ref"
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1309
				, "value": "vec"
			}, {
				"proto": "mat.x"
				, "kind": "."
				, "type": "vec4f"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1309
				, "lval": {
					"proto": "mat"
					, "kind": ".ref"
					, "type": "mat4f"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "mat"
				}
				, "rval": {
					"proto": "x"
					, "kind": ".ref"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "x"
				}
			}]
		}]
	}
}, {
	"proto": "mul(lhs: mat4f, rhs: mat4f)"
	, "kind": ".ref"
	, "name": "mul"
	, "type": "mat4f"
	, "file": "stdlib.cvx"
	, "line": 1311
	, "args": [{
		"proto": "mul.lhs"
		, "kind": ".ref"
		, "name": "lhs"
		, "declaredIn": "mul(lhs: mat4f, rhs: mat4f)"
		, "type": "mat4f"
		, "file": "stdlib.cvx"
		, "line": 1311
		, "cast": ".ref"
		, "size": 4
		, "offs": 72
		, "const": false
		, "static": false
	}, {
		"proto": "mul.rhs"
		, "kind": ".ref"
		, "name": "rhs"
		, "declaredIn": "mul(lhs: mat4f, rhs: mat4f)"
		, "type": "mat4f"
		, "file": "stdlib.cvx"
		, "line": 1311
		, "cast": ".ref"
		, "size": 4
		, "offs": 68
		, "const": false
		, "static": false
	}]
	, "cast": ".rec"
	, "size": 313
	, "offs": 283715
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1311
		, "stmt": [{
			"proto": "Trhs"
			, "kind": ".def"
			, "type": "mat4f"
			, "file": "stdlib.cvx"
			, "line": 1314
			, "value": "Trhs"
		}, {
			"proto": "result.x := dp4(Trhs, lhs.x);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1321
			, "stmt": {
				"proto": "(result.x := dp4(Trhs, lhs.x))"
				, "kind": ":="
				, "type": "vec4f"
				, "file": "stdlib.cvx"
				, "line": 1321
				, "lval": {
					"proto": "result.x"
					, "kind": "."
					, "type": "vec4f"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1321
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "mat4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1321
						, "value": "result"
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "vec4f"
						, "file": "stdlib.cvx"
						, "line": 1321
						, "value": "x"
					}
				}
				, "rval": {
					"proto": "dp4(Trhs, lhs.x)"
					, "kind": "(?)"
					, "type": "vec4f"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1321
					, "args": [{
						"proto": "lhs.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".rec"
						, "file": "stdlib.cvx"
						, "line": 1321
						, "lval": {
							"proto": "lhs"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1321
							, "value": "lhs"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1321
							, "value": "x"
						}
					}, {
						"proto": "Trhs"
						, "kind": ".ref"
						, "type": "mat4f"
						, "cast": ".rec"
						, "file": "stdlib.cvx"
						, "line": 1321
						, "value": "Trhs"
					}]
				}
			}
		}, {
			"proto": "result.y := dp4(Trhs, lhs.y);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1322
			, "stmt": {
				"proto": "(result.y := dp4(Trhs, lhs.y))"
				, "kind": ":="
				, "type": "vec4f"
				, "file": "stdlib.cvx"
				, "line": 1322
				, "lval": {
					"proto": "result.y"
					, "kind": "."
					, "type": "vec4f"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1322
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "mat4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1322
						, "value": "result"
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "vec4f"
						, "file": "stdlib.cvx"
						, "line": 1322
						, "value": "y"
					}
				}
				, "rval": {
					"proto": "dp4(Trhs, lhs.y)"
					, "kind": "(?)"
					, "type": "vec4f"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1322
					, "args": [{
						"proto": "lhs.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".rec"
						, "file": "stdlib.cvx"
						, "line": 1322
						, "lval": {
							"proto": "lhs"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1322
							, "value": "lhs"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1322
							, "value": "y"
						}
					}, {
						"proto": "Trhs"
						, "kind": ".ref"
						, "type": "mat4f"
						, "cast": ".rec"
						, "file": "stdlib.cvx"
						, "line": 1322
						, "value": "Trhs"
					}]
				}
			}
		}, {
			"proto": "result.z := dp4(Trhs, lhs.z);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1323
			, "stmt": {
				"proto": "(result.z := dp4(Trhs, lhs.z))"
				, "kind": ":="
				, "type": "vec4f"
				, "file": "stdlib.cvx"
				, "line": 1323
				, "lval": {
					"proto": "result.z"
					, "kind": "."
					, "type": "vec4f"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1323
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "mat4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1323
						, "value": "result"
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "vec4f"
						, "file": "stdlib.cvx"
						, "line": 1323
						, "value": "z"
					}
				}
				, "rval": {
					"proto": "dp4(Trhs, lhs.z)"
					, "kind": "(?)"
					, "type": "vec4f"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1323
					, "args": [{
						"proto": "lhs.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".rec"
						, "file": "stdlib.cvx"
						, "line": 1323
						, "lval": {
							"proto": "lhs"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1323
							, "value": "lhs"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1323
							, "value": "z"
						}
					}, {
						"proto": "Trhs"
						, "kind": ".ref"
						, "type": "mat4f"
						, "cast": ".rec"
						, "file": "stdlib.cvx"
						, "line": 1323
						, "value": "Trhs"
					}]
				}
			}
		}, {
			"proto": "result.w := dp4(Trhs, lhs.w);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1324
			, "stmt": {
				"proto": "(result.w := dp4(Trhs, lhs.w))"
				, "kind": ":="
				, "type": "vec4f"
				, "file": "stdlib.cvx"
				, "line": 1324
				, "lval": {
					"proto": "result.w"
					, "kind": "."
					, "type": "vec4f"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1324
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "mat4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1324
						, "value": "result"
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "vec4f"
						, "file": "stdlib.cvx"
						, "line": 1324
						, "value": "w"
					}
				}
				, "rval": {
					"proto": "dp4(Trhs, lhs.w)"
					, "kind": "(?)"
					, "type": "vec4f"
					, "cast": ".rec"
					, "file": "stdlib.cvx"
					, "line": 1324
					, "args": [{
						"proto": "lhs.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".rec"
						, "file": "stdlib.cvx"
						, "line": 1324
						, "lval": {
							"proto": "lhs"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1324
							, "value": "lhs"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1324
							, "value": "w"
						}
					}, {
						"proto": "Trhs"
						, "kind": ".ref"
						, "type": "mat4f"
						, "cast": ".rec"
						, "file": "stdlib.cvx"
						, "line": 1324
						, "value": "Trhs"
					}]
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(2)"
		, "offset": 283715
	}, {
		"instruction": "inc 60"
		, "offset": 283717
	}, {
		"instruction": "load.i32"
		, "offset": 283721
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 283722
	}, {
		"instruction": "inc 44"
		, "offset": 283724
	}, {
		"instruction": "load.i32"
		, "offset": 283728
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 283729
	}, {
		"instruction": "inc 28"
		, "offset": 283731
	}, {
		"instruction": "load.i32"
		, "offset": 283735
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 283736
	}, {
		"instruction": "inc 12"
		, "offset": 283738
	}, {
		"instruction": "load.i32"
		, "offset": 283742
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 283743
	}, {
		"instruction": "inc 56"
		, "offset": 283745
	}, {
		"instruction": "load.i32"
		, "offset": 283749
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 283750
	}, {
		"instruction": "inc 40"
		, "offset": 283752
	}, {
		"instruction": "load.i32"
		, "offset": 283756
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 283757
	}, {
		"instruction": "inc 24"
		, "offset": 283759
	}, {
		"instruction": "load.i32"
		, "offset": 283763
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 283764
	}, {
		"instruction": "inc 8"
		, "offset": 283766
	}, {
		"instruction": "load.i32"
		, "offset": 283770
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 283771
	}, {
		"instruction": "inc 52"
		, "offset": 283773
	}, {
		"instruction": "load.i32"
		, "offset": 283777
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 283778
	}, {
		"instruction": "inc 36"
		, "offset": 283780
	}, {
		"instruction": "load.i32"
		, "offset": 283784
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 283785
	}, {
		"instruction": "inc 20"
		, "offset": 283787
	}, {
		"instruction": "load.i32"
		, "offset": 283791
	}, {
		"instruction": "dup.x1 sp(13)"
		, "offset": 283792
	}, {
		"instruction": "inc 4"
		, "offset": 283794
	}, {
		"instruction": "load.i32"
		, "offset": 283798
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 283799
	}, {
		"instruction": "inc 48"
		, "offset": 283801
	}, {
		"instruction": "load.i32"
		, "offset": 283805
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 283806
	}, {
		"instruction": "inc 32"
		, "offset": 283808
	}, {
		"instruction": "load.i32"
		, "offset": 283812
	}, {
		"instruction": "dup.x1 sp(16)"
		, "offset": 283813
	}, {
		"instruction": "inc 16"
		, "offset": 283815
	}, {
		"instruction": "load.i32"
		, "offset": 283819
	}, {
		"instruction": "dup.x1 sp(17)"
		, "offset": 283820
	}, {
		"instruction": "load.i32"
		, "offset": 283822
	}, {
		"instruction": "ldsp 0"
		, "offset": 283823
	}, {
		"instruction": "ldsp -60"
		, "offset": 283827
	}, {
		"instruction": "copy.mem -64"
		, "offset": 283831
	}, {
		"instruction": "stack 64"
		, "offset": 283835
	}, {
		"instruction": "dup.x1 sp(33)"
		, "offset": 283839
	}, {
		"instruction": "load.i128"
		, "offset": 283841
	}, {
		"instruction": "dup.x4 sp(16)"
		, "offset": 283842
	}, {
		"instruction": "dup.x4 sp(4)"
		, "offset": 283844
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283846
	}, {
		"instruction": "dup.x4 sp(13)"
		, "offset": 283847
	}, {
		"instruction": "dup.x4 sp(5)"
		, "offset": 283849
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283851
	}, {
		"instruction": "dup.x4 sp(10)"
		, "offset": 283852
	}, {
		"instruction": "dup.x4 sp(6)"
		, "offset": 283854
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283856
	}, {
		"instruction": "dup.x4 sp(7)"
		, "offset": 283857
	}, {
		"instruction": "dup.x4 sp(7)"
		, "offset": 283859
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283861
	}, {
		"instruction": "set.x4 sp(20)"
		, "offset": 283862
	}, {
		"instruction": "stack -64"
		, "offset": 283864
	}, {
		"instruction": "set.x4 sp(23)"
		, "offset": 283868
	}, {
		"instruction": "ldsp 0"
		, "offset": 283870
	}, {
		"instruction": "ldsp -60"
		, "offset": 283874
	}, {
		"instruction": "copy.mem -64"
		, "offset": 283878
	}, {
		"instruction": "stack 64"
		, "offset": 283882
	}, {
		"instruction": "dup.x1 sp(33)"
		, "offset": 283886
	}, {
		"instruction": "inc 16"
		, "offset": 283888
	}, {
		"instruction": "load.i128"
		, "offset": 283892
	}, {
		"instruction": "dup.x4 sp(16)"
		, "offset": 283893
	}, {
		"instruction": "dup.x4 sp(4)"
		, "offset": 283895
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283897
	}, {
		"instruction": "dup.x4 sp(13)"
		, "offset": 283898
	}, {
		"instruction": "dup.x4 sp(5)"
		, "offset": 283900
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283902
	}, {
		"instruction": "dup.x4 sp(10)"
		, "offset": 283903
	}, {
		"instruction": "dup.x4 sp(6)"
		, "offset": 283905
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283907
	}, {
		"instruction": "dup.x4 sp(7)"
		, "offset": 283908
	}, {
		"instruction": "dup.x4 sp(7)"
		, "offset": 283910
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283912
	}, {
		"instruction": "set.x4 sp(20)"
		, "offset": 283913
	}, {
		"instruction": "stack -64"
		, "offset": 283915
	}, {
		"instruction": "set.x4 sp(27)"
		, "offset": 283919
	}, {
		"instruction": "ldsp 0"
		, "offset": 283921
	}, {
		"instruction": "ldsp -60"
		, "offset": 283925
	}, {
		"instruction": "copy.mem -64"
		, "offset": 283929
	}, {
		"instruction": "stack 64"
		, "offset": 283933
	}, {
		"instruction": "dup.x1 sp(33)"
		, "offset": 283937
	}, {
		"instruction": "inc 32"
		, "offset": 283939
	}, {
		"instruction": "load.i128"
		, "offset": 283943
	}, {
		"instruction": "dup.x4 sp(16)"
		, "offset": 283944
	}, {
		"instruction": "dup.x4 sp(4)"
		, "offset": 283946
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283948
	}, {
		"instruction": "dup.x4 sp(13)"
		, "offset": 283949
	}, {
		"instruction": "dup.x4 sp(5)"
		, "offset": 283951
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283953
	}, {
		"instruction": "dup.x4 sp(10)"
		, "offset": 283954
	}, {
		"instruction": "dup.x4 sp(6)"
		, "offset": 283956
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283958
	}, {
		"instruction": "dup.x4 sp(7)"
		, "offset": 283959
	}, {
		"instruction": "dup.x4 sp(7)"
		, "offset": 283961
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283963
	}, {
		"instruction": "set.x4 sp(20)"
		, "offset": 283964
	}, {
		"instruction": "stack -64"
		, "offset": 283966
	}, {
		"instruction": "set.x4 sp(31)"
		, "offset": 283970
	}, {
		"instruction": "ldsp 0"
		, "offset": 283972
	}, {
		"instruction": "ldsp -60"
		, "offset": 283976
	}, {
		"instruction": "copy.mem -64"
		, "offset": 283980
	}, {
		"instruction": "stack 64"
		, "offset": 283984
	}, {
		"instruction": "dup.x1 sp(33)"
		, "offset": 283988
	}, {
		"instruction": "inc 48"
		, "offset": 283990
	}, {
		"instruction": "load.i128"
		, "offset": 283994
	}, {
		"instruction": "dup.x4 sp(16)"
		, "offset": 283995
	}, {
		"instruction": "dup.x4 sp(4)"
		, "offset": 283997
	}, {
		"instruction": "v4f.dp4"
		, "offset": 283999
	}, {
		"instruction": "dup.x4 sp(13)"
		, "offset": 284000
	}, {
		"instruction": "dup.x4 sp(5)"
		, "offset": 284002
	}, {
		"instruction": "v4f.dp4"
		, "offset": 284004
	}, {
		"instruction": "dup.x4 sp(10)"
		, "offset": 284005
	}, {
		"instruction": "dup.x4 sp(6)"
		, "offset": 284007
	}, {
		"instruction": "v4f.dp4"
		, "offset": 284009
	}, {
		"instruction": "dup.x4 sp(7)"
		, "offset": 284010
	}, {
		"instruction": "dup.x4 sp(7)"
		, "offset": 284012
	}, {
		"instruction": "v4f.dp4"
		, "offset": 284014
	}, {
		"instruction": "set.x4 sp(20)"
		, "offset": 284015
	}, {
		"instruction": "stack -64"
		, "offset": 284017
	}, {
		"instruction": "set.x4 sp(35)"
		, "offset": 284021
	}, {
		"instruction": "stack -64"
		, "offset": 284023
	}, {
		"instruction": "ret"
		, "offset": 284027
	}]
}, {
	"proto": "transpose(mat: mat4f)"
	, "kind": ".ref"
	, "name": "transpose"
	, "type": "mat4f"
	, "file": "stdlib.cvx"
	, "line": 1327
	, "args": [{
		"proto": "transpose.mat"
		, "kind": ".ref"
		, "name": "mat"
		, "declaredIn": "transpose(mat: mat4f)"
		, "type": "mat4f"
		, "file": "stdlib.cvx"
		, "line": 1327
		, "cast": ".ref"
		, "size": 4
		, "offs": 68
		, "const": false
		, "static": false
	}]
	, "cast": ".rec"
	, "size": 141
	, "offs": 284028
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1327
		, "stmt": [{
			"proto": "result.x.x := mat.x.x;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1328
			, "stmt": {
				"proto": "(result.x.x := mat.x.x)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1328
				, "lval": {
					"proto": "result.x.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1328
					, "lval": {
						"proto": "result.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1328
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1328
							, "value": "result"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1328
							, "value": "x"
						}
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1328
						, "value": "x"
					}
				}
				, "rval": {
					"proto": "mat.x.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1328
					, "lval": {
						"proto": "mat.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1328
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1328
							, "value": "mat"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1328
							, "value": "x"
						}
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1328
						, "value": "x"
					}
				}
			}
		}, {
			"proto": "result.x.y := mat.y.x;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1329
			, "stmt": {
				"proto": "(result.x.y := mat.y.x)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1329
				, "lval": {
					"proto": "result.x.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1329
					, "lval": {
						"proto": "result.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1329
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1329
							, "value": "result"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1329
							, "value": "x"
						}
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1329
						, "value": "y"
					}
				}
				, "rval": {
					"proto": "mat.y.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1329
					, "lval": {
						"proto": "mat.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1329
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1329
							, "value": "mat"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1329
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1329
						, "value": "x"
					}
				}
			}
		}, {
			"proto": "result.x.z := mat.z.x;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1330
			, "stmt": {
				"proto": "(result.x.z := mat.z.x)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1330
				, "lval": {
					"proto": "result.x.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1330
					, "lval": {
						"proto": "result.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1330
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1330
							, "value": "result"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1330
							, "value": "x"
						}
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1330
						, "value": "z"
					}
				}
				, "rval": {
					"proto": "mat.z.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1330
					, "lval": {
						"proto": "mat.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1330
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1330
							, "value": "mat"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1330
							, "value": "z"
						}
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1330
						, "value": "x"
					}
				}
			}
		}, {
			"proto": "result.x.w := mat.w.x;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1331
			, "stmt": {
				"proto": "(result.x.w := mat.w.x)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1331
				, "lval": {
					"proto": "result.x.w"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1331
					, "lval": {
						"proto": "result.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1331
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1331
							, "value": "result"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1331
							, "value": "x"
						}
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1331
						, "value": "w"
					}
				}
				, "rval": {
					"proto": "mat.w.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1331
					, "lval": {
						"proto": "mat.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1331
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1331
							, "value": "mat"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1331
							, "value": "w"
						}
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1331
						, "value": "x"
					}
				}
			}
		}, {
			"proto": "result.y.x := mat.x.y;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1333
			, "stmt": {
				"proto": "(result.y.x := mat.x.y)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1333
				, "lval": {
					"proto": "result.y.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1333
					, "lval": {
						"proto": "result.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1333
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1333
							, "value": "result"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1333
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1333
						, "value": "x"
					}
				}
				, "rval": {
					"proto": "mat.x.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1333
					, "lval": {
						"proto": "mat.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1333
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1333
							, "value": "mat"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1333
							, "value": "x"
						}
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1333
						, "value": "y"
					}
				}
			}
		}, {
			"proto": "result.y.y := mat.y.y;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1334
			, "stmt": {
				"proto": "(result.y.y := mat.y.y)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1334
				, "lval": {
					"proto": "result.y.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1334
					, "lval": {
						"proto": "result.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1334
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1334
							, "value": "result"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1334
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1334
						, "value": "y"
					}
				}
				, "rval": {
					"proto": "mat.y.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1334
					, "lval": {
						"proto": "mat.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1334
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1334
							, "value": "mat"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1334
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1334
						, "value": "y"
					}
				}
			}
		}, {
			"proto": "result.y.z := mat.z.y;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1335
			, "stmt": {
				"proto": "(result.y.z := mat.z.y)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1335
				, "lval": {
					"proto": "result.y.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1335
					, "lval": {
						"proto": "result.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1335
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1335
							, "value": "result"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1335
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1335
						, "value": "z"
					}
				}
				, "rval": {
					"proto": "mat.z.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1335
					, "lval": {
						"proto": "mat.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1335
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1335
							, "value": "mat"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1335
							, "value": "z"
						}
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1335
						, "value": "y"
					}
				}
			}
		}, {
			"proto": "result.y.w := mat.w.y;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1336
			, "stmt": {
				"proto": "(result.y.w := mat.w.y)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1336
				, "lval": {
					"proto": "result.y.w"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1336
					, "lval": {
						"proto": "result.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1336
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1336
							, "value": "result"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1336
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1336
						, "value": "w"
					}
				}
				, "rval": {
					"proto": "mat.w.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1336
					, "lval": {
						"proto": "mat.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1336
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1336
							, "value": "mat"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1336
							, "value": "w"
						}
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1336
						, "value": "y"
					}
				}
			}
		}, {
			"proto": "result.z.x := mat.x.z;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1338
			, "stmt": {
				"proto": "(result.z.x := mat.x.z)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1338
				, "lval": {
					"proto": "result.z.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1338
					, "lval": {
						"proto": "result.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1338
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1338
							, "value": "result"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1338
							, "value": "z"
						}
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1338
						, "value": "x"
					}
				}
				, "rval": {
					"proto": "mat.x.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1338
					, "lval": {
						"proto": "mat.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1338
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1338
							, "value": "mat"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1338
							, "value": "x"
						}
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1338
						, "value": "z"
					}
				}
			}
		}, {
			"proto": "result.z.y := mat.y.z;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1339
			, "stmt": {
				"proto": "(result.z.y := mat.y.z)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1339
				, "lval": {
					"proto": "result.z.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1339
					, "lval": {
						"proto": "result.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1339
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1339
							, "value": "result"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1339
							, "value": "z"
						}
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1339
						, "value": "y"
					}
				}
				, "rval": {
					"proto": "mat.y.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1339
					, "lval": {
						"proto": "mat.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1339
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1339
							, "value": "mat"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1339
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1339
						, "value": "z"
					}
				}
			}
		}, {
			"proto": "result.z.z := mat.z.z;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1340
			, "stmt": {
				"proto": "(result.z.z := mat.z.z)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1340
				, "lval": {
					"proto": "result.z.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1340
					, "lval": {
						"proto": "result.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1340
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1340
							, "value": "result"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1340
							, "value": "z"
						}
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1340
						, "value": "z"
					}
				}
				, "rval": {
					"proto": "mat.z.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1340
					, "lval": {
						"proto": "mat.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1340
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1340
							, "value": "mat"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1340
							, "value": "z"
						}
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1340
						, "value": "z"
					}
				}
			}
		}, {
			"proto": "result.z.w := mat.w.z;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1341
			, "stmt": {
				"proto": "(result.z.w := mat.w.z)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1341
				, "lval": {
					"proto": "result.z.w"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1341
					, "lval": {
						"proto": "result.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1341
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1341
							, "value": "result"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1341
							, "value": "z"
						}
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1341
						, "value": "w"
					}
				}
				, "rval": {
					"proto": "mat.w.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1341
					, "lval": {
						"proto": "mat.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1341
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1341
							, "value": "mat"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1341
							, "value": "w"
						}
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1341
						, "value": "z"
					}
				}
			}
		}, {
			"proto": "result.w.x := mat.x.w;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1343
			, "stmt": {
				"proto": "(result.w.x := mat.x.w)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1343
				, "lval": {
					"proto": "result.w.x"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1343
					, "lval": {
						"proto": "result.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1343
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1343
							, "value": "result"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1343
							, "value": "w"
						}
					}
					, "rval": {
						"proto": "x"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1343
						, "value": "x"
					}
				}
				, "rval": {
					"proto": "mat.x.w"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1343
					, "lval": {
						"proto": "mat.x"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1343
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1343
							, "value": "mat"
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1343
							, "value": "x"
						}
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1343
						, "value": "w"
					}
				}
			}
		}, {
			"proto": "result.w.y := mat.y.w;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1344
			, "stmt": {
				"proto": "(result.w.y := mat.y.w)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1344
				, "lval": {
					"proto": "result.w.y"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1344
					, "lval": {
						"proto": "result.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1344
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1344
							, "value": "result"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1344
							, "value": "w"
						}
					}
					, "rval": {
						"proto": "y"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1344
						, "value": "y"
					}
				}
				, "rval": {
					"proto": "mat.y.w"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1344
					, "lval": {
						"proto": "mat.y"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1344
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1344
							, "value": "mat"
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1344
							, "value": "y"
						}
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1344
						, "value": "w"
					}
				}
			}
		}, {
			"proto": "result.w.z := mat.z.w;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1345
			, "stmt": {
				"proto": "(result.w.z := mat.z.w)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1345
				, "lval": {
					"proto": "result.w.z"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1345
					, "lval": {
						"proto": "result.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1345
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1345
							, "value": "result"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1345
							, "value": "w"
						}
					}
					, "rval": {
						"proto": "z"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1345
						, "value": "z"
					}
				}
				, "rval": {
					"proto": "mat.z.w"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1345
					, "lval": {
						"proto": "mat.z"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1345
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1345
							, "value": "mat"
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1345
							, "value": "z"
						}
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1345
						, "value": "w"
					}
				}
			}
		}, {
			"proto": "result.w.w := mat.w.w;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1346
			, "stmt": {
				"proto": "(result.w.w := mat.w.w)"
				, "kind": ":="
				, "type": "float32"
				, "file": "stdlib.cvx"
				, "line": 1346
				, "lval": {
					"proto": "result.w.w"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1346
					, "lval": {
						"proto": "result.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1346
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1346
							, "value": "result"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1346
							, "value": "w"
						}
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1346
						, "value": "w"
					}
				}
				, "rval": {
					"proto": "mat.w.w"
					, "kind": "."
					, "type": "float32"
					, "cast": ".f32"
					, "file": "stdlib.cvx"
					, "line": 1346
					, "lval": {
						"proto": "mat.w"
						, "kind": "."
						, "type": "vec4f"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1346
						, "lval": {
							"proto": "mat"
							, "kind": ".ref"
							, "type": "mat4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1346
							, "value": "mat"
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "vec4f"
							, "file": "stdlib.cvx"
							, "line": 1346
							, "value": "w"
						}
					}
					, "rval": {
						"proto": "w"
						, "kind": ".ref"
						, "type": "float32"
						, "file": "stdlib.cvx"
						, "line": 1346
						, "value": "w"
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 284028
	}, {
		"instruction": "load.i32"
		, "offset": 284030
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 284031
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284033
	}, {
		"instruction": "inc 16"
		, "offset": 284035
	}, {
		"instruction": "load.i32"
		, "offset": 284039
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 284040
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284042
	}, {
		"instruction": "inc 32"
		, "offset": 284044
	}, {
		"instruction": "load.i32"
		, "offset": 284048
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 284049
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284051
	}, {
		"instruction": "inc 48"
		, "offset": 284053
	}, {
		"instruction": "load.i32"
		, "offset": 284057
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 284058
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284060
	}, {
		"instruction": "inc 4"
		, "offset": 284062
	}, {
		"instruction": "load.i32"
		, "offset": 284066
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 284067
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284069
	}, {
		"instruction": "inc 20"
		, "offset": 284071
	}, {
		"instruction": "load.i32"
		, "offset": 284075
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 284076
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284078
	}, {
		"instruction": "inc 36"
		, "offset": 284080
	}, {
		"instruction": "load.i32"
		, "offset": 284084
	}, {
		"instruction": "set.x1 sp(9)"
		, "offset": 284085
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284087
	}, {
		"instruction": "inc 52"
		, "offset": 284089
	}, {
		"instruction": "load.i32"
		, "offset": 284093
	}, {
		"instruction": "set.x1 sp(10)"
		, "offset": 284094
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284096
	}, {
		"instruction": "inc 8"
		, "offset": 284098
	}, {
		"instruction": "load.i32"
		, "offset": 284102
	}, {
		"instruction": "set.x1 sp(11)"
		, "offset": 284103
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284105
	}, {
		"instruction": "inc 24"
		, "offset": 284107
	}, {
		"instruction": "load.i32"
		, "offset": 284111
	}, {
		"instruction": "set.x1 sp(12)"
		, "offset": 284112
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284114
	}, {
		"instruction": "inc 40"
		, "offset": 284116
	}, {
		"instruction": "load.i32"
		, "offset": 284120
	}, {
		"instruction": "set.x1 sp(13)"
		, "offset": 284121
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284123
	}, {
		"instruction": "inc 56"
		, "offset": 284125
	}, {
		"instruction": "load.i32"
		, "offset": 284129
	}, {
		"instruction": "set.x1 sp(14)"
		, "offset": 284130
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284132
	}, {
		"instruction": "inc 12"
		, "offset": 284134
	}, {
		"instruction": "load.i32"
		, "offset": 284138
	}, {
		"instruction": "set.x1 sp(15)"
		, "offset": 284139
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284141
	}, {
		"instruction": "inc 28"
		, "offset": 284143
	}, {
		"instruction": "load.i32"
		, "offset": 284147
	}, {
		"instruction": "set.x1 sp(16)"
		, "offset": 284148
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284150
	}, {
		"instruction": "inc 44"
		, "offset": 284152
	}, {
		"instruction": "load.i32"
		, "offset": 284156
	}, {
		"instruction": "set.x1 sp(17)"
		, "offset": 284157
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284159
	}, {
		"instruction": "inc 60"
		, "offset": 284161
	}, {
		"instruction": "load.i32"
		, "offset": 284165
	}, {
		"instruction": "set.x1 sp(18)"
		, "offset": 284166
	}, {
		"instruction": "ret"
		, "offset": 284168
	}]
}, {
	"proto": "transpose2(mat: mat4f)"
	, "kind": ".ref"
	, "name": "transpose2"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1349
	, "args": [{
		"proto": "transpose2.mat"
		, "kind": ".ref"
		, "name": "mat"
		, "declaredIn": "transpose2(mat: mat4f)"
		, "type": "mat4f"
		, "file": "stdlib.cvx"
		, "line": 1349
		, "cast": ".ref"
		, "size": 4
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "cast": ".vid"
	, "size": 133
	, "offs": 284188
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1349
		, "stmt": [{
			"proto": "swap(a: float32, b: float32)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1350
			, "value": "swap(a: float32, b: float32)"
		}, {
			"proto": "swap((&mat.x.y), (&mat.y.x));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1356
			, "stmt": {
				"proto": "swap((&mat.x.y), (&mat.y.x))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1356
				, "args": [{
					"proto": "(&mat.y.x)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1356
					, "rval": {
						"proto": "mat.y.x"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1356
						, "lval": {
							"proto": "mat.y"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1356
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1356
								, "value": "mat"
							}
							, "rval": {
								"proto": "y"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1356
								, "value": "y"
							}
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1356
							, "value": "x"
						}
					}
				}, {
					"proto": "(&mat.x.y)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1356
					, "rval": {
						"proto": "mat.x.y"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1356
						, "lval": {
							"proto": "mat.x"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1356
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1356
								, "value": "mat"
							}
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1356
								, "value": "x"
							}
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1356
							, "value": "y"
						}
					}
				}]
			}
		}, {
			"proto": "swap((&mat.x.z), (&mat.z.x));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1357
			, "stmt": {
				"proto": "swap((&mat.x.z), (&mat.z.x))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1357
				, "args": [{
					"proto": "(&mat.z.x)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1357
					, "rval": {
						"proto": "mat.z.x"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1357
						, "lval": {
							"proto": "mat.z"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1357
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1357
								, "value": "mat"
							}
							, "rval": {
								"proto": "z"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1357
								, "value": "z"
							}
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1357
							, "value": "x"
						}
					}
				}, {
					"proto": "(&mat.x.z)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1357
					, "rval": {
						"proto": "mat.x.z"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1357
						, "lval": {
							"proto": "mat.x"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1357
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1357
								, "value": "mat"
							}
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1357
								, "value": "x"
							}
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1357
							, "value": "z"
						}
					}
				}]
			}
		}, {
			"proto": "swap((&mat.x.w), (&mat.w.x));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1358
			, "stmt": {
				"proto": "swap((&mat.x.w), (&mat.w.x))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1358
				, "args": [{
					"proto": "(&mat.w.x)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1358
					, "rval": {
						"proto": "mat.w.x"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1358
						, "lval": {
							"proto": "mat.w"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1358
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1358
								, "value": "mat"
							}
							, "rval": {
								"proto": "w"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1358
								, "value": "w"
							}
						}
						, "rval": {
							"proto": "x"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1358
							, "value": "x"
						}
					}
				}, {
					"proto": "(&mat.x.w)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1358
					, "rval": {
						"proto": "mat.x.w"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1358
						, "lval": {
							"proto": "mat.x"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1358
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1358
								, "value": "mat"
							}
							, "rval": {
								"proto": "x"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1358
								, "value": "x"
							}
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1358
							, "value": "w"
						}
					}
				}]
			}
		}, {
			"proto": "swap((&mat.y.z), (&mat.z.y));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1362
			, "stmt": {
				"proto": "swap((&mat.y.z), (&mat.z.y))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1362
				, "args": [{
					"proto": "(&mat.z.y)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1362
					, "rval": {
						"proto": "mat.z.y"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1362
						, "lval": {
							"proto": "mat.z"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1362
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1362
								, "value": "mat"
							}
							, "rval": {
								"proto": "z"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1362
								, "value": "z"
							}
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1362
							, "value": "y"
						}
					}
				}, {
					"proto": "(&mat.y.z)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1362
					, "rval": {
						"proto": "mat.y.z"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1362
						, "lval": {
							"proto": "mat.y"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1362
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1362
								, "value": "mat"
							}
							, "rval": {
								"proto": "y"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1362
								, "value": "y"
							}
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1362
							, "value": "z"
						}
					}
				}]
			}
		}, {
			"proto": "swap((&mat.y.w), (&mat.w.y));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1363
			, "stmt": {
				"proto": "swap((&mat.y.w), (&mat.w.y))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1363
				, "args": [{
					"proto": "(&mat.w.y)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1363
					, "rval": {
						"proto": "mat.w.y"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1363
						, "lval": {
							"proto": "mat.w"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1363
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1363
								, "value": "mat"
							}
							, "rval": {
								"proto": "w"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1363
								, "value": "w"
							}
						}
						, "rval": {
							"proto": "y"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1363
							, "value": "y"
						}
					}
				}, {
					"proto": "(&mat.y.w)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1363
					, "rval": {
						"proto": "mat.y.w"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1363
						, "lval": {
							"proto": "mat.y"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1363
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1363
								, "value": "mat"
							}
							, "rval": {
								"proto": "y"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1363
								, "value": "y"
							}
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1363
							, "value": "w"
						}
					}
				}]
			}
		}, {
			"proto": "swap((&mat.z.w), (&mat.w.z));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1368
			, "stmt": {
				"proto": "swap((&mat.z.w), (&mat.w.z))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1368
				, "args": [{
					"proto": "(&mat.w.z)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1368
					, "rval": {
						"proto": "mat.w.z"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1368
						, "lval": {
							"proto": "mat.w"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1368
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1368
								, "value": "mat"
							}
							, "rval": {
								"proto": "w"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1368
								, "value": "w"
							}
						}
						, "rval": {
							"proto": "z"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1368
							, "value": "z"
						}
					}
				}, {
					"proto": "(&mat.z.w)"
					, "kind": "&"
					, "type": "float32"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1368
					, "rval": {
						"proto": "mat.z.w"
						, "kind": "."
						, "type": "float32"
						, "cast": ".f32"
						, "file": "stdlib.cvx"
						, "line": 1368
						, "lval": {
							"proto": "mat.z"
							, "kind": "."
							, "type": "vec4f"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1368
							, "lval": {
								"proto": "mat"
								, "kind": ".ref"
								, "type": "mat4f"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1368
								, "value": "mat"
							}
							, "rval": {
								"proto": "z"
								, "kind": ".ref"
								, "type": "vec4f"
								, "file": "stdlib.cvx"
								, "line": 1368
								, "value": "z"
							}
						}
						, "rval": {
							"proto": "w"
							, "kind": ".ref"
							, "type": "float32"
							, "file": "stdlib.cvx"
							, "line": 1368
							, "value": "w"
						}
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "dup.x1 sp(1)"
		, "offset": 284188
	}, {
		"instruction": "inc 16"
		, "offset": 284190
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284194
	}, {
		"instruction": "inc 4"
		, "offset": 284196
	}, {
		"instruction": "load.ref .045609"
		, "offset": 284200
	}, {
		"instruction": "call"
		, "offset": 284205
	}, {
		"instruction": "stack -8"
		, "offset": 284206
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284210
	}, {
		"instruction": "inc 32"
		, "offset": 284212
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284216
	}, {
		"instruction": "inc 8"
		, "offset": 284218
	}, {
		"instruction": "load.ref .045609"
		, "offset": 284222
	}, {
		"instruction": "call"
		, "offset": 284227
	}, {
		"instruction": "stack -8"
		, "offset": 284228
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284232
	}, {
		"instruction": "inc 48"
		, "offset": 284234
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284238
	}, {
		"instruction": "inc 12"
		, "offset": 284240
	}, {
		"instruction": "load.ref .045609"
		, "offset": 284244
	}, {
		"instruction": "call"
		, "offset": 284249
	}, {
		"instruction": "stack -8"
		, "offset": 284250
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284254
	}, {
		"instruction": "inc 36"
		, "offset": 284256
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284260
	}, {
		"instruction": "inc 24"
		, "offset": 284262
	}, {
		"instruction": "load.ref .045609"
		, "offset": 284266
	}, {
		"instruction": "call"
		, "offset": 284271
	}, {
		"instruction": "stack -8"
		, "offset": 284272
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284276
	}, {
		"instruction": "inc 52"
		, "offset": 284278
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284282
	}, {
		"instruction": "inc 28"
		, "offset": 284284
	}, {
		"instruction": "load.ref .045609"
		, "offset": 284288
	}, {
		"instruction": "call"
		, "offset": 284293
	}, {
		"instruction": "stack -8"
		, "offset": 284294
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284298
	}, {
		"instruction": "inc 56"
		, "offset": 284300
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284304
	}, {
		"instruction": "inc 44"
		, "offset": 284306
	}, {
		"instruction": "load.ref .045609"
		, "offset": 284310
	}, {
		"instruction": "call"
		, "offset": 284315
	}, {
		"instruction": "stack -8"
		, "offset": 284316
	}, {
		"instruction": "ret"
		, "offset": 284320
	}]
}, {
	"proto": "debug(message: string, inspect: variant)"
	, "kind": ".def"
	, "name": "debug"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1380
	, "args": [{
		"proto": "debug.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "debug(message: string, inspect: variant)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1380
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "debug.inspect"
		, "kind": ".def"
		, "name": "inspect"
		, "declaredIn": "debug(message: string, inspect: variant)"
		, "type": "variant"
		, "file": "stdlib.cvx"
		, "line": 1380
		, "cast": ".rec"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.debug, message, inspect, raise.noTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1380
		, "args": [{
			"proto": "raise.noTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1380
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1380
				, "value": "raise"
			}
			, "rval": {
				"proto": "noTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1380
				, "value": "noTrace"
			}
		}, {
			"proto": "inspect"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1380
			, "value": "inspect"
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1380
			, "value": "message"
		}, {
			"proto": "raise.debug"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1380
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1380
				, "value": "raise"
			}
			, "rval": {
				"proto": "debug"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1380
				, "value": "debug"
			}
		}]
	}
}, {
	"proto": "debug(message: string)"
	, "kind": ".def"
	, "name": "debug"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1381
	, "args": [{
		"proto": "debug.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "debug(message: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1381
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.debug, message, variant(null), raise.noTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1381
		, "args": [{
			"proto": "raise.noTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1381
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1381
				, "value": "raise"
			}
			, "rval": {
				"proto": "noTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1381
				, "value": "noTrace"
			}
		}, {
			"proto": "variant(null)"
			, "kind": "(?)"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1381
			, "args": [{
				"proto": "null"
				, "kind": ".ref"
				, "type": "pointer"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1381
				, "value": "null"
			}]
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1381
			, "value": "message"
		}, {
			"proto": "raise.debug"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1381
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1381
				, "value": "raise"
			}
			, "rval": {
				"proto": "debug"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1381
				, "value": "debug"
			}
		}]
	}
}, {
	"proto": "debug(inspect: variant)"
	, "kind": ".def"
	, "name": "debug"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1382
	, "args": [{
		"proto": "debug.inspect"
		, "kind": ".def"
		, "name": "inspect"
		, "declaredIn": "debug(inspect: variant)"
		, "type": "variant"
		, "file": "stdlib.cvx"
		, "line": 1382
		, "cast": ".rec"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.debug, null, inspect, raise.noTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1382
		, "args": [{
			"proto": "raise.noTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1382
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1382
				, "value": "raise"
			}
			, "rval": {
				"proto": "noTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1382
				, "value": "noTrace"
			}
		}, {
			"proto": "inspect"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1382
			, "value": "inspect"
		}, {
			"proto": "null"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1382
			, "value": "null"
		}, {
			"proto": "raise.debug"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1382
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1382
				, "value": "raise"
			}
			, "rval": {
				"proto": "debug"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1382
				, "value": "debug"
			}
		}]
	}
}, {
	"proto": "trace(message: string, inspect: variant)"
	, "kind": ".def"
	, "name": "trace"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1384
	, "args": [{
		"proto": "trace.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "trace(message: string, inspect: variant)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1384
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "trace.inspect"
		, "kind": ".def"
		, "name": "inspect"
		, "declaredIn": "trace(message: string, inspect: variant)"
		, "type": "variant"
		, "file": "stdlib.cvx"
		, "line": 1384
		, "cast": ".rec"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.debug, message, inspect, raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1384
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1384
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1384
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1384
				, "value": "defTrace"
			}
		}, {
			"proto": "inspect"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1384
			, "value": "inspect"
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1384
			, "value": "message"
		}, {
			"proto": "raise.debug"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1384
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1384
				, "value": "raise"
			}
			, "rval": {
				"proto": "debug"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1384
				, "value": "debug"
			}
		}]
	}
}, {
	"proto": "trace(message: string)"
	, "kind": ".def"
	, "name": "trace"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1385
	, "args": [{
		"proto": "trace.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "trace(message: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1385
		, "cast": ".ref"
		, "size": 4
		, "offs": 32
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.debug, message, variant(null), raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1662
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1385
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1385
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1385
				, "value": "defTrace"
			}
		}, {
			"proto": "variant(null)"
			, "kind": "(?)"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1385
			, "args": [{
				"proto": "null"
				, "kind": ".ref"
				, "type": "pointer"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1385
				, "value": "null"
			}]
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1385
			, "value": "message"
		}, {
			"proto": "raise.debug"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1385
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1385
				, "value": "raise"
			}
			, "rval": {
				"proto": "debug"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1385
				, "value": "debug"
			}
		}]
	}
}, {
	"proto": "trace(inspect: variant)"
	, "kind": ".def"
	, "name": "trace"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1386
	, "args": [{
		"proto": "trace.inspect"
		, "kind": ".def"
		, "name": "inspect"
		, "declaredIn": "trace(inspect: variant)"
		, "type": "variant"
		, "file": "stdlib.cvx"
		, "line": 1386
		, "cast": ".rec"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.debug, null, inspect, raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1386
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1386
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1386
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1386
				, "value": "defTrace"
			}
		}, {
			"proto": "inspect"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1386
			, "value": "inspect"
		}, {
			"proto": "null"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1386
			, "value": "null"
		}, {
			"proto": "raise.debug"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1386
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1386
				, "value": "raise"
			}
			, "rval": {
				"proto": "debug"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1386
				, "value": "debug"
			}
		}]
	}
}, {
	"proto": "abort(message: string, inspect: variant)"
	, "kind": ".def"
	, "name": "abort"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1388
	, "args": [{
		"proto": "abort.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "abort(message: string, inspect: variant)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1388
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "abort.inspect"
		, "kind": ".def"
		, "name": "inspect"
		, "declaredIn": "abort(message: string, inspect: variant)"
		, "type": "variant"
		, "file": "stdlib.cvx"
		, "line": 1388
		, "cast": ".rec"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.error, message, inspect, raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1388
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1388
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1388
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1388
				, "value": "defTrace"
			}
		}, {
			"proto": "inspect"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1388
			, "value": "inspect"
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1388
			, "value": "message"
		}, {
			"proto": "raise.error"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1388
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1388
				, "value": "raise"
			}
			, "rval": {
				"proto": "error"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1388
				, "value": "error"
			}
		}]
	}
}, {
	"proto": "abort(message: string)"
	, "kind": ".def"
	, "name": "abort"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1389
	, "args": [{
		"proto": "abort.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "abort(message: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1389
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.error, message, variant(null), raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1389
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1389
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1389
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1389
				, "value": "defTrace"
			}
		}, {
			"proto": "variant(null)"
			, "kind": "(?)"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1389
			, "args": [{
				"proto": "null"
				, "kind": ".ref"
				, "type": "pointer"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1389
				, "value": "null"
			}]
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1389
			, "value": "message"
		}, {
			"proto": "raise.error"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1389
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1389
				, "value": "raise"
			}
			, "rval": {
				"proto": "error"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1389
				, "value": "error"
			}
		}]
	}
}, {
	"proto": "abort()"
	, "kind": ".def"
	, "name": "abort"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1390
	, "args": [{
		"proto": ""
		, "kind": ".def"
		, "name": ""
		, "type": "void"
		, "cast": ".vid"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(raise.error, 'execution aborted!', variant(null), raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1390
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1390
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1390
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1390
				, "value": "defTrace"
			}
		}, {
			"proto": "variant(null)"
			, "kind": "(?)"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1390
			, "args": [{
				"proto": "null"
				, "kind": ".ref"
				, "type": "pointer"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1390
				, "value": "null"
			}]
		}, {
			"proto": "'execution aborted!'"
			, "kind": ".ptr"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1390
			, "value": "'execution aborted!'"
		}, {
			"proto": "raise.error"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1390
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1390
				, "value": "raise"
			}
			, "rval": {
				"proto": "error"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1390
				, "value": "error"
			}
		}]
	}
}, {
	"proto": "assert(condition: bool, message: string, inspect: variant)"
	, "kind": ".def"
	, "name": "assert"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1392
	, "args": [{
		"proto": "assert.condition"
		, "kind": ".def"
		, "name": "condition"
		, "declaredIn": "assert(condition: bool, message: string, inspect: variant)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 1392
		, "cast": ".bit"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "assert.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "assert(condition: bool, message: string, inspect: variant)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1392
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "assert.inspect"
		, "kind": ".def"
		, "name": "inspect"
		, "declaredIn": "assert(condition: bool, message: string, inspect: variant)"
		, "type": "variant"
		, "file": "stdlib.cvx"
		, "line": 1392
		, "cast": ".rec"
		, "size": 8
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(condition ? 0 : raise.error, message, inspect, raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1392
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1392
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1392
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1392
				, "value": "defTrace"
			}
		}, {
			"proto": "inspect"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1392
			, "value": "inspect"
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1392
			, "value": "message"
		}, {
			"proto": "condition ? 0 : raise.error"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1392
			, "test": {
				"proto": "condition"
				, "kind": ".ref"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1392
				, "value": "condition"
			}
			, "lval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1392
				, "value": "0"
			}
			, "rval": {
				"proto": "raise.error"
				, "kind": "."
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1392
				, "lval": {
					"proto": "raise"
					, "kind": ".ref"
					, "type": "raise"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1392
					, "value": "raise"
				}
				, "rval": {
					"proto": "error"
					, "kind": ".ref"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1392
					, "value": "error"
				}
			}
		}]
	}
}, {
	"proto": "assert(condition: bool, message: string)"
	, "kind": ".def"
	, "name": "assert"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1393
	, "args": [{
		"proto": "assert.condition"
		, "kind": ".def"
		, "name": "condition"
		, "declaredIn": "assert(condition: bool, message: string)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 1393
		, "cast": ".bit"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "assert.message"
		, "kind": ".ref"
		, "name": "message"
		, "declaredIn": "assert(condition: bool, message: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1393
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(condition ? 0 : raise.error, message, variant(null), raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1393
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1393
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1393
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1393
				, "value": "defTrace"
			}
		}, {
			"proto": "variant(null)"
			, "kind": "(?)"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1393
			, "args": [{
				"proto": "null"
				, "kind": ".ref"
				, "type": "pointer"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1393
				, "value": "null"
			}]
		}, {
			"proto": "message"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1393
			, "value": "message"
		}, {
			"proto": "condition ? 0 : raise.error"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1393
			, "test": {
				"proto": "condition"
				, "kind": ".ref"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1393
				, "value": "condition"
			}
			, "lval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1393
				, "value": "0"
			}
			, "rval": {
				"proto": "raise.error"
				, "kind": "."
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1393
				, "lval": {
					"proto": "raise"
					, "kind": ".ref"
					, "type": "raise"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1393
					, "value": "raise"
				}
				, "rval": {
					"proto": "error"
					, "kind": ".ref"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1393
					, "value": "error"
				}
			}
		}]
	}
}, {
	"proto": "assert(condition: bool)"
	, "kind": ".def"
	, "name": "assert"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1394
	, "args": [{
		"proto": "assert.condition"
		, "kind": ".def"
		, "name": "condition"
		, "declaredIn": "assert(condition: bool)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 1394
		, "cast": ".bit"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "raise(condition ? 0 : raise.error, 'assertion failed!', variant(null), raise.defTrace)"
		, "kind": "(?)"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1533
		, "args": [{
			"proto": "raise.defTrace"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1394
			, "lval": {
				"proto": "raise"
				, "kind": ".ref"
				, "type": "raise"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 1394
				, "value": "raise"
			}
			, "rval": {
				"proto": "defTrace"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1394
				, "value": "defTrace"
			}
		}, {
			"proto": "variant(null)"
			, "kind": "(?)"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 1394
			, "args": [{
				"proto": "null"
				, "kind": ".ref"
				, "type": "pointer"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1394
				, "value": "null"
			}]
		}, {
			"proto": "'assertion failed!'"
			, "kind": ".ptr"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 1394
			, "value": "'assertion failed!'"
		}, {
			"proto": "condition ? 0 : raise.error"
			, "kind": "?:"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 1394
			, "test": {
				"proto": "condition"
				, "kind": ".ref"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1394
				, "value": "condition"
			}
			, "lval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1394
				, "value": "0"
			}
			, "rval": {
				"proto": "raise.error"
				, "kind": "."
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1394
				, "lval": {
					"proto": "raise"
					, "kind": ".ref"
					, "type": "raise"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1394
					, "value": "raise"
				}
				, "rval": {
					"proto": "error"
					, "kind": ".ref"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1394
					, "value": "error"
				}
			}
		}]
	}
}, {
	"proto": "strlen(str: string)"
	, "kind": ".ref"
	, "name": "strlen"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1402
	, "args": [{
		"proto": "strlen.str"
		, "kind": ".ref"
		, "name": "str"
		, "declaredIn": "strlen(str: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1402
		, "cast": ".ref"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 30
	, "offs": 284321
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1402
		, "stmt": [{
			"proto": "for (result := 0; str[result]; result := (result + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1403
			, "init": {
				"proto": "(result := 0)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1403
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1403
					, "value": "result"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1403
					, "value": "0"
				}
			}
			, "test": {
				"proto": "str[result]"
				, "kind": "[?]"
				, "type": "char"
				, "file": "stdlib.cvx"
				, "line": 1403
				, "lval": {
					"proto": "str"
					, "kind": ".ref"
					, "type": "string"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1403
					, "value": "str"
				}
				, "rval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 1403
					, "value": "result"
				}
			}
			, "step": {
				"proto": "(result := (result + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1403
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1403
					, "value": "result"
				}
				, "rval": {
					"proto": "(result + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1403
					, "lval": {
						"proto": "result"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1403
						, "value": "result"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1403
						, "value": "1"
					}
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.c32 0"
		, "offset": 284321
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 284326
	}, {
		"instruction": "jmp +12"
		, "offset": 284328
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284332
	}, {
		"instruction": "inc 1"
		, "offset": 284334
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 284338
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284340
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 284342
	}, {
		"instruction": "i32.add"
		, "offset": 284344
	}, {
		"instruction": "load.i8"
		, "offset": 284345
	}, {
		"instruction": "jnz -14"
		, "offset": 284346
	}, {
		"instruction": "ret"
		, "offset": 284350
	}]
}, {
	"proto": "umin(a: uint32, b: uint32)"
	, "kind": ".def"
	, "name": "umin"
	, "type": "uint32"
	, "file": "stdlib.cvx"
	, "line": 1406
	, "args": [{
		"proto": "umin.a"
		, "kind": ".def"
		, "name": "a"
		, "declaredIn": "umin(a: uint32, b: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1406
		, "cast": ".u32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "umin.b"
		, "kind": ".def"
		, "name": "b"
		, "declaredIn": "umin(a: uint32, b: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1406
		, "cast": ".u32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "Math.min(a, b)"
		, "kind": "(?)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1442
		, "args": [{
			"proto": "b"
			, "kind": ".ref"
			, "type": "uint32"
			, "cast": ".u32"
			, "file": "stdlib.cvx"
			, "line": 1406
			, "value": "b"
		}, {
			"proto": "a"
			, "kind": ".ref"
			, "type": "uint32"
			, "cast": ".u32"
			, "file": "stdlib.cvx"
			, "line": 1406
			, "value": "a"
		}]
	}
}, {
	"proto": "isWhite(chr: char)"
	, "kind": ".def"
	, "name": "isWhite"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 1408
	, "args": [{
		"proto": "isWhite.chr"
		, "kind": ".def"
		, "name": "chr"
		, "declaredIn": "isWhite(chr: char)"
		, "type": "char"
		, "file": "stdlib.cvx"
		, "line": 1408
		, "cast": ".u32"
		, "size": 1
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "bool(chr == 32)"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 1511
		, "args": [{
			"proto": "(chr == 32)"
			, "kind": "=="
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 1408
			, "lval": {
				"proto": "chr"
				, "kind": ".ref"
				, "type": "char"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1408
				, "value": "chr"
			}
			, "rval": {
				"proto": "32"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1408
				, "value": "32"
			}
		}]
	}
}, {
	"proto": "strchr(str: string, chr: int32)"
	, "kind": ".ref"
	, "name": "strchr"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1411
	, "args": [{
		"proto": "strchr.str"
		, "kind": ".ref"
		, "name": "str"
		, "declaredIn": "strchr(str: string, chr: int32)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1411
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "strchr.chr"
		, "kind": ".ref"
		, "name": "chr"
		, "declaredIn": "strchr(str: string, chr: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 1411
		, "cast": ".i32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 56
	, "offs": 284351
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1411
		, "stmt": [{
			"proto": "result := (-1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1412
			, "stmt": {
				"proto": "(result := (-1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1412
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1412
					, "value": "result"
				}
				, "rval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1412
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1412
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "for (i; str[i]; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1413
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1413
				, "value": "i"
			}
			, "test": {
				"proto": "str[i]"
				, "kind": "[?]"
				, "type": "char"
				, "file": "stdlib.cvx"
				, "line": 1413
				, "lval": {
					"proto": "str"
					, "kind": ".ref"
					, "type": "string"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1413
					, "value": "str"
				}
				, "rval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 1413
					, "value": "i"
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1413
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1413
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1413
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1413
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1413
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1413
				, "stmt": [{
					"proto": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1414
					, "test": {
						"proto": "(str[i] == chr)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1414
						, "lval": {
							"proto": "str[i]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1414
							, "lval": {
								"proto": "str"
								, "kind": ".ref"
								, "type": "string"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1414
								, "value": "str"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1414
								, "value": "i"
							}
						}
						, "rval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1414
							, "value": "chr"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1414
						, "stmt": [{
							"proto": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1415
							, "stmt": {
								"proto": "(result := i)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1415
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1415
									, "value": "result"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1415
									, "value": "i"
								}
							}
						}, {
							"proto": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1416
						}]
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.c32 -1"
		, "offset": 284351
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 284356
	}, {
		"instruction": "load.c32 0"
		, "offset": 284358
	}, {
		"instruction": "jmp +29"
		, "offset": 284363
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284367
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284369
	}, {
		"instruction": "i32.add"
		, "offset": 284371
	}, {
		"instruction": "load.i8"
		, "offset": 284372
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 284373
	}, {
		"instruction": "i32.ceq"
		, "offset": 284375
	}, {
		"instruction": "jz +12"
		, "offset": 284376
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284380
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 284382
	}, {
		"instruction": "jmp +18"
		, "offset": 284384
	}, {
		"instruction": "inc 1"
		, "offset": 284388
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284392
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284394
	}, {
		"instruction": "i32.add"
		, "offset": 284396
	}, {
		"instruction": "load.i8"
		, "offset": 284397
	}, {
		"instruction": "jnz -31"
		, "offset": 284398
	}, {
		"instruction": "stack -4"
		, "offset": 284402
	}, {
		"instruction": "ret"
		, "offset": 284406
	}]
}, {
	"proto": "strchr(str: string, chr: int32, max: int32)"
	, "kind": ".ref"
	, "name": "strchr"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1420
	, "args": [{
		"proto": "strchr.str"
		, "kind": ".ref"
		, "name": "str"
		, "declaredIn": "strchr(str: string, chr: int32, max: int32)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1420
		, "cast": ".ref"
		, "size": 4
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "strchr.chr"
		, "kind": ".ref"
		, "name": "chr"
		, "declaredIn": "strchr(str: string, chr: int32, max: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 1420
		, "cast": ".i32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "strchr.max"
		, "kind": ".ref"
		, "name": "max"
		, "declaredIn": "strchr(str: string, chr: int32, max: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 1420
		, "cast": ".i32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 98
	, "offs": 284407
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1420
		, "stmt": [{
			"proto": "result := (-1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1421
			, "stmt": {
				"proto": "(result := (-1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1421
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1421
					, "value": "result"
				}
				, "rval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1421
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1421
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "max := umin(max, strlen(str));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1422
			, "stmt": {
				"proto": "(max := umin(max, strlen(str)))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1422
				, "lval": {
					"proto": "max"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1422
					, "value": "max"
				}
				, "rval": {
					"proto": "umin(max, strlen(str))"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1422
					, "args": [{
						"proto": "strlen(str)"
						, "kind": "(?)"
						, "type": "int32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1422
						, "args": [{
							"proto": "str"
							, "kind": ".ref"
							, "type": "string"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1422
							, "value": "str"
						}]
					}, {
						"proto": "max"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1422
						, "value": "max"
					}]
				}
			}
		}, {
			"proto": "for (i; i <= max; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1423
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1423
				, "value": "i"
			}
			, "test": {
				"proto": "(i <= max)"
				, "kind": "<="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1423
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1423
					, "value": "i"
				}
				, "rval": {
					"proto": "max"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1423
					, "value": "max"
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1423
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1423
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1423
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1423
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1423
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1423
				, "stmt": [{
					"proto": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1424
					, "test": {
						"proto": "(str[i] == chr)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1424
						, "lval": {
							"proto": "str[i]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1424
							, "lval": {
								"proto": "str"
								, "kind": ".ref"
								, "type": "string"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1424
								, "value": "str"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1424
								, "value": "i"
							}
						}
						, "rval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1424
							, "value": "chr"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1424
						, "stmt": [{
							"proto": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1425
							, "stmt": {
								"proto": "(result := i)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1425
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1425
									, "value": "result"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1425
									, "value": "i"
								}
							}
						}, {
							"proto": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1426
						}]
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.c32 -1"
		, "offset": 284407
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 284412
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 284414
	}, {
		"instruction": "stack 4"
		, "offset": 284416
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 284420
	}, {
		"instruction": "load.ref .0456a1"
		, "offset": 284422
	}, {
		"instruction": "call"
		, "offset": 284427
	}, {
		"instruction": "stack -4"
		, "offset": 284428
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284432
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284434
	}, {
		"instruction": "u32.clt"
		, "offset": 284436
	}, {
		"instruction": "jz +10"
		, "offset": 284437
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284441
	}, {
		"instruction": "jmp +6"
		, "offset": 284443
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284447
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 284449
	}, {
		"instruction": "stack -4"
		, "offset": 284451
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 284455
	}, {
		"instruction": "load.c32 0"
		, "offset": 284457
	}, {
		"instruction": "jmp +29"
		, "offset": 284462
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284466
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284468
	}, {
		"instruction": "i32.add"
		, "offset": 284470
	}, {
		"instruction": "load.i8"
		, "offset": 284471
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 284472
	}, {
		"instruction": "i32.ceq"
		, "offset": 284474
	}, {
		"instruction": "jz +12"
		, "offset": 284475
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284479
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 284481
	}, {
		"instruction": "jmp +17"
		, "offset": 284483
	}, {
		"instruction": "inc 1"
		, "offset": 284487
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284491
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 284493
	}, {
		"instruction": "i32.cgt"
		, "offset": 284495
	}, {
		"instruction": "jz -30"
		, "offset": 284496
	}, {
		"instruction": "stack -4"
		, "offset": 284500
	}, {
		"instruction": "ret"
		, "offset": 284504
	}]
}, {
	"proto": "strrchr(str: string, chr: int32)"
	, "kind": ".ref"
	, "name": "strrchr"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1432
	, "args": [{
		"proto": "strrchr.str"
		, "kind": ".ref"
		, "name": "str"
		, "declaredIn": "strrchr(str: string, chr: int32)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1432
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "strrchr.chr"
		, "kind": ".ref"
		, "name": "chr"
		, "declaredIn": "strrchr(str: string, chr: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 1432
		, "cast": ".i32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 52
	, "offs": 284505
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1432
		, "stmt": [{
			"proto": "result := (-1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1433
			, "stmt": {
				"proto": "(result := (-1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1433
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1433
					, "value": "result"
				}
				, "rval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1433
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1433
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "for (i; str[i]; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1434
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1434
				, "value": "i"
			}
			, "test": {
				"proto": "str[i]"
				, "kind": "[?]"
				, "type": "char"
				, "file": "stdlib.cvx"
				, "line": 1434
				, "lval": {
					"proto": "str"
					, "kind": ".ref"
					, "type": "string"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1434
					, "value": "str"
				}
				, "rval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i64"
					, "file": "stdlib.cvx"
					, "line": 1434
					, "value": "i"
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1434
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1434
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1434
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1434
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1434
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1434
				, "stmt": [{
					"proto": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1435
					, "test": {
						"proto": "(str[i] == chr)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1435
						, "lval": {
							"proto": "str[i]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1435
							, "lval": {
								"proto": "str"
								, "kind": ".ref"
								, "type": "string"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1435
								, "value": "str"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1435
								, "value": "i"
							}
						}
						, "rval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1435
							, "value": "chr"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1435
						, "stmt": [{
							"proto": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1436
							, "stmt": {
								"proto": "(result := i)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1436
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1436
									, "value": "result"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1436
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.c32 -1"
		, "offset": 284505
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 284510
	}, {
		"instruction": "load.c32 0"
		, "offset": 284512
	}, {
		"instruction": "jmp +25"
		, "offset": 284517
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284521
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284523
	}, {
		"instruction": "i32.add"
		, "offset": 284525
	}, {
		"instruction": "load.i8"
		, "offset": 284526
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 284527
	}, {
		"instruction": "i32.ceq"
		, "offset": 284529
	}, {
		"instruction": "jz +8"
		, "offset": 284530
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284534
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 284536
	}, {
		"instruction": "inc 1"
		, "offset": 284538
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284542
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284544
	}, {
		"instruction": "i32.add"
		, "offset": 284546
	}, {
		"instruction": "load.i8"
		, "offset": 284547
	}, {
		"instruction": "jnz -27"
		, "offset": 284548
	}, {
		"instruction": "stack -4"
		, "offset": 284552
	}, {
		"instruction": "ret"
		, "offset": 284556
	}]
}, {
	"proto": "strrchr(str: string, chr: int32, max: int32)"
	, "kind": ".ref"
	, "name": "strrchr"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1440
	, "args": [{
		"proto": "strrchr.str"
		, "kind": ".ref"
		, "name": "str"
		, "declaredIn": "strrchr(str: string, chr: int32, max: int32)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1440
		, "cast": ".ref"
		, "size": 4
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "strrchr.chr"
		, "kind": ".ref"
		, "name": "chr"
		, "declaredIn": "strrchr(str: string, chr: int32, max: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 1440
		, "cast": ".i32"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "strrchr.max"
		, "kind": ".ref"
		, "name": "max"
		, "declaredIn": "strrchr(str: string, chr: int32, max: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 1440
		, "cast": ".i32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 94
	, "offs": 284557
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1440
		, "stmt": [{
			"proto": "result := (-1);"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1441
			, "stmt": {
				"proto": "(result := (-1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1441
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1441
					, "value": "result"
				}
				, "rval": {
					"proto": "(-1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1441
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1441
						, "value": "1"
					}
				}
			}
		}, {
			"proto": "max := umin(max, strlen(str));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1442
			, "stmt": {
				"proto": "(max := umin(max, strlen(str)))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1442
				, "lval": {
					"proto": "max"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1442
					, "value": "max"
				}
				, "rval": {
					"proto": "umin(max, strlen(str))"
					, "kind": "(?)"
					, "type": "uint32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1442
					, "args": [{
						"proto": "strlen(str)"
						, "kind": "(?)"
						, "type": "int32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1442
						, "args": [{
							"proto": "str"
							, "kind": ".ref"
							, "type": "string"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1442
							, "value": "str"
						}]
					}, {
						"proto": "max"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1442
						, "value": "max"
					}]
				}
			}
		}, {
			"proto": "for (i; i <= max; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1443
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1443
				, "value": "i"
			}
			, "test": {
				"proto": "(i <= max)"
				, "kind": "<="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1443
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1443
					, "value": "i"
				}
				, "rval": {
					"proto": "max"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1443
					, "value": "max"
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1443
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1443
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1443
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1443
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1443
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1443
				, "stmt": [{
					"proto": "if (str[i] == chr)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1444
					, "test": {
						"proto": "(str[i] == chr)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1444
						, "lval": {
							"proto": "str[i]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1444
							, "lval": {
								"proto": "str"
								, "kind": ".ref"
								, "type": "string"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1444
								, "value": "str"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1444
								, "value": "i"
							}
						}
						, "rval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1444
							, "value": "chr"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1444
						, "stmt": [{
							"proto": "result := i;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1445
							, "stmt": {
								"proto": "(result := i)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1445
								, "lval": {
									"proto": "result"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1445
									, "value": "result"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1445
									, "value": "i"
								}
							}
						}]
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.c32 -1"
		, "offset": 284557
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 284562
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 284564
	}, {
		"instruction": "stack 4"
		, "offset": 284566
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 284570
	}, {
		"instruction": "load.ref .0456a1"
		, "offset": 284572
	}, {
		"instruction": "call"
		, "offset": 284577
	}, {
		"instruction": "stack -4"
		, "offset": 284578
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284582
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284584
	}, {
		"instruction": "u32.clt"
		, "offset": 284586
	}, {
		"instruction": "jz +10"
		, "offset": 284587
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284591
	}, {
		"instruction": "jmp +6"
		, "offset": 284593
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284597
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 284599
	}, {
		"instruction": "stack -4"
		, "offset": 284601
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 284605
	}, {
		"instruction": "load.c32 0"
		, "offset": 284607
	}, {
		"instruction": "jmp +25"
		, "offset": 284612
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284616
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284618
	}, {
		"instruction": "i32.add"
		, "offset": 284620
	}, {
		"instruction": "load.i8"
		, "offset": 284621
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 284622
	}, {
		"instruction": "i32.ceq"
		, "offset": 284624
	}, {
		"instruction": "jz +8"
		, "offset": 284625
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284629
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 284631
	}, {
		"instruction": "inc 1"
		, "offset": 284633
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284637
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 284639
	}, {
		"instruction": "i32.cgt"
		, "offset": 284641
	}, {
		"instruction": "jz -26"
		, "offset": 284642
	}, {
		"instruction": "stack -4"
		, "offset": 284646
	}, {
		"instruction": "ret"
		, "offset": 284650
	}]
}, {
	"proto": "compare(a: string, b: string)"
	, "kind": ".ref"
	, "name": "compare"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1451
	, "args": [{
		"proto": "compare.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "compare(a: string, b: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1451
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "compare.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "compare(a: string, b: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1451
		, "cast": ".ref"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 77
	, "offs": 284651
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1451
		, "stmt": [{
			"proto": "result := 0;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1460
			, "stmt": {
				"proto": "(result := 0)"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1460
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1460
					, "value": "result"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1460
					, "value": "0"
				}
			}
		}, {
			"proto": "for (i; result == 0; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1461
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1461
				, "value": "i"
			}
			, "test": {
				"proto": "(result == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1461
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1461
					, "value": "result"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1461
					, "value": "0"
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1461
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1461
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1461
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1461
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1461
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1461
				, "stmt": [{
					"proto": "result := (a[i] - b[i]);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1462
					, "stmt": {
						"proto": "(result := (a[i] - b[i]))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1462
						, "lval": {
							"proto": "result"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1462
							, "value": "result"
						}
						, "rval": {
							"proto": "(a[i] - b[i])"
							, "kind": "-"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1462
							, "lval": {
								"proto": "a[i]"
								, "kind": "[?]"
								, "type": "char"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1462
								, "lval": {
									"proto": "a"
									, "kind": ".ref"
									, "type": "string"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1462
									, "value": "a"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i64"
									, "file": "stdlib.cvx"
									, "line": 1462
									, "value": "i"
								}
							}
							, "rval": {
								"proto": "b[i]"
								, "kind": "[?]"
								, "type": "char"
								, "cast": ".u32"
								, "file": "stdlib.cvx"
								, "line": 1462
								, "lval": {
									"proto": "b"
									, "kind": ".ref"
									, "type": "string"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1462
									, "value": "b"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i64"
									, "file": "stdlib.cvx"
									, "line": 1462
									, "value": "i"
								}
							}
						}
					}
				}, {
					"proto": "if (a[i] == 0)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1463
					, "test": {
						"proto": "(a[i] == 0)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1463
						, "lval": {
							"proto": "a[i]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1463
							, "lval": {
								"proto": "a"
								, "kind": ".ref"
								, "type": "string"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1463
								, "value": "a"
							}
							, "rval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1463
								, "value": "i"
							}
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1463
							, "value": "0"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1463
						, "stmt": [{
							"proto": "break;"
							, "kind": "break"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1464
						}]
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1467
		}]
	}
	, "instructions": [{
		"instruction": "load.c32 0"
		, "offset": 284651
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 284656
	}, {
		"instruction": "load.c32 0"
		, "offset": 284658
	}, {
		"instruction": "jmp +47"
		, "offset": 284663
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284667
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284669
	}, {
		"instruction": "i32.add"
		, "offset": 284671
	}, {
		"instruction": "load.i8"
		, "offset": 284672
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 284673
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 284675
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284677
	}, {
		"instruction": "i32.add"
		, "offset": 284679
	}, {
		"instruction": "load.i8"
		, "offset": 284680
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 284681
	}, {
		"instruction": "i32.sub"
		, "offset": 284683
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 284684
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284686
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284688
	}, {
		"instruction": "i32.add"
		, "offset": 284690
	}, {
		"instruction": "load.i8"
		, "offset": 284691
	}, {
		"instruction": "load.c32 0"
		, "offset": 284692
	}, {
		"instruction": "i32.ceq"
		, "offset": 284697
	}, {
		"instruction": "jz +8"
		, "offset": 284698
	}, {
		"instruction": "jmp +20"
		, "offset": 284702
	}, {
		"instruction": "inc 1"
		, "offset": 284706
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 284710
	}, {
		"instruction": "load.c32 0"
		, "offset": 284712
	}, {
		"instruction": "i32.ceq"
		, "offset": 284717
	}, {
		"instruction": "jnz -51"
		, "offset": 284718
	}, {
		"instruction": "stack -4"
		, "offset": 284722
	}, {
		"instruction": "ret"
		, "offset": 284726
	}, {
		"instruction": "ret"
		, "offset": 284727
	}]
}, {
	"proto": "equals(a: string, b: string)"
	, "kind": ".def"
	, "name": "equals"
	, "type": "bool"
	, "file": "stdlib.cvx"
	, "line": 1469
	, "args": [{
		"proto": "equals.a"
		, "kind": ".ref"
		, "name": "a"
		, "declaredIn": "equals(a: string, b: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1469
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "equals.b"
		, "kind": ".ref"
		, "name": "b"
		, "declaredIn": "equals(a: string, b: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1469
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "bool(compare(a, b) == 0)"
		, "kind": "(?)"
		, "type": "bool"
		, "file": "stdlib.cvx"
		, "line": 1469
		, "args": [{
			"proto": "(compare(a, b) == 0)"
			, "kind": "=="
			, "type": "bool"
			, "cast": ".bit"
			, "file": "stdlib.cvx"
			, "line": 1469
			, "lval": {
				"proto": "compare(a, b)"
				, "kind": "(?)"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1469
				, "args": [{
					"proto": "b"
					, "kind": ".ref"
					, "type": "string"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1469
					, "value": "b"
				}, {
					"proto": "a"
					, "kind": ".ref"
					, "type": "string"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1469
					, "value": "a"
				}]
			}
			, "rval": {
				"proto": "0"
				, "kind": ".i64"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 1469
				, "value": "0"
			}
		}]
	}
}, {
	"proto": "FormatFlags"
	, "kind": ".rec"
	, "name": "FormatFlags"
	, "type": "typename"
	, "file": "stdlib.cvx"
	, "line": 1472
	, "cast": ".rec"
	, "size": 20
	, "offs": 234184
	, "const": true
	, "static": true
}, {
	"proto": "FormatFlags.radix"
	, "kind": ".ref"
	, "name": "radix"
	, "declaredIn": "FormatFlags"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1473
	, "cast": ".i32"
	, "size": 4
	, "offs": 0
	, "const": true
	, "static": false
}, {
	"proto": "FormatFlags.sign"
	, "kind": ".ref"
	, "name": "sign"
	, "declaredIn": "FormatFlags"
	, "type": "char"
	, "file": "stdlib.cvx"
	, "line": 1474
	, "cast": ".u32"
	, "size": 1
	, "offs": 4
	, "const": true
	, "static": false
}, {
	"proto": "FormatFlags.padChr"
	, "kind": ".ref"
	, "name": "padChr"
	, "declaredIn": "FormatFlags"
	, "type": "char"
	, "file": "stdlib.cvx"
	, "line": 1475
	, "cast": ".u32"
	, "size": 1
	, "offs": 8
	, "const": true
	, "static": false
}, {
	"proto": "FormatFlags.padLen"
	, "kind": ".ref"
	, "name": "padLen"
	, "declaredIn": "FormatFlags"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1476
	, "cast": ".i32"
	, "size": 4
	, "offs": 12
	, "const": true
	, "static": false
}, {
	"proto": "FormatFlags.precision"
	, "kind": ".ref"
	, "name": "precision"
	, "declaredIn": "FormatFlags"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1477
	, "cast": ".i32"
	, "size": 4
	, "offs": 16
	, "const": true
	, "static": false
}, {
	"proto": "FormatFlags(radix: int32, sign: char, padChr: char, padLen: int32, precision: int32)"
	, "kind": ".def"
	, "name": "FormatFlags"
	, "type": "FormatFlags"
	, "args": [{
		"proto": "FormatFlags.radix"
		, "kind": ".def"
		, "name": "radix"
		, "declaredIn": "FormatFlags(radix: int32, sign: char, padChr: char, padLen: int32, precision: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "FormatFlags.sign"
		, "kind": ".def"
		, "name": "sign"
		, "declaredIn": "FormatFlags(radix: int32, sign: char, padChr: char, padLen: int32, precision: int32)"
		, "type": "char"
		, "cast": ".u32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "FormatFlags.padChr"
		, "kind": ".def"
		, "name": "padChr"
		, "declaredIn": "FormatFlags(radix: int32, sign: char, padChr: char, padLen: int32, precision: int32)"
		, "type": "char"
		, "cast": ".u32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "FormatFlags.padLen"
		, "kind": ".def"
		, "name": "padLen"
		, "declaredIn": "FormatFlags(radix: int32, sign: char, padChr: char, padLen: int32, precision: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "FormatFlags.precision"
		, "kind": ".def"
		, "name": "precision"
		, "declaredIn": "FormatFlags(radix: int32, sign: char, padChr: char, padLen: int32, precision: int32)"
		, "type": "int32"
		, "cast": ".i32"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": true
	, "static": true
	, "ast": {
		"proto": "emit(radix, sign, padChr, padLen, precision)"
		, "kind": "(?)"
		, "type": "FormatFlags"
		, "file": "stdlib.cvx"
		, "line": 1482
		, "args": [{
			"proto": "precision"
			, "kind": ".ref"
			, "type": "FormatFlags.precision"
			, "cast": ".i32"
			, "value": "precision"
		}, {
			"proto": "padLen"
			, "kind": ".ref"
			, "type": "FormatFlags.padLen"
			, "cast": ".i32"
			, "value": "padLen"
		}, {
			"proto": "padChr"
			, "kind": ".ref"
			, "type": "FormatFlags.padChr"
			, "cast": ".u32"
			, "value": "padChr"
		}, {
			"proto": "sign"
			, "kind": ".ref"
			, "type": "FormatFlags.sign"
			, "cast": ".u32"
			, "value": "sign"
		}, {
			"proto": "radix"
			, "kind": ".ref"
			, "type": "FormatFlags.radix"
			, "cast": ".i32"
			, "value": "radix"
		}]
	}
}, {
	"proto": "format(output: char[], pos: int32, format: FormatFlags, value: uint32)"
	, "kind": ".ref"
	, "name": "format"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1480
	, "args": [{
		"proto": "format.output"
		, "kind": ".ref"
		, "name": "output"
		, "declaredIn": "format(output: char[], pos: int32, format: FormatFlags, value: uint32)"
		, "type": "char[]"
		, "file": "stdlib.cvx"
		, "line": 1480
		, "cast": ".arr"
		, "size": 8
		, "offs": 24
		, "const": false
		, "static": false
	}, {
		"proto": "format.pos"
		, "kind": ".ref"
		, "name": "pos"
		, "declaredIn": "format(output: char[], pos: int32, format: FormatFlags, value: uint32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 1480
		, "cast": ".i32"
		, "size": 4
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "format.format"
		, "kind": ".ref"
		, "name": "format"
		, "declaredIn": "format(output: char[], pos: int32, format: FormatFlags, value: uint32)"
		, "type": "FormatFlags"
		, "file": "stdlib.cvx"
		, "line": 1480
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "format.value"
		, "kind": ".ref"
		, "name": "value"
		, "declaredIn": "format(output: char[], pos: int32, format: FormatFlags, value: uint32)"
		, "type": "uint32"
		, "file": "stdlib.cvx"
		, "line": 1480
		, "cast": ".u32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 720
	, "offs": 284756
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1480
		, "stmt": [{
			"proto": "radixDigits"
			, "kind": ".def"
			, "type": "char[]"
			, "file": "stdlib.cvx"
			, "line": 1481
			, "value": "radixDigits"
		}, {
			"proto": "default"
			, "kind": ".def"
			, "type": "FormatFlags"
			, "file": "stdlib.cvx"
			, "line": 1482
			, "value": "default"
		}, {
			"proto": "len"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 1484
			, "value": "len"
		}, {
			"proto": "digits"
			, "kind": ".def"
			, "type": "char[80]"
			, "file": "stdlib.cvx"
			, "line": 1485
			, "value": "digits"
		}, {
			"proto": "if (format == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1487
			, "test": {
				"proto": "(format == null)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1487
				, "lval": {
					"proto": "format"
					, "kind": ".ref"
					, "type": "FormatFlags"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1487
					, "value": "format"
				}
				, "rval": {
					"proto": "null"
					, "kind": ".ref"
					, "type": "pointer"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1487
					, "value": "null"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1487
				, "stmt": [{
					"proto": "format := default;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1488
					, "stmt": {
						"proto": "(format := default)"
						, "kind": ":="
						, "type": "FormatFlags"
						, "file": "stdlib.cvx"
						, "line": 1488
						, "lval": {
							"proto": "format"
							, "kind": ".ref"
							, "type": "FormatFlags"
							, "cast": ".rec"
							, "file": "stdlib.cvx"
							, "line": 1488
							, "value": "format"
						}
						, "rval": {
							"proto": "default"
							, "kind": ".ref"
							, "type": "FormatFlags"
							, "cast": ".rec"
							, "file": "stdlib.cvx"
							, "line": 1488
							, "value": "default"
						}
					}
				}]
			}
		}, {
			"proto": "radix"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 1490
			, "value": "radix"
		}, {
			"proto": "assert((radix > 1) && (radix < radixDigits.length));"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1491
			, "stmt": {
				"proto": "assert((radix > 1) && (radix < radixDigits.length))"
				, "kind": "(?)"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1491
				, "args": [{
					"proto": "((radix > 1) && (radix < radixDigits.length))"
					, "kind": "&&"
					, "type": "bool"
					, "cast": ".bit"
					, "file": "stdlib.cvx"
					, "line": 1491
					, "lval": {
						"proto": "(radix > 1)"
						, "kind": ">"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1491
						, "lval": {
							"proto": "radix"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1491
							, "value": "radix"
						}
						, "rval": {
							"proto": "1"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1491
							, "value": "1"
						}
					}
					, "rval": {
						"proto": "(radix < radixDigits.length)"
						, "kind": "<"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1491
						, "lval": {
							"proto": "radix"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1491
							, "value": "radix"
						}
						, "rval": {
							"proto": "radixDigits.length"
							, "kind": "."
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1491
							, "lval": {
								"proto": "radixDigits"
								, "kind": ".ref"
								, "type": "char[]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1491
								, "value": "radixDigits"
							}
							, "rval": {
								"proto": "length"
								, "kind": ".ref"
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1491
								, "value": "length"
							}
						}
					}
				}]
			}
		}, {
			"proto": "for ( ; value > 0; value := (value / radix))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1494
			, "test": {
				"proto": "(value > 0)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1494
				, "lval": {
					"proto": "value"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1494
					, "value": "value"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1494
					, "value": "0"
				}
			}
			, "step": {
				"proto": "(value := (value / radix))"
				, "kind": ":="
				, "type": "uint32"
				, "file": "stdlib.cvx"
				, "line": 1494
				, "lval": {
					"proto": "value"
					, "kind": ".ref"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1494
					, "value": "value"
				}
				, "rval": {
					"proto": "(value / radix)"
					, "kind": "/"
					, "type": "uint32"
					, "cast": ".u32"
					, "file": "stdlib.cvx"
					, "line": 1494
					, "lval": {
						"proto": "value"
						, "kind": ".ref"
						, "type": "uint32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1494
						, "value": "value"
					}
					, "rval": {
						"proto": "radix"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".u32"
						, "file": "stdlib.cvx"
						, "line": 1494
						, "value": "radix"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1494
				, "stmt": [{
					"proto": "digits[len := (len + 1)] := radixDigits[value % radix];"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1495
					, "stmt": {
						"proto": "(digits[len := (len + 1)] := radixDigits[value % radix])"
						, "kind": ":="
						, "type": "char"
						, "file": "stdlib.cvx"
						, "line": 1495
						, "lval": {
							"proto": "digits[len := (len + 1)]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1495
							, "lval": {
								"proto": "digits"
								, "kind": ".ref"
								, "type": "char[80]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1495
								, "value": "digits"
							}
							, "rval": {
								"proto": "(len := (len + 1))"
								, "kind": ":="
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1495
								, "lval": {
									"proto": "len"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1495
									, "value": "len"
								}
								, "rval": {
									"proto": "(len + 1)"
									, "kind": "+"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1495
									, "lval": {
										"proto": "len"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1495
										, "value": "len"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1495
										, "value": "1"
									}
								}
							}
						}
						, "rval": {
							"proto": "radixDigits[value % radix]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1495
							, "lval": {
								"proto": "radixDigits"
								, "kind": ".ref"
								, "type": "char[]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1495
								, "value": "radixDigits"
							}
							, "rval": {
								"proto": "(value % radix)"
								, "kind": "%"
								, "type": "uint32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1495
								, "lval": {
									"proto": "value"
									, "kind": ".ref"
									, "type": "uint32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1495
									, "value": "value"
								}
								, "rval": {
									"proto": "radix"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".u32"
									, "file": "stdlib.cvx"
									, "line": 1495
									, "value": "radix"
								}
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (len == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1497
			, "test": {
				"proto": "(len == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1497
				, "lval": {
					"proto": "len"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1497
					, "value": "len"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1497
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1497
				, "stmt": [{
					"proto": "digits[len := (len + 1)] := 48;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1498
					, "stmt": {
						"proto": "(digits[len := (len + 1)] := 48)"
						, "kind": ":="
						, "type": "char"
						, "file": "stdlib.cvx"
						, "line": 1498
						, "lval": {
							"proto": "digits[len := (len + 1)]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1498
							, "lval": {
								"proto": "digits"
								, "kind": ".ref"
								, "type": "char[80]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1498
								, "value": "digits"
							}
							, "rval": {
								"proto": "(len := (len + 1))"
								, "kind": ":="
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1498
								, "lval": {
									"proto": "len"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1498
									, "value": "len"
								}
								, "rval": {
									"proto": "(len + 1)"
									, "kind": "+"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1498
									, "lval": {
										"proto": "len"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1498
										, "value": "len"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1498
										, "value": "1"
									}
								}
							}
						}
						, "rval": {
							"proto": "48"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1498
							, "value": "48"
						}
					}
				}]
			}
		}, {
			"proto": "maxLen"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 1501
			, "value": "maxLen"
		}, {
			"proto": "padChr"
			, "kind": ".def"
			, "type": "char"
			, "file": "stdlib.cvx"
			, "line": 1503
			, "value": "padChr"
		}, {
			"proto": "if (padChr == 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1504
			, "test": {
				"proto": "(padChr == 0)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1504
				, "lval": {
					"proto": "padChr"
					, "kind": ".ref"
					, "type": "char"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1504
					, "value": "padChr"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1504
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1504
				, "stmt": [{
					"proto": "padChr := 32;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1505
					, "stmt": {
						"proto": "(padChr := 32)"
						, "kind": ":="
						, "type": "char"
						, "file": "stdlib.cvx"
						, "line": 1505
						, "lval": {
							"proto": "padChr"
							, "kind": ".ref"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1505
							, "value": "padChr"
						}
						, "rval": {
							"proto": "32"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1505
							, "value": "32"
						}
					}
				}]
			}
		}, {
			"proto": "if (format.sign != 0)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1509
			, "test": {
				"proto": "(format.sign != 0)"
				, "kind": "!="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1509
				, "lval": {
					"proto": "format.sign"
					, "kind": "."
					, "type": "char"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1509
					, "lval": {
						"proto": "format"
						, "kind": ".ref"
						, "type": "FormatFlags"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1509
						, "value": "format"
					}
					, "rval": {
						"proto": "sign"
						, "kind": ".ref"
						, "type": "char"
						, "file": "stdlib.cvx"
						, "line": 1509
						, "value": "sign"
					}
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1509
					, "value": "0"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1509
				, "stmt": [{
					"proto": "maxLen := (maxLen - 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1510
					, "stmt": {
						"proto": "(maxLen := (maxLen - 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1510
						, "lval": {
							"proto": "maxLen"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1510
							, "value": "maxLen"
						}
						, "rval": {
							"proto": "(maxLen - 1)"
							, "kind": "-"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1510
							, "lval": {
								"proto": "maxLen"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1510
								, "value": "maxLen"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1510
								, "value": "1"
							}
						}
					}
				}, {
					"proto": "if (isWhite(padChr))"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1511
					, "test": {
						"proto": "isWhite(padChr)"
						, "kind": "(?)"
						, "type": "bool"
						, "file": "stdlib.cvx"
						, "line": 1511
						, "args": [{
							"proto": "padChr"
							, "kind": ".ref"
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1511
							, "value": "padChr"
						}]
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1511
						, "stmt": [{
							"proto": "for ( ; maxLen > 0; maxLen := (maxLen - 1))"
							, "kind": "for"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1513
							, "test": {
								"proto": "(maxLen > 0)"
								, "kind": ">"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1513
								, "lval": {
									"proto": "maxLen"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1513
									, "value": "maxLen"
								}
								, "rval": {
									"proto": "0"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1513
									, "value": "0"
								}
							}
							, "step": {
								"proto": "(maxLen := (maxLen - 1))"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1513
								, "lval": {
									"proto": "maxLen"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1513
									, "value": "maxLen"
								}
								, "rval": {
									"proto": "(maxLen - 1)"
									, "kind": "-"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1513
									, "lval": {
										"proto": "maxLen"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1513
										, "value": "maxLen"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1513
										, "value": "1"
									}
								}
							}
							, "stmt": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1513
								, "stmt": [{
									"proto": "assert(pos < output.length);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1514
									, "stmt": {
										"proto": "assert(pos < output.length)"
										, "kind": "(?)"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1514
										, "args": [{
											"proto": "(pos < output.length)"
											, "kind": "<"
											, "type": "bool"
											, "cast": ".bit"
											, "file": "stdlib.cvx"
											, "line": 1514
											, "lval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1514
												, "value": "pos"
											}
											, "rval": {
												"proto": "output.length"
												, "kind": "."
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1514
												, "lval": {
													"proto": "output"
													, "kind": ".ref"
													, "type": "char[]"
													, "cast": ".ref"
													, "file": "stdlib.cvx"
													, "line": 1514
													, "value": "output"
												}
												, "rval": {
													"proto": "length"
													, "kind": ".ref"
													, "type": "int32"
													, "file": "stdlib.cvx"
													, "line": 1514
													, "value": "length"
												}
											}
										}]
									}
								}, {
									"proto": "output[pos] := padChr;"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1515
									, "stmt": {
										"proto": "(output[pos] := padChr)"
										, "kind": ":="
										, "type": "char"
										, "file": "stdlib.cvx"
										, "line": 1515
										, "lval": {
											"proto": "output[pos]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".u32"
											, "file": "stdlib.cvx"
											, "line": 1515
											, "lval": {
												"proto": "output"
												, "kind": ".ref"
												, "type": "char[]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1515
												, "value": "output"
											}
											, "rval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1515
												, "value": "pos"
											}
										}
										, "rval": {
											"proto": "padChr"
											, "kind": ".ref"
											, "type": "char"
											, "cast": ".u32"
											, "file": "stdlib.cvx"
											, "line": 1515
											, "value": "padChr"
										}
									}
								}, {
									"proto": "pos := (pos + 1);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1516
									, "stmt": {
										"proto": "(pos := (pos + 1))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1516
										, "lval": {
											"proto": "pos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1516
											, "value": "pos"
										}
										, "rval": {
											"proto": "(pos + 1)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1516
											, "lval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1516
												, "value": "pos"
											}
											, "rval": {
												"proto": "1"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1516
												, "value": "1"
											}
										}
									}
								}]
							}
						}]
					}
				}, {
					"proto": "assert(pos < output.length);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1519
					, "stmt": {
						"proto": "assert(pos < output.length)"
						, "kind": "(?)"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1519
						, "args": [{
							"proto": "(pos < output.length)"
							, "kind": "<"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1519
							, "lval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1519
								, "value": "pos"
							}
							, "rval": {
								"proto": "output.length"
								, "kind": "."
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1519
								, "lval": {
									"proto": "output"
									, "kind": ".ref"
									, "type": "char[]"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1519
									, "value": "output"
								}
								, "rval": {
									"proto": "length"
									, "kind": ".ref"
									, "type": "int32"
									, "file": "stdlib.cvx"
									, "line": 1519
									, "value": "length"
								}
							}
						}]
					}
				}, {
					"proto": "output[pos] := format.sign;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1520
					, "stmt": {
						"proto": "(output[pos] := format.sign)"
						, "kind": ":="
						, "type": "char"
						, "file": "stdlib.cvx"
						, "line": 1520
						, "lval": {
							"proto": "output[pos]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1520
							, "lval": {
								"proto": "output"
								, "kind": ".ref"
								, "type": "char[]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1520
								, "value": "output"
							}
							, "rval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1520
								, "value": "pos"
							}
						}
						, "rval": {
							"proto": "format.sign"
							, "kind": "."
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1520
							, "lval": {
								"proto": "format"
								, "kind": ".ref"
								, "type": "FormatFlags"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1520
								, "value": "format"
							}
							, "rval": {
								"proto": "sign"
								, "kind": ".ref"
								, "type": "char"
								, "file": "stdlib.cvx"
								, "line": 1520
								, "value": "sign"
							}
						}
					}
				}, {
					"proto": "pos := (pos + 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1521
					, "stmt": {
						"proto": "(pos := (pos + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1521
						, "lval": {
							"proto": "pos"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1521
							, "value": "pos"
						}
						, "rval": {
							"proto": "(pos + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1521
							, "lval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1521
								, "value": "pos"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1521
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "for ( ; maxLen > 0; maxLen := (maxLen - 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1525
			, "test": {
				"proto": "(maxLen > 0)"
				, "kind": ">"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1525
				, "lval": {
					"proto": "maxLen"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1525
					, "value": "maxLen"
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1525
					, "value": "0"
				}
			}
			, "step": {
				"proto": "(maxLen := (maxLen - 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1525
				, "lval": {
					"proto": "maxLen"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1525
					, "value": "maxLen"
				}
				, "rval": {
					"proto": "(maxLen - 1)"
					, "kind": "-"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1525
					, "lval": {
						"proto": "maxLen"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1525
						, "value": "maxLen"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1525
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1525
				, "stmt": [{
					"proto": "assert(pos < output.length);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1526
					, "stmt": {
						"proto": "assert(pos < output.length)"
						, "kind": "(?)"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1526
						, "args": [{
							"proto": "(pos < output.length)"
							, "kind": "<"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1526
							, "lval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1526
								, "value": "pos"
							}
							, "rval": {
								"proto": "output.length"
								, "kind": "."
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1526
								, "lval": {
									"proto": "output"
									, "kind": ".ref"
									, "type": "char[]"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1526
									, "value": "output"
								}
								, "rval": {
									"proto": "length"
									, "kind": ".ref"
									, "type": "int32"
									, "file": "stdlib.cvx"
									, "line": 1526
									, "value": "length"
								}
							}
						}]
					}
				}, {
					"proto": "output[pos] := padChr;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1527
					, "stmt": {
						"proto": "(output[pos] := padChr)"
						, "kind": ":="
						, "type": "char"
						, "file": "stdlib.cvx"
						, "line": 1527
						, "lval": {
							"proto": "output[pos]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1527
							, "lval": {
								"proto": "output"
								, "kind": ".ref"
								, "type": "char[]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1527
								, "value": "output"
							}
							, "rval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1527
								, "value": "pos"
							}
						}
						, "rval": {
							"proto": "padChr"
							, "kind": ".ref"
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1527
							, "value": "padChr"
						}
					}
				}, {
					"proto": "pos := (pos + 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1528
					, "stmt": {
						"proto": "(pos := (pos + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1528
						, "lval": {
							"proto": "pos"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1528
							, "value": "pos"
						}
						, "rval": {
							"proto": "(pos + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1528
							, "lval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1528
								, "value": "pos"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1528
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "for (i; i < len; i := (i + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1532
			, "init": {
				"proto": "i"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1532
				, "value": "i"
			}
			, "test": {
				"proto": "(i < len)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1532
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1532
					, "value": "i"
				}
				, "rval": {
					"proto": "len"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1532
					, "value": "len"
				}
			}
			, "step": {
				"proto": "(i := (i + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1532
				, "lval": {
					"proto": "i"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1532
					, "value": "i"
				}
				, "rval": {
					"proto": "(i + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1532
					, "lval": {
						"proto": "i"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1532
						, "value": "i"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1532
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1532
				, "stmt": [{
					"proto": "assert(i < output.length);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1533
					, "stmt": {
						"proto": "assert(i < output.length)"
						, "kind": "(?)"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1533
						, "args": [{
							"proto": "(i < output.length)"
							, "kind": "<"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1533
							, "lval": {
								"proto": "i"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1533
								, "value": "i"
							}
							, "rval": {
								"proto": "output.length"
								, "kind": "."
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1533
								, "lval": {
									"proto": "output"
									, "kind": ".ref"
									, "type": "char[]"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1533
									, "value": "output"
								}
								, "rval": {
									"proto": "length"
									, "kind": ".ref"
									, "type": "int32"
									, "file": "stdlib.cvx"
									, "line": 1533
									, "value": "length"
								}
							}
						}]
					}
				}, {
					"proto": "output[pos] := digits[len - i];"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1534
					, "stmt": {
						"proto": "(output[pos] := digits[len - i])"
						, "kind": ":="
						, "type": "char"
						, "file": "stdlib.cvx"
						, "line": 1534
						, "lval": {
							"proto": "output[pos]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1534
							, "lval": {
								"proto": "output"
								, "kind": ".ref"
								, "type": "char[]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1534
								, "value": "output"
							}
							, "rval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1534
								, "value": "pos"
							}
						}
						, "rval": {
							"proto": "digits[len - i]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".u32"
							, "file": "stdlib.cvx"
							, "line": 1534
							, "lval": {
								"proto": "digits"
								, "kind": ".ref"
								, "type": "char[80]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1534
								, "value": "digits"
							}
							, "rval": {
								"proto": "(len - i)"
								, "kind": "-"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1534
								, "lval": {
									"proto": "len"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1534
									, "value": "len"
								}
								, "rval": {
									"proto": "i"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1534
									, "value": "i"
								}
							}
						}
					}
				}, {
					"proto": "pos := (pos + 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1535
					, "stmt": {
						"proto": "(pos := (pos + 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1535
						, "lval": {
							"proto": "pos"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1535
							, "value": "pos"
						}
						, "rval": {
							"proto": "(pos + 1)"
							, "kind": "+"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1535
							, "lval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1535
								, "value": "pos"
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1535
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1538
			, "stmt": {
				"proto": "(result := pos)"
				, "kind": ":="
				, "type": "int32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "value": "result"
				}
				, "rval": {
					"proto": "pos"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1538
					, "value": "pos"
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.c32 0"
		, "offset": 284756
	}, {
		"instruction": "stack 80"
		, "offset": 284761
	}, {
		"instruction": "dup.x1 sp(25)"
		, "offset": 284765
	}, {
		"instruction": "load.ref .000000"
		, "offset": 284767
	}, {
		"instruction": "i32.ceq"
		, "offset": 284772
	}, {
		"instruction": "jz +35"
		, "offset": 284773
	}, {
		"instruction": "load.ref .045840"
		, "offset": 284777
	}, {
		"instruction": "ldsp -16"
		, "offset": 284782
	}, {
		"instruction": "copy.mem -20"
		, "offset": 284786
	}, {
		"instruction": "stack 20"
		, "offset": 284790
	}, {
		"instruction": "dup.x1 sp(30)"
		, "offset": 284794
	}, {
		"instruction": "ldsp 4"
		, "offset": 284796
	}, {
		"instruction": "copy.mem 20"
		, "offset": 284800
	}, {
		"instruction": "stack -20"
		, "offset": 284804
	}, {
		"instruction": "dup.x1 sp(25)"
		, "offset": 284808
	}, {
		"instruction": "load.i32"
		, "offset": 284810
	}, {
		"instruction": "load.c32 128"
		, "offset": 284811
	}, {
		"instruction": "load.ref .000830"
		, "offset": 284816
	}, {
		"instruction": "load.ref .000000"
		, "offset": 284821
	}, {
		"instruction": "load.ref .037410"
		, "offset": 284826
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 284831
	}, {
		"instruction": "load.c32 1"
		, "offset": 284833
	}, {
		"instruction": "i32.cgt"
		, "offset": 284838
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 284839
	}, {
		"instruction": "load.m32 .04583c"
		, "offset": 284841
	}, {
		"instruction": "i32.clt"
		, "offset": 284845
	}, {
		"instruction": "b32.and"
		, "offset": 284846
	}, {
		"instruction": "jz +13"
		, "offset": 284847
	}, {
		"instruction": "load.c32 0"
		, "offset": 284851
	}, {
		"instruction": "jmp +9"
		, "offset": 284856
	}, {
		"instruction": "load.c32 -1"
		, "offset": 284860
	}, {
		"instruction": "load.c32 1491"
		, "offset": 284865
	}, {
		"instruction": "load.ref .0148e0"
		, "offset": 284870
	}, {
		"instruction": "nfc(4)"
		, "offset": 284875
	}, {
		"instruction": "stack -8"
		, "offset": 284879
	}, {
		"instruction": "jmp +40"
		, "offset": 284883
	}, {
		"instruction": "load.m32 .045838"
		, "offset": 284887
	}, {
		"instruction": "dup.x1 sp(28)"
		, "offset": 284891
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 284893
	}, {
		"instruction": "u32.mod"
		, "offset": 284895
	}, {
		"instruction": "i32.add"
		, "offset": 284896
	}, {
		"instruction": "load.i8"
		, "offset": 284897
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 284898
	}, {
		"instruction": "ldsp 8"
		, "offset": 284900
	}, {
		"instruction": "dup.x1 sp(23)"
		, "offset": 284904
	}, {
		"instruction": "inc 1"
		, "offset": 284906
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284910
	}, {
		"instruction": "set.x1 sp(25)"
		, "offset": 284912
	}, {
		"instruction": "i32.add"
		, "offset": 284914
	}, {
		"instruction": "store.i8"
		, "offset": 284915
	}, {
		"instruction": "dup.x1 sp(27)"
		, "offset": 284916
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 284918
	}, {
		"instruction": "u32.div"
		, "offset": 284920
	}, {
		"instruction": "set.x1 sp(28)"
		, "offset": 284921
	}, {
		"instruction": "dup.x1 sp(27)"
		, "offset": 284923
	}, {
		"instruction": "load.c32 0"
		, "offset": 284925
	}, {
		"instruction": "u32.cgt"
		, "offset": 284930
	}, {
		"instruction": "jnz -44"
		, "offset": 284931
	}, {
		"instruction": "dup.x1 sp(21)"
		, "offset": 284935
	}, {
		"instruction": "load.c32 0"
		, "offset": 284937
	}, {
		"instruction": "i32.ceq"
		, "offset": 284942
	}, {
		"instruction": "jz +25"
		, "offset": 284943
	}, {
		"instruction": "load.c32 48"
		, "offset": 284947
	}, {
		"instruction": "ldsp 8"
		, "offset": 284952
	}, {
		"instruction": "dup.x1 sp(23)"
		, "offset": 284956
	}, {
		"instruction": "inc 1"
		, "offset": 284958
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 284962
	}, {
		"instruction": "set.x1 sp(25)"
		, "offset": 284964
	}, {
		"instruction": "i32.add"
		, "offset": 284966
	}, {
		"instruction": "store.i8"
		, "offset": 284967
	}, {
		"instruction": "dup.x1 sp(26)"
		, "offset": 284968
	}, {
		"instruction": "inc 12"
		, "offset": 284970
	}, {
		"instruction": "load.i32"
		, "offset": 284974
	}, {
		"instruction": "dup.x1 sp(22)"
		, "offset": 284975
	}, {
		"instruction": "i32.sub"
		, "offset": 284977
	}, {
		"instruction": "dup.x1 sp(27)"
		, "offset": 284978
	}, {
		"instruction": "inc 8"
		, "offset": 284980
	}, {
		"instruction": "load.i8"
		, "offset": 284984
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 284985
	}, {
		"instruction": "ldsp 0"
		, "offset": 284987
	}, {
		"instruction": "load.i8"
		, "offset": 284991
	}, {
		"instruction": "load.c32 0"
		, "offset": 284992
	}, {
		"instruction": "i32.ceq"
		, "offset": 284997
	}, {
		"instruction": "jz +14"
		, "offset": 284998
	}, {
		"instruction": "load.c32 32"
		, "offset": 285002
	}, {
		"instruction": "ldsp 4"
		, "offset": 285007
	}, {
		"instruction": "store.i8"
		, "offset": 285011
	}, {
		"instruction": "dup.x1 sp(28)"
		, "offset": 285012
	}, {
		"instruction": "inc 4"
		, "offset": 285014
	}, {
		"instruction": "load.i8"
		, "offset": 285018
	}, {
		"instruction": "load.c32 0"
		, "offset": 285019
	}, {
		"instruction": "i32.ceq"
		, "offset": 285024
	}, {
		"instruction": "jnz +217"
		, "offset": 285025
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 285029
	}, {
		"instruction": "inc -1"
		, "offset": 285031
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 285035
	}, {
		"instruction": "ldsp 0"
		, "offset": 285037
	}, {
		"instruction": "load.i8"
		, "offset": 285041
	}, {
		"instruction": "load.c32 32"
		, "offset": 285042
	}, {
		"instruction": "i32.ceq"
		, "offset": 285047
	}, {
		"instruction": "jz +110"
		, "offset": 285048
	}, {
		"instruction": "jmp +94"
		, "offset": 285052
	}, {
		"instruction": "load.c32 128"
		, "offset": 285056
	}, {
		"instruction": "load.ref .000830"
		, "offset": 285061
	}, {
		"instruction": "load.ref .000000"
		, "offset": 285066
	}, {
		"instruction": "load.ref .037410"
		, "offset": 285071
	}, {
		"instruction": "dup.x1 sp(31)"
		, "offset": 285076
	}, {
		"instruction": "dup.x1 sp(31)"
		, "offset": 285078
	}, {
		"instruction": "i32.clt"
		, "offset": 285080
	}, {
		"instruction": "jz +13"
		, "offset": 285081
	}, {
		"instruction": "load.c32 0"
		, "offset": 285085
	}, {
		"instruction": "jmp +9"
		, "offset": 285090
	}, {
		"instruction": "load.c32 -1"
		, "offset": 285094
	}, {
		"instruction": "load.c32 1514"
		, "offset": 285099
	}, {
		"instruction": "load.ref .0148e0"
		, "offset": 285104
	}, {
		"instruction": "nfc(4)"
		, "offset": 285109
	}, {
		"instruction": "stack -8"
		, "offset": 285113
	}, {
		"instruction": "ldsp 0"
		, "offset": 285117
	}, {
		"instruction": "load.i8"
		, "offset": 285121
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 285122
	}, {
		"instruction": "dup.x1 sp(26)"
		, "offset": 285124
	}, {
		"instruction": "dup.x1 sp(29)"
		, "offset": 285126
	}, {
		"instruction": "i32.add"
		, "offset": 285128
	}, {
		"instruction": "store.i8"
		, "offset": 285129
	}, {
		"instruction": "dup.x1 sp(27)"
		, "offset": 285130
	}, {
		"instruction": "inc 1"
		, "offset": 285132
	}, {
		"instruction": "set.x1 sp(28)"
		, "offset": 285136
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 285138
	}, {
		"instruction": "inc -1"
		, "offset": 285140
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 285144
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 285146
	}, {
		"instruction": "load.c32 0"
		, "offset": 285148
	}, {
		"instruction": "i32.cgt"
		, "offset": 285153
	}, {
		"instruction": "jnz -98"
		, "offset": 285154
	}, {
		"instruction": "load.c32 128"
		, "offset": 285158
	}, {
		"instruction": "load.ref .000830"
		, "offset": 285163
	}, {
		"instruction": "load.ref .000000"
		, "offset": 285168
	}, {
		"instruction": "load.ref .037410"
		, "offset": 285173
	}, {
		"instruction": "dup.x1 sp(31)"
		, "offset": 285178
	}, {
		"instruction": "dup.x1 sp(31)"
		, "offset": 285180
	}, {
		"instruction": "i32.clt"
		, "offset": 285182
	}, {
		"instruction": "jz +13"
		, "offset": 285183
	}, {
		"instruction": "load.c32 0"
		, "offset": 285187
	}, {
		"instruction": "jmp +9"
		, "offset": 285192
	}, {
		"instruction": "load.c32 -1"
		, "offset": 285196
	}, {
		"instruction": "load.c32 1519"
		, "offset": 285201
	}, {
		"instruction": "load.ref .0148e0"
		, "offset": 285206
	}, {
		"instruction": "nfc(4)"
		, "offset": 285211
	}, {
		"instruction": "stack -8"
		, "offset": 285215
	}, {
		"instruction": "dup.x1 sp(28)"
		, "offset": 285219
	}, {
		"instruction": "inc 4"
		, "offset": 285221
	}, {
		"instruction": "load.i8"
		, "offset": 285225
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 285226
	}, {
		"instruction": "dup.x1 sp(26)"
		, "offset": 285228
	}, {
		"instruction": "dup.x1 sp(29)"
		, "offset": 285230
	}, {
		"instruction": "i32.add"
		, "offset": 285232
	}, {
		"instruction": "store.i8"
		, "offset": 285233
	}, {
		"instruction": "dup.x1 sp(27)"
		, "offset": 285234
	}, {
		"instruction": "inc 1"
		, "offset": 285236
	}, {
		"instruction": "set.x1 sp(28)"
		, "offset": 285240
	}, {
		"instruction": "jmp +94"
		, "offset": 285242
	}, {
		"instruction": "load.c32 128"
		, "offset": 285246
	}, {
		"instruction": "load.ref .000830"
		, "offset": 285251
	}, {
		"instruction": "load.ref .000000"
		, "offset": 285256
	}, {
		"instruction": "load.ref .037410"
		, "offset": 285261
	}, {
		"instruction": "dup.x1 sp(31)"
		, "offset": 285266
	}, {
		"instruction": "dup.x1 sp(31)"
		, "offset": 285268
	}, {
		"instruction": "i32.clt"
		, "offset": 285270
	}, {
		"instruction": "jz +13"
		, "offset": 285271
	}, {
		"instruction": "load.c32 0"
		, "offset": 285275
	}, {
		"instruction": "jmp +9"
		, "offset": 285280
	}, {
		"instruction": "load.c32 -1"
		, "offset": 285284
	}, {
		"instruction": "load.c32 1526"
		, "offset": 285289
	}, {
		"instruction": "load.ref .0148e0"
		, "offset": 285294
	}, {
		"instruction": "nfc(4)"
		, "offset": 285299
	}, {
		"instruction": "stack -8"
		, "offset": 285303
	}, {
		"instruction": "ldsp 0"
		, "offset": 285307
	}, {
		"instruction": "load.i8"
		, "offset": 285311
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 285312
	}, {
		"instruction": "dup.x1 sp(26)"
		, "offset": 285314
	}, {
		"instruction": "dup.x1 sp(29)"
		, "offset": 285316
	}, {
		"instruction": "i32.add"
		, "offset": 285318
	}, {
		"instruction": "store.i8"
		, "offset": 285319
	}, {
		"instruction": "dup.x1 sp(27)"
		, "offset": 285320
	}, {
		"instruction": "inc 1"
		, "offset": 285322
	}, {
		"instruction": "set.x1 sp(28)"
		, "offset": 285326
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 285328
	}, {
		"instruction": "inc -1"
		, "offset": 285330
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 285334
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 285336
	}, {
		"instruction": "load.c32 0"
		, "offset": 285338
	}, {
		"instruction": "i32.cgt"
		, "offset": 285343
	}, {
		"instruction": "jnz -98"
		, "offset": 285344
	}, {
		"instruction": "load.c32 0"
		, "offset": 285348
	}, {
		"instruction": "jmp +96"
		, "offset": 285353
	}, {
		"instruction": "load.c32 128"
		, "offset": 285357
	}, {
		"instruction": "load.ref .000830"
		, "offset": 285362
	}, {
		"instruction": "load.ref .000000"
		, "offset": 285367
	}, {
		"instruction": "load.ref .037410"
		, "offset": 285372
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 285377
	}, {
		"instruction": "dup.x1 sp(32)"
		, "offset": 285379
	}, {
		"instruction": "i32.clt"
		, "offset": 285381
	}, {
		"instruction": "jz +13"
		, "offset": 285382
	}, {
		"instruction": "load.c32 0"
		, "offset": 285386
	}, {
		"instruction": "jmp +9"
		, "offset": 285391
	}, {
		"instruction": "load.c32 -1"
		, "offset": 285395
	}, {
		"instruction": "load.c32 1533"
		, "offset": 285400
	}, {
		"instruction": "load.ref .0148e0"
		, "offset": 285405
	}, {
		"instruction": "nfc(4)"
		, "offset": 285410
	}, {
		"instruction": "stack -8"
		, "offset": 285414
	}, {
		"instruction": "ldsp 16"
		, "offset": 285418
	}, {
		"instruction": "dup.x1 sp(25)"
		, "offset": 285422
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 285424
	}, {
		"instruction": "i32.sub"
		, "offset": 285426
	}, {
		"instruction": "i32.add"
		, "offset": 285427
	}, {
		"instruction": "load.i8"
		, "offset": 285428
	}, {
		"instruction": "b32.and 0x0ff"
		, "offset": 285429
	}, {
		"instruction": "dup.x1 sp(27)"
		, "offset": 285431
	}, {
		"instruction": "dup.x1 sp(30)"
		, "offset": 285433
	}, {
		"instruction": "i32.add"
		, "offset": 285435
	}, {
		"instruction": "store.i8"
		, "offset": 285436
	}, {
		"instruction": "dup.x1 sp(28)"
		, "offset": 285437
	}, {
		"instruction": "inc 1"
		, "offset": 285439
	}, {
		"instruction": "set.x1 sp(29)"
		, "offset": 285443
	}, {
		"instruction": "inc 1"
		, "offset": 285445
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285449
	}, {
		"instruction": "dup.x1 sp(25)"
		, "offset": 285451
	}, {
		"instruction": "i32.clt"
		, "offset": 285453
	}, {
		"instruction": "jnz -97"
		, "offset": 285454
	}, {
		"instruction": "stack -4"
		, "offset": 285458
	}, {
		"instruction": "dup.x1 sp(27)"
		, "offset": 285462
	}, {
		"instruction": "set.x1 sp(31)"
		, "offset": 285464
	}, {
		"instruction": "stack -96"
		, "offset": 285466
	}, {
		"instruction": "ret"
		, "offset": 285470
	}, {
		"instruction": "stack -96"
		, "offset": 285471
	}, {
		"instruction": "ret"
		, "offset": 285475
	}]
}, {
	"proto": "format(output: char[], format: string, value: int32)"
	, "kind": ".ref"
	, "name": "format"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 1553
	, "args": [{
		"proto": "format.output"
		, "kind": ".ref"
		, "name": "output"
		, "declaredIn": "format(output: char[], format: string, value: int32)"
		, "type": "char[]"
		, "file": "stdlib.cvx"
		, "line": 1553
		, "cast": ".arr"
		, "size": 8
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "format.format"
		, "kind": ".ref"
		, "name": "format"
		, "declaredIn": "format(output: char[], format: string, value: int32)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1553
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "format.value"
		, "kind": ".ref"
		, "name": "value"
		, "declaredIn": "format(output: char[], format: string, value: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 1553
		, "cast": ".i32"
		, "size": 4
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".i32"
	, "size": 661
	, "offs": 285476
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1553
		, "stmt": [{
			"proto": "pos"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 1554
			, "value": "pos"
		}, {
			"proto": "if (format == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1555
			, "test": {
				"proto": "(format == null)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1555
				, "lval": {
					"proto": "format"
					, "kind": ".ref"
					, "type": "string"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1555
					, "value": "format"
				}
				, "rval": {
					"proto": "null"
					, "kind": ".ref"
					, "type": "pointer"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1555
					, "value": "null"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1555
				, "stmt": [{
					"proto": "format := '%d';"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1556
					, "stmt": {
						"proto": "(format := '%d')"
						, "kind": ":="
						, "type": "string"
						, "file": "stdlib.cvx"
						, "line": 1556
						, "lval": {
							"proto": "format"
							, "kind": ".ref"
							, "type": "string"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1556
							, "value": "format"
						}
						, "rval": {
							"proto": "'%d'"
							, "kind": ".ptr"
							, "type": "string"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1556
							, "value": "'%d'"
						}
					}
				}]
			}
		}, {
			"proto": "spos"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 1558
			, "value": "spos"
		}, {
			"proto": "for (chr; chr := format[spos]; spos := (spos + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1559
			, "init": {
				"proto": "chr"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1559
				, "value": "chr"
			}
			, "test": {
				"proto": "(chr := format[spos])"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1559
				, "lval": {
					"proto": "chr"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1559
					, "value": "chr"
				}
				, "rval": {
					"proto": "format[spos]"
					, "kind": "[?]"
					, "type": "char"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1559
					, "lval": {
						"proto": "format"
						, "kind": ".ref"
						, "type": "string"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1559
						, "value": "format"
					}
					, "rval": {
						"proto": "spos"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i64"
						, "file": "stdlib.cvx"
						, "line": 1559
						, "value": "spos"
					}
				}
			}
			, "step": {
				"proto": "(spos := (spos + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1559
				, "lval": {
					"proto": "spos"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1559
					, "value": "spos"
				}
				, "rval": {
					"proto": "(spos + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1559
					, "lval": {
						"proto": "spos"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1559
						, "value": "spos"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1559
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1559
				, "stmt": [{
					"proto": "if (chr == 37)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1560
					, "test": {
						"proto": "(chr == 37)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1560
						, "lval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1560
							, "value": "chr"
						}
						, "rval": {
							"proto": "37"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1560
							, "value": "37"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1560
						, "stmt": [{
							"proto": "chr := format[spos := (spos + 1)];"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1561
							, "stmt": {
								"proto": "(chr := format[spos := (spos + 1)])"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1561
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1561
									, "value": "chr"
								}
								, "rval": {
									"proto": "format[spos := (spos + 1)]"
									, "kind": "[?]"
									, "type": "char"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1561
									, "lval": {
										"proto": "format"
										, "kind": ".ref"
										, "type": "string"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 1561
										, "value": "format"
									}
									, "rval": {
										"proto": "(spos := (spos + 1))"
										, "kind": ":="
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 1561
										, "lval": {
											"proto": "spos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1561
											, "value": "spos"
										}
										, "rval": {
											"proto": "(spos + 1)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1561
											, "lval": {
												"proto": "spos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1561
												, "value": "spos"
											}
											, "rval": {
												"proto": "1"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1561
												, "value": "1"
											}
										}
									}
								}
							}
						}, {
							"proto": "if (chr == 37)"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1562
							, "test": {
								"proto": "(chr == 37)"
								, "kind": "=="
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1562
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1562
									, "value": "chr"
								}
								, "rval": {
									"proto": "37"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1562
									, "value": "37"
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1562
								, "stmt": [{
									"proto": "if (pos < output.length)"
									, "kind": "if"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1563
									, "test": {
										"proto": "(pos < output.length)"
										, "kind": "<"
										, "type": "bool"
										, "cast": ".bit"
										, "file": "stdlib.cvx"
										, "line": 1563
										, "lval": {
											"proto": "pos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1563
											, "value": "pos"
										}
										, "rval": {
											"proto": "output.length"
											, "kind": "."
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1563
											, "lval": {
												"proto": "output"
												, "kind": ".ref"
												, "type": "char[]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1563
												, "value": "output"
											}
											, "rval": {
												"proto": "length"
												, "kind": ".ref"
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1563
												, "value": "length"
											}
										}
									}
									, "then": {
										"proto": "{...}"
										, "kind": "{"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1563
										, "stmt": [{
											"proto": "output[pos] := chr;"
											, "kind": ";"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1564
											, "stmt": {
												"proto": "(output[pos] := chr)"
												, "kind": ":="
												, "type": "char"
												, "file": "stdlib.cvx"
												, "line": 1564
												, "lval": {
													"proto": "output[pos]"
													, "kind": "[?]"
													, "type": "char"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1564
													, "lval": {
														"proto": "output"
														, "kind": ".ref"
														, "type": "char[]"
														, "cast": ".ref"
														, "file": "stdlib.cvx"
														, "line": 1564
														, "value": "output"
													}
													, "rval": {
														"proto": "pos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i64"
														, "file": "stdlib.cvx"
														, "line": 1564
														, "value": "pos"
													}
												}
												, "rval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1564
													, "value": "chr"
												}
											}
										}, {
											"proto": "pos := (pos + 1);"
											, "kind": ";"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1565
											, "stmt": {
												"proto": "(pos := (pos + 1))"
												, "kind": ":="
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1565
												, "lval": {
													"proto": "pos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1565
													, "value": "pos"
												}
												, "rval": {
													"proto": "(pos + 1)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1565
													, "lval": {
														"proto": "pos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1565
														, "value": "pos"
													}
													, "rval": {
														"proto": "1"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1565
														, "value": "1"
													}
												}
											}
										}]
									}
								}, {
									"proto": "continue;"
									, "kind": "continue"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1567
								}]
							}
						}, {
							"proto": "sgnChr"
							, "kind": ".def"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 1570
							, "value": "sgnChr"
						}, {
							"proto": "if ((chr == 45) || (chr == 43))"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1571
							, "test": {
								"proto": "((chr == 45) || (chr == 43))"
								, "kind": "||"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1571
								, "lval": {
									"proto": "(chr == 45)"
									, "kind": "=="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1571
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1571
										, "value": "chr"
									}
									, "rval": {
										"proto": "45"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1571
										, "value": "45"
									}
								}
								, "rval": {
									"proto": "(chr == 43)"
									, "kind": "=="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1571
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1571
										, "value": "chr"
									}
									, "rval": {
										"proto": "43"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1571
										, "value": "43"
									}
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1571
								, "stmt": [{
									"proto": "sgnChr := chr;"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1572
									, "stmt": {
										"proto": "(sgnChr := chr)"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1572
										, "lval": {
											"proto": "sgnChr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1572
											, "value": "sgnChr"
										}
										, "rval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1572
											, "value": "chr"
										}
									}
								}, {
									"proto": "chr := format[spos := (spos + 1)];"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1573
									, "stmt": {
										"proto": "(chr := format[spos := (spos + 1)])"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1573
										, "lval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1573
											, "value": "chr"
										}
										, "rval": {
											"proto": "format[spos := (spos + 1)]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1573
											, "lval": {
												"proto": "format"
												, "kind": ".ref"
												, "type": "string"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1573
												, "value": "format"
											}
											, "rval": {
												"proto": "(spos := (spos + 1))"
												, "kind": ":="
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1573
												, "lval": {
													"proto": "spos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1573
													, "value": "spos"
												}
												, "rval": {
													"proto": "(spos + 1)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1573
													, "lval": {
														"proto": "spos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1573
														, "value": "spos"
													}
													, "rval": {
														"proto": "1"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1573
														, "value": "1"
													}
												}
											}
										}
									}
								}]
							}
						}, {
							"proto": "padChr"
							, "kind": ".def"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 1576
							, "value": "padChr"
						}, {
							"proto": "if (chr == 48)"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1577
							, "test": {
								"proto": "(chr == 48)"
								, "kind": "=="
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1577
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1577
									, "value": "chr"
								}
								, "rval": {
									"proto": "48"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1577
									, "value": "48"
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1577
								, "stmt": [{
									"proto": "padChr := chr;"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1578
									, "stmt": {
										"proto": "(padChr := chr)"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1578
										, "lval": {
											"proto": "padChr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1578
											, "value": "padChr"
										}
										, "rval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1578
											, "value": "chr"
										}
									}
								}, {
									"proto": "chr := format[spos := (spos + 1)];"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1579
									, "stmt": {
										"proto": "(chr := format[spos := (spos + 1)])"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1579
										, "lval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1579
											, "value": "chr"
										}
										, "rval": {
											"proto": "format[spos := (spos + 1)]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1579
											, "lval": {
												"proto": "format"
												, "kind": ".ref"
												, "type": "string"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1579
												, "value": "format"
											}
											, "rval": {
												"proto": "(spos := (spos + 1))"
												, "kind": ":="
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1579
												, "lval": {
													"proto": "spos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1579
													, "value": "spos"
												}
												, "rval": {
													"proto": "(spos + 1)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1579
													, "lval": {
														"proto": "spos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1579
														, "value": "spos"
													}
													, "rval": {
														"proto": "1"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1579
														, "value": "1"
													}
												}
											}
										}
									}
								}]
							}
						}, {
							"proto": "padLen"
							, "kind": ".def"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 1582
							, "value": "padLen"
						}, {
							"proto": "for ( ; (chr >= 48) && (chr <= 57); )"
							, "kind": "for"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1583
							, "test": {
								"proto": "((chr >= 48) && (chr <= 57))"
								, "kind": "&&"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1583
								, "lval": {
									"proto": "(chr >= 48)"
									, "kind": ">="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1583
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1583
										, "value": "chr"
									}
									, "rval": {
										"proto": "48"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1583
										, "value": "48"
									}
								}
								, "rval": {
									"proto": "(chr <= 57)"
									, "kind": "<="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1583
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1583
										, "value": "chr"
									}
									, "rval": {
										"proto": "57"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1583
										, "value": "57"
									}
								}
							}
							, "stmt": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1583
								, "stmt": [{
									"proto": "padLen := ((padLen * 10) + chr - 48);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1584
									, "stmt": {
										"proto": "(padLen := ((padLen * 10) + chr - 48))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1584
										, "lval": {
											"proto": "padLen"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1584
											, "value": "padLen"
										}
										, "rval": {
											"proto": "((padLen * 10) + chr - 48)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1584
											, "lval": {
												"proto": "((padLen * 10) + chr)"
												, "kind": "+"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1584
												, "lval": {
													"proto": "(padLen * 10)"
													, "kind": "*"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1584
													, "lval": {
														"proto": "padLen"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1584
														, "value": "padLen"
													}
													, "rval": {
														"proto": "10"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1584
														, "value": "10"
													}
												}
												, "rval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1584
													, "value": "chr"
												}
											}
											, "rval": {
												"proto": "48"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1584
												, "value": "48"
											}
										}
									}
								}, {
									"proto": "chr := format[spos := (spos + 1)];"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1585
									, "stmt": {
										"proto": "(chr := format[spos := (spos + 1)])"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1585
										, "lval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1585
											, "value": "chr"
										}
										, "rval": {
											"proto": "format[spos := (spos + 1)]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1585
											, "lval": {
												"proto": "format"
												, "kind": ".ref"
												, "type": "string"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1585
												, "value": "format"
											}
											, "rval": {
												"proto": "(spos := (spos + 1))"
												, "kind": ":="
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1585
												, "lval": {
													"proto": "spos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1585
													, "value": "spos"
												}
												, "rval": {
													"proto": "(spos + 1)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1585
													, "lval": {
														"proto": "spos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1585
														, "value": "spos"
													}
													, "rval": {
														"proto": "1"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1585
														, "value": "1"
													}
												}
											}
										}
									}
								}]
							}
						}, {
							"proto": "precision"
							, "kind": ".def"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 1588
							, "value": "precision"
						}, {
							"proto": "if (chr == 46)"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1589
							, "test": {
								"proto": "(chr == 46)"
								, "kind": "=="
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1589
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1589
									, "value": "chr"
								}
								, "rval": {
									"proto": "46"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1589
									, "value": "46"
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1589
								, "stmt": [{
									"proto": "chr := format[spos := (spos + 1)];"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1590
									, "stmt": {
										"proto": "(chr := format[spos := (spos + 1)])"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1590
										, "lval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1590
											, "value": "chr"
										}
										, "rval": {
											"proto": "format[spos := (spos + 1)]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1590
											, "lval": {
												"proto": "format"
												, "kind": ".ref"
												, "type": "string"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1590
												, "value": "format"
											}
											, "rval": {
												"proto": "(spos := (spos + 1))"
												, "kind": ":="
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1590
												, "lval": {
													"proto": "spos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1590
													, "value": "spos"
												}
												, "rval": {
													"proto": "(spos + 1)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1590
													, "lval": {
														"proto": "spos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1590
														, "value": "spos"
													}
													, "rval": {
														"proto": "1"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1590
														, "value": "1"
													}
												}
											}
										}
									}
								}, {
									"proto": "for ( ; (chr >= 48) && (chr <= 57); )"
									, "kind": "for"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1591
									, "test": {
										"proto": "((chr >= 48) && (chr <= 57))"
										, "kind": "&&"
										, "type": "bool"
										, "cast": ".bit"
										, "file": "stdlib.cvx"
										, "line": 1591
										, "lval": {
											"proto": "(chr >= 48)"
											, "kind": ">="
											, "type": "bool"
											, "cast": ".bit"
											, "file": "stdlib.cvx"
											, "line": 1591
											, "lval": {
												"proto": "chr"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1591
												, "value": "chr"
											}
											, "rval": {
												"proto": "48"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1591
												, "value": "48"
											}
										}
										, "rval": {
											"proto": "(chr <= 57)"
											, "kind": "<="
											, "type": "bool"
											, "cast": ".bit"
											, "file": "stdlib.cvx"
											, "line": 1591
											, "lval": {
												"proto": "chr"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1591
												, "value": "chr"
											}
											, "rval": {
												"proto": "57"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1591
												, "value": "57"
											}
										}
									}
									, "stmt": {
										"proto": "{...}"
										, "kind": "{"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1591
										, "stmt": [{
											"proto": "precision := ((precision * 10) + chr - 48);"
											, "kind": ";"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1592
											, "stmt": {
												"proto": "(precision := ((precision * 10) + chr - 48))"
												, "kind": ":="
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1592
												, "lval": {
													"proto": "precision"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1592
													, "value": "precision"
												}
												, "rval": {
													"proto": "((precision * 10) + chr - 48)"
													, "kind": "-"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1592
													, "lval": {
														"proto": "((precision * 10) + chr)"
														, "kind": "+"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1592
														, "lval": {
															"proto": "(precision * 10)"
															, "kind": "*"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1592
															, "lval": {
																"proto": "precision"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1592
																, "value": "precision"
															}
															, "rval": {
																"proto": "10"
																, "kind": ".i64"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1592
																, "value": "10"
															}
														}
														, "rval": {
															"proto": "chr"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1592
															, "value": "chr"
														}
													}
													, "rval": {
														"proto": "48"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1592
														, "value": "48"
													}
												}
											}
										}, {
											"proto": "chr := format[spos := (spos + 1)];"
											, "kind": ";"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1593
											, "stmt": {
												"proto": "(chr := format[spos := (spos + 1)])"
												, "kind": ":="
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1593
												, "lval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1593
													, "value": "chr"
												}
												, "rval": {
													"proto": "format[spos := (spos + 1)]"
													, "kind": "[?]"
													, "type": "char"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1593
													, "lval": {
														"proto": "format"
														, "kind": ".ref"
														, "type": "string"
														, "cast": ".ref"
														, "file": "stdlib.cvx"
														, "line": 1593
														, "value": "format"
													}
													, "rval": {
														"proto": "(spos := (spos + 1))"
														, "kind": ":="
														, "type": "int32"
														, "cast": ".i64"
														, "file": "stdlib.cvx"
														, "line": 1593
														, "lval": {
															"proto": "spos"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1593
															, "value": "spos"
														}
														, "rval": {
															"proto": "(spos + 1)"
															, "kind": "+"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1593
															, "lval": {
																"proto": "spos"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1593
																, "value": "spos"
															}
															, "rval": {
																"proto": "1"
																, "kind": ".i64"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1593
																, "value": "1"
															}
														}
													}
												}
											}
										}]
									}
								}]
							}
						}, {
							"proto": "rad"
							, "kind": ".def"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 1598
							, "value": "rad"
						}, {
							"proto": "if (chr == 98)"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1599
							, "test": {
								"proto": "(chr == 98)"
								, "kind": "=="
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1599
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1599
									, "value": "chr"
								}
								, "rval": {
									"proto": "98"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1599
									, "value": "98"
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1599
								, "stmt": [{
									"proto": "rad := 2;"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1600
									, "stmt": {
										"proto": "(rad := 2)"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1600
										, "lval": {
											"proto": "rad"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1600
											, "value": "rad"
										}
										, "rval": {
											"proto": "2"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1600
											, "value": "2"
										}
									}
								}]
							}
							, "else": {
								"proto": "if (chr == 111)"
								, "kind": "if"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1602
								, "test": {
									"proto": "(chr == 111)"
									, "kind": "=="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1602
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1602
										, "value": "chr"
									}
									, "rval": {
										"proto": "111"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1602
										, "value": "111"
									}
								}
								, "then": {
									"proto": "{...}"
									, "kind": "{"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1602
									, "stmt": [{
										"proto": "rad := 8;"
										, "kind": ";"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1603
										, "stmt": {
											"proto": "(rad := 8)"
											, "kind": ":="
											, "type": "int32"
											, "file": "stdlib.cvx"
											, "line": 1603
											, "lval": {
												"proto": "rad"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1603
												, "value": "rad"
											}
											, "rval": {
												"proto": "8"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1603
												, "value": "8"
											}
										}
									}]
								}
								, "else": {
									"proto": "if (chr == 100)"
									, "kind": "if"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1605
									, "test": {
										"proto": "(chr == 100)"
										, "kind": "=="
										, "type": "bool"
										, "cast": ".bit"
										, "file": "stdlib.cvx"
										, "line": 1605
										, "lval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1605
											, "value": "chr"
										}
										, "rval": {
											"proto": "100"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1605
											, "value": "100"
										}
									}
									, "then": {
										"proto": "{...}"
										, "kind": "{"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1605
										, "stmt": [{
											"proto": "rad := 10;"
											, "kind": ";"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1606
											, "stmt": {
												"proto": "(rad := 10)"
												, "kind": ":="
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1606
												, "lval": {
													"proto": "rad"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1606
													, "value": "rad"
												}
												, "rval": {
													"proto": "10"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1606
													, "value": "10"
												}
											}
										}]
									}
									, "else": {
										"proto": "if (chr == 120)"
										, "kind": "if"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1608
										, "test": {
											"proto": "(chr == 120)"
											, "kind": "=="
											, "type": "bool"
											, "cast": ".bit"
											, "file": "stdlib.cvx"
											, "line": 1608
											, "lval": {
												"proto": "chr"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1608
												, "value": "chr"
											}
											, "rval": {
												"proto": "120"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1608
												, "value": "120"
											}
										}
										, "then": {
											"proto": "{...}"
											, "kind": "{"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1608
											, "stmt": [{
												"proto": "rad := 16;"
												, "kind": ";"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1609
												, "stmt": {
													"proto": "(rad := 16)"
													, "kind": ":="
													, "type": "int32"
													, "file": "stdlib.cvx"
													, "line": 1609
													, "lval": {
														"proto": "rad"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1609
														, "value": "rad"
													}
													, "rval": {
														"proto": "16"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1609
														, "value": "16"
													}
												}
											}]
										}
										, "else": {
											"proto": "if (chr == 105)"
											, "kind": "if"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1611
											, "test": {
												"proto": "(chr == 105)"
												, "kind": "=="
												, "type": "bool"
												, "cast": ".bit"
												, "file": "stdlib.cvx"
												, "line": 1611
												, "lval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1611
													, "value": "chr"
												}
												, "rval": {
													"proto": "105"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1611
													, "value": "105"
												}
											}
											, "then": {
												"proto": "{...}"
												, "kind": "{"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1611
												, "stmt": [{
													"proto": "rad := precision;"
													, "kind": ";"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1612
													, "stmt": {
														"proto": "(rad := precision)"
														, "kind": ":="
														, "type": "int32"
														, "file": "stdlib.cvx"
														, "line": 1612
														, "lval": {
															"proto": "rad"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1612
															, "value": "rad"
														}
														, "rval": {
															"proto": "precision"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1612
															, "value": "precision"
														}
													}
												}]
											}
										}
									}
								}
							}
						}, {
							"proto": "val"
							, "kind": ".def"
							, "type": "int32"
							, "file": "stdlib.cvx"
							, "line": 1615
							, "value": "val"
						}, {
							"proto": "if (val < 0)"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1616
							, "test": {
								"proto": "(val < 0)"
								, "kind": "<"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1616
								, "lval": {
									"proto": "val"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1616
									, "value": "val"
								}
								, "rval": {
									"proto": "0"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1616
									, "value": "0"
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1616
								, "stmt": [{
									"proto": "val := (-val);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1617
									, "stmt": {
										"proto": "(val := (-val))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1617
										, "lval": {
											"proto": "val"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1617
											, "value": "val"
										}
										, "rval": {
											"proto": "(-val)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1617
											, "rval": {
												"proto": "val"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1617
												, "value": "val"
											}
										}
									}
								}, {
									"proto": "sgnChr := 45;"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1618
									, "stmt": {
										"proto": "(sgnChr := 45)"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1618
										, "lval": {
											"proto": "sgnChr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1618
											, "value": "sgnChr"
										}
										, "rval": {
											"proto": "45"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1618
											, "value": "45"
										}
									}
								}]
							}
							, "else": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1620
								, "stmt": [{
									"proto": "if (val == 0)"
									, "kind": "if"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1621
									, "test": {
										"proto": "(val == 0)"
										, "kind": "=="
										, "type": "bool"
										, "cast": ".bit"
										, "file": "stdlib.cvx"
										, "line": 1621
										, "lval": {
											"proto": "val"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1621
											, "value": "val"
										}
										, "rval": {
											"proto": "0"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1621
											, "value": "0"
										}
									}
									, "then": {
										"proto": "{...}"
										, "kind": "{"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1621
										, "stmt": [{
											"proto": "padChr := 48;"
											, "kind": ";"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1622
											, "stmt": {
												"proto": "(padChr := 48)"
												, "kind": ":="
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1622
												, "lval": {
													"proto": "padChr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1622
													, "value": "padChr"
												}
												, "rval": {
													"proto": "48"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1622
													, "value": "48"
												}
											}
										}, {
											"proto": "if (!padLen)"
											, "kind": "if"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1623
											, "test": {
												"proto": "(!padLen)"
												, "kind": "!"
												, "type": "bool"
												, "cast": ".bit"
												, "file": "stdlib.cvx"
												, "line": 1623
												, "rval": {
													"proto": "padLen"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1623
													, "value": "padLen"
												}
											}
											, "then": {
												"proto": "{...}"
												, "kind": "{"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1623
												, "stmt": [{
													"proto": "padLen := 1;"
													, "kind": ";"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1624
													, "stmt": {
														"proto": "(padLen := 1)"
														, "kind": ":="
														, "type": "int32"
														, "file": "stdlib.cvx"
														, "line": 1624
														, "lval": {
															"proto": "padLen"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1624
															, "value": "padLen"
														}
														, "rval": {
															"proto": "1"
															, "kind": ".i64"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1624
															, "value": "1"
														}
													}
												}]
											}
										}]
									}
								}]
							}
						}, {
							"proto": "flags"
							, "kind": ".def"
							, "type": "FormatFlags"
							, "file": "stdlib.cvx"
							, "line": 1629
							, "value": "flags"
						}, {
							"proto": "pos := format(output, pos, (&flags), val);"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1630
							, "stmt": {
								"proto": "(pos := format(output, pos, (&flags), val))"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1630
								, "lval": {
									"proto": "pos"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1630
									, "value": "pos"
								}
								, "rval": {
									"proto": "format(output, pos, (&flags), val)"
									, "kind": "(?)"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1630
									, "args": [{
										"proto": "val"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".u32"
										, "file": "stdlib.cvx"
										, "line": 1630
										, "value": "val"
									}, {
										"proto": "(&flags)"
										, "kind": "&"
										, "type": "FormatFlags"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 1630
										, "rval": {
											"proto": "flags"
											, "kind": ".ref"
											, "type": "FormatFlags"
											, "cast": ".rec"
											, "file": "stdlib.cvx"
											, "line": 1630
											, "value": "flags"
										}
									}, {
										"proto": "pos"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1630
										, "value": "pos"
									}, {
										"proto": "output"
										, "kind": ".ref"
										, "type": "char[]"
										, "cast": ".arr"
										, "file": "stdlib.cvx"
										, "line": 1630
										, "value": "output"
									}]
								}
							}
						}]
					}
					, "else": {
						"proto": "if (pos < output.length)"
						, "kind": "if"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1632
						, "test": {
							"proto": "(pos < output.length)"
							, "kind": "<"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1632
							, "lval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1632
								, "value": "pos"
							}
							, "rval": {
								"proto": "output.length"
								, "kind": "."
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1632
								, "lval": {
									"proto": "output"
									, "kind": ".ref"
									, "type": "char[]"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1632
									, "value": "output"
								}
								, "rval": {
									"proto": "length"
									, "kind": ".ref"
									, "type": "int32"
									, "file": "stdlib.cvx"
									, "line": 1632
									, "value": "length"
								}
							}
						}
						, "then": {
							"proto": "{...}"
							, "kind": "{"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1632
							, "stmt": [{
								"proto": "output[pos] := chr;"
								, "kind": ";"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1633
								, "stmt": {
									"proto": "(output[pos] := chr)"
									, "kind": ":="
									, "type": "char"
									, "file": "stdlib.cvx"
									, "line": 1633
									, "lval": {
										"proto": "output[pos]"
										, "kind": "[?]"
										, "type": "char"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1633
										, "lval": {
											"proto": "output"
											, "kind": ".ref"
											, "type": "char[]"
											, "cast": ".ref"
											, "file": "stdlib.cvx"
											, "line": 1633
											, "value": "output"
										}
										, "rval": {
											"proto": "pos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i64"
											, "file": "stdlib.cvx"
											, "line": 1633
											, "value": "pos"
										}
									}
									, "rval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1633
										, "value": "chr"
									}
								}
							}, {
								"proto": "pos := (pos + 1);"
								, "kind": ";"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1634
								, "stmt": {
									"proto": "(pos := (pos + 1))"
									, "kind": ":="
									, "type": "int32"
									, "file": "stdlib.cvx"
									, "line": 1634
									, "lval": {
										"proto": "pos"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1634
										, "value": "pos"
									}
									, "rval": {
										"proto": "(pos + 1)"
										, "kind": "+"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1634
										, "lval": {
											"proto": "pos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1634
											, "value": "pos"
										}
										, "rval": {
											"proto": "1"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1634
											, "value": "1"
										}
									}
								}
							}]
						}
					}
				}]
			}
		}, {
			"proto": "if (pos >= output.length)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1638
			, "test": {
				"proto": "(pos >= output.length)"
				, "kind": ">="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1638
				, "lval": {
					"proto": "pos"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1638
					, "value": "pos"
				}
				, "rval": {
					"proto": "output.length"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1638
					, "lval": {
						"proto": "output"
						, "kind": ".ref"
						, "type": "char[]"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1638
						, "value": "output"
					}
					, "rval": {
						"proto": "length"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1638
						, "value": "length"
					}
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1638
				, "stmt": [{
					"proto": "pos := (output.length - 1);"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1639
					, "stmt": {
						"proto": "(pos := (output.length - 1))"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1639
						, "lval": {
							"proto": "pos"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1639
							, "value": "pos"
						}
						, "rval": {
							"proto": "(output.length - 1)"
							, "kind": "-"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1639
							, "lval": {
								"proto": "output.length"
								, "kind": "."
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1639
								, "lval": {
									"proto": "output"
									, "kind": ".ref"
									, "type": "char[]"
									, "cast": ".ref"
									, "file": "stdlib.cvx"
									, "line": 1639
									, "value": "output"
								}
								, "rval": {
									"proto": "length"
									, "kind": ".ref"
									, "type": "int32"
									, "file": "stdlib.cvx"
									, "line": 1639
									, "value": "length"
								}
							}
							, "rval": {
								"proto": "1"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1639
								, "value": "1"
							}
						}
					}
				}]
			}
		}, {
			"proto": "output[pos] := 0;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1641
			, "stmt": {
				"proto": "(output[pos] := 0)"
				, "kind": ":="
				, "type": "char"
				, "file": "stdlib.cvx"
				, "line": 1641
				, "lval": {
					"proto": "output[pos]"
					, "kind": "[?]"
					, "type": "char"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1641
					, "lval": {
						"proto": "output"
						, "kind": ".ref"
						, "type": "char[]"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1641
						, "value": "output"
					}
					, "rval": {
						"proto": "pos"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i64"
						, "file": "stdlib.cvx"
						, "line": 1641
						, "value": "pos"
					}
				}
				, "rval": {
					"proto": "0"
					, "kind": ".i64"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1641
					, "value": "0"
				}
			}
		}, {
			"proto": "return;"
			, "kind": "return"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1642
			, "stmt": {
				"proto": "(result := pos)"
				, "kind": ":="
				, "type": "int32"
				, "lval": {
					"proto": "result"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "value": "result"
				}
				, "rval": {
					"proto": "pos"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1642
					, "value": "pos"
				}
			}
		}]
	}
	, "instructions": [{
		"instruction": "load.c32 0"
		, "offset": 285476
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 285481
	}, {
		"instruction": "load.ref .000000"
		, "offset": 285483
	}, {
		"instruction": "i32.ceq"
		, "offset": 285488
	}, {
		"instruction": "jz +12"
		, "offset": 285489
	}, {
		"instruction": "load.ref .03af40"
		, "offset": 285493
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285498
	}, {
		"instruction": "store.i32"
		, "offset": 285500
	}, {
		"instruction": "load.c32 0"
		, "offset": 285501
	}, {
		"instruction": "stack 4"
		, "offset": 285506
	}, {
		"instruction": "jmp +567"
		, "offset": 285510
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285514
	}, {
		"instruction": "load.c32 37"
		, "offset": 285516
	}, {
		"instruction": "i32.ceq"
		, "offset": 285521
	}, {
		"instruction": "jz +522"
		, "offset": 285522
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 285526
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 285528
	}, {
		"instruction": "inc 1"
		, "offset": 285530
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285534
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 285536
	}, {
		"instruction": "i32.add"
		, "offset": 285538
	}, {
		"instruction": "load.i8"
		, "offset": 285539
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285540
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285542
	}, {
		"instruction": "load.c32 37"
		, "offset": 285544
	}, {
		"instruction": "i32.ceq"
		, "offset": 285549
	}, {
		"instruction": "jz +33"
		, "offset": 285550
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 285554
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 285556
	}, {
		"instruction": "i32.clt"
		, "offset": 285558
	}, {
		"instruction": "jz +20"
		, "offset": 285559
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285563
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285565
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 285567
	}, {
		"instruction": "i32.add"
		, "offset": 285569
	}, {
		"instruction": "store.i8"
		, "offset": 285570
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 285571
	}, {
		"instruction": "inc 1"
		, "offset": 285573
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 285577
	}, {
		"instruction": "jmp +490"
		, "offset": 285579
	}, {
		"instruction": "load.c32 0"
		, "offset": 285583
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 285588
	}, {
		"instruction": "load.c32 45"
		, "offset": 285590
	}, {
		"instruction": "i32.ceq"
		, "offset": 285595
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 285596
	}, {
		"instruction": "load.c32 43"
		, "offset": 285598
	}, {
		"instruction": "i32.ceq"
		, "offset": 285603
	}, {
		"instruction": "b32.or"
		, "offset": 285604
	}, {
		"instruction": "jz +24"
		, "offset": 285605
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 285609
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285611
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 285613
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 285615
	}, {
		"instruction": "inc 1"
		, "offset": 285617
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285621
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 285623
	}, {
		"instruction": "i32.add"
		, "offset": 285625
	}, {
		"instruction": "load.i8"
		, "offset": 285626
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 285627
	}, {
		"instruction": "load.c32 32"
		, "offset": 285629
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 285634
	}, {
		"instruction": "load.c32 48"
		, "offset": 285636
	}, {
		"instruction": "i32.ceq"
		, "offset": 285641
	}, {
		"instruction": "jz +24"
		, "offset": 285642
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 285646
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285648
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 285650
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 285652
	}, {
		"instruction": "inc 1"
		, "offset": 285654
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285658
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 285660
	}, {
		"instruction": "i32.add"
		, "offset": 285662
	}, {
		"instruction": "load.i8"
		, "offset": 285663
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 285664
	}, {
		"instruction": "load.c32 0"
		, "offset": 285666
	}, {
		"instruction": "jmp +37"
		, "offset": 285671
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285675
	}, {
		"instruction": "load.c32 10"
		, "offset": 285677
	}, {
		"instruction": "i32.mul"
		, "offset": 285682
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 285683
	}, {
		"instruction": "i32.add"
		, "offset": 285685
	}, {
		"instruction": "inc -48"
		, "offset": 285686
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285690
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 285692
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285694
	}, {
		"instruction": "inc 1"
		, "offset": 285696
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285700
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 285702
	}, {
		"instruction": "i32.add"
		, "offset": 285704
	}, {
		"instruction": "load.i8"
		, "offset": 285705
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 285706
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 285708
	}, {
		"instruction": "load.c32 48"
		, "offset": 285710
	}, {
		"instruction": "i32.clt"
		, "offset": 285715
	}, {
		"instruction": "b32.not"
		, "offset": 285716
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 285717
	}, {
		"instruction": "load.c32 57"
		, "offset": 285719
	}, {
		"instruction": "i32.cgt"
		, "offset": 285724
	}, {
		"instruction": "b32.not"
		, "offset": 285725
	}, {
		"instruction": "b32.and"
		, "offset": 285726
	}, {
		"instruction": "jnz -52"
		, "offset": 285727
	}, {
		"instruction": "load.c32 0"
		, "offset": 285731
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 285736
	}, {
		"instruction": "load.c32 46"
		, "offset": 285738
	}, {
		"instruction": "i32.ceq"
		, "offset": 285743
	}, {
		"instruction": "jz +80"
		, "offset": 285744
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 285748
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 285750
	}, {
		"instruction": "inc 1"
		, "offset": 285752
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285756
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 285758
	}, {
		"instruction": "i32.add"
		, "offset": 285760
	}, {
		"instruction": "load.i8"
		, "offset": 285761
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 285762
	}, {
		"instruction": "jmp +37"
		, "offset": 285764
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285768
	}, {
		"instruction": "load.c32 10"
		, "offset": 285770
	}, {
		"instruction": "i32.mul"
		, "offset": 285775
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285776
	}, {
		"instruction": "i32.add"
		, "offset": 285778
	}, {
		"instruction": "inc -48"
		, "offset": 285779
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285783
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 285785
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 285787
	}, {
		"instruction": "inc 1"
		, "offset": 285789
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285793
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 285795
	}, {
		"instruction": "i32.add"
		, "offset": 285797
	}, {
		"instruction": "load.i8"
		, "offset": 285798
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 285799
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 285801
	}, {
		"instruction": "load.c32 48"
		, "offset": 285803
	}, {
		"instruction": "i32.clt"
		, "offset": 285808
	}, {
		"instruction": "b32.not"
		, "offset": 285809
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285810
	}, {
		"instruction": "load.c32 57"
		, "offset": 285812
	}, {
		"instruction": "i32.cgt"
		, "offset": 285817
	}, {
		"instruction": "b32.not"
		, "offset": 285818
	}, {
		"instruction": "b32.and"
		, "offset": 285819
	}, {
		"instruction": "jnz -52"
		, "offset": 285820
	}, {
		"instruction": "load.c32 10"
		, "offset": 285824
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285829
	}, {
		"instruction": "load.c32 98"
		, "offset": 285831
	}, {
		"instruction": "i32.ceq"
		, "offset": 285836
	}, {
		"instruction": "jz +15"
		, "offset": 285837
	}, {
		"instruction": "load.c32 2"
		, "offset": 285841
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285846
	}, {
		"instruction": "jmp +89"
		, "offset": 285848
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285852
	}, {
		"instruction": "load.c32 111"
		, "offset": 285854
	}, {
		"instruction": "i32.ceq"
		, "offset": 285859
	}, {
		"instruction": "jz +15"
		, "offset": 285860
	}, {
		"instruction": "load.c32 8"
		, "offset": 285864
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285869
	}, {
		"instruction": "jmp +66"
		, "offset": 285871
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285875
	}, {
		"instruction": "load.c32 100"
		, "offset": 285877
	}, {
		"instruction": "i32.ceq"
		, "offset": 285882
	}, {
		"instruction": "jz +15"
		, "offset": 285883
	}, {
		"instruction": "load.c32 10"
		, "offset": 285887
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285892
	}, {
		"instruction": "jmp +43"
		, "offset": 285894
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285898
	}, {
		"instruction": "load.c32 120"
		, "offset": 285900
	}, {
		"instruction": "i32.ceq"
		, "offset": 285905
	}, {
		"instruction": "jz +15"
		, "offset": 285906
	}, {
		"instruction": "load.c32 16"
		, "offset": 285910
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285915
	}, {
		"instruction": "jmp +20"
		, "offset": 285917
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 285921
	}, {
		"instruction": "load.c32 105"
		, "offset": 285923
	}, {
		"instruction": "i32.ceq"
		, "offset": 285928
	}, {
		"instruction": "jz +8"
		, "offset": 285929
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 285933
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285935
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 285937
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285939
	}, {
		"instruction": "load.c32 0"
		, "offset": 285941
	}, {
		"instruction": "i32.clt"
		, "offset": 285946
	}, {
		"instruction": "jz +20"
		, "offset": 285947
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285951
	}, {
		"instruction": "i32.neg"
		, "offset": 285953
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 285954
	}, {
		"instruction": "load.c32 45"
		, "offset": 285956
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 285961
	}, {
		"instruction": "jmp +37"
		, "offset": 285963
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 285967
	}, {
		"instruction": "load.c32 0"
		, "offset": 285969
	}, {
		"instruction": "i32.ceq"
		, "offset": 285974
	}, {
		"instruction": "jz +25"
		, "offset": 285975
	}, {
		"instruction": "load.c32 48"
		, "offset": 285979
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 285984
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 285986
	}, {
		"instruction": "i32.2bool"
		, "offset": 285988
	}, {
		"instruction": "jnz +11"
		, "offset": 285989
	}, {
		"instruction": "load.c32 1"
		, "offset": 285993
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 285998
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286000
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286002
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 286004
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 286006
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 286008
	}, {
		"instruction": "stack 4"
		, "offset": 286010
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 286014
	}, {
		"instruction": "ldsp 8"
		, "offset": 286016
	}, {
		"instruction": "dup.x1 sp(16)"
		, "offset": 286020
	}, {
		"instruction": "dup.x2 sp(19)"
		, "offset": 286022
	}, {
		"instruction": "load.ref .045854"
		, "offset": 286024
	}, {
		"instruction": "call"
		, "offset": 286029
	}, {
		"instruction": "stack -20"
		, "offset": 286030
	}, {
		"instruction": "set.x1 sp(14)"
		, "offset": 286034
	}, {
		"instruction": "stack -44"
		, "offset": 286036
	}, {
		"instruction": "jmp +29"
		, "offset": 286040
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286044
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 286046
	}, {
		"instruction": "i32.clt"
		, "offset": 286048
	}, {
		"instruction": "jz +20"
		, "offset": 286049
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286053
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 286055
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286057
	}, {
		"instruction": "i32.add"
		, "offset": 286059
	}, {
		"instruction": "store.i8"
		, "offset": 286060
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286061
	}, {
		"instruction": "inc 1"
		, "offset": 286063
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 286067
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 286069
	}, {
		"instruction": "inc 1"
		, "offset": 286071
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 286075
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 286077
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286079
	}, {
		"instruction": "i32.add"
		, "offset": 286081
	}, {
		"instruction": "load.i8"
		, "offset": 286082
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286083
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 286085
	}, {
		"instruction": "jnz -573"
		, "offset": 286087
	}, {
		"instruction": "stack -4"
		, "offset": 286091
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 286095
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 286097
	}, {
		"instruction": "i32.clt"
		, "offset": 286099
	}, {
		"instruction": "jnz +12"
		, "offset": 286100
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286104
	}, {
		"instruction": "inc -1"
		, "offset": 286106
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 286110
	}, {
		"instruction": "load.c32 0"
		, "offset": 286112
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286117
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 286119
	}, {
		"instruction": "i32.add"
		, "offset": 286121
	}, {
		"instruction": "store.i8"
		, "offset": 286122
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 286123
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 286125
	}, {
		"instruction": "stack -8"
		, "offset": 286127
	}, {
		"instruction": "ret"
		, "offset": 286131
	}, {
		"instruction": "stack -8"
		, "offset": 286132
	}, {
		"instruction": "ret"
		, "offset": 286136
	}]
}, {
	"proto": "format(output: char[], format: string, value: Date)"
	, "kind": ".ref"
	, "name": "format"
	, "type": "void"
	, "file": "stdlib.cvx"
	, "line": 1655
	, "args": [{
		"proto": "format.output"
		, "kind": ".ref"
		, "name": "output"
		, "declaredIn": "format(output: char[], format: string, value: Date)"
		, "type": "char[]"
		, "file": "stdlib.cvx"
		, "line": 1655
		, "cast": ".arr"
		, "size": 8
		, "offs": 20
		, "const": false
		, "static": false
	}, {
		"proto": "format.format"
		, "kind": ".ref"
		, "name": "format"
		, "declaredIn": "format(output: char[], format: string, value: Date)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 1655
		, "cast": ".ref"
		, "size": 4
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "format.value"
		, "kind": ".ref"
		, "name": "value"
		, "declaredIn": "format(output: char[], format: string, value: Date)"
		, "type": "Date"
		, "file": "stdlib.cvx"
		, "line": 1655
		, "cast": ".rec"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "cast": ".vid"
	, "size": 2261
	, "offs": 286275
	, "const": false
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "file": "stdlib.cvx"
		, "line": 1655
		, "stmt": [{
			"proto": "parts"
			, "kind": ".def"
			, "type": "Date.Parts"
			, "file": "stdlib.cvx"
			, "line": 1656
			, "value": "parts"
		}, {
			"proto": "strcat(output: char[], pos: int32, value: string)"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 1658
			, "value": "strcat(output: char[], pos: int32, value: string)"
		}, {
			"proto": "if (format == null)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1671
			, "test": {
				"proto": "(format == null)"
				, "kind": "=="
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1671
				, "lval": {
					"proto": "format"
					, "kind": ".ref"
					, "type": "string"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1671
					, "value": "format"
				}
				, "rval": {
					"proto": "null"
					, "kind": ".ref"
					, "type": "pointer"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1671
					, "value": "null"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1671
				, "stmt": [{
					"proto": "format := '%Y.%02m.%02d';"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1672
					, "stmt": {
						"proto": "(format := '%Y.%02m.%02d')"
						, "kind": ":="
						, "type": "string"
						, "file": "stdlib.cvx"
						, "line": 1672
						, "lval": {
							"proto": "format"
							, "kind": ".ref"
							, "type": "string"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1672
							, "value": "format"
						}
						, "rval": {
							"proto": "'%Y.%02m.%02d'"
							, "kind": ".ptr"
							, "type": "string"
							, "cast": ".ref"
							, "file": "stdlib.cvx"
							, "line": 1672
							, "value": "'%Y.%02m.%02d'"
						}
					}
				}]
			}
		}, {
			"proto": "pos"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 1675
			, "value": "pos"
		}, {
			"proto": "spos"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 1676
			, "value": "spos"
		}, {
			"proto": "for (chr; chr := format[spos]; spos := (spos + 1))"
			, "kind": "for"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1677
			, "init": {
				"proto": "chr"
				, "kind": ".def"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1677
				, "value": "chr"
			}
			, "test": {
				"proto": "(chr := format[spos])"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1677
				, "lval": {
					"proto": "chr"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1677
					, "value": "chr"
				}
				, "rval": {
					"proto": "format[spos]"
					, "kind": "[?]"
					, "type": "char"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1677
					, "lval": {
						"proto": "format"
						, "kind": ".ref"
						, "type": "string"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1677
						, "value": "format"
					}
					, "rval": {
						"proto": "spos"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i64"
						, "file": "stdlib.cvx"
						, "line": 1677
						, "value": "spos"
					}
				}
			}
			, "step": {
				"proto": "(spos := (spos + 1))"
				, "kind": ":="
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 1677
				, "lval": {
					"proto": "spos"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1677
					, "value": "spos"
				}
				, "rval": {
					"proto": "(spos + 1)"
					, "kind": "+"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1677
					, "lval": {
						"proto": "spos"
						, "kind": ".ref"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1677
						, "value": "spos"
					}
					, "rval": {
						"proto": "1"
						, "kind": ".i64"
						, "type": "int32"
						, "cast": ".i32"
						, "file": "stdlib.cvx"
						, "line": 1677
						, "value": "1"
					}
				}
			}
			, "stmt": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1677
				, "stmt": [{
					"proto": "if (chr != 37)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1678
					, "test": {
						"proto": "(chr != 37)"
						, "kind": "!="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1678
						, "lval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1678
							, "value": "chr"
						}
						, "rval": {
							"proto": "37"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1678
							, "value": "37"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1678
						, "stmt": [{
							"proto": "if (pos < output.length)"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1679
							, "test": {
								"proto": "(pos < output.length)"
								, "kind": "<"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1679
								, "lval": {
									"proto": "pos"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1679
									, "value": "pos"
								}
								, "rval": {
									"proto": "output.length"
									, "kind": "."
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1679
									, "lval": {
										"proto": "output"
										, "kind": ".ref"
										, "type": "char[]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 1679
										, "value": "output"
									}
									, "rval": {
										"proto": "length"
										, "kind": ".ref"
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1679
										, "value": "length"
									}
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1679
								, "stmt": [{
									"proto": "output[pos] := chr;"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1680
									, "stmt": {
										"proto": "(output[pos] := chr)"
										, "kind": ":="
										, "type": "char"
										, "file": "stdlib.cvx"
										, "line": 1680
										, "lval": {
											"proto": "output[pos]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1680
											, "lval": {
												"proto": "output"
												, "kind": ".ref"
												, "type": "char[]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1680
												, "value": "output"
											}
											, "rval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1680
												, "value": "pos"
											}
										}
										, "rval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1680
											, "value": "chr"
										}
									}
								}, {
									"proto": "pos := (pos + 1);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1681
									, "stmt": {
										"proto": "(pos := (pos + 1))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1681
										, "lval": {
											"proto": "pos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1681
											, "value": "pos"
										}
										, "rval": {
											"proto": "(pos + 1)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1681
											, "lval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1681
												, "value": "pos"
											}
											, "rval": {
												"proto": "1"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1681
												, "value": "1"
											}
										}
									}
								}]
							}
						}, {
							"proto": "continue;"
							, "kind": "continue"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1683
						}]
					}
				}, {
					"proto": "chr := format[spos := (spos + 1)];"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1687
					, "stmt": {
						"proto": "(chr := format[spos := (spos + 1)])"
						, "kind": ":="
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1687
						, "lval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1687
							, "value": "chr"
						}
						, "rval": {
							"proto": "format[spos := (spos + 1)]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1687
							, "lval": {
								"proto": "format"
								, "kind": ".ref"
								, "type": "string"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1687
								, "value": "format"
							}
							, "rval": {
								"proto": "(spos := (spos + 1))"
								, "kind": ":="
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1687
								, "lval": {
									"proto": "spos"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1687
									, "value": "spos"
								}
								, "rval": {
									"proto": "(spos + 1)"
									, "kind": "+"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1687
									, "lval": {
										"proto": "spos"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1687
										, "value": "spos"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1687
										, "value": "1"
									}
								}
							}
						}
					}
				}, {
					"proto": "sgnChr"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1688
					, "value": "sgnChr"
				}, {
					"proto": "if ((chr == 45) || (chr == 43))"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1689
					, "test": {
						"proto": "((chr == 45) || (chr == 43))"
						, "kind": "||"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1689
						, "lval": {
							"proto": "(chr == 45)"
							, "kind": "=="
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1689
							, "lval": {
								"proto": "chr"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1689
								, "value": "chr"
							}
							, "rval": {
								"proto": "45"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1689
								, "value": "45"
							}
						}
						, "rval": {
							"proto": "(chr == 43)"
							, "kind": "=="
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1689
							, "lval": {
								"proto": "chr"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1689
								, "value": "chr"
							}
							, "rval": {
								"proto": "43"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1689
								, "value": "43"
							}
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1689
						, "stmt": [{
							"proto": "sgnChr := chr;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1690
							, "stmt": {
								"proto": "(sgnChr := chr)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1690
								, "lval": {
									"proto": "sgnChr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1690
									, "value": "sgnChr"
								}
								, "rval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1690
									, "value": "chr"
								}
							}
						}, {
							"proto": "chr := format[spos := (spos + 1)];"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1691
							, "stmt": {
								"proto": "(chr := format[spos := (spos + 1)])"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1691
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1691
									, "value": "chr"
								}
								, "rval": {
									"proto": "format[spos := (spos + 1)]"
									, "kind": "[?]"
									, "type": "char"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1691
									, "lval": {
										"proto": "format"
										, "kind": ".ref"
										, "type": "string"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 1691
										, "value": "format"
									}
									, "rval": {
										"proto": "(spos := (spos + 1))"
										, "kind": ":="
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 1691
										, "lval": {
											"proto": "spos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1691
											, "value": "spos"
										}
										, "rval": {
											"proto": "(spos + 1)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1691
											, "lval": {
												"proto": "spos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1691
												, "value": "spos"
											}
											, "rval": {
												"proto": "1"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1691
												, "value": "1"
											}
										}
									}
								}
							}
						}]
					}
				}, {
					"proto": "padChr"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1694
					, "value": "padChr"
				}, {
					"proto": "if (chr == 48)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1695
					, "test": {
						"proto": "(chr == 48)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1695
						, "lval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1695
							, "value": "chr"
						}
						, "rval": {
							"proto": "48"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1695
							, "value": "48"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1695
						, "stmt": [{
							"proto": "padChr := chr;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1696
							, "stmt": {
								"proto": "(padChr := chr)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1696
								, "lval": {
									"proto": "padChr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1696
									, "value": "padChr"
								}
								, "rval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1696
									, "value": "chr"
								}
							}
						}, {
							"proto": "chr := format[spos := (spos + 1)];"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1697
							, "stmt": {
								"proto": "(chr := format[spos := (spos + 1)])"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1697
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1697
									, "value": "chr"
								}
								, "rval": {
									"proto": "format[spos := (spos + 1)]"
									, "kind": "[?]"
									, "type": "char"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1697
									, "lval": {
										"proto": "format"
										, "kind": ".ref"
										, "type": "string"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 1697
										, "value": "format"
									}
									, "rval": {
										"proto": "(spos := (spos + 1))"
										, "kind": ":="
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 1697
										, "lval": {
											"proto": "spos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1697
											, "value": "spos"
										}
										, "rval": {
											"proto": "(spos + 1)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1697
											, "lval": {
												"proto": "spos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1697
												, "value": "spos"
											}
											, "rval": {
												"proto": "1"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1697
												, "value": "1"
											}
										}
									}
								}
							}
						}]
					}
				}, {
					"proto": "padLen"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1700
					, "value": "padLen"
				}, {
					"proto": "if ((chr >= 48) && (chr <= 57))"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1701
					, "test": {
						"proto": "((chr >= 48) && (chr <= 57))"
						, "kind": "&&"
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1701
						, "lval": {
							"proto": "(chr >= 48)"
							, "kind": ">="
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1701
							, "lval": {
								"proto": "chr"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1701
								, "value": "chr"
							}
							, "rval": {
								"proto": "48"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1701
								, "value": "48"
							}
						}
						, "rval": {
							"proto": "(chr <= 57)"
							, "kind": "<="
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1701
							, "lval": {
								"proto": "chr"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1701
								, "value": "chr"
							}
							, "rval": {
								"proto": "57"
								, "kind": ".i64"
								, "type": "int32"
								, "cast": ".i32"
								, "file": "stdlib.cvx"
								, "line": 1701
								, "value": "57"
							}
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1701
						, "stmt": [{
							"proto": "padLen := 0;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1702
							, "stmt": {
								"proto": "(padLen := 0)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1702
								, "lval": {
									"proto": "padLen"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1702
									, "value": "padLen"
								}
								, "rval": {
									"proto": "0"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1702
									, "value": "0"
								}
							}
						}, {
							"proto": "for ( ; (chr >= 48) && (chr <= 57); )"
							, "kind": "for"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1703
							, "test": {
								"proto": "((chr >= 48) && (chr <= 57))"
								, "kind": "&&"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1703
								, "lval": {
									"proto": "(chr >= 48)"
									, "kind": ">="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1703
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1703
										, "value": "chr"
									}
									, "rval": {
										"proto": "48"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1703
										, "value": "48"
									}
								}
								, "rval": {
									"proto": "(chr <= 57)"
									, "kind": "<="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1703
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1703
										, "value": "chr"
									}
									, "rval": {
										"proto": "57"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1703
										, "value": "57"
									}
								}
							}
							, "stmt": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1703
								, "stmt": [{
									"proto": "padLen := ((padLen * 10) + chr - 48);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1704
									, "stmt": {
										"proto": "(padLen := ((padLen * 10) + chr - 48))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1704
										, "lval": {
											"proto": "padLen"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1704
											, "value": "padLen"
										}
										, "rval": {
											"proto": "((padLen * 10) + chr - 48)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1704
											, "lval": {
												"proto": "((padLen * 10) + chr)"
												, "kind": "+"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1704
												, "lval": {
													"proto": "(padLen * 10)"
													, "kind": "*"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1704
													, "lval": {
														"proto": "padLen"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1704
														, "value": "padLen"
													}
													, "rval": {
														"proto": "10"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1704
														, "value": "10"
													}
												}
												, "rval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1704
													, "value": "chr"
												}
											}
											, "rval": {
												"proto": "48"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1704
												, "value": "48"
											}
										}
									}
								}, {
									"proto": "chr := format[spos := (spos + 1)];"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1705
									, "stmt": {
										"proto": "(chr := format[spos := (spos + 1)])"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1705
										, "lval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1705
											, "value": "chr"
										}
										, "rval": {
											"proto": "format[spos := (spos + 1)]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1705
											, "lval": {
												"proto": "format"
												, "kind": ".ref"
												, "type": "string"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1705
												, "value": "format"
											}
											, "rval": {
												"proto": "(spos := (spos + 1))"
												, "kind": ":="
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1705
												, "lval": {
													"proto": "spos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1705
													, "value": "spos"
												}
												, "rval": {
													"proto": "(spos + 1)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1705
													, "lval": {
														"proto": "spos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1705
														, "value": "spos"
													}
													, "rval": {
														"proto": "1"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1705
														, "value": "1"
													}
												}
											}
										}
									}
								}]
							}
						}]
					}
				}, {
					"proto": "precision"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1709
					, "value": "precision"
				}, {
					"proto": "if (chr == 46)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1710
					, "test": {
						"proto": "(chr == 46)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1710
						, "lval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1710
							, "value": "chr"
						}
						, "rval": {
							"proto": "46"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1710
							, "value": "46"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1710
						, "stmt": [{
							"proto": "precision := 0;"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1711
							, "stmt": {
								"proto": "(precision := 0)"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1711
								, "lval": {
									"proto": "precision"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1711
									, "value": "precision"
								}
								, "rval": {
									"proto": "0"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1711
									, "value": "0"
								}
							}
						}, {
							"proto": "chr := format[spos := (spos + 1)];"
							, "kind": ";"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1712
							, "stmt": {
								"proto": "(chr := format[spos := (spos + 1)])"
								, "kind": ":="
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1712
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1712
									, "value": "chr"
								}
								, "rval": {
									"proto": "format[spos := (spos + 1)]"
									, "kind": "[?]"
									, "type": "char"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1712
									, "lval": {
										"proto": "format"
										, "kind": ".ref"
										, "type": "string"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 1712
										, "value": "format"
									}
									, "rval": {
										"proto": "(spos := (spos + 1))"
										, "kind": ":="
										, "type": "int32"
										, "cast": ".i64"
										, "file": "stdlib.cvx"
										, "line": 1712
										, "lval": {
											"proto": "spos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1712
											, "value": "spos"
										}
										, "rval": {
											"proto": "(spos + 1)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1712
											, "lval": {
												"proto": "spos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1712
												, "value": "spos"
											}
											, "rval": {
												"proto": "1"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1712
												, "value": "1"
											}
										}
									}
								}
							}
						}, {
							"proto": "for ( ; (chr >= 48) && (chr <= 57); )"
							, "kind": "for"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1713
							, "test": {
								"proto": "((chr >= 48) && (chr <= 57))"
								, "kind": "&&"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1713
								, "lval": {
									"proto": "(chr >= 48)"
									, "kind": ">="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1713
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1713
										, "value": "chr"
									}
									, "rval": {
										"proto": "48"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1713
										, "value": "48"
									}
								}
								, "rval": {
									"proto": "(chr <= 57)"
									, "kind": "<="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1713
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1713
										, "value": "chr"
									}
									, "rval": {
										"proto": "57"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1713
										, "value": "57"
									}
								}
							}
							, "stmt": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1713
								, "stmt": [{
									"proto": "precision := ((precision * 10) + chr - 48);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1714
									, "stmt": {
										"proto": "(precision := ((precision * 10) + chr - 48))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1714
										, "lval": {
											"proto": "precision"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1714
											, "value": "precision"
										}
										, "rval": {
											"proto": "((precision * 10) + chr - 48)"
											, "kind": "-"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1714
											, "lval": {
												"proto": "((precision * 10) + chr)"
												, "kind": "+"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1714
												, "lval": {
													"proto": "(precision * 10)"
													, "kind": "*"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1714
													, "lval": {
														"proto": "precision"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1714
														, "value": "precision"
													}
													, "rval": {
														"proto": "10"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1714
														, "value": "10"
													}
												}
												, "rval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1714
													, "value": "chr"
												}
											}
											, "rval": {
												"proto": "48"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1714
												, "value": "48"
											}
										}
									}
								}, {
									"proto": "chr := format[spos := (spos + 1)];"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1715
									, "stmt": {
										"proto": "(chr := format[spos := (spos + 1)])"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1715
										, "lval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1715
											, "value": "chr"
										}
										, "rval": {
											"proto": "format[spos := (spos + 1)]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1715
											, "lval": {
												"proto": "format"
												, "kind": ".ref"
												, "type": "string"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1715
												, "value": "format"
											}
											, "rval": {
												"proto": "(spos := (spos + 1))"
												, "kind": ":="
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1715
												, "lval": {
													"proto": "spos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1715
													, "value": "spos"
												}
												, "rval": {
													"proto": "(spos + 1)"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1715
													, "lval": {
														"proto": "spos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1715
														, "value": "spos"
													}
													, "rval": {
														"proto": "1"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1715
														, "value": "1"
													}
												}
											}
										}
									}
								}]
							}
						}]
					}
				}, {
					"proto": "if (chr == 37)"
					, "kind": "if"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1839
					, "test": {
						"proto": "(chr == 37)"
						, "kind": "=="
						, "type": "bool"
						, "cast": ".bit"
						, "file": "stdlib.cvx"
						, "line": 1839
						, "lval": {
							"proto": "chr"
							, "kind": ".ref"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1839
							, "value": "chr"
						}
						, "rval": {
							"proto": "37"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1839
							, "value": "37"
						}
					}
					, "then": {
						"proto": "{...}"
						, "kind": "{"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1839
						, "stmt": [{
							"proto": "if (pos < output.length)"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1840
							, "test": {
								"proto": "(pos < output.length)"
								, "kind": "<"
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1840
								, "lval": {
									"proto": "pos"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1840
									, "value": "pos"
								}
								, "rval": {
									"proto": "output.length"
									, "kind": "."
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1840
									, "lval": {
										"proto": "output"
										, "kind": ".ref"
										, "type": "char[]"
										, "cast": ".ref"
										, "file": "stdlib.cvx"
										, "line": 1840
										, "value": "output"
									}
									, "rval": {
										"proto": "length"
										, "kind": ".ref"
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1840
										, "value": "length"
									}
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1840
								, "stmt": [{
									"proto": "output[pos] := chr;"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1841
									, "stmt": {
										"proto": "(output[pos] := chr)"
										, "kind": ":="
										, "type": "char"
										, "file": "stdlib.cvx"
										, "line": 1841
										, "lval": {
											"proto": "output[pos]"
											, "kind": "[?]"
											, "type": "char"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1841
											, "lval": {
												"proto": "output"
												, "kind": ".ref"
												, "type": "char[]"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1841
												, "value": "output"
											}
											, "rval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i64"
												, "file": "stdlib.cvx"
												, "line": 1841
												, "value": "pos"
											}
										}
										, "rval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1841
											, "value": "chr"
										}
									}
								}, {
									"proto": "pos := (pos + 1);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1842
									, "stmt": {
										"proto": "(pos := (pos + 1))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1842
										, "lval": {
											"proto": "pos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1842
											, "value": "pos"
										}
										, "rval": {
											"proto": "(pos + 1)"
											, "kind": "+"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1842
											, "lval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1842
												, "value": "pos"
											}
											, "rval": {
												"proto": "1"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1842
												, "value": "1"
											}
										}
									}
								}]
							}
						}]
					}
					, "else": {
						"proto": "if ((chr == 97) || (chr == 65))"
						, "kind": "if"
						, "type": "void"
						, "file": "stdlib.cvx"
						, "line": 1865
						, "test": {
							"proto": "((chr == 97) || (chr == 65))"
							, "kind": "||"
							, "type": "bool"
							, "cast": ".bit"
							, "file": "stdlib.cvx"
							, "line": 1865
							, "lval": {
								"proto": "(chr == 97)"
								, "kind": "=="
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1865
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1865
									, "value": "chr"
								}
								, "rval": {
									"proto": "97"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1865
									, "value": "97"
								}
							}
							, "rval": {
								"proto": "(chr == 65)"
								, "kind": "=="
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1865
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1865
									, "value": "chr"
								}
								, "rval": {
									"proto": "65"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1865
									, "value": "65"
								}
							}
						}
						, "then": {
							"proto": "{...}"
							, "kind": "{"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1865
							, "stmt": [{
								"proto": "dayOfWeek"
								, "kind": ".def"
								, "type": "int32"
								, "file": "stdlib.cvx"
								, "line": 1875
								, "value": "dayOfWeek"
							}, {
								"proto": "if (dayOfWeek == 1)"
								, "kind": "if"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1876
								, "test": {
									"proto": "(dayOfWeek == 1)"
									, "kind": "=="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1876
									, "lval": {
										"proto": "dayOfWeek"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1876
										, "value": "dayOfWeek"
									}
									, "rval": {
										"proto": "1"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1876
										, "value": "1"
									}
								}
								, "then": {
									"proto": "{...}"
									, "kind": "{"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1876
									, "stmt": [{
										"proto": "pos := (pos + strcat(output, pos, chr == 97 ? 'Mon' : 'Monday'));"
										, "kind": ";"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1877
										, "stmt": {
											"proto": "(pos := (pos + strcat(output, pos, chr == 97 ? 'Mon' : 'Monday')))"
											, "kind": ":="
											, "type": "int32"
											, "file": "stdlib.cvx"
											, "line": 1877
											, "lval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1877
												, "value": "pos"
											}
											, "rval": {
												"proto": "(pos + strcat(output, pos, chr == 97 ? 'Mon' : 'Monday'))"
												, "kind": "+"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1877
												, "lval": {
													"proto": "pos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1877
													, "value": "pos"
												}
												, "rval": {
													"proto": "strcat(output, pos, chr == 97 ? 'Mon' : 'Monday')"
													, "kind": "(?)"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1877
													, "args": [{
														"proto": "chr == 97 ? 'Mon' : 'Monday'"
														, "kind": "?:"
														, "type": "string"
														, "cast": ".ref"
														, "file": "stdlib.cvx"
														, "line": 1877
														, "test": {
															"proto": "(chr == 97)"
															, "kind": "=="
															, "type": "bool"
															, "cast": ".bit"
															, "file": "stdlib.cvx"
															, "line": 1877
															, "lval": {
																"proto": "chr"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1877
																, "value": "chr"
															}
															, "rval": {
																"proto": "97"
																, "kind": ".i64"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1877
																, "value": "97"
															}
														}
														, "lval": {
															"proto": "'Mon'"
															, "kind": ".ptr"
															, "type": "string"
															, "cast": ".ref"
															, "file": "stdlib.cvx"
															, "line": 1877
															, "value": "'Mon'"
														}
														, "rval": {
															"proto": "'Monday'"
															, "kind": ".ptr"
															, "type": "string"
															, "cast": ".ref"
															, "file": "stdlib.cvx"
															, "line": 1877
															, "value": "'Monday'"
														}
													}, {
														"proto": "pos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1877
														, "value": "pos"
													}, {
														"proto": "output"
														, "kind": ".ref"
														, "type": "char[]"
														, "cast": ".arr"
														, "file": "stdlib.cvx"
														, "line": 1877
														, "value": "output"
													}]
												}
											}
										}
									}]
								}
								, "else": {
									"proto": "if (dayOfWeek == 2)"
									, "kind": "if"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1879
									, "test": {
										"proto": "(dayOfWeek == 2)"
										, "kind": "=="
										, "type": "bool"
										, "cast": ".bit"
										, "file": "stdlib.cvx"
										, "line": 1879
										, "lval": {
											"proto": "dayOfWeek"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1879
											, "value": "dayOfWeek"
										}
										, "rval": {
											"proto": "2"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1879
											, "value": "2"
										}
									}
									, "then": {
										"proto": "{...}"
										, "kind": "{"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1879
										, "stmt": [{
											"proto": "pos := (pos + strcat(output, pos, chr == 97 ? 'Tue' : 'Tuesday'));"
											, "kind": ";"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1880
											, "stmt": {
												"proto": "(pos := (pos + strcat(output, pos, chr == 97 ? 'Tue' : 'Tuesday')))"
												, "kind": ":="
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1880
												, "lval": {
													"proto": "pos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1880
													, "value": "pos"
												}
												, "rval": {
													"proto": "(pos + strcat(output, pos, chr == 97 ? 'Tue' : 'Tuesday'))"
													, "kind": "+"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1880
													, "lval": {
														"proto": "pos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1880
														, "value": "pos"
													}
													, "rval": {
														"proto": "strcat(output, pos, chr == 97 ? 'Tue' : 'Tuesday')"
														, "kind": "(?)"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1880
														, "args": [{
															"proto": "chr == 97 ? 'Tue' : 'Tuesday'"
															, "kind": "?:"
															, "type": "string"
															, "cast": ".ref"
															, "file": "stdlib.cvx"
															, "line": 1880
															, "test": {
																"proto": "(chr == 97)"
																, "kind": "=="
																, "type": "bool"
																, "cast": ".bit"
																, "file": "stdlib.cvx"
																, "line": 1880
																, "lval": {
																	"proto": "chr"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1880
																	, "value": "chr"
																}
																, "rval": {
																	"proto": "97"
																	, "kind": ".i64"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1880
																	, "value": "97"
																}
															}
															, "lval": {
																"proto": "'Tue'"
																, "kind": ".ptr"
																, "type": "string"
																, "cast": ".ref"
																, "file": "stdlib.cvx"
																, "line": 1880
																, "value": "'Tue'"
															}
															, "rval": {
																"proto": "'Tuesday'"
																, "kind": ".ptr"
																, "type": "string"
																, "cast": ".ref"
																, "file": "stdlib.cvx"
																, "line": 1880
																, "value": "'Tuesday'"
															}
														}, {
															"proto": "pos"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1880
															, "value": "pos"
														}, {
															"proto": "output"
															, "kind": ".ref"
															, "type": "char[]"
															, "cast": ".arr"
															, "file": "stdlib.cvx"
															, "line": 1880
															, "value": "output"
														}]
													}
												}
											}
										}]
									}
									, "else": {
										"proto": "if (dayOfWeek == 3)"
										, "kind": "if"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1882
										, "test": {
											"proto": "(dayOfWeek == 3)"
											, "kind": "=="
											, "type": "bool"
											, "cast": ".bit"
											, "file": "stdlib.cvx"
											, "line": 1882
											, "lval": {
												"proto": "dayOfWeek"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1882
												, "value": "dayOfWeek"
											}
											, "rval": {
												"proto": "3"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1882
												, "value": "3"
											}
										}
										, "then": {
											"proto": "{...}"
											, "kind": "{"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1882
											, "stmt": [{
												"proto": "pos := (pos + strcat(output, pos, chr == 97 ? 'Wed' : 'Wednesday'));"
												, "kind": ";"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1883
												, "stmt": {
													"proto": "(pos := (pos + strcat(output, pos, chr == 97 ? 'Wed' : 'Wednesday')))"
													, "kind": ":="
													, "type": "int32"
													, "file": "stdlib.cvx"
													, "line": 1883
													, "lval": {
														"proto": "pos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1883
														, "value": "pos"
													}
													, "rval": {
														"proto": "(pos + strcat(output, pos, chr == 97 ? 'Wed' : 'Wednesday'))"
														, "kind": "+"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1883
														, "lval": {
															"proto": "pos"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1883
															, "value": "pos"
														}
														, "rval": {
															"proto": "strcat(output, pos, chr == 97 ? 'Wed' : 'Wednesday')"
															, "kind": "(?)"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1883
															, "args": [{
																"proto": "chr == 97 ? 'Wed' : 'Wednesday'"
																, "kind": "?:"
																, "type": "string"
																, "cast": ".ref"
																, "file": "stdlib.cvx"
																, "line": 1883
																, "test": {
																	"proto": "(chr == 97)"
																	, "kind": "=="
																	, "type": "bool"
																	, "cast": ".bit"
																	, "file": "stdlib.cvx"
																	, "line": 1883
																	, "lval": {
																		"proto": "chr"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1883
																		, "value": "chr"
																	}
																	, "rval": {
																		"proto": "97"
																		, "kind": ".i64"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1883
																		, "value": "97"
																	}
																}
																, "lval": {
																	"proto": "'Wed'"
																	, "kind": ".ptr"
																	, "type": "string"
																	, "cast": ".ref"
																	, "file": "stdlib.cvx"
																	, "line": 1883
																	, "value": "'Wed'"
																}
																, "rval": {
																	"proto": "'Wednesday'"
																	, "kind": ".ptr"
																	, "type": "string"
																	, "cast": ".ref"
																	, "file": "stdlib.cvx"
																	, "line": 1883
																	, "value": "'Wednesday'"
																}
															}, {
																"proto": "pos"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1883
																, "value": "pos"
															}, {
																"proto": "output"
																, "kind": ".ref"
																, "type": "char[]"
																, "cast": ".arr"
																, "file": "stdlib.cvx"
																, "line": 1883
																, "value": "output"
															}]
														}
													}
												}
											}]
										}
										, "else": {
											"proto": "if (dayOfWeek == 4)"
											, "kind": "if"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1885
											, "test": {
												"proto": "(dayOfWeek == 4)"
												, "kind": "=="
												, "type": "bool"
												, "cast": ".bit"
												, "file": "stdlib.cvx"
												, "line": 1885
												, "lval": {
													"proto": "dayOfWeek"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1885
													, "value": "dayOfWeek"
												}
												, "rval": {
													"proto": "4"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1885
													, "value": "4"
												}
											}
											, "then": {
												"proto": "{...}"
												, "kind": "{"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1885
												, "stmt": [{
													"proto": "pos := (pos + strcat(output, pos, chr == 97 ? 'Thu' : 'Thursday'));"
													, "kind": ";"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1886
													, "stmt": {
														"proto": "(pos := (pos + strcat(output, pos, chr == 97 ? 'Thu' : 'Thursday')))"
														, "kind": ":="
														, "type": "int32"
														, "file": "stdlib.cvx"
														, "line": 1886
														, "lval": {
															"proto": "pos"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1886
															, "value": "pos"
														}
														, "rval": {
															"proto": "(pos + strcat(output, pos, chr == 97 ? 'Thu' : 'Thursday'))"
															, "kind": "+"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1886
															, "lval": {
																"proto": "pos"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1886
																, "value": "pos"
															}
															, "rval": {
																"proto": "strcat(output, pos, chr == 97 ? 'Thu' : 'Thursday')"
																, "kind": "(?)"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1886
																, "args": [{
																	"proto": "chr == 97 ? 'Thu' : 'Thursday'"
																	, "kind": "?:"
																	, "type": "string"
																	, "cast": ".ref"
																	, "file": "stdlib.cvx"
																	, "line": 1886
																	, "test": {
																		"proto": "(chr == 97)"
																		, "kind": "=="
																		, "type": "bool"
																		, "cast": ".bit"
																		, "file": "stdlib.cvx"
																		, "line": 1886
																		, "lval": {
																			"proto": "chr"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1886
																			, "value": "chr"
																		}
																		, "rval": {
																			"proto": "97"
																			, "kind": ".i64"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1886
																			, "value": "97"
																		}
																	}
																	, "lval": {
																		"proto": "'Thu'"
																		, "kind": ".ptr"
																		, "type": "string"
																		, "cast": ".ref"
																		, "file": "stdlib.cvx"
																		, "line": 1886
																		, "value": "'Thu'"
																	}
																	, "rval": {
																		"proto": "'Thursday'"
																		, "kind": ".ptr"
																		, "type": "string"
																		, "cast": ".ref"
																		, "file": "stdlib.cvx"
																		, "line": 1886
																		, "value": "'Thursday'"
																	}
																}, {
																	"proto": "pos"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1886
																	, "value": "pos"
																}, {
																	"proto": "output"
																	, "kind": ".ref"
																	, "type": "char[]"
																	, "cast": ".arr"
																	, "file": "stdlib.cvx"
																	, "line": 1886
																	, "value": "output"
																}]
															}
														}
													}
												}]
											}
											, "else": {
												"proto": "if (dayOfWeek == 5)"
												, "kind": "if"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1888
												, "test": {
													"proto": "(dayOfWeek == 5)"
													, "kind": "=="
													, "type": "bool"
													, "cast": ".bit"
													, "file": "stdlib.cvx"
													, "line": 1888
													, "lval": {
														"proto": "dayOfWeek"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1888
														, "value": "dayOfWeek"
													}
													, "rval": {
														"proto": "5"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1888
														, "value": "5"
													}
												}
												, "then": {
													"proto": "{...}"
													, "kind": "{"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1888
													, "stmt": [{
														"proto": "pos := (pos + strcat(output, pos, chr == 97 ? 'Fri' : 'Friday'));"
														, "kind": ";"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1889
														, "stmt": {
															"proto": "(pos := (pos + strcat(output, pos, chr == 97 ? 'Fri' : 'Friday')))"
															, "kind": ":="
															, "type": "int32"
															, "file": "stdlib.cvx"
															, "line": 1889
															, "lval": {
																"proto": "pos"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1889
																, "value": "pos"
															}
															, "rval": {
																"proto": "(pos + strcat(output, pos, chr == 97 ? 'Fri' : 'Friday'))"
																, "kind": "+"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1889
																, "lval": {
																	"proto": "pos"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1889
																	, "value": "pos"
																}
																, "rval": {
																	"proto": "strcat(output, pos, chr == 97 ? 'Fri' : 'Friday')"
																	, "kind": "(?)"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1889
																	, "args": [{
																		"proto": "chr == 97 ? 'Fri' : 'Friday'"
																		, "kind": "?:"
																		, "type": "string"
																		, "cast": ".ref"
																		, "file": "stdlib.cvx"
																		, "line": 1889
																		, "test": {
																			"proto": "(chr == 97)"
																			, "kind": "=="
																			, "type": "bool"
																			, "cast": ".bit"
																			, "file": "stdlib.cvx"
																			, "line": 1889
																			, "lval": {
																				"proto": "chr"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1889
																				, "value": "chr"
																			}
																			, "rval": {
																				"proto": "97"
																				, "kind": ".i64"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1889
																				, "value": "97"
																			}
																		}
																		, "lval": {
																			"proto": "'Fri'"
																			, "kind": ".ptr"
																			, "type": "string"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1889
																			, "value": "'Fri'"
																		}
																		, "rval": {
																			"proto": "'Friday'"
																			, "kind": ".ptr"
																			, "type": "string"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1889
																			, "value": "'Friday'"
																		}
																	}, {
																		"proto": "pos"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1889
																		, "value": "pos"
																	}, {
																		"proto": "output"
																		, "kind": ".ref"
																		, "type": "char[]"
																		, "cast": ".arr"
																		, "file": "stdlib.cvx"
																		, "line": 1889
																		, "value": "output"
																	}]
																}
															}
														}
													}]
												}
												, "else": {
													"proto": "if (dayOfWeek == 6)"
													, "kind": "if"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1891
													, "test": {
														"proto": "(dayOfWeek == 6)"
														, "kind": "=="
														, "type": "bool"
														, "cast": ".bit"
														, "file": "stdlib.cvx"
														, "line": 1891
														, "lval": {
															"proto": "dayOfWeek"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1891
															, "value": "dayOfWeek"
														}
														, "rval": {
															"proto": "6"
															, "kind": ".i64"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1891
															, "value": "6"
														}
													}
													, "then": {
														"proto": "{...}"
														, "kind": "{"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1891
														, "stmt": [{
															"proto": "pos := (pos + strcat(output, pos, chr == 97 ? 'Sat' : 'Saturday'));"
															, "kind": ";"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1892
															, "stmt": {
																"proto": "(pos := (pos + strcat(output, pos, chr == 97 ? 'Sat' : 'Saturday')))"
																, "kind": ":="
																, "type": "int32"
																, "file": "stdlib.cvx"
																, "line": 1892
																, "lval": {
																	"proto": "pos"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1892
																	, "value": "pos"
																}
																, "rval": {
																	"proto": "(pos + strcat(output, pos, chr == 97 ? 'Sat' : 'Saturday'))"
																	, "kind": "+"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1892
																	, "lval": {
																		"proto": "pos"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1892
																		, "value": "pos"
																	}
																	, "rval": {
																		"proto": "strcat(output, pos, chr == 97 ? 'Sat' : 'Saturday')"
																		, "kind": "(?)"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1892
																		, "args": [{
																			"proto": "chr == 97 ? 'Sat' : 'Saturday'"
																			, "kind": "?:"
																			, "type": "string"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1892
																			, "test": {
																				"proto": "(chr == 97)"
																				, "kind": "=="
																				, "type": "bool"
																				, "cast": ".bit"
																				, "file": "stdlib.cvx"
																				, "line": 1892
																				, "lval": {
																					"proto": "chr"
																					, "kind": ".ref"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1892
																					, "value": "chr"
																				}
																				, "rval": {
																					"proto": "97"
																					, "kind": ".i64"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1892
																					, "value": "97"
																				}
																			}
																			, "lval": {
																				"proto": "'Sat'"
																				, "kind": ".ptr"
																				, "type": "string"
																				, "cast": ".ref"
																				, "file": "stdlib.cvx"
																				, "line": 1892
																				, "value": "'Sat'"
																			}
																			, "rval": {
																				"proto": "'Saturday'"
																				, "kind": ".ptr"
																				, "type": "string"
																				, "cast": ".ref"
																				, "file": "stdlib.cvx"
																				, "line": 1892
																				, "value": "'Saturday'"
																			}
																		}, {
																			"proto": "pos"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1892
																			, "value": "pos"
																		}, {
																			"proto": "output"
																			, "kind": ".ref"
																			, "type": "char[]"
																			, "cast": ".arr"
																			, "file": "stdlib.cvx"
																			, "line": 1892
																			, "value": "output"
																		}]
																	}
																}
															}
														}]
													}
													, "else": {
														"proto": "if (dayOfWeek == 7)"
														, "kind": "if"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1894
														, "test": {
															"proto": "(dayOfWeek == 7)"
															, "kind": "=="
															, "type": "bool"
															, "cast": ".bit"
															, "file": "stdlib.cvx"
															, "line": 1894
															, "lval": {
																"proto": "dayOfWeek"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1894
																, "value": "dayOfWeek"
															}
															, "rval": {
																"proto": "7"
																, "kind": ".i64"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1894
																, "value": "7"
															}
														}
														, "then": {
															"proto": "{...}"
															, "kind": "{"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1894
															, "stmt": [{
																"proto": "pos := (pos + strcat(output, pos, chr == 97 ? 'Sun' : 'Sunday'));"
																, "kind": ";"
																, "type": "void"
																, "file": "stdlib.cvx"
																, "line": 1895
																, "stmt": {
																	"proto": "(pos := (pos + strcat(output, pos, chr == 97 ? 'Sun' : 'Sunday')))"
																	, "kind": ":="
																	, "type": "int32"
																	, "file": "stdlib.cvx"
																	, "line": 1895
																	, "lval": {
																		"proto": "pos"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1895
																		, "value": "pos"
																	}
																	, "rval": {
																		"proto": "(pos + strcat(output, pos, chr == 97 ? 'Sun' : 'Sunday'))"
																		, "kind": "+"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1895
																		, "lval": {
																			"proto": "pos"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1895
																			, "value": "pos"
																		}
																		, "rval": {
																			"proto": "strcat(output, pos, chr == 97 ? 'Sun' : 'Sunday')"
																			, "kind": "(?)"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1895
																			, "args": [{
																				"proto": "chr == 97 ? 'Sun' : 'Sunday'"
																				, "kind": "?:"
																				, "type": "string"
																				, "cast": ".ref"
																				, "file": "stdlib.cvx"
																				, "line": 1895
																				, "test": {
																					"proto": "(chr == 97)"
																					, "kind": "=="
																					, "type": "bool"
																					, "cast": ".bit"
																					, "file": "stdlib.cvx"
																					, "line": 1895
																					, "lval": {
																						"proto": "chr"
																						, "kind": ".ref"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1895
																						, "value": "chr"
																					}
																					, "rval": {
																						"proto": "97"
																						, "kind": ".i64"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1895
																						, "value": "97"
																					}
																				}
																				, "lval": {
																					"proto": "'Sun'"
																					, "kind": ".ptr"
																					, "type": "string"
																					, "cast": ".ref"
																					, "file": "stdlib.cvx"
																					, "line": 1895
																					, "value": "'Sun'"
																				}
																				, "rval": {
																					"proto": "'Sunday'"
																					, "kind": ".ptr"
																					, "type": "string"
																					, "cast": ".ref"
																					, "file": "stdlib.cvx"
																					, "line": 1895
																					, "value": "'Sunday'"
																				}
																			}, {
																				"proto": "pos"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1895
																				, "value": "pos"
																			}, {
																				"proto": "output"
																				, "kind": ".ref"
																				, "type": "char[]"
																				, "cast": ".arr"
																				, "file": "stdlib.cvx"
																				, "line": 1895
																				, "value": "output"
																			}]
																		}
																	}
																}
															}]
														}
													}
												}
											}
										}
									}
								}
							}]
						}
						, "else": {
							"proto": "if (chr == 119)"
							, "kind": "if"
							, "type": "void"
							, "file": "stdlib.cvx"
							, "line": 1898
							, "test": {
								"proto": "(chr == 119)"
								, "kind": "=="
								, "type": "bool"
								, "cast": ".bit"
								, "file": "stdlib.cvx"
								, "line": 1898
								, "lval": {
									"proto": "chr"
									, "kind": ".ref"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1898
									, "value": "chr"
								}
								, "rval": {
									"proto": "119"
									, "kind": ".i64"
									, "type": "int32"
									, "cast": ".i32"
									, "file": "stdlib.cvx"
									, "line": 1898
									, "value": "119"
								}
							}
							, "then": {
								"proto": "{...}"
								, "kind": "{"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1898
								, "stmt": [{
									"proto": "flags"
									, "kind": ".def"
									, "type": "FormatFlags"
									, "file": "stdlib.cvx"
									, "line": 1899
									, "value": "flags"
								}, {
									"proto": "pos := format(output, pos, (&flags), parts.dayOfWeek);"
									, "kind": ";"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1900
									, "stmt": {
										"proto": "(pos := format(output, pos, (&flags), parts.dayOfWeek))"
										, "kind": ":="
										, "type": "int32"
										, "file": "stdlib.cvx"
										, "line": 1900
										, "lval": {
											"proto": "pos"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1900
											, "value": "pos"
										}
										, "rval": {
											"proto": "format(output, pos, (&flags), parts.dayOfWeek)"
											, "kind": "(?)"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1900
											, "args": [{
												"proto": "parts.dayOfWeek"
												, "kind": "."
												, "type": "int32"
												, "cast": ".u32"
												, "file": "stdlib.cvx"
												, "line": 1900
												, "lval": {
													"proto": "parts"
													, "kind": ".ref"
													, "type": "Date.Parts"
													, "cast": ".ref"
													, "file": "stdlib.cvx"
													, "line": 1900
													, "value": "parts"
												}
												, "rval": {
													"proto": "dayOfWeek"
													, "kind": ".ref"
													, "type": "int32"
													, "file": "stdlib.cvx"
													, "line": 1900
													, "value": "dayOfWeek"
												}
											}, {
												"proto": "(&flags)"
												, "kind": "&"
												, "type": "FormatFlags"
												, "cast": ".ref"
												, "file": "stdlib.cvx"
												, "line": 1900
												, "rval": {
													"proto": "flags"
													, "kind": ".ref"
													, "type": "FormatFlags"
													, "cast": ".rec"
													, "file": "stdlib.cvx"
													, "line": 1900
													, "value": "flags"
												}
											}, {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1900
												, "value": "pos"
											}, {
												"proto": "output"
												, "kind": ".ref"
												, "type": "char[]"
												, "cast": ".arr"
												, "file": "stdlib.cvx"
												, "line": 1900
												, "value": "output"
											}]
										}
									}
								}]
							}
							, "else": {
								"proto": "if (chr == 100)"
								, "kind": "if"
								, "type": "void"
								, "file": "stdlib.cvx"
								, "line": 1902
								, "test": {
									"proto": "(chr == 100)"
									, "kind": "=="
									, "type": "bool"
									, "cast": ".bit"
									, "file": "stdlib.cvx"
									, "line": 1902
									, "lval": {
										"proto": "chr"
										, "kind": ".ref"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1902
										, "value": "chr"
									}
									, "rval": {
										"proto": "100"
										, "kind": ".i64"
										, "type": "int32"
										, "cast": ".i32"
										, "file": "stdlib.cvx"
										, "line": 1902
										, "value": "100"
									}
								}
								, "then": {
									"proto": "{...}"
									, "kind": "{"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1902
									, "stmt": [{
										"proto": "if (padLen < 0)"
										, "kind": "if"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1903
										, "test": {
											"proto": "(padLen < 0)"
											, "kind": "<"
											, "type": "bool"
											, "cast": ".bit"
											, "file": "stdlib.cvx"
											, "line": 1903
											, "lval": {
												"proto": "padLen"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1903
												, "value": "padLen"
											}
											, "rval": {
												"proto": "0"
												, "kind": ".i64"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1903
												, "value": "0"
											}
										}
										, "then": {
											"proto": "{...}"
											, "kind": "{"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1903
											, "stmt": [{
												"proto": "padLen := 2;"
												, "kind": ";"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1903
												, "stmt": {
													"proto": "(padLen := 2)"
													, "kind": ":="
													, "type": "int32"
													, "file": "stdlib.cvx"
													, "line": 1903
													, "lval": {
														"proto": "padLen"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1903
														, "value": "padLen"
													}
													, "rval": {
														"proto": "2"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1903
														, "value": "2"
													}
												}
											}, {
												"proto": "padChr := 48;"
												, "kind": ";"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1903
												, "stmt": {
													"proto": "(padChr := 48)"
													, "kind": ":="
													, "type": "int32"
													, "file": "stdlib.cvx"
													, "line": 1903
													, "lval": {
														"proto": "padChr"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1903
														, "value": "padChr"
													}
													, "rval": {
														"proto": "48"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1903
														, "value": "48"
													}
												}
											}]
										}
									}, {
										"proto": "flags"
										, "kind": ".def"
										, "type": "FormatFlags"
										, "file": "stdlib.cvx"
										, "line": 1904
										, "value": "flags"
									}, {
										"proto": "pos := format(output, pos, (&flags), parts.dayOfMonth);"
										, "kind": ";"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1905
										, "stmt": {
											"proto": "(pos := format(output, pos, (&flags), parts.dayOfMonth))"
											, "kind": ":="
											, "type": "int32"
											, "file": "stdlib.cvx"
											, "line": 1905
											, "lval": {
												"proto": "pos"
												, "kind": ".ref"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1905
												, "value": "pos"
											}
											, "rval": {
												"proto": "format(output, pos, (&flags), parts.dayOfMonth)"
												, "kind": "(?)"
												, "type": "int32"
												, "cast": ".i32"
												, "file": "stdlib.cvx"
												, "line": 1905
												, "args": [{
													"proto": "parts.dayOfMonth"
													, "kind": "."
													, "type": "int32"
													, "cast": ".u32"
													, "file": "stdlib.cvx"
													, "line": 1905
													, "lval": {
														"proto": "parts"
														, "kind": ".ref"
														, "type": "Date.Parts"
														, "cast": ".ref"
														, "file": "stdlib.cvx"
														, "line": 1905
														, "value": "parts"
													}
													, "rval": {
														"proto": "dayOfMonth"
														, "kind": ".ref"
														, "type": "int32"
														, "file": "stdlib.cvx"
														, "line": 1905
														, "value": "dayOfMonth"
													}
												}, {
													"proto": "(&flags)"
													, "kind": "&"
													, "type": "FormatFlags"
													, "cast": ".ref"
													, "file": "stdlib.cvx"
													, "line": 1905
													, "rval": {
														"proto": "flags"
														, "kind": ".ref"
														, "type": "FormatFlags"
														, "cast": ".rec"
														, "file": "stdlib.cvx"
														, "line": 1905
														, "value": "flags"
													}
												}, {
													"proto": "pos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1905
													, "value": "pos"
												}, {
													"proto": "output"
													, "kind": ".ref"
													, "type": "char[]"
													, "cast": ".arr"
													, "file": "stdlib.cvx"
													, "line": 1905
													, "value": "output"
												}]
											}
										}
									}]
								}
								, "else": {
									"proto": "if (chr == 106)"
									, "kind": "if"
									, "type": "void"
									, "file": "stdlib.cvx"
									, "line": 1907
									, "test": {
										"proto": "(chr == 106)"
										, "kind": "=="
										, "type": "bool"
										, "cast": ".bit"
										, "file": "stdlib.cvx"
										, "line": 1907
										, "lval": {
											"proto": "chr"
											, "kind": ".ref"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1907
											, "value": "chr"
										}
										, "rval": {
											"proto": "106"
											, "kind": ".i64"
											, "type": "int32"
											, "cast": ".i32"
											, "file": "stdlib.cvx"
											, "line": 1907
											, "value": "106"
										}
									}
									, "then": {
										"proto": "{...}"
										, "kind": "{"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1907
										, "stmt": [{
											"proto": "if (padLen < 0)"
											, "kind": "if"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1908
											, "test": {
												"proto": "(padLen < 0)"
												, "kind": "<"
												, "type": "bool"
												, "cast": ".bit"
												, "file": "stdlib.cvx"
												, "line": 1908
												, "lval": {
													"proto": "padLen"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1908
													, "value": "padLen"
												}
												, "rval": {
													"proto": "0"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1908
													, "value": "0"
												}
											}
											, "then": {
												"proto": "{...}"
												, "kind": "{"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1908
												, "stmt": [{
													"proto": "padLen := 3;"
													, "kind": ";"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1908
													, "stmt": {
														"proto": "(padLen := 3)"
														, "kind": ":="
														, "type": "int32"
														, "file": "stdlib.cvx"
														, "line": 1908
														, "lval": {
															"proto": "padLen"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1908
															, "value": "padLen"
														}
														, "rval": {
															"proto": "3"
															, "kind": ".i64"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1908
															, "value": "3"
														}
													}
												}, {
													"proto": "padChr := 48;"
													, "kind": ";"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1908
													, "stmt": {
														"proto": "(padChr := 48)"
														, "kind": ":="
														, "type": "int32"
														, "file": "stdlib.cvx"
														, "line": 1908
														, "lval": {
															"proto": "padChr"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1908
															, "value": "padChr"
														}
														, "rval": {
															"proto": "48"
															, "kind": ".i64"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1908
															, "value": "48"
														}
													}
												}]
											}
										}, {
											"proto": "flags"
											, "kind": ".def"
											, "type": "FormatFlags"
											, "file": "stdlib.cvx"
											, "line": 1909
											, "value": "flags"
										}, {
											"proto": "pos := format(output, pos, (&flags), parts.dayOfYear);"
											, "kind": ";"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1910
											, "stmt": {
												"proto": "(pos := format(output, pos, (&flags), parts.dayOfYear))"
												, "kind": ":="
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1910
												, "lval": {
													"proto": "pos"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1910
													, "value": "pos"
												}
												, "rval": {
													"proto": "format(output, pos, (&flags), parts.dayOfYear)"
													, "kind": "(?)"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1910
													, "args": [{
														"proto": "parts.dayOfYear"
														, "kind": "."
														, "type": "int32"
														, "cast": ".u32"
														, "file": "stdlib.cvx"
														, "line": 1910
														, "lval": {
															"proto": "parts"
															, "kind": ".ref"
															, "type": "Date.Parts"
															, "cast": ".ref"
															, "file": "stdlib.cvx"
															, "line": 1910
															, "value": "parts"
														}
														, "rval": {
															"proto": "dayOfYear"
															, "kind": ".ref"
															, "type": "int32"
															, "file": "stdlib.cvx"
															, "line": 1910
															, "value": "dayOfYear"
														}
													}, {
														"proto": "(&flags)"
														, "kind": "&"
														, "type": "FormatFlags"
														, "cast": ".ref"
														, "file": "stdlib.cvx"
														, "line": 1910
														, "rval": {
															"proto": "flags"
															, "kind": ".ref"
															, "type": "FormatFlags"
															, "cast": ".rec"
															, "file": "stdlib.cvx"
															, "line": 1910
															, "value": "flags"
														}
													}, {
														"proto": "pos"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1910
														, "value": "pos"
													}, {
														"proto": "output"
														, "kind": ".ref"
														, "type": "char[]"
														, "cast": ".arr"
														, "file": "stdlib.cvx"
														, "line": 1910
														, "value": "output"
													}]
												}
											}
										}]
									}
									, "else": {
										"proto": "if ((chr == 98) || (chr == 66))"
										, "kind": "if"
										, "type": "void"
										, "file": "stdlib.cvx"
										, "line": 1913
										, "test": {
											"proto": "((chr == 98) || (chr == 66))"
											, "kind": "||"
											, "type": "bool"
											, "cast": ".bit"
											, "file": "stdlib.cvx"
											, "line": 1913
											, "lval": {
												"proto": "(chr == 98)"
												, "kind": "=="
												, "type": "bool"
												, "cast": ".bit"
												, "file": "stdlib.cvx"
												, "line": 1913
												, "lval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1913
													, "value": "chr"
												}
												, "rval": {
													"proto": "98"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1913
													, "value": "98"
												}
											}
											, "rval": {
												"proto": "(chr == 66)"
												, "kind": "=="
												, "type": "bool"
												, "cast": ".bit"
												, "file": "stdlib.cvx"
												, "line": 1913
												, "lval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1913
													, "value": "chr"
												}
												, "rval": {
													"proto": "66"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1913
													, "value": "66"
												}
											}
										}
										, "then": {
											"proto": "{...}"
											, "kind": "{"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1913
											, "stmt": [{
												"proto": "month"
												, "kind": ".def"
												, "type": "int32"
												, "file": "stdlib.cvx"
												, "line": 1922
												, "value": "month"
											}, {
												"proto": "if (month == 1)"
												, "kind": "if"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1923
												, "test": {
													"proto": "(month == 1)"
													, "kind": "=="
													, "type": "bool"
													, "cast": ".bit"
													, "file": "stdlib.cvx"
													, "line": 1923
													, "lval": {
														"proto": "month"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1923
														, "value": "month"
													}
													, "rval": {
														"proto": "1"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1923
														, "value": "1"
													}
												}
												, "then": {
													"proto": "{...}"
													, "kind": "{"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1923
													, "stmt": [{
														"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Jan' : 'January'));"
														, "kind": ";"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1924
														, "stmt": {
															"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Jan' : 'January')))"
															, "kind": ":="
															, "type": "int32"
															, "file": "stdlib.cvx"
															, "line": 1924
															, "lval": {
																"proto": "pos"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1924
																, "value": "pos"
															}
															, "rval": {
																"proto": "(pos + strcat(output, pos, chr == 98 ? 'Jan' : 'January'))"
																, "kind": "+"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1924
																, "lval": {
																	"proto": "pos"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1924
																	, "value": "pos"
																}
																, "rval": {
																	"proto": "strcat(output, pos, chr == 98 ? 'Jan' : 'January')"
																	, "kind": "(?)"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1924
																	, "args": [{
																		"proto": "chr == 98 ? 'Jan' : 'January'"
																		, "kind": "?:"
																		, "type": "string"
																		, "cast": ".ref"
																		, "file": "stdlib.cvx"
																		, "line": 1924
																		, "test": {
																			"proto": "(chr == 98)"
																			, "kind": "=="
																			, "type": "bool"
																			, "cast": ".bit"
																			, "file": "stdlib.cvx"
																			, "line": 1924
																			, "lval": {
																				"proto": "chr"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1924
																				, "value": "chr"
																			}
																			, "rval": {
																				"proto": "98"
																				, "kind": ".i64"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1924
																				, "value": "98"
																			}
																		}
																		, "lval": {
																			"proto": "'Jan'"
																			, "kind": ".ptr"
																			, "type": "string"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1924
																			, "value": "'Jan'"
																		}
																		, "rval": {
																			"proto": "'January'"
																			, "kind": ".ptr"
																			, "type": "string"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1924
																			, "value": "'January'"
																		}
																	}, {
																		"proto": "pos"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1924
																		, "value": "pos"
																	}, {
																		"proto": "output"
																		, "kind": ".ref"
																		, "type": "char[]"
																		, "cast": ".arr"
																		, "file": "stdlib.cvx"
																		, "line": 1924
																		, "value": "output"
																	}]
																}
															}
														}
													}]
												}
												, "else": {
													"proto": "if (month == 2)"
													, "kind": "if"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1926
													, "test": {
														"proto": "(month == 2)"
														, "kind": "=="
														, "type": "bool"
														, "cast": ".bit"
														, "file": "stdlib.cvx"
														, "line": 1926
														, "lval": {
															"proto": "month"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1926
															, "value": "month"
														}
														, "rval": {
															"proto": "2"
															, "kind": ".i64"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1926
															, "value": "2"
														}
													}
													, "then": {
														"proto": "{...}"
														, "kind": "{"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1926
														, "stmt": [{
															"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Feb' : 'February'));"
															, "kind": ";"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1927
															, "stmt": {
																"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Feb' : 'February')))"
																, "kind": ":="
																, "type": "int32"
																, "file": "stdlib.cvx"
																, "line": 1927
																, "lval": {
																	"proto": "pos"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1927
																	, "value": "pos"
																}
																, "rval": {
																	"proto": "(pos + strcat(output, pos, chr == 98 ? 'Feb' : 'February'))"
																	, "kind": "+"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1927
																	, "lval": {
																		"proto": "pos"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1927
																		, "value": "pos"
																	}
																	, "rval": {
																		"proto": "strcat(output, pos, chr == 98 ? 'Feb' : 'February')"
																		, "kind": "(?)"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1927
																		, "args": [{
																			"proto": "chr == 98 ? 'Feb' : 'February'"
																			, "kind": "?:"
																			, "type": "string"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1927
																			, "test": {
																				"proto": "(chr == 98)"
																				, "kind": "=="
																				, "type": "bool"
																				, "cast": ".bit"
																				, "file": "stdlib.cvx"
																				, "line": 1927
																				, "lval": {
																					"proto": "chr"
																					, "kind": ".ref"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1927
																					, "value": "chr"
																				}
																				, "rval": {
																					"proto": "98"
																					, "kind": ".i64"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1927
																					, "value": "98"
																				}
																			}
																			, "lval": {
																				"proto": "'Feb'"
																				, "kind": ".ptr"
																				, "type": "string"
																				, "cast": ".ref"
																				, "file": "stdlib.cvx"
																				, "line": 1927
																				, "value": "'Feb'"
																			}
																			, "rval": {
																				"proto": "'February'"
																				, "kind": ".ptr"
																				, "type": "string"
																				, "cast": ".ref"
																				, "file": "stdlib.cvx"
																				, "line": 1927
																				, "value": "'February'"
																			}
																		}, {
																			"proto": "pos"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1927
																			, "value": "pos"
																		}, {
																			"proto": "output"
																			, "kind": ".ref"
																			, "type": "char[]"
																			, "cast": ".arr"
																			, "file": "stdlib.cvx"
																			, "line": 1927
																			, "value": "output"
																		}]
																	}
																}
															}
														}]
													}
													, "else": {
														"proto": "if (month == 3)"
														, "kind": "if"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1929
														, "test": {
															"proto": "(month == 3)"
															, "kind": "=="
															, "type": "bool"
															, "cast": ".bit"
															, "file": "stdlib.cvx"
															, "line": 1929
															, "lval": {
																"proto": "month"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1929
																, "value": "month"
															}
															, "rval": {
																"proto": "3"
																, "kind": ".i64"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1929
																, "value": "3"
															}
														}
														, "then": {
															"proto": "{...}"
															, "kind": "{"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1929
															, "stmt": [{
																"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Mar' : 'March'));"
																, "kind": ";"
																, "type": "void"
																, "file": "stdlib.cvx"
																, "line": 1930
																, "stmt": {
																	"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Mar' : 'March')))"
																	, "kind": ":="
																	, "type": "int32"
																	, "file": "stdlib.cvx"
																	, "line": 1930
																	, "lval": {
																		"proto": "pos"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1930
																		, "value": "pos"
																	}
																	, "rval": {
																		"proto": "(pos + strcat(output, pos, chr == 98 ? 'Mar' : 'March'))"
																		, "kind": "+"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1930
																		, "lval": {
																			"proto": "pos"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1930
																			, "value": "pos"
																		}
																		, "rval": {
																			"proto": "strcat(output, pos, chr == 98 ? 'Mar' : 'March')"
																			, "kind": "(?)"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1930
																			, "args": [{
																				"proto": "chr == 98 ? 'Mar' : 'March'"
																				, "kind": "?:"
																				, "type": "string"
																				, "cast": ".ref"
																				, "file": "stdlib.cvx"
																				, "line": 1930
																				, "test": {
																					"proto": "(chr == 98)"
																					, "kind": "=="
																					, "type": "bool"
																					, "cast": ".bit"
																					, "file": "stdlib.cvx"
																					, "line": 1930
																					, "lval": {
																						"proto": "chr"
																						, "kind": ".ref"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1930
																						, "value": "chr"
																					}
																					, "rval": {
																						"proto": "98"
																						, "kind": ".i64"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1930
																						, "value": "98"
																					}
																				}
																				, "lval": {
																					"proto": "'Mar'"
																					, "kind": ".ptr"
																					, "type": "string"
																					, "cast": ".ref"
																					, "file": "stdlib.cvx"
																					, "line": 1930
																					, "value": "'Mar'"
																				}
																				, "rval": {
																					"proto": "'March'"
																					, "kind": ".ptr"
																					, "type": "string"
																					, "cast": ".ref"
																					, "file": "stdlib.cvx"
																					, "line": 1930
																					, "value": "'March'"
																				}
																			}, {
																				"proto": "pos"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1930
																				, "value": "pos"
																			}, {
																				"proto": "output"
																				, "kind": ".ref"
																				, "type": "char[]"
																				, "cast": ".arr"
																				, "file": "stdlib.cvx"
																				, "line": 1930
																				, "value": "output"
																			}]
																		}
																	}
																}
															}]
														}
														, "else": {
															"proto": "if (month == 4)"
															, "kind": "if"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1932
															, "test": {
																"proto": "(month == 4)"
																, "kind": "=="
																, "type": "bool"
																, "cast": ".bit"
																, "file": "stdlib.cvx"
																, "line": 1932
																, "lval": {
																	"proto": "month"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1932
																	, "value": "month"
																}
																, "rval": {
																	"proto": "4"
																	, "kind": ".i64"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1932
																	, "value": "4"
																}
															}
															, "then": {
																"proto": "{...}"
																, "kind": "{"
																, "type": "void"
																, "file": "stdlib.cvx"
																, "line": 1932
																, "stmt": [{
																	"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Apr' : 'April'));"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "stdlib.cvx"
																	, "line": 1933
																	, "stmt": {
																		"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Apr' : 'April')))"
																		, "kind": ":="
																		, "type": "int32"
																		, "file": "stdlib.cvx"
																		, "line": 1933
																		, "lval": {
																			"proto": "pos"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1933
																			, "value": "pos"
																		}
																		, "rval": {
																			"proto": "(pos + strcat(output, pos, chr == 98 ? 'Apr' : 'April'))"
																			, "kind": "+"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1933
																			, "lval": {
																				"proto": "pos"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1933
																				, "value": "pos"
																			}
																			, "rval": {
																				"proto": "strcat(output, pos, chr == 98 ? 'Apr' : 'April')"
																				, "kind": "(?)"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1933
																				, "args": [{
																					"proto": "chr == 98 ? 'Apr' : 'April'"
																					, "kind": "?:"
																					, "type": "string"
																					, "cast": ".ref"
																					, "file": "stdlib.cvx"
																					, "line": 1933
																					, "test": {
																						"proto": "(chr == 98)"
																						, "kind": "=="
																						, "type": "bool"
																						, "cast": ".bit"
																						, "file": "stdlib.cvx"
																						, "line": 1933
																						, "lval": {
																							"proto": "chr"
																							, "kind": ".ref"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1933
																							, "value": "chr"
																						}
																						, "rval": {
																							"proto": "98"
																							, "kind": ".i64"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1933
																							, "value": "98"
																						}
																					}
																					, "lval": {
																						"proto": "'Apr'"
																						, "kind": ".ptr"
																						, "type": "string"
																						, "cast": ".ref"
																						, "file": "stdlib.cvx"
																						, "line": 1933
																						, "value": "'Apr'"
																					}
																					, "rval": {
																						"proto": "'April'"
																						, "kind": ".ptr"
																						, "type": "string"
																						, "cast": ".ref"
																						, "file": "stdlib.cvx"
																						, "line": 1933
																						, "value": "'April'"
																					}
																				}, {
																					"proto": "pos"
																					, "kind": ".ref"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1933
																					, "value": "pos"
																				}, {
																					"proto": "output"
																					, "kind": ".ref"
																					, "type": "char[]"
																					, "cast": ".arr"
																					, "file": "stdlib.cvx"
																					, "line": 1933
																					, "value": "output"
																				}]
																			}
																		}
																	}
																}]
															}
															, "else": {
																"proto": "if (month == 5)"
																, "kind": "if"
																, "type": "void"
																, "file": "stdlib.cvx"
																, "line": 1935
																, "test": {
																	"proto": "(month == 5)"
																	, "kind": "=="
																	, "type": "bool"
																	, "cast": ".bit"
																	, "file": "stdlib.cvx"
																	, "line": 1935
																	, "lval": {
																		"proto": "month"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1935
																		, "value": "month"
																	}
																	, "rval": {
																		"proto": "5"
																		, "kind": ".i64"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1935
																		, "value": "5"
																	}
																}
																, "then": {
																	"proto": "{...}"
																	, "kind": "{"
																	, "type": "void"
																	, "file": "stdlib.cvx"
																	, "line": 1935
																	, "stmt": [{
																		"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'May' : 'May'));"
																		, "kind": ";"
																		, "type": "void"
																		, "file": "stdlib.cvx"
																		, "line": 1936
																		, "stmt": {
																			"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'May' : 'May')))"
																			, "kind": ":="
																			, "type": "int32"
																			, "file": "stdlib.cvx"
																			, "line": 1936
																			, "lval": {
																				"proto": "pos"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1936
																				, "value": "pos"
																			}
																			, "rval": {
																				"proto": "(pos + strcat(output, pos, chr == 98 ? 'May' : 'May'))"
																				, "kind": "+"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1936
																				, "lval": {
																					"proto": "pos"
																					, "kind": ".ref"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1936
																					, "value": "pos"
																				}
																				, "rval": {
																					"proto": "strcat(output, pos, chr == 98 ? 'May' : 'May')"
																					, "kind": "(?)"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1936
																					, "args": [{
																						"proto": "chr == 98 ? 'May' : 'May'"
																						, "kind": "?:"
																						, "type": "string"
																						, "cast": ".ref"
																						, "file": "stdlib.cvx"
																						, "line": 1936
																						, "test": {
																							"proto": "(chr == 98)"
																							, "kind": "=="
																							, "type": "bool"
																							, "cast": ".bit"
																							, "file": "stdlib.cvx"
																							, "line": 1936
																							, "lval": {
																								"proto": "chr"
																								, "kind": ".ref"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1936
																								, "value": "chr"
																							}
																							, "rval": {
																								"proto": "98"
																								, "kind": ".i64"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1936
																								, "value": "98"
																							}
																						}
																						, "lval": {
																							"proto": "'May'"
																							, "kind": ".ptr"
																							, "type": "string"
																							, "cast": ".ref"
																							, "file": "stdlib.cvx"
																							, "line": 1936
																							, "value": "'May'"
																						}
																						, "rval": {
																							"proto": "'May'"
																							, "kind": ".ptr"
																							, "type": "string"
																							, "cast": ".ref"
																							, "file": "stdlib.cvx"
																							, "line": 1936
																							, "value": "'May'"
																						}
																					}, {
																						"proto": "pos"
																						, "kind": ".ref"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1936
																						, "value": "pos"
																					}, {
																						"proto": "output"
																						, "kind": ".ref"
																						, "type": "char[]"
																						, "cast": ".arr"
																						, "file": "stdlib.cvx"
																						, "line": 1936
																						, "value": "output"
																					}]
																				}
																			}
																		}
																	}]
																}
																, "else": {
																	"proto": "if (month == 6)"
																	, "kind": "if"
																	, "type": "void"
																	, "file": "stdlib.cvx"
																	, "line": 1938
																	, "test": {
																		"proto": "(month == 6)"
																		, "kind": "=="
																		, "type": "bool"
																		, "cast": ".bit"
																		, "file": "stdlib.cvx"
																		, "line": 1938
																		, "lval": {
																			"proto": "month"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1938
																			, "value": "month"
																		}
																		, "rval": {
																			"proto": "6"
																			, "kind": ".i64"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1938
																			, "value": "6"
																		}
																	}
																	, "then": {
																		"proto": "{...}"
																		, "kind": "{"
																		, "type": "void"
																		, "file": "stdlib.cvx"
																		, "line": 1938
																		, "stmt": [{
																			"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Jun' : 'June'));"
																			, "kind": ";"
																			, "type": "void"
																			, "file": "stdlib.cvx"
																			, "line": 1939
																			, "stmt": {
																				"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Jun' : 'June')))"
																				, "kind": ":="
																				, "type": "int32"
																				, "file": "stdlib.cvx"
																				, "line": 1939
																				, "lval": {
																					"proto": "pos"
																					, "kind": ".ref"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1939
																					, "value": "pos"
																				}
																				, "rval": {
																					"proto": "(pos + strcat(output, pos, chr == 98 ? 'Jun' : 'June'))"
																					, "kind": "+"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1939
																					, "lval": {
																						"proto": "pos"
																						, "kind": ".ref"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1939
																						, "value": "pos"
																					}
																					, "rval": {
																						"proto": "strcat(output, pos, chr == 98 ? 'Jun' : 'June')"
																						, "kind": "(?)"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1939
																						, "args": [{
																							"proto": "chr == 98 ? 'Jun' : 'June'"
																							, "kind": "?:"
																							, "type": "string"
																							, "cast": ".ref"
																							, "file": "stdlib.cvx"
																							, "line": 1939
																							, "test": {
																								"proto": "(chr == 98)"
																								, "kind": "=="
																								, "type": "bool"
																								, "cast": ".bit"
																								, "file": "stdlib.cvx"
																								, "line": 1939
																								, "lval": {
																									"proto": "chr"
																									, "kind": ".ref"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1939
																									, "value": "chr"
																								}
																								, "rval": {
																									"proto": "98"
																									, "kind": ".i64"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1939
																									, "value": "98"
																								}
																							}
																							, "lval": {
																								"proto": "'Jun'"
																								, "kind": ".ptr"
																								, "type": "string"
																								, "cast": ".ref"
																								, "file": "stdlib.cvx"
																								, "line": 1939
																								, "value": "'Jun'"
																							}
																							, "rval": {
																								"proto": "'June'"
																								, "kind": ".ptr"
																								, "type": "string"
																								, "cast": ".ref"
																								, "file": "stdlib.cvx"
																								, "line": 1939
																								, "value": "'June'"
																							}
																						}, {
																							"proto": "pos"
																							, "kind": ".ref"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1939
																							, "value": "pos"
																						}, {
																							"proto": "output"
																							, "kind": ".ref"
																							, "type": "char[]"
																							, "cast": ".arr"
																							, "file": "stdlib.cvx"
																							, "line": 1939
																							, "value": "output"
																						}]
																					}
																				}
																			}
																		}]
																	}
																	, "else": {
																		"proto": "if (month == 7)"
																		, "kind": "if"
																		, "type": "void"
																		, "file": "stdlib.cvx"
																		, "line": 1941
																		, "test": {
																			"proto": "(month == 7)"
																			, "kind": "=="
																			, "type": "bool"
																			, "cast": ".bit"
																			, "file": "stdlib.cvx"
																			, "line": 1941
																			, "lval": {
																				"proto": "month"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1941
																				, "value": "month"
																			}
																			, "rval": {
																				"proto": "7"
																				, "kind": ".i64"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1941
																				, "value": "7"
																			}
																		}
																		, "then": {
																			"proto": "{...}"
																			, "kind": "{"
																			, "type": "void"
																			, "file": "stdlib.cvx"
																			, "line": 1941
																			, "stmt": [{
																				"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Jul' : 'July'));"
																				, "kind": ";"
																				, "type": "void"
																				, "file": "stdlib.cvx"
																				, "line": 1942
																				, "stmt": {
																					"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Jul' : 'July')))"
																					, "kind": ":="
																					, "type": "int32"
																					, "file": "stdlib.cvx"
																					, "line": 1942
																					, "lval": {
																						"proto": "pos"
																						, "kind": ".ref"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1942
																						, "value": "pos"
																					}
																					, "rval": {
																						"proto": "(pos + strcat(output, pos, chr == 98 ? 'Jul' : 'July'))"
																						, "kind": "+"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1942
																						, "lval": {
																							"proto": "pos"
																							, "kind": ".ref"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1942
																							, "value": "pos"
																						}
																						, "rval": {
																							"proto": "strcat(output, pos, chr == 98 ? 'Jul' : 'July')"
																							, "kind": "(?)"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1942
																							, "args": [{
																								"proto": "chr == 98 ? 'Jul' : 'July'"
																								, "kind": "?:"
																								, "type": "string"
																								, "cast": ".ref"
																								, "file": "stdlib.cvx"
																								, "line": 1942
																								, "test": {
																									"proto": "(chr == 98)"
																									, "kind": "=="
																									, "type": "bool"
																									, "cast": ".bit"
																									, "file": "stdlib.cvx"
																									, "line": 1942
																									, "lval": {
																										"proto": "chr"
																										, "kind": ".ref"
																										, "type": "int32"
																										, "cast": ".i32"
																										, "file": "stdlib.cvx"
																										, "line": 1942
																										, "value": "chr"
																									}
																									, "rval": {
																										"proto": "98"
																										, "kind": ".i64"
																										, "type": "int32"
																										, "cast": ".i32"
																										, "file": "stdlib.cvx"
																										, "line": 1942
																										, "value": "98"
																									}
																								}
																								, "lval": {
																									"proto": "'Jul'"
																									, "kind": ".ptr"
																									, "type": "string"
																									, "cast": ".ref"
																									, "file": "stdlib.cvx"
																									, "line": 1942
																									, "value": "'Jul'"
																								}
																								, "rval": {
																									"proto": "'July'"
																									, "kind": ".ptr"
																									, "type": "string"
																									, "cast": ".ref"
																									, "file": "stdlib.cvx"
																									, "line": 1942
																									, "value": "'July'"
																								}
																							}, {
																								"proto": "pos"
																								, "kind": ".ref"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1942
																								, "value": "pos"
																							}, {
																								"proto": "output"
																								, "kind": ".ref"
																								, "type": "char[]"
																								, "cast": ".arr"
																								, "file": "stdlib.cvx"
																								, "line": 1942
																								, "value": "output"
																							}]
																						}
																					}
																				}
																			}]
																		}
																		, "else": {
																			"proto": "if (month == 8)"
																			, "kind": "if"
																			, "type": "void"
																			, "file": "stdlib.cvx"
																			, "line": 1944
																			, "test": {
																				"proto": "(month == 8)"
																				, "kind": "=="
																				, "type": "bool"
																				, "cast": ".bit"
																				, "file": "stdlib.cvx"
																				, "line": 1944
																				, "lval": {
																					"proto": "month"
																					, "kind": ".ref"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1944
																					, "value": "month"
																				}
																				, "rval": {
																					"proto": "8"
																					, "kind": ".i64"
																					, "type": "int32"
																					, "cast": ".i32"
																					, "file": "stdlib.cvx"
																					, "line": 1944
																					, "value": "8"
																				}
																			}
																			, "then": {
																				"proto": "{...}"
																				, "kind": "{"
																				, "type": "void"
																				, "file": "stdlib.cvx"
																				, "line": 1944
																				, "stmt": [{
																					"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Aug' : 'August'));"
																					, "kind": ";"
																					, "type": "void"
																					, "file": "stdlib.cvx"
																					, "line": 1945
																					, "stmt": {
																						"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Aug' : 'August')))"
																						, "kind": ":="
																						, "type": "int32"
																						, "file": "stdlib.cvx"
																						, "line": 1945
																						, "lval": {
																							"proto": "pos"
																							, "kind": ".ref"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1945
																							, "value": "pos"
																						}
																						, "rval": {
																							"proto": "(pos + strcat(output, pos, chr == 98 ? 'Aug' : 'August'))"
																							, "kind": "+"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1945
																							, "lval": {
																								"proto": "pos"
																								, "kind": ".ref"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1945
																								, "value": "pos"
																							}
																							, "rval": {
																								"proto": "strcat(output, pos, chr == 98 ? 'Aug' : 'August')"
																								, "kind": "(?)"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1945
																								, "args": [{
																									"proto": "chr == 98 ? 'Aug' : 'August'"
																									, "kind": "?:"
																									, "type": "string"
																									, "cast": ".ref"
																									, "file": "stdlib.cvx"
																									, "line": 1945
																									, "test": {
																										"proto": "(chr == 98)"
																										, "kind": "=="
																										, "type": "bool"
																										, "cast": ".bit"
																										, "file": "stdlib.cvx"
																										, "line": 1945
																										, "lval": {
																											"proto": "chr"
																											, "kind": ".ref"
																											, "type": "int32"
																											, "cast": ".i32"
																											, "file": "stdlib.cvx"
																											, "line": 1945
																											, "value": "chr"
																										}
																										, "rval": {
																											"proto": "98"
																											, "kind": ".i64"
																											, "type": "int32"
																											, "cast": ".i32"
																											, "file": "stdlib.cvx"
																											, "line": 1945
																											, "value": "98"
																										}
																									}
																									, "lval": {
																										"proto": "'Aug'"
																										, "kind": ".ptr"
																										, "type": "string"
																										, "cast": ".ref"
																										, "file": "stdlib.cvx"
																										, "line": 1945
																										, "value": "'Aug'"
																									}
																									, "rval": {
																										"proto": "'August'"
																										, "kind": ".ptr"
																										, "type": "string"
																										, "cast": ".ref"
																										, "file": "stdlib.cvx"
																										, "line": 1945
																										, "value": "'August'"
																									}
																								}, {
																									"proto": "pos"
																									, "kind": ".ref"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1945
																									, "value": "pos"
																								}, {
																									"proto": "output"
																									, "kind": ".ref"
																									, "type": "char[]"
																									, "cast": ".arr"
																									, "file": "stdlib.cvx"
																									, "line": 1945
																									, "value": "output"
																								}]
																							}
																						}
																					}
																				}]
																			}
																			, "else": {
																				"proto": "if (month == 9)"
																				, "kind": "if"
																				, "type": "void"
																				, "file": "stdlib.cvx"
																				, "line": 1947
																				, "test": {
																					"proto": "(month == 9)"
																					, "kind": "=="
																					, "type": "bool"
																					, "cast": ".bit"
																					, "file": "stdlib.cvx"
																					, "line": 1947
																					, "lval": {
																						"proto": "month"
																						, "kind": ".ref"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1947
																						, "value": "month"
																					}
																					, "rval": {
																						"proto": "9"
																						, "kind": ".i64"
																						, "type": "int32"
																						, "cast": ".i32"
																						, "file": "stdlib.cvx"
																						, "line": 1947
																						, "value": "9"
																					}
																				}
																				, "then": {
																					"proto": "{...}"
																					, "kind": "{"
																					, "type": "void"
																					, "file": "stdlib.cvx"
																					, "line": 1947
																					, "stmt": [{
																						"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Sep' : 'September'));"
																						, "kind": ";"
																						, "type": "void"
																						, "file": "stdlib.cvx"
																						, "line": 1948
																						, "stmt": {
																							"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Sep' : 'September')))"
																							, "kind": ":="
																							, "type": "int32"
																							, "file": "stdlib.cvx"
																							, "line": 1948
																							, "lval": {
																								"proto": "pos"
																								, "kind": ".ref"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1948
																								, "value": "pos"
																							}
																							, "rval": {
																								"proto": "(pos + strcat(output, pos, chr == 98 ? 'Sep' : 'September'))"
																								, "kind": "+"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1948
																								, "lval": {
																									"proto": "pos"
																									, "kind": ".ref"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1948
																									, "value": "pos"
																								}
																								, "rval": {
																									"proto": "strcat(output, pos, chr == 98 ? 'Sep' : 'September')"
																									, "kind": "(?)"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1948
																									, "args": [{
																										"proto": "chr == 98 ? 'Sep' : 'September'"
																										, "kind": "?:"
																										, "type": "string"
																										, "cast": ".ref"
																										, "file": "stdlib.cvx"
																										, "line": 1948
																										, "test": {
																											"proto": "(chr == 98)"
																											, "kind": "=="
																											, "type": "bool"
																											, "cast": ".bit"
																											, "file": "stdlib.cvx"
																											, "line": 1948
																											, "lval": {
																												"proto": "chr"
																												, "kind": ".ref"
																												, "type": "int32"
																												, "cast": ".i32"
																												, "file": "stdlib.cvx"
																												, "line": 1948
																												, "value": "chr"
																											}
																											, "rval": {
																												"proto": "98"
																												, "kind": ".i64"
																												, "type": "int32"
																												, "cast": ".i32"
																												, "file": "stdlib.cvx"
																												, "line": 1948
																												, "value": "98"
																											}
																										}
																										, "lval": {
																											"proto": "'Sep'"
																											, "kind": ".ptr"
																											, "type": "string"
																											, "cast": ".ref"
																											, "file": "stdlib.cvx"
																											, "line": 1948
																											, "value": "'Sep'"
																										}
																										, "rval": {
																											"proto": "'September'"
																											, "kind": ".ptr"
																											, "type": "string"
																											, "cast": ".ref"
																											, "file": "stdlib.cvx"
																											, "line": 1948
																											, "value": "'September'"
																										}
																									}, {
																										"proto": "pos"
																										, "kind": ".ref"
																										, "type": "int32"
																										, "cast": ".i32"
																										, "file": "stdlib.cvx"
																										, "line": 1948
																										, "value": "pos"
																									}, {
																										"proto": "output"
																										, "kind": ".ref"
																										, "type": "char[]"
																										, "cast": ".arr"
																										, "file": "stdlib.cvx"
																										, "line": 1948
																										, "value": "output"
																									}]
																								}
																							}
																						}
																					}]
																				}
																				, "else": {
																					"proto": "if (month == 10)"
																					, "kind": "if"
																					, "type": "void"
																					, "file": "stdlib.cvx"
																					, "line": 1950
																					, "test": {
																						"proto": "(month == 10)"
																						, "kind": "=="
																						, "type": "bool"
																						, "cast": ".bit"
																						, "file": "stdlib.cvx"
																						, "line": 1950
																						, "lval": {
																							"proto": "month"
																							, "kind": ".ref"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1950
																							, "value": "month"
																						}
																						, "rval": {
																							"proto": "10"
																							, "kind": ".i64"
																							, "type": "int32"
																							, "cast": ".i32"
																							, "file": "stdlib.cvx"
																							, "line": 1950
																							, "value": "10"
																						}
																					}
																					, "then": {
																						"proto": "{...}"
																						, "kind": "{"
																						, "type": "void"
																						, "file": "stdlib.cvx"
																						, "line": 1950
																						, "stmt": [{
																							"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Oct' : 'October'));"
																							, "kind": ";"
																							, "type": "void"
																							, "file": "stdlib.cvx"
																							, "line": 1951
																							, "stmt": {
																								"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Oct' : 'October')))"
																								, "kind": ":="
																								, "type": "int32"
																								, "file": "stdlib.cvx"
																								, "line": 1951
																								, "lval": {
																									"proto": "pos"
																									, "kind": ".ref"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1951
																									, "value": "pos"
																								}
																								, "rval": {
																									"proto": "(pos + strcat(output, pos, chr == 98 ? 'Oct' : 'October'))"
																									, "kind": "+"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1951
																									, "lval": {
																										"proto": "pos"
																										, "kind": ".ref"
																										, "type": "int32"
																										, "cast": ".i32"
																										, "file": "stdlib.cvx"
																										, "line": 1951
																										, "value": "pos"
																									}
																									, "rval": {
																										"proto": "strcat(output, pos, chr == 98 ? 'Oct' : 'October')"
																										, "kind": "(?)"
																										, "type": "int32"
																										, "cast": ".i32"
																										, "file": "stdlib.cvx"
																										, "line": 1951
																										, "args": [{
																											"proto": "chr == 98 ? 'Oct' : 'October'"
																											, "kind": "?:"
																											, "type": "string"
																											, "cast": ".ref"
																											, "file": "stdlib.cvx"
																											, "line": 1951
																											, "test": {
																												"proto": "(chr == 98)"
																												, "kind": "=="
																												, "type": "bool"
																												, "cast": ".bit"
																												, "file": "stdlib.cvx"
																												, "line": 1951
																												, "lval": {
																													"proto": "chr"
																													, "kind": ".ref"
																													, "type": "int32"
																													, "cast": ".i32"
																													, "file": "stdlib.cvx"
																													, "line": 1951
																													, "value": "chr"
																												}
																												, "rval": {
																													"proto": "98"
																													, "kind": ".i64"
																													, "type": "int32"
																													, "cast": ".i32"
																													, "file": "stdlib.cvx"
																													, "line": 1951
																													, "value": "98"
																												}
																											}
																											, "lval": {
																												"proto": "'Oct'"
																												, "kind": ".ptr"
																												, "type": "string"
																												, "cast": ".ref"
																												, "file": "stdlib.cvx"
																												, "line": 1951
																												, "value": "'Oct'"
																											}
																											, "rval": {
																												"proto": "'October'"
																												, "kind": ".ptr"
																												, "type": "string"
																												, "cast": ".ref"
																												, "file": "stdlib.cvx"
																												, "line": 1951
																												, "value": "'October'"
																											}
																										}, {
																											"proto": "pos"
																											, "kind": ".ref"
																											, "type": "int32"
																											, "cast": ".i32"
																											, "file": "stdlib.cvx"
																											, "line": 1951
																											, "value": "pos"
																										}, {
																											"proto": "output"
																											, "kind": ".ref"
																											, "type": "char[]"
																											, "cast": ".arr"
																											, "file": "stdlib.cvx"
																											, "line": 1951
																											, "value": "output"
																										}]
																									}
																								}
																							}
																						}]
																					}
																					, "else": {
																						"proto": "if (month == 11)"
																						, "kind": "if"
																						, "type": "void"
																						, "file": "stdlib.cvx"
																						, "line": 1953
																						, "test": {
																							"proto": "(month == 11)"
																							, "kind": "=="
																							, "type": "bool"
																							, "cast": ".bit"
																							, "file": "stdlib.cvx"
																							, "line": 1953
																							, "lval": {
																								"proto": "month"
																								, "kind": ".ref"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1953
																								, "value": "month"
																							}
																							, "rval": {
																								"proto": "11"
																								, "kind": ".i64"
																								, "type": "int32"
																								, "cast": ".i32"
																								, "file": "stdlib.cvx"
																								, "line": 1953
																								, "value": "11"
																							}
																						}
																						, "then": {
																							"proto": "{...}"
																							, "kind": "{"
																							, "type": "void"
																							, "file": "stdlib.cvx"
																							, "line": 1953
																							, "stmt": [{
																								"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Nov' : 'November'));"
																								, "kind": ";"
																								, "type": "void"
																								, "file": "stdlib.cvx"
																								, "line": 1954
																								, "stmt": {
																									"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Nov' : 'November')))"
																									, "kind": ":="
																									, "type": "int32"
																									, "file": "stdlib.cvx"
																									, "line": 1954
																									, "lval": {
																										"proto": "pos"
																										, "kind": ".ref"
																										, "type": "int32"
																										, "cast": ".i32"
																										, "file": "stdlib.cvx"
																										, "line": 1954
																										, "value": "pos"
																									}
																									, "rval": {
																										"proto": "(pos + strcat(output, pos, chr == 98 ? 'Nov' : 'November'))"
																										, "kind": "+"
																										, "type": "int32"
																										, "cast": ".i32"
																										, "file": "stdlib.cvx"
																										, "line": 1954
																										, "lval": {
																											"proto": "pos"
																											, "kind": ".ref"
																											, "type": "int32"
																											, "cast": ".i32"
																											, "file": "stdlib.cvx"
																											, "line": 1954
																											, "value": "pos"
																										}
																										, "rval": {
																											"proto": "strcat(output, pos, chr == 98 ? 'Nov' : 'November')"
																											, "kind": "(?)"
																											, "type": "int32"
																											, "cast": ".i32"
																											, "file": "stdlib.cvx"
																											, "line": 1954
																											, "args": [{
																												"proto": "chr == 98 ? 'Nov' : 'November'"
																												, "kind": "?:"
																												, "type": "string"
																												, "cast": ".ref"
																												, "file": "stdlib.cvx"
																												, "line": 1954
																												, "test": {
																													"proto": "(chr == 98)"
																													, "kind": "=="
																													, "type": "bool"
																													, "cast": ".bit"
																													, "file": "stdlib.cvx"
																													, "line": 1954
																													, "lval": {
																														"proto": "chr"
																														, "kind": ".ref"
																														, "type": "int32"
																														, "cast": ".i32"
																														, "file": "stdlib.cvx"
																														, "line": 1954
																														, "value": "chr"
																													}
																													, "rval": {
																														"proto": "98"
																														, "kind": ".i64"
																														, "type": "int32"
																														, "cast": ".i32"
																														, "file": "stdlib.cvx"
																														, "line": 1954
																														, "value": "98"
																													}
																												}
																												, "lval": {
																													"proto": "'Nov'"
																													, "kind": ".ptr"
																													, "type": "string"
																													, "cast": ".ref"
																													, "file": "stdlib.cvx"
																													, "line": 1954
																													, "value": "'Nov'"
																												}
																												, "rval": {
																													"proto": "'November'"
																													, "kind": ".ptr"
																													, "type": "string"
																													, "cast": ".ref"
																													, "file": "stdlib.cvx"
																													, "line": 1954
																													, "value": "'November'"
																												}
																											}, {
																												"proto": "pos"
																												, "kind": ".ref"
																												, "type": "int32"
																												, "cast": ".i32"
																												, "file": "stdlib.cvx"
																												, "line": 1954
																												, "value": "pos"
																											}, {
																												"proto": "output"
																												, "kind": ".ref"
																												, "type": "char[]"
																												, "cast": ".arr"
																												, "file": "stdlib.cvx"
																												, "line": 1954
																												, "value": "output"
																											}]
																										}
																									}
																								}
																							}]
																						}
																						, "else": {
																							"proto": "if (month == 12)"
																							, "kind": "if"
																							, "type": "void"
																							, "file": "stdlib.cvx"
																							, "line": 1956
																							, "test": {
																								"proto": "(month == 12)"
																								, "kind": "=="
																								, "type": "bool"
																								, "cast": ".bit"
																								, "file": "stdlib.cvx"
																								, "line": 1956
																								, "lval": {
																									"proto": "month"
																									, "kind": ".ref"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1956
																									, "value": "month"
																								}
																								, "rval": {
																									"proto": "12"
																									, "kind": ".i64"
																									, "type": "int32"
																									, "cast": ".i32"
																									, "file": "stdlib.cvx"
																									, "line": 1956
																									, "value": "12"
																								}
																							}
																							, "then": {
																								"proto": "{...}"
																								, "kind": "{"
																								, "type": "void"
																								, "file": "stdlib.cvx"
																								, "line": 1956
																								, "stmt": [{
																									"proto": "pos := (pos + strcat(output, pos, chr == 98 ? 'Dec' : 'December'));"
																									, "kind": ";"
																									, "type": "void"
																									, "file": "stdlib.cvx"
																									, "line": 1957
																									, "stmt": {
																										"proto": "(pos := (pos + strcat(output, pos, chr == 98 ? 'Dec' : 'December')))"
																										, "kind": ":="
																										, "type": "int32"
																										, "file": "stdlib.cvx"
																										, "line": 1957
																										, "lval": {
																											"proto": "pos"
																											, "kind": ".ref"
																											, "type": "int32"
																											, "cast": ".i32"
																											, "file": "stdlib.cvx"
																											, "line": 1957
																											, "value": "pos"
																										}
																										, "rval": {
																											"proto": "(pos + strcat(output, pos, chr == 98 ? 'Dec' : 'December'))"
																											, "kind": "+"
																											, "type": "int32"
																											, "cast": ".i32"
																											, "file": "stdlib.cvx"
																											, "line": 1957
																											, "lval": {
																												"proto": "pos"
																												, "kind": ".ref"
																												, "type": "int32"
																												, "cast": ".i32"
																												, "file": "stdlib.cvx"
																												, "line": 1957
																												, "value": "pos"
																											}
																											, "rval": {
																												"proto": "strcat(output, pos, chr == 98 ? 'Dec' : 'December')"
																												, "kind": "(?)"
																												, "type": "int32"
																												, "cast": ".i32"
																												, "file": "stdlib.cvx"
																												, "line": 1957
																												, "args": [{
																													"proto": "chr == 98 ? 'Dec' : 'December'"
																													, "kind": "?:"
																													, "type": "string"
																													, "cast": ".ref"
																													, "file": "stdlib.cvx"
																													, "line": 1957
																													, "test": {
																														"proto": "(chr == 98)"
																														, "kind": "=="
																														, "type": "bool"
																														, "cast": ".bit"
																														, "file": "stdlib.cvx"
																														, "line": 1957
																														, "lval": {
																															"proto": "chr"
																															, "kind": ".ref"
																															, "type": "int32"
																															, "cast": ".i32"
																															, "file": "stdlib.cvx"
																															, "line": 1957
																															, "value": "chr"
																														}
																														, "rval": {
																															"proto": "98"
																															, "kind": ".i64"
																															, "type": "int32"
																															, "cast": ".i32"
																															, "file": "stdlib.cvx"
																															, "line": 1957
																															, "value": "98"
																														}
																													}
																													, "lval": {
																														"proto": "'Dec'"
																														, "kind": ".ptr"
																														, "type": "string"
																														, "cast": ".ref"
																														, "file": "stdlib.cvx"
																														, "line": 1957
																														, "value": "'Dec'"
																													}
																													, "rval": {
																														"proto": "'December'"
																														, "kind": ".ptr"
																														, "type": "string"
																														, "cast": ".ref"
																														, "file": "stdlib.cvx"
																														, "line": 1957
																														, "value": "'December'"
																													}
																												}, {
																													"proto": "pos"
																													, "kind": ".ref"
																													, "type": "int32"
																													, "cast": ".i32"
																													, "file": "stdlib.cvx"
																													, "line": 1957
																													, "value": "pos"
																												}, {
																													"proto": "output"
																													, "kind": ".ref"
																													, "type": "char[]"
																													, "cast": ".arr"
																													, "file": "stdlib.cvx"
																													, "line": 1957
																													, "value": "output"
																												}]
																											}
																										}
																									}
																								}]
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}]
										}
										, "else": {
											"proto": "if (chr == 109)"
											, "kind": "if"
											, "type": "void"
											, "file": "stdlib.cvx"
											, "line": 1960
											, "test": {
												"proto": "(chr == 109)"
												, "kind": "=="
												, "type": "bool"
												, "cast": ".bit"
												, "file": "stdlib.cvx"
												, "line": 1960
												, "lval": {
													"proto": "chr"
													, "kind": ".ref"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1960
													, "value": "chr"
												}
												, "rval": {
													"proto": "109"
													, "kind": ".i64"
													, "type": "int32"
													, "cast": ".i32"
													, "file": "stdlib.cvx"
													, "line": 1960
													, "value": "109"
												}
											}
											, "then": {
												"proto": "{...}"
												, "kind": "{"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1960
												, "stmt": [{
													"proto": "if (padLen < 0)"
													, "kind": "if"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1961
													, "test": {
														"proto": "(padLen < 0)"
														, "kind": "<"
														, "type": "bool"
														, "cast": ".bit"
														, "file": "stdlib.cvx"
														, "line": 1961
														, "lval": {
															"proto": "padLen"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1961
															, "value": "padLen"
														}
														, "rval": {
															"proto": "0"
															, "kind": ".i64"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1961
															, "value": "0"
														}
													}
													, "then": {
														"proto": "{...}"
														, "kind": "{"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1961
														, "stmt": [{
															"proto": "padLen := 2;"
															, "kind": ";"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1961
															, "stmt": {
																"proto": "(padLen := 2)"
																, "kind": ":="
																, "type": "int32"
																, "file": "stdlib.cvx"
																, "line": 1961
																, "lval": {
																	"proto": "padLen"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1961
																	, "value": "padLen"
																}
																, "rval": {
																	"proto": "2"
																	, "kind": ".i64"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1961
																	, "value": "2"
																}
															}
														}, {
															"proto": "padChr := 48;"
															, "kind": ";"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1961
															, "stmt": {
																"proto": "(padChr := 48)"
																, "kind": ":="
																, "type": "int32"
																, "file": "stdlib.cvx"
																, "line": 1961
																, "lval": {
																	"proto": "padChr"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1961
																	, "value": "padChr"
																}
																, "rval": {
																	"proto": "48"
																	, "kind": ".i64"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1961
																	, "value": "48"
																}
															}
														}]
													}
												}, {
													"proto": "flags"
													, "kind": ".def"
													, "type": "FormatFlags"
													, "file": "stdlib.cvx"
													, "line": 1962
													, "value": "flags"
												}, {
													"proto": "pos := format(output, pos, (&flags), parts.month);"
													, "kind": ";"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1963
													, "stmt": {
														"proto": "(pos := format(output, pos, (&flags), parts.month))"
														, "kind": ":="
														, "type": "int32"
														, "file": "stdlib.cvx"
														, "line": 1963
														, "lval": {
															"proto": "pos"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1963
															, "value": "pos"
														}
														, "rval": {
															"proto": "format(output, pos, (&flags), parts.month)"
															, "kind": "(?)"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1963
															, "args": [{
																"proto": "parts.month"
																, "kind": "."
																, "type": "int32"
																, "cast": ".u32"
																, "file": "stdlib.cvx"
																, "line": 1963
																, "lval": {
																	"proto": "parts"
																	, "kind": ".ref"
																	, "type": "Date.Parts"
																	, "cast": ".ref"
																	, "file": "stdlib.cvx"
																	, "line": 1963
																	, "value": "parts"
																}
																, "rval": {
																	"proto": "month"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "file": "stdlib.cvx"
																	, "line": 1963
																	, "value": "month"
																}
															}, {
																"proto": "(&flags)"
																, "kind": "&"
																, "type": "FormatFlags"
																, "cast": ".ref"
																, "file": "stdlib.cvx"
																, "line": 1963
																, "rval": {
																	"proto": "flags"
																	, "kind": ".ref"
																	, "type": "FormatFlags"
																	, "cast": ".rec"
																	, "file": "stdlib.cvx"
																	, "line": 1963
																	, "value": "flags"
																}
															}, {
																"proto": "pos"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1963
																, "value": "pos"
															}, {
																"proto": "output"
																, "kind": ".ref"
																, "type": "char[]"
																, "cast": ".arr"
																, "file": "stdlib.cvx"
																, "line": 1963
																, "value": "output"
															}]
														}
													}
												}]
											}
											, "else": {
												"proto": "if (chr == 121)"
												, "kind": "if"
												, "type": "void"
												, "file": "stdlib.cvx"
												, "line": 1966
												, "test": {
													"proto": "(chr == 121)"
													, "kind": "=="
													, "type": "bool"
													, "cast": ".bit"
													, "file": "stdlib.cvx"
													, "line": 1966
													, "lval": {
														"proto": "chr"
														, "kind": ".ref"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1966
														, "value": "chr"
													}
													, "rval": {
														"proto": "121"
														, "kind": ".i64"
														, "type": "int32"
														, "cast": ".i32"
														, "file": "stdlib.cvx"
														, "line": 1966
														, "value": "121"
													}
												}
												, "then": {
													"proto": "{...}"
													, "kind": "{"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1966
													, "stmt": [{
														"proto": "flags"
														, "kind": ".def"
														, "type": "FormatFlags"
														, "file": "stdlib.cvx"
														, "line": 1967
														, "value": "flags"
													}, {
														"proto": "pos := format(output, pos, (&flags), (parts.year % 100));"
														, "kind": ";"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1968
														, "stmt": {
															"proto": "(pos := format(output, pos, (&flags), (parts.year % 100)))"
															, "kind": ":="
															, "type": "int32"
															, "file": "stdlib.cvx"
															, "line": 1968
															, "lval": {
																"proto": "pos"
																, "kind": ".ref"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1968
																, "value": "pos"
															}
															, "rval": {
																"proto": "format(output, pos, (&flags), (parts.year % 100))"
																, "kind": "(?)"
																, "type": "int32"
																, "cast": ".i32"
																, "file": "stdlib.cvx"
																, "line": 1968
																, "args": [{
																	"proto": "(parts.year % 100)"
																	, "kind": "%"
																	, "type": "int32"
																	, "cast": ".u32"
																	, "file": "stdlib.cvx"
																	, "line": 1968
																	, "lval": {
																		"proto": "parts.year"
																		, "kind": "."
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1968
																		, "lval": {
																			"proto": "parts"
																			, "kind": ".ref"
																			, "type": "Date.Parts"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1968
																			, "value": "parts"
																		}
																		, "rval": {
																			"proto": "year"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "file": "stdlib.cvx"
																			, "line": 1968
																			, "value": "year"
																		}
																	}
																	, "rval": {
																		"proto": "100"
																		, "kind": ".i64"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1968
																		, "value": "100"
																	}
																}, {
																	"proto": "(&flags)"
																	, "kind": "&"
																	, "type": "FormatFlags"
																	, "cast": ".ref"
																	, "file": "stdlib.cvx"
																	, "line": 1968
																	, "rval": {
																		"proto": "flags"
																		, "kind": ".ref"
																		, "type": "FormatFlags"
																		, "cast": ".rec"
																		, "file": "stdlib.cvx"
																		, "line": 1968
																		, "value": "flags"
																	}
																}, {
																	"proto": "pos"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1968
																	, "value": "pos"
																}, {
																	"proto": "output"
																	, "kind": ".ref"
																	, "type": "char[]"
																	, "cast": ".arr"
																	, "file": "stdlib.cvx"
																	, "line": 1968
																	, "value": "output"
																}]
															}
														}
													}]
												}
												, "else": {
													"proto": "if (chr == 89)"
													, "kind": "if"
													, "type": "void"
													, "file": "stdlib.cvx"
													, "line": 1970
													, "test": {
														"proto": "(chr == 89)"
														, "kind": "=="
														, "type": "bool"
														, "cast": ".bit"
														, "file": "stdlib.cvx"
														, "line": 1970
														, "lval": {
															"proto": "chr"
															, "kind": ".ref"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1970
															, "value": "chr"
														}
														, "rval": {
															"proto": "89"
															, "kind": ".i64"
															, "type": "int32"
															, "cast": ".i32"
															, "file": "stdlib.cvx"
															, "line": 1970
															, "value": "89"
														}
													}
													, "then": {
														"proto": "{...}"
														, "kind": "{"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1970
														, "stmt": [{
															"proto": "flags"
															, "kind": ".def"
															, "type": "FormatFlags"
															, "file": "stdlib.cvx"
															, "line": 1971
															, "value": "flags"
														}, {
															"proto": "pos := format(output, pos, (&flags), parts.year);"
															, "kind": ";"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1972
															, "stmt": {
																"proto": "(pos := format(output, pos, (&flags), parts.year))"
																, "kind": ":="
																, "type": "int32"
																, "file": "stdlib.cvx"
																, "line": 1972
																, "lval": {
																	"proto": "pos"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1972
																	, "value": "pos"
																}
																, "rval": {
																	"proto": "format(output, pos, (&flags), parts.year)"
																	, "kind": "(?)"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1972
																	, "args": [{
																		"proto": "parts.year"
																		, "kind": "."
																		, "type": "int32"
																		, "cast": ".u32"
																		, "file": "stdlib.cvx"
																		, "line": 1972
																		, "lval": {
																			"proto": "parts"
																			, "kind": ".ref"
																			, "type": "Date.Parts"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1972
																			, "value": "parts"
																		}
																		, "rval": {
																			"proto": "year"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "file": "stdlib.cvx"
																			, "line": 1972
																			, "value": "year"
																		}
																	}, {
																		"proto": "(&flags)"
																		, "kind": "&"
																		, "type": "FormatFlags"
																		, "cast": ".ref"
																		, "file": "stdlib.cvx"
																		, "line": 1972
																		, "rval": {
																			"proto": "flags"
																			, "kind": ".ref"
																			, "type": "FormatFlags"
																			, "cast": ".rec"
																			, "file": "stdlib.cvx"
																			, "line": 1972
																			, "value": "flags"
																		}
																	}, {
																		"proto": "pos"
																		, "kind": ".ref"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1972
																		, "value": "pos"
																	}, {
																		"proto": "output"
																		, "kind": ".ref"
																		, "type": "char[]"
																		, "cast": ".arr"
																		, "file": "stdlib.cvx"
																		, "line": 1972
																		, "value": "output"
																	}]
																}
															}
														}]
													}
													, "else": {
														"proto": "{...}"
														, "kind": "{"
														, "type": "void"
														, "file": "stdlib.cvx"
														, "line": 1974
														, "stmt": [{
															"proto": "if (pos < (output.length - 1))"
															, "kind": "if"
															, "type": "void"
															, "file": "stdlib.cvx"
															, "line": 1975
															, "test": {
																"proto": "(pos < (output.length - 1))"
																, "kind": "<"
																, "type": "bool"
																, "cast": ".bit"
																, "file": "stdlib.cvx"
																, "line": 1975
																, "lval": {
																	"proto": "pos"
																	, "kind": ".ref"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1975
																	, "value": "pos"
																}
																, "rval": {
																	"proto": "(output.length - 1)"
																	, "kind": "-"
																	, "type": "int32"
																	, "cast": ".i32"
																	, "file": "stdlib.cvx"
																	, "line": 1975
																	, "lval": {
																		"proto": "output.length"
																		, "kind": "."
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1975
																		, "lval": {
																			"proto": "output"
																			, "kind": ".ref"
																			, "type": "char[]"
																			, "cast": ".ref"
																			, "file": "stdlib.cvx"
																			, "line": 1975
																			, "value": "output"
																		}
																		, "rval": {
																			"proto": "length"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "file": "stdlib.cvx"
																			, "line": 1975
																			, "value": "length"
																		}
																	}
																	, "rval": {
																		"proto": "1"
																		, "kind": ".i64"
																		, "type": "int32"
																		, "cast": ".i32"
																		, "file": "stdlib.cvx"
																		, "line": 1975
																		, "value": "1"
																	}
																}
															}
															, "then": {
																"proto": "{...}"
																, "kind": "{"
																, "type": "void"
																, "file": "stdlib.cvx"
																, "line": 1975
																, "stmt": [{
																	"proto": "output[pos] := 37;"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "stdlib.cvx"
																	, "line": 1976
																	, "stmt": {
																		"proto": "(output[pos] := 37)"
																		, "kind": ":="
																		, "type": "char"
																		, "file": "stdlib.cvx"
																		, "line": 1976
																		, "lval": {
																			"proto": "output[pos]"
																			, "kind": "[?]"
																			, "type": "char"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1976
																			, "lval": {
																				"proto": "output"
																				, "kind": ".ref"
																				, "type": "char[]"
																				, "cast": ".ref"
																				, "file": "stdlib.cvx"
																				, "line": 1976
																				, "value": "output"
																			}
																			, "rval": {
																				"proto": "pos"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i64"
																				, "file": "stdlib.cvx"
																				, "line": 1976
																				, "value": "pos"
																			}
																		}
																		, "rval": {
																			"proto": "37"
																			, "kind": ".i64"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1976
																			, "value": "37"
																		}
																	}
																}, {
																	"proto": "pos := (pos + 1);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "stdlib.cvx"
																	, "line": 1977
																	, "stmt": {
																		"proto": "(pos := (pos + 1))"
																		, "kind": ":="
																		, "type": "int32"
																		, "file": "stdlib.cvx"
																		, "line": 1977
																		, "lval": {
																			"proto": "pos"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1977
																			, "value": "pos"
																		}
																		, "rval": {
																			"proto": "(pos + 1)"
																			, "kind": "+"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1977
																			, "lval": {
																				"proto": "pos"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1977
																				, "value": "pos"
																			}
																			, "rval": {
																				"proto": "1"
																				, "kind": ".i64"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1977
																				, "value": "1"
																			}
																		}
																	}
																}, {
																	"proto": "output[pos] := chr;"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "stdlib.cvx"
																	, "line": 1978
																	, "stmt": {
																		"proto": "(output[pos] := chr)"
																		, "kind": ":="
																		, "type": "char"
																		, "file": "stdlib.cvx"
																		, "line": 1978
																		, "lval": {
																			"proto": "output[pos]"
																			, "kind": "[?]"
																			, "type": "char"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1978
																			, "lval": {
																				"proto": "output"
																				, "kind": ".ref"
																				, "type": "char[]"
																				, "cast": ".ref"
																				, "file": "stdlib.cvx"
																				, "line": 1978
																				, "value": "output"
																			}
																			, "rval": {
																				"proto": "pos"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i64"
																				, "file": "stdlib.cvx"
																				, "line": 1978
																				, "value": "pos"
																			}
																		}
																		, "rval": {
																			"proto": "chr"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1978
																			, "value": "chr"
																		}
																	}
																}, {
																	"proto": "pos := (pos + 1);"
																	, "kind": ";"
																	, "type": "void"
																	, "file": "stdlib.cvx"
																	, "line": 1979
																	, "stmt": {
																		"proto": "(pos := (pos + 1))"
																		, "kind": ":="
																		, "type": "int32"
																		, "file": "stdlib.cvx"
																		, "line": 1979
																		, "lval": {
																			"proto": "pos"
																			, "kind": ".ref"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1979
																			, "value": "pos"
																		}
																		, "rval": {
																			"proto": "(pos + 1)"
																			, "kind": "+"
																			, "type": "int32"
																			, "cast": ".i32"
																			, "file": "stdlib.cvx"
																			, "line": 1979
																			, "lval": {
																				"proto": "pos"
																				, "kind": ".ref"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1979
																				, "value": "pos"
																			}
																			, "rval": {
																				"proto": "1"
																				, "kind": ".i64"
																				, "type": "int32"
																				, "cast": ".i32"
																				, "file": "stdlib.cvx"
																				, "line": 1979
																				, "value": "1"
																			}
																		}
																	}
																}]
															}
														}]
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}]
			}
		}, {
			"proto": "if (pos < output.length)"
			, "kind": "if"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1984
			, "test": {
				"proto": "(pos < output.length)"
				, "kind": "<"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 1984
				, "lval": {
					"proto": "pos"
					, "kind": ".ref"
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1984
					, "value": "pos"
				}
				, "rval": {
					"proto": "output.length"
					, "kind": "."
					, "type": "int32"
					, "cast": ".i32"
					, "file": "stdlib.cvx"
					, "line": 1984
					, "lval": {
						"proto": "output"
						, "kind": ".ref"
						, "type": "char[]"
						, "cast": ".ref"
						, "file": "stdlib.cvx"
						, "line": 1984
						, "value": "output"
					}
					, "rval": {
						"proto": "length"
						, "kind": ".ref"
						, "type": "int32"
						, "file": "stdlib.cvx"
						, "line": 1984
						, "value": "length"
					}
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1984
				, "stmt": [{
					"proto": "output[pos] := 0;"
					, "kind": ";"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1985
					, "stmt": {
						"proto": "(output[pos] := 0)"
						, "kind": ":="
						, "type": "char"
						, "file": "stdlib.cvx"
						, "line": 1985
						, "lval": {
							"proto": "output[pos]"
							, "kind": "[?]"
							, "type": "char"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1985
							, "lval": {
								"proto": "output"
								, "kind": ".ref"
								, "type": "char[]"
								, "cast": ".ref"
								, "file": "stdlib.cvx"
								, "line": 1985
								, "value": "output"
							}
							, "rval": {
								"proto": "pos"
								, "kind": ".ref"
								, "type": "int32"
								, "cast": ".i64"
								, "file": "stdlib.cvx"
								, "line": 1985
								, "value": "pos"
							}
						}
						, "rval": {
							"proto": "0"
							, "kind": ".i64"
							, "type": "int32"
							, "cast": ".i32"
							, "file": "stdlib.cvx"
							, "line": 1985
							, "value": "0"
						}
					}
				}]
			}
		}]
	}
	, "instructions": [{
		"instruction": "stack 20"
		, "offset": 286275
	}, {
		"instruction": "dup.x2 sp(9)"
		, "offset": 286279
	}, {
		"instruction": "i64.2i32"
		, "offset": 286281
	}, {
		"instruction": "load.ref .044f64"
		, "offset": 286282
	}, {
		"instruction": "call"
		, "offset": 286287
	}, {
		"instruction": "stack -4"
		, "offset": 286288
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 286292
	}, {
		"instruction": "load.ref .000000"
		, "offset": 286294
	}, {
		"instruction": "i32.ceq"
		, "offset": 286299
	}, {
		"instruction": "jz +12"
		, "offset": 286300
	}, {
		"instruction": "load.ref .03c1d9"
		, "offset": 286304
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 286309
	}, {
		"instruction": "store.i32"
		, "offset": 286311
	}, {
		"instruction": "load.c32 0"
		, "offset": 286312
	}, {
		"instruction": "load.c32 0"
		, "offset": 286317
	}, {
		"instruction": "stack 4"
		, "offset": 286322
	}, {
		"instruction": "jmp +2167"
		, "offset": 286326
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286330
	}, {
		"instruction": "load.c32 37"
		, "offset": 286332
	}, {
		"instruction": "i32.ceq"
		, "offset": 286337
	}, {
		"instruction": "jnz +33"
		, "offset": 286338
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286342
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 286344
	}, {
		"instruction": "i32.clt"
		, "offset": 286346
	}, {
		"instruction": "jz +20"
		, "offset": 286347
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286351
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 286353
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286355
	}, {
		"instruction": "i32.add"
		, "offset": 286357
	}, {
		"instruction": "store.i8"
		, "offset": 286358
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286359
	}, {
		"instruction": "inc 1"
		, "offset": 286361
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 286365
	}, {
		"instruction": "jmp +2118"
		, "offset": 286367
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 286371
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286373
	}, {
		"instruction": "inc 1"
		, "offset": 286375
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286379
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 286381
	}, {
		"instruction": "i32.add"
		, "offset": 286383
	}, {
		"instruction": "load.i8"
		, "offset": 286384
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 286385
	}, {
		"instruction": "load.c32 0"
		, "offset": 286387
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 286392
	}, {
		"instruction": "load.c32 45"
		, "offset": 286394
	}, {
		"instruction": "i32.ceq"
		, "offset": 286399
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286400
	}, {
		"instruction": "load.c32 43"
		, "offset": 286402
	}, {
		"instruction": "i32.ceq"
		, "offset": 286407
	}, {
		"instruction": "b32.or"
		, "offset": 286408
	}, {
		"instruction": "jz +24"
		, "offset": 286409
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 286413
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 286415
	}, {
		"instruction": "dup.x1 sp(12)"
		, "offset": 286417
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 286419
	}, {
		"instruction": "inc 1"
		, "offset": 286421
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286425
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 286427
	}, {
		"instruction": "i32.add"
		, "offset": 286429
	}, {
		"instruction": "load.i8"
		, "offset": 286430
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 286431
	}, {
		"instruction": "load.c32 32"
		, "offset": 286433
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286438
	}, {
		"instruction": "load.c32 48"
		, "offset": 286440
	}, {
		"instruction": "i32.ceq"
		, "offset": 286445
	}, {
		"instruction": "jz +24"
		, "offset": 286446
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 286450
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 286452
	}, {
		"instruction": "dup.x1 sp(13)"
		, "offset": 286454
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286456
	}, {
		"instruction": "inc 1"
		, "offset": 286458
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286462
	}, {
		"instruction": "set.x1 sp(6)"
		, "offset": 286464
	}, {
		"instruction": "i32.add"
		, "offset": 286466
	}, {
		"instruction": "load.i8"
		, "offset": 286467
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 286468
	}, {
		"instruction": "load.c32 -1"
		, "offset": 286470
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 286475
	}, {
		"instruction": "load.c32 48"
		, "offset": 286477
	}, {
		"instruction": "i32.clt"
		, "offset": 286482
	}, {
		"instruction": "b32.not"
		, "offset": 286483
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286484
	}, {
		"instruction": "load.c32 57"
		, "offset": 286486
	}, {
		"instruction": "i32.cgt"
		, "offset": 286491
	}, {
		"instruction": "b32.not"
		, "offset": 286492
	}, {
		"instruction": "b32.and"
		, "offset": 286493
	}, {
		"instruction": "jz +71"
		, "offset": 286494
	}, {
		"instruction": "load.c32 0"
		, "offset": 286498
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 286503
	}, {
		"instruction": "jmp +37"
		, "offset": 286505
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286509
	}, {
		"instruction": "load.c32 10"
		, "offset": 286511
	}, {
		"instruction": "i32.mul"
		, "offset": 286516
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286517
	}, {
		"instruction": "i32.add"
		, "offset": 286519
	}, {
		"instruction": "inc -48"
		, "offset": 286520
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 286524
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 286526
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 286528
	}, {
		"instruction": "inc 1"
		, "offset": 286530
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286534
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 286536
	}, {
		"instruction": "i32.add"
		, "offset": 286538
	}, {
		"instruction": "load.i8"
		, "offset": 286539
	}, {
		"instruction": "set.x1 sp(4)"
		, "offset": 286540
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 286542
	}, {
		"instruction": "load.c32 48"
		, "offset": 286544
	}, {
		"instruction": "i32.clt"
		, "offset": 286549
	}, {
		"instruction": "b32.not"
		, "offset": 286550
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286551
	}, {
		"instruction": "load.c32 57"
		, "offset": 286553
	}, {
		"instruction": "i32.cgt"
		, "offset": 286558
	}, {
		"instruction": "b32.not"
		, "offset": 286559
	}, {
		"instruction": "b32.and"
		, "offset": 286560
	}, {
		"instruction": "jnz -52"
		, "offset": 286561
	}, {
		"instruction": "load.c32 10"
		, "offset": 286565
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286570
	}, {
		"instruction": "load.c32 46"
		, "offset": 286572
	}, {
		"instruction": "i32.ceq"
		, "offset": 286577
	}, {
		"instruction": "jz +87"
		, "offset": 286578
	}, {
		"instruction": "load.c32 0"
		, "offset": 286582
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 286587
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 286589
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 286591
	}, {
		"instruction": "inc 1"
		, "offset": 286593
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286597
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 286599
	}, {
		"instruction": "i32.add"
		, "offset": 286601
	}, {
		"instruction": "load.i8"
		, "offset": 286602
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 286603
	}, {
		"instruction": "jmp +37"
		, "offset": 286605
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286609
	}, {
		"instruction": "load.c32 10"
		, "offset": 286611
	}, {
		"instruction": "i32.mul"
		, "offset": 286616
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 286617
	}, {
		"instruction": "i32.add"
		, "offset": 286619
	}, {
		"instruction": "inc -48"
		, "offset": 286620
	}, {
		"instruction": "set.x1 sp(1)"
		, "offset": 286624
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 286626
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 286628
	}, {
		"instruction": "inc 1"
		, "offset": 286630
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286634
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 286636
	}, {
		"instruction": "i32.add"
		, "offset": 286638
	}, {
		"instruction": "load.i8"
		, "offset": 286639
	}, {
		"instruction": "set.x1 sp(5)"
		, "offset": 286640
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286642
	}, {
		"instruction": "load.c32 48"
		, "offset": 286644
	}, {
		"instruction": "i32.clt"
		, "offset": 286649
	}, {
		"instruction": "b32.not"
		, "offset": 286650
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 286651
	}, {
		"instruction": "load.c32 57"
		, "offset": 286653
	}, {
		"instruction": "i32.cgt"
		, "offset": 286658
	}, {
		"instruction": "b32.not"
		, "offset": 286659
	}, {
		"instruction": "b32.and"
		, "offset": 286660
	}, {
		"instruction": "jnz -52"
		, "offset": 286661
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286665
	}, {
		"instruction": "load.c32 37"
		, "offset": 286667
	}, {
		"instruction": "i32.ceq"
		, "offset": 286672
	}, {
		"instruction": "jz +33"
		, "offset": 286673
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 286677
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 286679
	}, {
		"instruction": "i32.clt"
		, "offset": 286681
	}, {
		"instruction": "jz +20"
		, "offset": 286682
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286686
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 286688
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 286690
	}, {
		"instruction": "i32.add"
		, "offset": 286692
	}, {
		"instruction": "store.i8"
		, "offset": 286693
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 286694
	}, {
		"instruction": "inc 1"
		, "offset": 286696
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 286700
	}, {
		"instruction": "jmp +1779"
		, "offset": 286702
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 286706
	}, {
		"instruction": "load.c32 97"
		, "offset": 286708
	}, {
		"instruction": "i32.ceq"
		, "offset": 286713
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 286714
	}, {
		"instruction": "load.c32 65"
		, "offset": 286716
	}, {
		"instruction": "i32.ceq"
		, "offset": 286721
	}, {
		"instruction": "b32.or"
		, "offset": 286722
	}, {
		"instruction": "jz +465"
		, "offset": 286723
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 286727
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286729
	}, {
		"instruction": "load.c32 1"
		, "offset": 286731
	}, {
		"instruction": "i32.ceq"
		, "offset": 286736
	}, {
		"instruction": "jz +57"
		, "offset": 286737
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 286741
	}, {
		"instruction": "stack 4"
		, "offset": 286743
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 286747
	}, {
		"instruction": "load.c32 97"
		, "offset": 286749
	}, {
		"instruction": "i32.ceq"
		, "offset": 286754
	}, {
		"instruction": "jz +13"
		, "offset": 286755
	}, {
		"instruction": "load.ref .03c6a8"
		, "offset": 286759
	}, {
		"instruction": "jmp +9"
		, "offset": 286764
	}, {
		"instruction": "load.ref .03c6ac"
		, "offset": 286768
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 286773
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 286775
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 286777
	}, {
		"instruction": "call"
		, "offset": 286782
	}, {
		"instruction": "stack -16"
		, "offset": 286783
	}, {
		"instruction": "i32.add"
		, "offset": 286787
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 286788
	}, {
		"instruction": "jmp +390"
		, "offset": 286790
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286794
	}, {
		"instruction": "load.c32 2"
		, "offset": 286796
	}, {
		"instruction": "i32.ceq"
		, "offset": 286801
	}, {
		"instruction": "jz +57"
		, "offset": 286802
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 286806
	}, {
		"instruction": "stack 4"
		, "offset": 286808
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 286812
	}, {
		"instruction": "load.c32 97"
		, "offset": 286814
	}, {
		"instruction": "i32.ceq"
		, "offset": 286819
	}, {
		"instruction": "jz +13"
		, "offset": 286820
	}, {
		"instruction": "load.ref .03c6b3"
		, "offset": 286824
	}, {
		"instruction": "jmp +9"
		, "offset": 286829
	}, {
		"instruction": "load.ref .03c6b7"
		, "offset": 286833
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 286838
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 286840
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 286842
	}, {
		"instruction": "call"
		, "offset": 286847
	}, {
		"instruction": "stack -16"
		, "offset": 286848
	}, {
		"instruction": "i32.add"
		, "offset": 286852
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 286853
	}, {
		"instruction": "jmp +325"
		, "offset": 286855
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286859
	}, {
		"instruction": "load.c32 3"
		, "offset": 286861
	}, {
		"instruction": "i32.ceq"
		, "offset": 286866
	}, {
		"instruction": "jz +57"
		, "offset": 286867
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 286871
	}, {
		"instruction": "stack 4"
		, "offset": 286873
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 286877
	}, {
		"instruction": "load.c32 97"
		, "offset": 286879
	}, {
		"instruction": "i32.ceq"
		, "offset": 286884
	}, {
		"instruction": "jz +13"
		, "offset": 286885
	}, {
		"instruction": "load.ref .03c6bf"
		, "offset": 286889
	}, {
		"instruction": "jmp +9"
		, "offset": 286894
	}, {
		"instruction": "load.ref .03c6c3"
		, "offset": 286898
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 286903
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 286905
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 286907
	}, {
		"instruction": "call"
		, "offset": 286912
	}, {
		"instruction": "stack -16"
		, "offset": 286913
	}, {
		"instruction": "i32.add"
		, "offset": 286917
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 286918
	}, {
		"instruction": "jmp +260"
		, "offset": 286920
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286924
	}, {
		"instruction": "load.c32 4"
		, "offset": 286926
	}, {
		"instruction": "i32.ceq"
		, "offset": 286931
	}, {
		"instruction": "jz +57"
		, "offset": 286932
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 286936
	}, {
		"instruction": "stack 4"
		, "offset": 286938
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 286942
	}, {
		"instruction": "load.c32 97"
		, "offset": 286944
	}, {
		"instruction": "i32.ceq"
		, "offset": 286949
	}, {
		"instruction": "jz +13"
		, "offset": 286950
	}, {
		"instruction": "load.ref .03c6cd"
		, "offset": 286954
	}, {
		"instruction": "jmp +9"
		, "offset": 286959
	}, {
		"instruction": "load.ref .03c6d1"
		, "offset": 286963
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 286968
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 286970
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 286972
	}, {
		"instruction": "call"
		, "offset": 286977
	}, {
		"instruction": "stack -16"
		, "offset": 286978
	}, {
		"instruction": "i32.add"
		, "offset": 286982
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 286983
	}, {
		"instruction": "jmp +195"
		, "offset": 286985
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 286989
	}, {
		"instruction": "load.c32 5"
		, "offset": 286991
	}, {
		"instruction": "i32.ceq"
		, "offset": 286996
	}, {
		"instruction": "jz +57"
		, "offset": 286997
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287001
	}, {
		"instruction": "stack 4"
		, "offset": 287003
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287007
	}, {
		"instruction": "load.c32 97"
		, "offset": 287009
	}, {
		"instruction": "i32.ceq"
		, "offset": 287014
	}, {
		"instruction": "jz +13"
		, "offset": 287015
	}, {
		"instruction": "load.ref .03c6da"
		, "offset": 287019
	}, {
		"instruction": "jmp +9"
		, "offset": 287024
	}, {
		"instruction": "load.ref .03c6de"
		, "offset": 287028
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287033
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287035
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287037
	}, {
		"instruction": "call"
		, "offset": 287042
	}, {
		"instruction": "stack -16"
		, "offset": 287043
	}, {
		"instruction": "i32.add"
		, "offset": 287047
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287048
	}, {
		"instruction": "jmp +130"
		, "offset": 287050
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287054
	}, {
		"instruction": "load.c32 6"
		, "offset": 287056
	}, {
		"instruction": "i32.ceq"
		, "offset": 287061
	}, {
		"instruction": "jz +57"
		, "offset": 287062
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287066
	}, {
		"instruction": "stack 4"
		, "offset": 287068
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287072
	}, {
		"instruction": "load.c32 97"
		, "offset": 287074
	}, {
		"instruction": "i32.ceq"
		, "offset": 287079
	}, {
		"instruction": "jz +13"
		, "offset": 287080
	}, {
		"instruction": "load.ref .03c6e5"
		, "offset": 287084
	}, {
		"instruction": "jmp +9"
		, "offset": 287089
	}, {
		"instruction": "load.ref .03c6e9"
		, "offset": 287093
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287098
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287100
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287102
	}, {
		"instruction": "call"
		, "offset": 287107
	}, {
		"instruction": "stack -16"
		, "offset": 287108
	}, {
		"instruction": "i32.add"
		, "offset": 287112
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287113
	}, {
		"instruction": "jmp +65"
		, "offset": 287115
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287119
	}, {
		"instruction": "load.c32 7"
		, "offset": 287121
	}, {
		"instruction": "i32.ceq"
		, "offset": 287126
	}, {
		"instruction": "jz +53"
		, "offset": 287127
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287131
	}, {
		"instruction": "stack 4"
		, "offset": 287133
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287137
	}, {
		"instruction": "load.c32 97"
		, "offset": 287139
	}, {
		"instruction": "i32.ceq"
		, "offset": 287144
	}, {
		"instruction": "jz +13"
		, "offset": 287145
	}, {
		"instruction": "load.ref .03c6f2"
		, "offset": 287149
	}, {
		"instruction": "jmp +9"
		, "offset": 287154
	}, {
		"instruction": "load.ref .03c6f6"
		, "offset": 287158
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287163
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287165
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287167
	}, {
		"instruction": "call"
		, "offset": 287172
	}, {
		"instruction": "stack -16"
		, "offset": 287173
	}, {
		"instruction": "i32.add"
		, "offset": 287177
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287178
	}, {
		"instruction": "stack -4"
		, "offset": 287180
	}, {
		"instruction": "jmp +1297"
		, "offset": 287184
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 287188
	}, {
		"instruction": "load.c32 119"
		, "offset": 287190
	}, {
		"instruction": "i32.ceq"
		, "offset": 287195
	}, {
		"instruction": "jz +51"
		, "offset": 287196
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287200
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 287202
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 287204
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 287206
	}, {
		"instruction": "load.c32 10"
		, "offset": 287208
	}, {
		"instruction": "stack 4"
		, "offset": 287213
	}, {
		"instruction": "dup.x1 sp(17)"
		, "offset": 287217
	}, {
		"instruction": "ldsp 8"
		, "offset": 287219
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 287223
	}, {
		"instruction": "dup.x2 sp(22)"
		, "offset": 287225
	}, {
		"instruction": "load.ref .045854"
		, "offset": 287227
	}, {
		"instruction": "call"
		, "offset": 287232
	}, {
		"instruction": "stack -20"
		, "offset": 287233
	}, {
		"instruction": "set.x1 sp(12)"
		, "offset": 287237
	}, {
		"instruction": "stack -20"
		, "offset": 287239
	}, {
		"instruction": "jmp +1238"
		, "offset": 287243
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 287247
	}, {
		"instruction": "load.c32 100"
		, "offset": 287249
	}, {
		"instruction": "i32.ceq"
		, "offset": 287254
	}, {
		"instruction": "jz +77"
		, "offset": 287255
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 287259
	}, {
		"instruction": "load.c32 0"
		, "offset": 287261
	}, {
		"instruction": "i32.clt"
		, "offset": 287266
	}, {
		"instruction": "jz +18"
		, "offset": 287267
	}, {
		"instruction": "load.c32 2"
		, "offset": 287271
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 287276
	}, {
		"instruction": "load.c32 48"
		, "offset": 287278
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 287283
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287285
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 287287
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 287289
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 287291
	}, {
		"instruction": "load.c32 10"
		, "offset": 287293
	}, {
		"instruction": "stack 4"
		, "offset": 287298
	}, {
		"instruction": "dup.x1 sp(16)"
		, "offset": 287302
	}, {
		"instruction": "ldsp 8"
		, "offset": 287304
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 287308
	}, {
		"instruction": "dup.x2 sp(22)"
		, "offset": 287310
	}, {
		"instruction": "load.ref .045854"
		, "offset": 287312
	}, {
		"instruction": "call"
		, "offset": 287317
	}, {
		"instruction": "stack -20"
		, "offset": 287318
	}, {
		"instruction": "set.x1 sp(12)"
		, "offset": 287322
	}, {
		"instruction": "stack -20"
		, "offset": 287324
	}, {
		"instruction": "jmp +1153"
		, "offset": 287328
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 287332
	}, {
		"instruction": "load.c32 106"
		, "offset": 287334
	}, {
		"instruction": "i32.ceq"
		, "offset": 287339
	}, {
		"instruction": "jz +77"
		, "offset": 287340
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 287344
	}, {
		"instruction": "load.c32 0"
		, "offset": 287346
	}, {
		"instruction": "i32.clt"
		, "offset": 287351
	}, {
		"instruction": "jz +18"
		, "offset": 287352
	}, {
		"instruction": "load.c32 3"
		, "offset": 287356
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 287361
	}, {
		"instruction": "load.c32 48"
		, "offset": 287363
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 287368
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287370
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 287372
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 287374
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 287376
	}, {
		"instruction": "load.c32 10"
		, "offset": 287378
	}, {
		"instruction": "stack 4"
		, "offset": 287383
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 287387
	}, {
		"instruction": "ldsp 8"
		, "offset": 287389
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 287393
	}, {
		"instruction": "dup.x2 sp(22)"
		, "offset": 287395
	}, {
		"instruction": "load.ref .045854"
		, "offset": 287397
	}, {
		"instruction": "call"
		, "offset": 287402
	}, {
		"instruction": "stack -20"
		, "offset": 287403
	}, {
		"instruction": "set.x1 sp(12)"
		, "offset": 287407
	}, {
		"instruction": "stack -20"
		, "offset": 287409
	}, {
		"instruction": "jmp +1068"
		, "offset": 287413
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 287417
	}, {
		"instruction": "load.c32 98"
		, "offset": 287419
	}, {
		"instruction": "i32.ceq"
		, "offset": 287424
	}, {
		"instruction": "dup.x1 sp(5)"
		, "offset": 287425
	}, {
		"instruction": "load.c32 66"
		, "offset": 287427
	}, {
		"instruction": "i32.ceq"
		, "offset": 287432
	}, {
		"instruction": "b32.or"
		, "offset": 287433
	}, {
		"instruction": "jz +790"
		, "offset": 287434
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 287438
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287440
	}, {
		"instruction": "load.c32 1"
		, "offset": 287442
	}, {
		"instruction": "i32.ceq"
		, "offset": 287447
	}, {
		"instruction": "jz +57"
		, "offset": 287448
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287452
	}, {
		"instruction": "stack 4"
		, "offset": 287454
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287458
	}, {
		"instruction": "load.c32 98"
		, "offset": 287460
	}, {
		"instruction": "i32.ceq"
		, "offset": 287465
	}, {
		"instruction": "jz +13"
		, "offset": 287466
	}, {
		"instruction": "load.ref .03c960"
		, "offset": 287470
	}, {
		"instruction": "jmp +9"
		, "offset": 287475
	}, {
		"instruction": "load.ref .03c964"
		, "offset": 287479
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287484
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287486
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287488
	}, {
		"instruction": "call"
		, "offset": 287493
	}, {
		"instruction": "stack -16"
		, "offset": 287494
	}, {
		"instruction": "i32.add"
		, "offset": 287498
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287499
	}, {
		"instruction": "jmp +715"
		, "offset": 287501
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287505
	}, {
		"instruction": "load.c32 2"
		, "offset": 287507
	}, {
		"instruction": "i32.ceq"
		, "offset": 287512
	}, {
		"instruction": "jz +57"
		, "offset": 287513
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287517
	}, {
		"instruction": "stack 4"
		, "offset": 287519
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287523
	}, {
		"instruction": "load.c32 98"
		, "offset": 287525
	}, {
		"instruction": "i32.ceq"
		, "offset": 287530
	}, {
		"instruction": "jz +13"
		, "offset": 287531
	}, {
		"instruction": "load.ref .03c96c"
		, "offset": 287535
	}, {
		"instruction": "jmp +9"
		, "offset": 287540
	}, {
		"instruction": "load.ref .03c970"
		, "offset": 287544
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287549
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287551
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287553
	}, {
		"instruction": "call"
		, "offset": 287558
	}, {
		"instruction": "stack -16"
		, "offset": 287559
	}, {
		"instruction": "i32.add"
		, "offset": 287563
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287564
	}, {
		"instruction": "jmp +650"
		, "offset": 287566
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287570
	}, {
		"instruction": "load.c32 3"
		, "offset": 287572
	}, {
		"instruction": "i32.ceq"
		, "offset": 287577
	}, {
		"instruction": "jz +57"
		, "offset": 287578
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287582
	}, {
		"instruction": "stack 4"
		, "offset": 287584
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287588
	}, {
		"instruction": "load.c32 98"
		, "offset": 287590
	}, {
		"instruction": "i32.ceq"
		, "offset": 287595
	}, {
		"instruction": "jz +13"
		, "offset": 287596
	}, {
		"instruction": "load.ref .03c979"
		, "offset": 287600
	}, {
		"instruction": "jmp +9"
		, "offset": 287605
	}, {
		"instruction": "load.ref .03c97d"
		, "offset": 287609
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287614
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287616
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287618
	}, {
		"instruction": "call"
		, "offset": 287623
	}, {
		"instruction": "stack -16"
		, "offset": 287624
	}, {
		"instruction": "i32.add"
		, "offset": 287628
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287629
	}, {
		"instruction": "jmp +585"
		, "offset": 287631
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287635
	}, {
		"instruction": "load.c32 4"
		, "offset": 287637
	}, {
		"instruction": "i32.ceq"
		, "offset": 287642
	}, {
		"instruction": "jz +57"
		, "offset": 287643
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287647
	}, {
		"instruction": "stack 4"
		, "offset": 287649
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287653
	}, {
		"instruction": "load.c32 98"
		, "offset": 287655
	}, {
		"instruction": "i32.ceq"
		, "offset": 287660
	}, {
		"instruction": "jz +13"
		, "offset": 287661
	}, {
		"instruction": "load.ref .03c983"
		, "offset": 287665
	}, {
		"instruction": "jmp +9"
		, "offset": 287670
	}, {
		"instruction": "load.ref .03c987"
		, "offset": 287674
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287679
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287681
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287683
	}, {
		"instruction": "call"
		, "offset": 287688
	}, {
		"instruction": "stack -16"
		, "offset": 287689
	}, {
		"instruction": "i32.add"
		, "offset": 287693
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287694
	}, {
		"instruction": "jmp +520"
		, "offset": 287696
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287700
	}, {
		"instruction": "load.c32 5"
		, "offset": 287702
	}, {
		"instruction": "i32.ceq"
		, "offset": 287707
	}, {
		"instruction": "jz +57"
		, "offset": 287708
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287712
	}, {
		"instruction": "stack 4"
		, "offset": 287714
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287718
	}, {
		"instruction": "load.c32 98"
		, "offset": 287720
	}, {
		"instruction": "i32.ceq"
		, "offset": 287725
	}, {
		"instruction": "jz +13"
		, "offset": 287726
	}, {
		"instruction": "load.ref .03c98d"
		, "offset": 287730
	}, {
		"instruction": "jmp +9"
		, "offset": 287735
	}, {
		"instruction": "load.ref .03c98d"
		, "offset": 287739
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287744
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287746
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287748
	}, {
		"instruction": "call"
		, "offset": 287753
	}, {
		"instruction": "stack -16"
		, "offset": 287754
	}, {
		"instruction": "i32.add"
		, "offset": 287758
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287759
	}, {
		"instruction": "jmp +455"
		, "offset": 287761
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287765
	}, {
		"instruction": "load.c32 6"
		, "offset": 287767
	}, {
		"instruction": "i32.ceq"
		, "offset": 287772
	}, {
		"instruction": "jz +57"
		, "offset": 287773
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287777
	}, {
		"instruction": "stack 4"
		, "offset": 287779
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287783
	}, {
		"instruction": "load.c32 98"
		, "offset": 287785
	}, {
		"instruction": "i32.ceq"
		, "offset": 287790
	}, {
		"instruction": "jz +13"
		, "offset": 287791
	}, {
		"instruction": "load.ref .03c991"
		, "offset": 287795
	}, {
		"instruction": "jmp +9"
		, "offset": 287800
	}, {
		"instruction": "load.ref .03c995"
		, "offset": 287804
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287809
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287811
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287813
	}, {
		"instruction": "call"
		, "offset": 287818
	}, {
		"instruction": "stack -16"
		, "offset": 287819
	}, {
		"instruction": "i32.add"
		, "offset": 287823
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287824
	}, {
		"instruction": "jmp +390"
		, "offset": 287826
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287830
	}, {
		"instruction": "load.c32 7"
		, "offset": 287832
	}, {
		"instruction": "i32.ceq"
		, "offset": 287837
	}, {
		"instruction": "jz +57"
		, "offset": 287838
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287842
	}, {
		"instruction": "stack 4"
		, "offset": 287844
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287848
	}, {
		"instruction": "load.c32 98"
		, "offset": 287850
	}, {
		"instruction": "i32.ceq"
		, "offset": 287855
	}, {
		"instruction": "jz +13"
		, "offset": 287856
	}, {
		"instruction": "load.ref .03c99a"
		, "offset": 287860
	}, {
		"instruction": "jmp +9"
		, "offset": 287865
	}, {
		"instruction": "load.ref .03c99e"
		, "offset": 287869
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287874
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287876
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287878
	}, {
		"instruction": "call"
		, "offset": 287883
	}, {
		"instruction": "stack -16"
		, "offset": 287884
	}, {
		"instruction": "i32.add"
		, "offset": 287888
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287889
	}, {
		"instruction": "jmp +325"
		, "offset": 287891
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287895
	}, {
		"instruction": "load.c32 8"
		, "offset": 287897
	}, {
		"instruction": "i32.ceq"
		, "offset": 287902
	}, {
		"instruction": "jz +57"
		, "offset": 287903
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287907
	}, {
		"instruction": "stack 4"
		, "offset": 287909
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287913
	}, {
		"instruction": "load.c32 98"
		, "offset": 287915
	}, {
		"instruction": "i32.ceq"
		, "offset": 287920
	}, {
		"instruction": "jz +13"
		, "offset": 287921
	}, {
		"instruction": "load.ref .03c9a3"
		, "offset": 287925
	}, {
		"instruction": "jmp +9"
		, "offset": 287930
	}, {
		"instruction": "load.ref .03c9a7"
		, "offset": 287934
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 287939
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 287941
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 287943
	}, {
		"instruction": "call"
		, "offset": 287948
	}, {
		"instruction": "stack -16"
		, "offset": 287949
	}, {
		"instruction": "i32.add"
		, "offset": 287953
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 287954
	}, {
		"instruction": "jmp +260"
		, "offset": 287956
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 287960
	}, {
		"instruction": "load.c32 9"
		, "offset": 287962
	}, {
		"instruction": "i32.ceq"
		, "offset": 287967
	}, {
		"instruction": "jz +57"
		, "offset": 287968
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287972
	}, {
		"instruction": "stack 4"
		, "offset": 287974
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 287978
	}, {
		"instruction": "load.c32 98"
		, "offset": 287980
	}, {
		"instruction": "i32.ceq"
		, "offset": 287985
	}, {
		"instruction": "jz +13"
		, "offset": 287986
	}, {
		"instruction": "load.ref .03c9ae"
		, "offset": 287990
	}, {
		"instruction": "jmp +9"
		, "offset": 287995
	}, {
		"instruction": "load.ref .03c9b2"
		, "offset": 287999
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 288004
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 288006
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 288008
	}, {
		"instruction": "call"
		, "offset": 288013
	}, {
		"instruction": "stack -16"
		, "offset": 288014
	}, {
		"instruction": "i32.add"
		, "offset": 288018
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 288019
	}, {
		"instruction": "jmp +195"
		, "offset": 288021
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 288025
	}, {
		"instruction": "load.c32 10"
		, "offset": 288027
	}, {
		"instruction": "i32.ceq"
		, "offset": 288032
	}, {
		"instruction": "jz +57"
		, "offset": 288033
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 288037
	}, {
		"instruction": "stack 4"
		, "offset": 288039
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 288043
	}, {
		"instruction": "load.c32 98"
		, "offset": 288045
	}, {
		"instruction": "i32.ceq"
		, "offset": 288050
	}, {
		"instruction": "jz +13"
		, "offset": 288051
	}, {
		"instruction": "load.ref .03c9bc"
		, "offset": 288055
	}, {
		"instruction": "jmp +9"
		, "offset": 288060
	}, {
		"instruction": "load.ref .03c9c0"
		, "offset": 288064
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 288069
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 288071
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 288073
	}, {
		"instruction": "call"
		, "offset": 288078
	}, {
		"instruction": "stack -16"
		, "offset": 288079
	}, {
		"instruction": "i32.add"
		, "offset": 288083
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 288084
	}, {
		"instruction": "jmp +130"
		, "offset": 288086
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 288090
	}, {
		"instruction": "load.c32 11"
		, "offset": 288092
	}, {
		"instruction": "i32.ceq"
		, "offset": 288097
	}, {
		"instruction": "jz +57"
		, "offset": 288098
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 288102
	}, {
		"instruction": "stack 4"
		, "offset": 288104
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 288108
	}, {
		"instruction": "load.c32 98"
		, "offset": 288110
	}, {
		"instruction": "i32.ceq"
		, "offset": 288115
	}, {
		"instruction": "jz +13"
		, "offset": 288116
	}, {
		"instruction": "load.ref .03c9c8"
		, "offset": 288120
	}, {
		"instruction": "jmp +9"
		, "offset": 288125
	}, {
		"instruction": "load.ref .03c9cc"
		, "offset": 288129
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 288134
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 288136
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 288138
	}, {
		"instruction": "call"
		, "offset": 288143
	}, {
		"instruction": "stack -16"
		, "offset": 288144
	}, {
		"instruction": "i32.add"
		, "offset": 288148
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 288149
	}, {
		"instruction": "jmp +65"
		, "offset": 288151
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 288155
	}, {
		"instruction": "load.c32 12"
		, "offset": 288157
	}, {
		"instruction": "i32.ceq"
		, "offset": 288162
	}, {
		"instruction": "jz +53"
		, "offset": 288163
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 288167
	}, {
		"instruction": "stack 4"
		, "offset": 288169
	}, {
		"instruction": "dup.x1 sp(7)"
		, "offset": 288173
	}, {
		"instruction": "load.c32 98"
		, "offset": 288175
	}, {
		"instruction": "i32.ceq"
		, "offset": 288180
	}, {
		"instruction": "jz +13"
		, "offset": 288181
	}, {
		"instruction": "load.ref .03c9d5"
		, "offset": 288185
	}, {
		"instruction": "jmp +9"
		, "offset": 288190
	}, {
		"instruction": "load.ref .03c9d9"
		, "offset": 288194
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 288199
	}, {
		"instruction": "dup.x2 sp(18)"
		, "offset": 288201
	}, {
		"instruction": "load.ref .045db9"
		, "offset": 288203
	}, {
		"instruction": "call"
		, "offset": 288208
	}, {
		"instruction": "stack -16"
		, "offset": 288209
	}, {
		"instruction": "i32.add"
		, "offset": 288213
	}, {
		"instruction": "set.x1 sp(8)"
		, "offset": 288214
	}, {
		"instruction": "stack -4"
		, "offset": 288216
	}, {
		"instruction": "jmp +261"
		, "offset": 288220
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 288224
	}, {
		"instruction": "load.c32 109"
		, "offset": 288226
	}, {
		"instruction": "i32.ceq"
		, "offset": 288231
	}, {
		"instruction": "jz +77"
		, "offset": 288232
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 288236
	}, {
		"instruction": "load.c32 0"
		, "offset": 288238
	}, {
		"instruction": "i32.clt"
		, "offset": 288243
	}, {
		"instruction": "jz +18"
		, "offset": 288244
	}, {
		"instruction": "load.c32 2"
		, "offset": 288248
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 288253
	}, {
		"instruction": "load.c32 48"
		, "offset": 288255
	}, {
		"instruction": "set.x1 sp(3)"
		, "offset": 288260
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 288262
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 288264
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 288266
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 288268
	}, {
		"instruction": "load.c32 10"
		, "offset": 288270
	}, {
		"instruction": "stack 4"
		, "offset": 288275
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 288279
	}, {
		"instruction": "ldsp 8"
		, "offset": 288281
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 288285
	}, {
		"instruction": "dup.x2 sp(22)"
		, "offset": 288287
	}, {
		"instruction": "load.ref .045854"
		, "offset": 288289
	}, {
		"instruction": "call"
		, "offset": 288294
	}, {
		"instruction": "stack -20"
		, "offset": 288295
	}, {
		"instruction": "set.x1 sp(12)"
		, "offset": 288299
	}, {
		"instruction": "stack -20"
		, "offset": 288301
	}, {
		"instruction": "jmp +176"
		, "offset": 288305
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 288309
	}, {
		"instruction": "load.c32 121"
		, "offset": 288311
	}, {
		"instruction": "i32.ceq"
		, "offset": 288316
	}, {
		"instruction": "jz +57"
		, "offset": 288317
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 288321
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 288323
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 288325
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 288327
	}, {
		"instruction": "load.c32 10"
		, "offset": 288329
	}, {
		"instruction": "stack 4"
		, "offset": 288334
	}, {
		"instruction": "dup.x1 sp(13)"
		, "offset": 288338
	}, {
		"instruction": "load.c32 100"
		, "offset": 288340
	}, {
		"instruction": "i32.mod"
		, "offset": 288345
	}, {
		"instruction": "ldsp 8"
		, "offset": 288346
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 288350
	}, {
		"instruction": "dup.x2 sp(22)"
		, "offset": 288352
	}, {
		"instruction": "load.ref .045854"
		, "offset": 288354
	}, {
		"instruction": "call"
		, "offset": 288359
	}, {
		"instruction": "stack -20"
		, "offset": 288360
	}, {
		"instruction": "set.x1 sp(12)"
		, "offset": 288364
	}, {
		"instruction": "stack -20"
		, "offset": 288366
	}, {
		"instruction": "jmp +111"
		, "offset": 288370
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 288374
	}, {
		"instruction": "load.c32 89"
		, "offset": 288376
	}, {
		"instruction": "i32.ceq"
		, "offset": 288381
	}, {
		"instruction": "jz +51"
		, "offset": 288382
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 288386
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 288388
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 288390
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 288392
	}, {
		"instruction": "load.c32 10"
		, "offset": 288394
	}, {
		"instruction": "stack 4"
		, "offset": 288399
	}, {
		"instruction": "dup.x1 sp(13)"
		, "offset": 288403
	}, {
		"instruction": "ldsp 8"
		, "offset": 288405
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 288409
	}, {
		"instruction": "dup.x2 sp(22)"
		, "offset": 288411
	}, {
		"instruction": "load.ref .045854"
		, "offset": 288413
	}, {
		"instruction": "call"
		, "offset": 288418
	}, {
		"instruction": "stack -20"
		, "offset": 288419
	}, {
		"instruction": "set.x1 sp(12)"
		, "offset": 288423
	}, {
		"instruction": "stack -20"
		, "offset": 288425
	}, {
		"instruction": "jmp +52"
		, "offset": 288429
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 288433
	}, {
		"instruction": "dup.x1 sp(15)"
		, "offset": 288435
	}, {
		"instruction": "inc -1"
		, "offset": 288437
	}, {
		"instruction": "i32.clt"
		, "offset": 288441
	}, {
		"instruction": "jz +39"
		, "offset": 288442
	}, {
		"instruction": "load.c32 37"
		, "offset": 288446
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 288451
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 288453
	}, {
		"instruction": "i32.add"
		, "offset": 288455
	}, {
		"instruction": "store.i8"
		, "offset": 288456
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 288457
	}, {
		"instruction": "inc 1"
		, "offset": 288459
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 288463
	}, {
		"instruction": "dup.x1 sp(4)"
		, "offset": 288465
	}, {
		"instruction": "dup.x1 sp(14)"
		, "offset": 288467
	}, {
		"instruction": "dup.x1 sp(8)"
		, "offset": 288469
	}, {
		"instruction": "i32.add"
		, "offset": 288471
	}, {
		"instruction": "store.i8"
		, "offset": 288472
	}, {
		"instruction": "dup.x1 sp(6)"
		, "offset": 288473
	}, {
		"instruction": "inc 1"
		, "offset": 288475
	}, {
		"instruction": "set.x1 sp(7)"
		, "offset": 288479
	}, {
		"instruction": "stack -16"
		, "offset": 288481
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 288485
	}, {
		"instruction": "inc 1"
		, "offset": 288487
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 288491
	}, {
		"instruction": "dup.x1 sp(11)"
		, "offset": 288493
	}, {
		"instruction": "dup.x1 sp(2)"
		, "offset": 288495
	}, {
		"instruction": "i32.add"
		, "offset": 288497
	}, {
		"instruction": "load.i8"
		, "offset": 288498
	}, {
		"instruction": "dup.x1 sp(0)"
		, "offset": 288499
	}, {
		"instruction": "set.x1 sp(2)"
		, "offset": 288501
	}, {
		"instruction": "jnz -2173"
		, "offset": 288503
	}, {
		"instruction": "stack -4"
		, "offset": 288507
	}, {
		"instruction": "dup.x1 sp(1)"
		, "offset": 288511
	}, {
		"instruction": "dup.x1 sp(10)"
		, "offset": 288513
	}, {
		"instruction": "i32.clt"
		, "offset": 288515
	}, {
		"instruction": "jz +15"
		, "offset": 288516
	}, {
		"instruction": "load.c32 0"
		, "offset": 288520
	}, {
		"instruction": "dup.x1 sp(9)"
		, "offset": 288525
	}, {
		"instruction": "dup.x1 sp(3)"
		, "offset": 288527
	}, {
		"instruction": "i32.add"
		, "offset": 288529
	}, {
		"instruction": "store.i8"
		, "offset": 288530
	}, {
		"instruction": "stack -28"
		, "offset": 288531
	}, {
		"instruction": "ret"
		, "offset": 288535
	}]
}, {
	"proto": "string(arr: char[])"
	, "kind": ".def"
	, "name": "string"
	, "type": "string"
	, "file": "stdlib.cvx"
	, "line": 2012
	, "args": [{
		"proto": "string.arr"
		, "kind": ".def"
		, "name": "arr"
		, "declaredIn": "string(arr: char[])"
		, "type": "char[]"
		, "file": "stdlib.cvx"
		, "line": 2012
		, "cast": ".arr"
		, "size": 0
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(string, pointer(arr))"
		, "kind": "(?)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 2012
		, "args": [{
			"proto": "pointer(arr)"
			, "kind": "(?)"
			, "type": "pointer"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 2012
			, "args": [{
				"proto": "arr"
				, "kind": ".ref"
				, "type": "char[]"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 2012
				, "value": "arr"
			}]
		}, {
			"proto": "string"
			, "kind": ".ref"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 2012
			, "value": "string"
		}]
	}
}, {
	"proto": "variant(str: string)"
	, "kind": ".def"
	, "name": "variant"
	, "type": "variant"
	, "file": "stdlib.cvx"
	, "line": 2013
	, "args": [{
		"proto": "variant.str"
		, "kind": ".ref"
		, "name": "str"
		, "declaredIn": "variant(str: string)"
		, "type": "string"
		, "file": "stdlib.cvx"
		, "line": 2013
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(variant, (str), (string))"
		, "kind": "(?)"
		, "type": "variant"
		, "file": "stdlib.cvx"
		, "line": 2013
		, "args": [{
			"proto": "(string)"
			, "kind": "(?)"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 2013
			, "args": [{
				"proto": "string"
				, "kind": ".ref"
				, "type": "string"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 2013
				, "value": "string"
			}]
		}, {
			"proto": "(str)"
			, "kind": "(?)"
			, "type": "string"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 2013
			, "args": [{
				"proto": "str"
				, "kind": ".ref"
				, "type": "string"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 2013
				, "value": "str"
			}]
		}, {
			"proto": "variant"
			, "kind": ".ref"
			, "type": "variant"
			, "cast": ".rec"
			, "file": "stdlib.cvx"
			, "line": 2013
			, "value": "variant"
		}]
	}
}, {
	"proto": "realloc(ptr: pointer, size: int32)"
	, "kind": ".def"
	, "name": "realloc"
	, "type": "pointer"
	, "file": "stdlib.cvx"
	, "line": 2017
	, "args": [{
		"proto": "realloc.ptr"
		, "kind": ".ref"
		, "name": "ptr"
		, "declaredIn": "realloc(ptr: pointer, size: int32)"
		, "type": "pointer"
		, "file": "stdlib.cvx"
		, "line": 2017
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}, {
		"proto": "realloc.size"
		, "kind": ".def"
		, "name": "size"
		, "declaredIn": "realloc(ptr: pointer, size: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 2017
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "memmgr(ptr, size)"
		, "kind": "(?)"
		, "type": "pointer"
		, "file": "stdlib.cvx"
		, "line": 2017
		, "args": [{
			"proto": "size"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 2017
			, "value": "size"
		}, {
			"proto": "ptr"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 2017
			, "value": "ptr"
		}]
	}
}, {
	"proto": "malloc(size: int32)"
	, "kind": ".def"
	, "name": "malloc"
	, "type": "pointer"
	, "file": "stdlib.cvx"
	, "line": 2018
	, "args": [{
		"proto": "malloc.size"
		, "kind": ".def"
		, "name": "size"
		, "declaredIn": "malloc(size: int32)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 2018
		, "cast": ".i32"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "memmgr(null, size)"
		, "kind": "(?)"
		, "type": "pointer"
		, "file": "stdlib.cvx"
		, "line": 2018
		, "args": [{
			"proto": "size"
			, "kind": ".ref"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 2018
			, "value": "size"
		}, {
			"proto": "null"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 2018
			, "value": "null"
		}]
	}
}, {
	"proto": "free(ptr: pointer)"
	, "kind": ".def"
	, "name": "free"
	, "type": "pointer"
	, "file": "stdlib.cvx"
	, "line": 2019
	, "args": [{
		"proto": "free.ptr"
		, "kind": ".ref"
		, "name": "ptr"
		, "declaredIn": "free(ptr: pointer)"
		, "type": "pointer"
		, "file": "stdlib.cvx"
		, "line": 2019
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "memmgr(ptr, 0)"
		, "kind": "(?)"
		, "type": "pointer"
		, "file": "stdlib.cvx"
		, "line": 2019
		, "args": [{
			"proto": "0"
			, "kind": ".i64"
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 2019
			, "value": "0"
		}, {
			"proto": "ptr"
			, "kind": ".ref"
			, "type": "pointer"
			, "cast": ".ref"
			, "file": "stdlib.cvx"
			, "line": 2019
			, "value": "ptr"
		}]
	}
}, {
	"proto": "sizeof(type: typename)"
	, "kind": ".def"
	, "name": "sizeof"
	, "type": "int32"
	, "file": "stdlib.cvx"
	, "line": 2032
	, "args": [{
		"proto": "sizeof.type"
		, "kind": ".ref"
		, "name": "type"
		, "declaredIn": "sizeof(type: typename)"
		, "type": "typename"
		, "file": "stdlib.cvx"
		, "line": 2032
		, "cast": ".ref"
		, "size": 4
		, "offs": 0
		, "const": false
		, "static": false
	}]
	, "size": 0
	, "offs": 0
	, "const": false
	, "static": true
	, "ast": {
		"proto": "int32(type.size)"
		, "kind": "(?)"
		, "type": "int32"
		, "file": "stdlib.cvx"
		, "line": 2032
		, "args": [{
			"proto": "type.size"
			, "kind": "."
			, "type": "int32"
			, "cast": ".i32"
			, "file": "stdlib.cvx"
			, "line": 2032
			, "lval": {
				"proto": "type"
				, "kind": ".ref"
				, "type": "typename"
				, "cast": ".ref"
				, "file": "stdlib.cvx"
				, "line": 2032
				, "value": "type"
			}
			, "rval": {
				"proto": "size"
				, "kind": ".ref"
				, "type": "int32"
				, "file": "stdlib.cvx"
				, "line": 2032
				, "value": "size"
			}
		}]
	}
}, {
	"proto": "File"
	, "kind": ".rec"
	, "name": "File"
	, "type": "typename"
	, "cast": ".rec"
	, "size": 8
	, "offs": 251072
	, "const": true
	, "static": true
}, {
	"proto": "File.Open(path: char[])"
	, "kind": ".def"
	, "name": "Open"
	, "declaredIn": "File"
	, "type": "File"
	, "args": [{
		"proto": "File.Open.path"
		, "kind": ".def"
		, "name": "path"
		, "declaredIn": "File.Open(path: char[])"
		, "type": "char[]"
		, "cast": ".arr"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262456
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(39), path)"
		, "kind": "(?)"
		, "type": "File"
		, "args": [{
			"proto": "path"
			, "kind": ".ref"
			, "type": "char[]"
			, "cast": ".arr"
			, "value": "path"
		}, {
			"proto": "libc(39)"
			, "kind": ".ref"
			, "type": "libc(39)"
			, "value": "libc(39)"
		}]
	}
}, {
	"proto": "File.Create(path: char[])"
	, "kind": ".def"
	, "name": "Create"
	, "declaredIn": "File"
	, "type": "File"
	, "args": [{
		"proto": "File.Create.path"
		, "kind": ".def"
		, "name": "path"
		, "declaredIn": "File.Create(path: char[])"
		, "type": "char[]"
		, "cast": ".arr"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262512
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(40), path)"
		, "kind": "(?)"
		, "type": "File"
		, "args": [{
			"proto": "path"
			, "kind": ".ref"
			, "type": "char[]"
			, "cast": ".arr"
			, "value": "path"
		}, {
			"proto": "libc(40)"
			, "kind": ".ref"
			, "type": "libc(40)"
			, "value": "libc(40)"
		}]
	}
}, {
	"proto": "File.Append(path: char[])"
	, "kind": ".def"
	, "name": "Append"
	, "declaredIn": "File"
	, "type": "File"
	, "args": [{
		"proto": "File.Append.path"
		, "kind": ".def"
		, "name": "path"
		, "declaredIn": "File.Append(path: char[])"
		, "type": "char[]"
		, "cast": ".arr"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262568
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(41), path)"
		, "kind": "(?)"
		, "type": "File"
		, "args": [{
			"proto": "path"
			, "kind": ".ref"
			, "type": "char[]"
			, "cast": ".arr"
			, "value": "path"
		}, {
			"proto": "libc(41)"
			, "kind": ".ref"
			, "type": "libc(41)"
			, "value": "libc(41)"
		}]
	}
}, {
	"proto": "File.Peek(file: File)"
	, "kind": ".def"
	, "name": "Peek"
	, "declaredIn": "File"
	, "type": "int32"
	, "args": [{
		"proto": "File.Peek.file"
		, "kind": ".def"
		, "name": "file"
		, "declaredIn": "File.Peek(file: File)"
		, "type": "File"
		, "cast": ".rec"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262624
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(42), file)"
		, "kind": "(?)"
		, "type": "int32"
		, "args": [{
			"proto": "file"
			, "kind": ".ref"
			, "type": "File"
			, "cast": ".rec"
			, "value": "file"
		}, {
			"proto": "libc(42)"
			, "kind": ".ref"
			, "type": "libc(42)"
			, "value": "libc(42)"
		}]
	}
}, {
	"proto": "File.Read(file: File)"
	, "kind": ".def"
	, "name": "Read"
	, "declaredIn": "File"
	, "type": "int32"
	, "args": [{
		"proto": "File.Read.file"
		, "kind": ".def"
		, "name": "file"
		, "declaredIn": "File.Read(file: File)"
		, "type": "File"
		, "cast": ".rec"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262680
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(43), file)"
		, "kind": "(?)"
		, "type": "int32"
		, "args": [{
			"proto": "file"
			, "kind": ".ref"
			, "type": "File"
			, "cast": ".rec"
			, "value": "file"
		}, {
			"proto": "libc(43)"
			, "kind": ".ref"
			, "type": "libc(43)"
			, "value": "libc(43)"
		}]
	}
}, {
	"proto": "File.Read(file: File, buff: uint8[])"
	, "kind": ".def"
	, "name": "Read"
	, "declaredIn": "File"
	, "type": "int32"
	, "args": [{
		"proto": "File.Read.file"
		, "kind": ".def"
		, "name": "file"
		, "declaredIn": "File.Read(file: File, buff: uint8[])"
		, "type": "File"
		, "cast": ".rec"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "File.Read.buff"
		, "kind": ".def"
		, "name": "buff"
		, "declaredIn": "File.Read(file: File, buff: uint8[])"
		, "type": "uint8[]"
		, "cast": ".arr"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262736
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(44), file, buff)"
		, "kind": "(?)"
		, "type": "int32"
		, "args": [{
			"proto": "buff"
			, "kind": ".ref"
			, "type": "uint8[]"
			, "cast": ".arr"
			, "value": "buff"
		}, {
			"proto": "file"
			, "kind": ".ref"
			, "type": "File"
			, "cast": ".rec"
			, "value": "file"
		}, {
			"proto": "libc(44)"
			, "kind": ".ref"
			, "type": "libc(44)"
			, "value": "libc(44)"
		}]
	}
}, {
	"proto": "File.ReadLine(file: File, buff: uint8[])"
	, "kind": ".def"
	, "name": "ReadLine"
	, "declaredIn": "File"
	, "type": "int32"
	, "args": [{
		"proto": "File.ReadLine.file"
		, "kind": ".def"
		, "name": "file"
		, "declaredIn": "File.ReadLine(file: File, buff: uint8[])"
		, "type": "File"
		, "cast": ".rec"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "File.ReadLine.buff"
		, "kind": ".def"
		, "name": "buff"
		, "declaredIn": "File.ReadLine(file: File, buff: uint8[])"
		, "type": "uint8[]"
		, "cast": ".arr"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262792
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(45), file, buff)"
		, "kind": "(?)"
		, "type": "int32"
		, "args": [{
			"proto": "buff"
			, "kind": ".ref"
			, "type": "uint8[]"
			, "cast": ".arr"
			, "value": "buff"
		}, {
			"proto": "file"
			, "kind": ".ref"
			, "type": "File"
			, "cast": ".rec"
			, "value": "file"
		}, {
			"proto": "libc(45)"
			, "kind": ".ref"
			, "type": "libc(45)"
			, "value": "libc(45)"
		}]
	}
}, {
	"proto": "File.Write(file: File, byte: uint8)"
	, "kind": ".def"
	, "name": "Write"
	, "declaredIn": "File"
	, "type": "int32"
	, "args": [{
		"proto": "File.Write.file"
		, "kind": ".def"
		, "name": "file"
		, "declaredIn": "File.Write(file: File, byte: uint8)"
		, "type": "File"
		, "cast": ".rec"
		, "size": 8
		, "offs": 12
		, "const": false
		, "static": false
	}, {
		"proto": "File.Write.byte"
		, "kind": ".def"
		, "name": "byte"
		, "declaredIn": "File.Write(file: File, byte: uint8)"
		, "type": "uint8"
		, "cast": ".u32"
		, "size": 1
		, "offs": 4
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262848
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(46), file, byte)"
		, "kind": "(?)"
		, "type": "int32"
		, "args": [{
			"proto": "byte"
			, "kind": ".ref"
			, "type": "uint8"
			, "cast": ".u32"
			, "value": "byte"
		}, {
			"proto": "file"
			, "kind": ".ref"
			, "type": "File"
			, "cast": ".rec"
			, "value": "file"
		}, {
			"proto": "libc(46)"
			, "kind": ".ref"
			, "type": "libc(46)"
			, "value": "libc(46)"
		}]
	}
}, {
	"proto": "File.Write(file: File, buff: uint8[])"
	, "kind": ".def"
	, "name": "Write"
	, "declaredIn": "File"
	, "type": "int32"
	, "args": [{
		"proto": "File.Write.file"
		, "kind": ".def"
		, "name": "file"
		, "declaredIn": "File.Write(file: File, buff: uint8[])"
		, "type": "File"
		, "cast": ".rec"
		, "size": 8
		, "offs": 16
		, "const": false
		, "static": false
	}, {
		"proto": "File.Write.buff"
		, "kind": ".def"
		, "name": "buff"
		, "declaredIn": "File.Write(file: File, buff: uint8[])"
		, "type": "uint8[]"
		, "cast": ".arr"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262904
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(47), file, buff)"
		, "kind": "(?)"
		, "type": "int32"
		, "args": [{
			"proto": "buff"
			, "kind": ".ref"
			, "type": "uint8[]"
			, "cast": ".arr"
			, "value": "buff"
		}, {
			"proto": "file"
			, "kind": ".ref"
			, "type": "File"
			, "cast": ".rec"
			, "value": "file"
		}, {
			"proto": "libc(47)"
			, "kind": ".ref"
			, "type": "libc(47)"
			, "value": "libc(47)"
		}]
	}
}, {
	"proto": "File.Flush(file: File)"
	, "kind": ".def"
	, "name": "Flush"
	, "declaredIn": "File"
	, "type": "void"
	, "args": [{
		"proto": "File.Flush.file"
		, "kind": ".def"
		, "name": "file"
		, "declaredIn": "File.Flush(file: File)"
		, "type": "File"
		, "cast": ".rec"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 262960
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(48), file)"
		, "kind": "(?)"
		, "type": "void"
		, "args": [{
			"proto": "file"
			, "kind": ".ref"
			, "type": "File"
			, "cast": ".rec"
			, "value": "file"
		}, {
			"proto": "libc(48)"
			, "kind": ".ref"
			, "type": "libc(48)"
			, "value": "libc(48)"
		}]
	}
}, {
	"proto": "File.Close(file: File)"
	, "kind": ".def"
	, "name": "Close"
	, "declaredIn": "File"
	, "type": "void"
	, "args": [{
		"proto": "File.Close.file"
		, "kind": ".def"
		, "name": "file"
		, "declaredIn": "File.Close(file: File)"
		, "type": "File"
		, "cast": ".rec"
		, "size": 8
		, "offs": 8
		, "const": false
		, "static": false
	}]
	, "size": 56
	, "offs": 263016
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(49), file)"
		, "kind": "(?)"
		, "type": "void"
		, "args": [{
			"proto": "file"
			, "kind": ".ref"
			, "type": "File"
			, "cast": ".rec"
			, "value": "file"
		}, {
			"proto": "libc(49)"
			, "kind": ".ref"
			, "type": "libc(49)"
			, "value": "libc(49)"
		}]
	}
}, {
	"proto": "File.StdIn"
	, "kind": ".def"
	, "name": "StdIn"
	, "declaredIn": "File"
	, "type": "File"
	, "size": 56
	, "offs": 263072
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(50))"
		, "kind": "(?)"
		, "type": "File"
		, "args": [{
			"proto": "libc(50)"
			, "kind": ".ref"
			, "type": "libc(50)"
			, "value": "libc(50)"
		}]
	}
}, {
	"proto": "File.StdOut"
	, "kind": ".def"
	, "name": "StdOut"
	, "declaredIn": "File"
	, "type": "File"
	, "size": 56
	, "offs": 263128
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(51))"
		, "kind": "(?)"
		, "type": "File"
		, "args": [{
			"proto": "libc(51)"
			, "kind": ".ref"
			, "type": "libc(51)"
			, "value": "libc(51)"
		}]
	}
}, {
	"proto": "File.StdErr"
	, "kind": ".def"
	, "name": "StdErr"
	, "declaredIn": "File"
	, "type": "File"
	, "size": 56
	, "offs": 263184
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(52))"
		, "kind": "(?)"
		, "type": "File"
		, "args": [{
			"proto": "libc(52)"
			, "kind": ".ref"
			, "type": "libc(52)"
			, "value": "libc(52)"
		}]
	}
}, {
	"proto": "File.DbgOut"
	, "kind": ".def"
	, "name": "DbgOut"
	, "declaredIn": "File"
	, "type": "File"
	, "size": 56
	, "offs": 263240
	, "const": false
	, "static": true
	, "ast": {
		"proto": "emit(libc(53))"
		, "kind": "(?)"
		, "type": "File"
		, "args": [{
			"proto": "libc(53)"
			, "kind": ".ref"
			, "type": "libc(53)"
			, "value": "libc(53)"
		}]
	}
}, {
	"proto": ".main"
	, "kind": ".ref"
	, "name": ".main"
	, "type": "void"
	, "file": "main"
	, "line": 1
	, "cast": ".rec"
	, "size": 313
	, "offs": 288536
	, "const": true
	, "static": true
	, "ast": {
		"proto": "{...}"
		, "kind": "{"
		, "type": "void"
		, "stmt": [{
			"proto": "start;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 496
			, "stmt": {
				"proto": "start"
				, "kind": ".def"
				, "type": "bool"
				, "cast": ".bit"
				, "file": "stdlib.cvx"
				, "line": 496
				, "value": "start"
			}
		}, {
			"proto": "DaysToMonth365;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 790
			, "stmt": {
				"proto": "DaysToMonth365"
				, "kind": ".def"
				, "type": "int32[13]"
				, "file": "stdlib.cvx"
				, "line": 790
				, "value": "DaysToMonth365"
			}
		}, {
			"proto": "DaysToMonth366;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 791
			, "stmt": {
				"proto": "DaysToMonth366"
				, "kind": ".def"
				, "type": "int32[13]"
				, "file": "stdlib.cvx"
				, "line": 791
				, "value": "DaysToMonth366"
			}
		}, {
			"proto": "_1970;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 956
			, "stmt": {
				"proto": "_1970"
				, "kind": ".def"
				, "type": "int32"
				, "cast": ".i32"
				, "file": "stdlib.cvx"
				, "line": 956
				, "value": "_1970"
			}
		}, {
			"proto": "radixDigits;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1481
			, "stmt": {
				"proto": "radixDigits"
				, "kind": ".def"
				, "type": "char[]"
				, "cast": ".arr"
				, "file": "stdlib.cvx"
				, "line": 1481
				, "value": "radixDigits"
			}
		}, {
			"proto": "default;"
			, "kind": ";"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1482
			, "stmt": {
				"proto": "default"
				, "kind": ".def"
				, "type": "FormatFlags"
				, "cast": ".rec"
				, "file": "stdlib.cvx"
				, "line": 1482
				, "value": "default"
			}
		}, {
			"proto": "rand(min: int32, max: int32)"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 5
			, "value": "rand(min: int32, max: int32)"
		}, {
			"proto": "rand(min: float64, max: float64)"
			, "kind": ".def"
			, "type": "float64"
			, "file": "stdlib.cvx"
			, "line": 6
			, "value": "rand(min: float64, max: float64)"
		}, {
			"proto": "Math"
			, "kind": ".def"
			, "type": "typename"
			, "file": "stdlib.cvx"
			, "line": 11
			, "value": "Math"
		}, {
			"proto": "Perlin"
			, "kind": ".def"
			, "type": "typename"
			, "file": "stdlib.cvx"
			, "line": 484
			, "value": "Perlin"
		}, {
			"proto": "Date"
			, "kind": ".def"
			, "type": "typename"
			, "file": "stdlib.cvx"
			, "line": 693
			, "value": "Date"
		}, {
			"proto": "Date(year: int32, month: int32, day: int32)"
			, "kind": ".def"
			, "type": "Date"
			, "file": "stdlib.cvx"
			, "line": 953
			, "value": "Date(year: int32, month: int32, day: int32)"
		}, {
			"proto": "DateFromTime(time: int32)"
			, "kind": ".def"
			, "type": "Date"
			, "file": "stdlib.cvx"
			, "line": 955
			, "value": "DateFromTime(time: int32)"
		}, {
			"proto": "importstd"
			, "kind": ".def"
			, "type": "bool"
			, "file": "stdlib.cvx"
			, "line": 960
			, "value": "importstd"
		}, {
			"proto": "variant(type: typename, value: pointer)"
			, "kind": ".def"
			, "type": "variant"
			, "file": "stdlib.cvx"
			, "line": 973
			, "value": "variant(type: typename, value: pointer)"
		}, {
			"proto": "if (importstd.bits2)"
			, "kind": "if"
			, "type": "void"
			, "cast": "static .nil"
			, "file": "stdlib.cvx"
			, "line": 975
			, "test": {
				"proto": "importstd.bits2"
				, "kind": "."
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 975
				, "lval": {
					"proto": "importstd"
					, "kind": ".ref"
					, "type": "importstd"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 975
					, "value": "importstd"
				}
				, "rval": {
					"proto": "bits2"
					, "kind": ".ref"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 975
					, "value": "bits2"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 975
				, "stmt": [{
					"proto": "Lo32(a: int64)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 977
					, "value": "Lo32(a: int64)"
				}, {
					"proto": "Hi32(a: int64)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 978
					, "value": "Hi32(a: int64)"
				}, {
					"proto": "Lo16(a: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 979
					, "value": "Lo16(a: int32)"
				}, {
					"proto": "Hi16(a: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 980
					, "value": "Hi16(a: int32)"
				}, {
					"proto": "Lo8(a: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 981
					, "value": "Lo8(a: int32)"
				}, {
					"proto": "Hi8(a: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 982
					, "value": "Hi8(a: int32)"
				}, {
					"proto": "bitsr(x: uint32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 995
					, "value": "bitsr(x: uint32)"
				}, {
					"proto": "bitsf(x: uint32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1027
					, "value": "bitsf(x: uint32)"
				}, {
					"proto": "bithi(x: uint32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1056
					, "value": "bithi(x: uint32)"
				}, {
					"proto": "bitlo(x: uint32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1067
					, "value": "bitlo(x: uint32)"
				}, {
					"proto": "bitcnt(x: uint32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1072
					, "value": "bitcnt(x: uint32)"
				}, {
					"proto": "bitswp(x: uint32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1081
					, "value": "bitswp(x: uint32)"
				}]
			}
		}, {
			"proto": "if (importstd.complex)"
			, "kind": "if"
			, "type": "void"
			, "cast": "static .nil"
			, "file": "stdlib.cvx"
			, "line": 1091
			, "test": {
				"proto": "importstd.complex"
				, "kind": "."
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 1091
				, "lval": {
					"proto": "importstd"
					, "kind": ".ref"
					, "type": "importstd"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1091
					, "value": "importstd"
				}
				, "rval": {
					"proto": "complex"
					, "kind": ".ref"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1091
					, "value": "complex"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1091
				, "stmt": [{
					"proto": "Complex"
					, "kind": ".def"
					, "type": "typename"
					, "file": "stdlib.cvx"
					, "line": 1092
					, "value": "Complex"
				}, {
					"proto": "Complex(re: float64)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1098
					, "value": "Complex(re: float64)"
				}, {
					"proto": "neg(a: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1100
					, "value": "neg(a: Complex)"
				}, {
					"proto": "add(a: Complex, b: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1102
					, "value": "add(a: Complex, b: Complex)"
				}, {
					"proto": "add(a: Complex, b: float64)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1103
					, "value": "add(a: Complex, b: float64)"
				}, {
					"proto": "add(a: float64, b: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1104
					, "value": "add(a: float64, b: Complex)"
				}, {
					"proto": "sub(a: Complex, b: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1106
					, "value": "sub(a: Complex, b: Complex)"
				}, {
					"proto": "sub(a: Complex, b: float64)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1107
					, "value": "sub(a: Complex, b: float64)"
				}, {
					"proto": "sub(a: float64, b: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1108
					, "value": "sub(a: float64, b: Complex)"
				}, {
					"proto": "mul(a: Complex, b: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1110
					, "value": "mul(a: Complex, b: Complex)"
				}, {
					"proto": "mul(a: Complex, b: float64)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1115
					, "value": "mul(a: Complex, b: float64)"
				}, {
					"proto": "mul(a: float64, b: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1116
					, "value": "mul(a: float64, b: Complex)"
				}, {
					"proto": "div(a: Complex, b: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1118
					, "value": "div(a: Complex, b: Complex)"
				}, {
					"proto": "abs(a: Complex)"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1138
					, "value": "abs(a: Complex)"
				}, {
					"proto": "arg(a: Complex)"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1139
					, "value": "arg(a: Complex)"
				}, {
					"proto": "re(a: Complex)"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1141
					, "value": "re(a: Complex)"
				}, {
					"proto": "im(a: Complex)"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1142
					, "value": "im(a: Complex)"
				}, {
					"proto": "inv(a: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1144
					, "value": "inv(a: Complex)"
				}, {
					"proto": "conj(a: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1149
					, "value": "conj(a: Complex)"
				}, {
					"proto": "exp(a: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1151
					, "value": "exp(a: Complex)"
				}, {
					"proto": "log(a: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1153
					, "value": "log(a: Complex)"
				}, {
					"proto": "pow(a: Complex, b: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1155
					, "value": "pow(a: Complex, b: Complex)"
				}, {
					"proto": "pow(a: Complex, b: float64)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1176
					, "value": "pow(a: Complex, b: float64)"
				}, {
					"proto": "sin(a: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1178
					, "value": "sin(a: Complex)"
				}, {
					"proto": "cos(a: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1179
					, "value": "cos(a: Complex)"
				}, {
					"proto": "tan(a: Complex)"
					, "kind": ".def"
					, "type": "Complex"
					, "file": "stdlib.cvx"
					, "line": 1180
					, "value": "tan(a: Complex)"
				}]
			}
		}, {
			"proto": "if (importstd.vec2d)"
			, "kind": "if"
			, "type": "void"
			, "cast": "static .nil"
			, "file": "stdlib.cvx"
			, "line": 1214
			, "test": {
				"proto": "importstd.vec2d"
				, "kind": "."
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 1214
				, "lval": {
					"proto": "importstd"
					, "kind": ".ref"
					, "type": "importstd"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1214
					, "value": "importstd"
				}
				, "rval": {
					"proto": "vec2d"
					, "kind": ".ref"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1214
					, "value": "vec2d"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1214
				, "stmt": [{
					"proto": "vec2d"
					, "kind": ".def"
					, "type": "typename"
					, "file": "stdlib.cvx"
					, "line": 1215
					, "value": "vec2d"
				}, {
					"proto": "add(x: vec2d, y: vec2d)"
					, "kind": ".def"
					, "type": "vec2d"
					, "file": "stdlib.cvx"
					, "line": 1220
					, "value": "add(x: vec2d, y: vec2d)"
				}, {
					"proto": "sub(x: vec2d, y: vec2d)"
					, "kind": ".def"
					, "type": "vec2d"
					, "file": "stdlib.cvx"
					, "line": 1221
					, "value": "sub(x: vec2d, y: vec2d)"
				}, {
					"proto": "mul(x: vec2d, y: vec2d)"
					, "kind": ".def"
					, "type": "vec2d"
					, "file": "stdlib.cvx"
					, "line": 1222
					, "value": "mul(x: vec2d, y: vec2d)"
				}, {
					"proto": "div(x: vec2d, y: vec2d)"
					, "kind": ".def"
					, "type": "vec2d"
					, "file": "stdlib.cvx"
					, "line": 1223
					, "value": "div(x: vec2d, y: vec2d)"
				}, {
					"proto": "min(x: vec2d, y: vec2d)"
					, "kind": ".def"
					, "type": "vec2d"
					, "file": "stdlib.cvx"
					, "line": 1225
					, "value": "min(x: vec2d, y: vec2d)"
				}, {
					"proto": "max(x: vec2d, y: vec2d)"
					, "kind": ".def"
					, "type": "vec2d"
					, "file": "stdlib.cvx"
					, "line": 1226
					, "value": "max(x: vec2d, y: vec2d)"
				}, {
					"proto": "ceq(x: vec2d, y: vec2d)"
					, "kind": ".def"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1227
					, "value": "ceq(x: vec2d, y: vec2d)"
				}, {
					"proto": "dot(x: vec2d, y: vec2d)"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1229
					, "value": "dot(x: vec2d, y: vec2d)"
				}]
			}
		}, {
			"proto": "if (importstd.vec4f)"
			, "kind": "if"
			, "type": "void"
			, "cast": "static .nil"
			, "file": "stdlib.cvx"
			, "line": 1231
			, "test": {
				"proto": "importstd.vec4f"
				, "kind": "."
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 1231
				, "lval": {
					"proto": "importstd"
					, "kind": ".ref"
					, "type": "importstd"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1231
					, "value": "importstd"
				}
				, "rval": {
					"proto": "vec4f"
					, "kind": ".ref"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1231
					, "value": "vec4f"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1231
				, "stmt": [{
					"proto": "vec4f"
					, "kind": ".def"
					, "type": "typename"
					, "file": "stdlib.cvx"
					, "line": 1232
					, "value": "vec4f"
				}, {
					"proto": "vec4f(x: float32, y: float32, z: float32)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1239
					, "value": "vec4f(x: float32, y: float32, z: float32)"
				}, {
					"proto": "vec4f(val: float32)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1240
					, "value": "vec4f(val: float32)"
				}, {
					"proto": "neg(rhs: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1243
					, "value": "neg(rhs: vec4f)"
				}, {
					"proto": "add(lhs: vec4f, rhs: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1244
					, "value": "add(lhs: vec4f, rhs: vec4f)"
				}, {
					"proto": "add(a: float32, b: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1245
					, "value": "add(a: float32, b: vec4f)"
				}, {
					"proto": "add(a: vec4f, b: float32)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1246
					, "value": "add(a: vec4f, b: float32)"
				}, {
					"proto": "sub(lhs: vec4f, rhs: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1247
					, "value": "sub(lhs: vec4f, rhs: vec4f)"
				}, {
					"proto": "sub(a: float32, b: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1248
					, "value": "sub(a: float32, b: vec4f)"
				}, {
					"proto": "sub(a: vec4f, b: float32)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1249
					, "value": "sub(a: vec4f, b: float32)"
				}, {
					"proto": "mul(lhs: vec4f, rhs: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1250
					, "value": "mul(lhs: vec4f, rhs: vec4f)"
				}, {
					"proto": "mul(a: float32, b: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1251
					, "value": "mul(a: float32, b: vec4f)"
				}, {
					"proto": "mul(a: vec4f, b: float32)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1252
					, "value": "mul(a: vec4f, b: float32)"
				}, {
					"proto": "div(lhs: vec4f, rhs: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1253
					, "value": "div(lhs: vec4f, rhs: vec4f)"
				}, {
					"proto": "div(a: float32, b: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1254
					, "value": "div(a: float32, b: vec4f)"
				}, {
					"proto": "div(a: vec4f, b: float32)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1255
					, "value": "div(a: vec4f, b: float32)"
				}, {
					"proto": "min(x: vec4f, y: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1257
					, "value": "min(x: vec4f, y: vec4f)"
				}, {
					"proto": "max(x: vec4f, y: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1258
					, "value": "max(x: vec4f, y: vec4f)"
				}, {
					"proto": "ceq(x: vec4f, y: vec4f)"
					, "kind": ".def"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1259
					, "value": "ceq(x: vec4f, y: vec4f)"
				}, {
					"proto": "mad(a: vec4f, b: vec4f, c: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1261
					, "value": "mad(a: vec4f, b: vec4f, c: vec4f)"
				}, {
					"proto": "dp3(lhs: vec4f, rhs: vec4f)"
					, "kind": ".def"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1264
					, "value": "dp3(lhs: vec4f, rhs: vec4f)"
				}, {
					"proto": "dp4(lhs: vec4f, rhs: vec4f)"
					, "kind": ".def"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1266
					, "value": "dp4(lhs: vec4f, rhs: vec4f)"
				}, {
					"proto": "dph(lhs: vec4f, rhs: vec4f)"
					, "kind": ".def"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1268
					, "value": "dph(lhs: vec4f, rhs: vec4f)"
				}, {
					"proto": "cross(a: vec4f, b: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1269
					, "value": "cross(a: vec4f, b: vec4f)"
				}, {
					"proto": "lerp(t: float32, lhs: vec4f, rhs: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1271
					, "value": "lerp(t: float32, lhs: vec4f, rhs: vec4f)"
				}, {
					"proto": "len(v: vec4f)"
					, "kind": ".def"
					, "type": "float64"
					, "file": "stdlib.cvx"
					, "line": 1273
					, "value": "len(v: vec4f)"
				}, {
					"proto": "eval(v: vec4f, x: float32)"
					, "kind": ".def"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1274
					, "value": "eval(v: vec4f, x: float32)"
				}, {
					"proto": "normalize(a: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1275
					, "value": "normalize(a: vec4f)"
				}, {
					"proto": "float32(vec: vec4f)"
					, "kind": ".def"
					, "type": "float32"
					, "file": "stdlib.cvx"
					, "line": 1278
					, "value": "float32(vec: vec4f)"
				}]
			}
		}, {
			"proto": "if (importstd.mat4f)"
			, "kind": "if"
			, "type": "void"
			, "cast": "static .nil"
			, "file": "stdlib.cvx"
			, "line": 1288
			, "test": {
				"proto": "importstd.mat4f"
				, "kind": "."
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 1288
				, "lval": {
					"proto": "importstd"
					, "kind": ".ref"
					, "type": "importstd"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1288
					, "value": "importstd"
				}
				, "rval": {
					"proto": "mat4f"
					, "kind": ".ref"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1288
					, "value": "mat4f"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1288
				, "stmt": [{
					"proto": "mat4f"
					, "kind": ".def"
					, "type": "typename"
					, "file": "stdlib.cvx"
					, "line": 1289
					, "value": "mat4f"
				}, {
					"proto": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
					, "kind": ".def"
					, "type": "mat4f"
					, "file": "stdlib.cvx"
					, "line": 1296
					, "value": "mat4f(m11: float64, m12: float64, m13: float64, m14: float64, m21: float64, m22: float64, m23: float64, m24: float64, m31: float64, m32: float64, m33: float64, m34: float64, m41: float64, m42: float64, m43: float64, m44: float64)"
				}, {
					"proto": "dp3(mat: mat4f, vec: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1307
					, "value": "dp3(mat: mat4f, vec: vec4f)"
				}, {
					"proto": "dp4(mat: mat4f, vec: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1308
					, "value": "dp4(mat: mat4f, vec: vec4f)"
				}, {
					"proto": "dph(mat: mat4f, vec: vec4f)"
					, "kind": ".def"
					, "type": "vec4f"
					, "file": "stdlib.cvx"
					, "line": 1309
					, "value": "dph(mat: mat4f, vec: vec4f)"
				}, {
					"proto": "mul(lhs: mat4f, rhs: mat4f)"
					, "kind": ".def"
					, "type": "mat4f"
					, "file": "stdlib.cvx"
					, "line": 1311
					, "value": "mul(lhs: mat4f, rhs: mat4f)"
				}, {
					"proto": "transpose(mat: mat4f)"
					, "kind": ".def"
					, "type": "mat4f"
					, "file": "stdlib.cvx"
					, "line": 1327
					, "value": "transpose(mat: mat4f)"
				}, {
					"proto": "transpose2(mat: mat4f)"
					, "kind": ".def"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1349
					, "value": "transpose2(mat: mat4f)"
				}]
			}
		}, {
			"proto": "debug(message: string, inspect: variant)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1380
			, "value": "debug(message: string, inspect: variant)"
		}, {
			"proto": "debug(message: string)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1381
			, "value": "debug(message: string)"
		}, {
			"proto": "debug(inspect: variant)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1382
			, "value": "debug(inspect: variant)"
		}, {
			"proto": "trace(message: string, inspect: variant)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1384
			, "value": "trace(message: string, inspect: variant)"
		}, {
			"proto": "trace(message: string)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1385
			, "value": "trace(message: string)"
		}, {
			"proto": "trace(inspect: variant)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1386
			, "value": "trace(inspect: variant)"
		}, {
			"proto": "abort(message: string, inspect: variant)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1388
			, "value": "abort(message: string, inspect: variant)"
		}, {
			"proto": "abort(message: string)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1389
			, "value": "abort(message: string)"
		}, {
			"proto": "abort()"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1390
			, "value": "abort()"
		}, {
			"proto": "assert(condition: bool, message: string, inspect: variant)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1392
			, "value": "assert(condition: bool, message: string, inspect: variant)"
		}, {
			"proto": "assert(condition: bool, message: string)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1393
			, "value": "assert(condition: bool, message: string)"
		}, {
			"proto": "assert(condition: bool)"
			, "kind": ".def"
			, "type": "void"
			, "file": "stdlib.cvx"
			, "line": 1394
			, "value": "assert(condition: bool)"
		}, {
			"proto": "if (importstd.strUtils)"
			, "kind": "if"
			, "type": "void"
			, "cast": "static .nil"
			, "file": "stdlib.cvx"
			, "line": 1399
			, "test": {
				"proto": "importstd.strUtils"
				, "kind": "."
				, "type": "bool"
				, "file": "stdlib.cvx"
				, "line": 1399
				, "lval": {
					"proto": "importstd"
					, "kind": ".ref"
					, "type": "importstd"
					, "cast": ".ref"
					, "file": "stdlib.cvx"
					, "line": 1399
					, "value": "importstd"
				}
				, "rval": {
					"proto": "strUtils"
					, "kind": ".ref"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1399
					, "value": "strUtils"
				}
			}
			, "then": {
				"proto": "{...}"
				, "kind": "{"
				, "type": "void"
				, "file": "stdlib.cvx"
				, "line": 1399
				, "stmt": [{
					"proto": "strlen(str: string)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1402
					, "value": "strlen(str: string)"
				}, {
					"proto": "umin(a: uint32, b: uint32)"
					, "kind": ".def"
					, "type": "uint32"
					, "file": "stdlib.cvx"
					, "line": 1406
					, "value": "umin(a: uint32, b: uint32)"
				}, {
					"proto": "isWhite(chr: char)"
					, "kind": ".def"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1408
					, "value": "isWhite(chr: char)"
				}, {
					"proto": "strchr(str: string, chr: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1411
					, "value": "strchr(str: string, chr: int32)"
				}, {
					"proto": "strchr(str: string, chr: int32, max: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1420
					, "value": "strchr(str: string, chr: int32, max: int32)"
				}, {
					"proto": "strrchr(str: string, chr: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1432
					, "value": "strrchr(str: string, chr: int32)"
				}, {
					"proto": "strrchr(str: string, chr: int32, max: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1440
					, "value": "strrchr(str: string, chr: int32, max: int32)"
				}, {
					"proto": "compare(a: string, b: string)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1451
					, "value": "compare(a: string, b: string)"
				}, {
					"proto": "equals(a: string, b: string)"
					, "kind": ".def"
					, "type": "bool"
					, "file": "stdlib.cvx"
					, "line": 1469
					, "value": "equals(a: string, b: string)"
				}, {
					"proto": "FormatFlags"
					, "kind": ".def"
					, "type": "typename"
					, "file": "stdlib.cvx"
					, "line": 1472
					, "value": "FormatFlags"
				}, {
					"proto": "format(output: char[], pos: int32, format: FormatFlags, value: uint32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1480
					, "value": "format(output: char[], pos: int32, format: FormatFlags, value: uint32)"
				}, {
					"proto": "format(output: char[], format: string, value: int32)"
					, "kind": ".def"
					, "type": "int32"
					, "file": "stdlib.cvx"
					, "line": 1553
					, "value": "format(output: char[], format: string, value: int32)"
				}, {
					"proto": "format(output: char[], format: string, value: Date)"
					, "kind": ".def"
					, "type": "void"
					, "file": "stdlib.cvx"
					, "line": 1655
					, "value": "format(output: char[], format: string, value: Date)"
				}, {
					"proto": "string(arr: char[])"
					, "kind": ".def"
					, "type": "string"
					, "file": "stdlib.cvx"
					, "line": 2012
					, "value": "string(arr: char[])"
				}, {
					"proto": "variant(str: string)"
					, "kind": ".def"
					, "type": "variant"
					, "file": "stdlib.cvx"
					, "line": 2013
					, "value": "variant(str: string)"
				}]
			}
		}, {
			"proto": "realloc(ptr: pointer, size: int32)"
			, "kind": ".def"
			, "type": "pointer"
			, "file": "stdlib.cvx"
			, "line": 2017
			, "value": "realloc(ptr: pointer, size: int32)"
		}, {
			"proto": "malloc(size: int32)"
			, "kind": ".def"
			, "type": "pointer"
			, "file": "stdlib.cvx"
			, "line": 2018
			, "value": "malloc(size: int32)"
		}, {
			"proto": "free(ptr: pointer)"
			, "kind": ".def"
			, "type": "pointer"
			, "file": "stdlib.cvx"
			, "line": 2019
			, "value": "free(ptr: pointer)"
		}, {
			"proto": "sizeof(type: typename)"
			, "kind": ".def"
			, "type": "int32"
			, "file": "stdlib.cvx"
			, "line": 2032
			, "value": "sizeof(type: typename)"
		}]
	}
}]
}
